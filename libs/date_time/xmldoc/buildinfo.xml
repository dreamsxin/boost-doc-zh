<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN" 
"../../../tools/boostbook/dtd/boostbook.dtd">

<!-- Copyright (c) 2001-2004 CrystalClear Software, Inc.
     Subject to the Boost Software License, Version 1.0. 
     (See accompanying file LICENSE_1_0.txt or  http://www.boost.org/LICENSE_1_0.txt)
-->

<section id="date_time.buildinfo">
  <title>Build-Compiler Information 构建和编译器信息</title>

  <para>
    <link linkend="overview">Overview 简介</link> --
    <link linkend="compile_options">Compilation Options 编译选项</link> --
    <link linkend="portability">Compiler/Portability Notes 编译器/可移植性说明</link> --
    <link linkend="dir_structure">Directory Structure 目录结构</link> --
    <link linkend="other_boost_libs">Required Boost Libraries 所需的Boost库 </link>
  </para>

  <anchor id="overview" />
  <bridgehead renderas="sect3">Overview 简介</bridgehead>
  <para>
    The library has a few functions that require the creation of a library file (mostly to_string, from_string functions).  Most library users can make effective use of the library WITHOUT building the library, but simply including the required headers. If the library is needed, the Jamfile in the build directory will produce a "static" library (libboost_date_time) and a "dynamic/shared" library (boost_date_time) that contains these functions. <sbr/>
    本库中有少量函数需要创建库文件(主要是 to_string, from_string 函数)。大多数库用户无需构建库文件就可以正确地使用本库，
    只需要包含所需的头文件即可。如果需要库文件，位于 build 目录下的 Jamfile 将生成一个"静态"库(libboost_date_time)
    以及一个"动态/共享"库(boost_date_time)，其中包含了这些函数。
  </para>
  
  <anchor id="compile_options" />
  <bridgehead renderas="sect3">Compilation Options 编译选项</bridgehead>
  <para>
    By default the posix_time system uses a single 64 bit integer internally to provide a microsecond level resolution. As an alternative, a combination of a 64 bit integer and a 32 bit integer (96 bit resolution) can be used to provide nano-second level resolutions. The default implementation may provide better performance and more compact memory usage for many applications that do not require nano-second resolutions. <sbr/>
    缺省情况下，posix_time 系统内部使用一个64位整数来提供微秒级的解析度。作为另一个选择，
    使用一个64位整数加一个32位整数(共96位精度)，可以提供纳秒级的解析度。
    缺省实现可以提供更好的性能和最小的内存占用，多数应用程序并不需要纳秒级的解析度。
  </para>
  <para>
    To use the alternate resolution (96 bit nanosecond) the variable <code>BOOST_DATE_TIME_POSIX_TIME_STD_CONFIG</code> must be defined in the library users project files (ie Makefile, Jamfile, etc). This macro is not used by the Gregorian system and therefore has no effect when building the library.<sbr/>
    要使用更高的解析度(96位纳秒级别)，必须在库用户的工程文件(如 Makefile, Jamfile, 等等)中定义变量 
    BOOST_DATE_TIME_POSIX_TIME_STD_CONFIG. 该宏并不被格里历系统使用，因此在构建本库时没有作用。
  </para>
  <para>As of version 1.33, the date_time library introduced a new IO streaming system. Some compilers are not capable of utilizing this new system. For those compilers the earlier ("legacy") IO system is still available. Non-supported compilers will select the legacy system automatically but the user can force the usage of the legacy system by defining <code>USE_DATE_TIME_PRE_1_33_FACET_IO</code>.<sbr/>
  和版本1.33一样，date_time 库引入了一个新的IO流系统。有些编译器不能使用这个新系统。对于这些编译器，
  早期的("遗留")IO系统仍然可用。不被支持的编译器将自动选择遗留系统，但用户也可以通过定义 
  <code>USE_DATE_TIME_PRE_1_33_FACET_IO</code> 来强制使用遗留系统。</para>

  <para>As a convenience, <code>date_time</code> has provided some <link linkend="additional_duration_types">additional duration types</link>. Use of these types may have unexpected results due to the snap-to-end-of-month behavior (see <link linkend="snap_to_details">Reversibility of Operations Pitfall</link> for complete details and examples). These types are enabled by default. To disable these types, simply undefine <code>BOOST_DATE_TIME_OPTIONAL_GREGORIAN_TYPES</code> in your project file.<sbr/>
  为方便使用，<code>date_time</code> 提供了一些 <link linkend="additional_duration_types">额外的时间长度类型</link>。
  使用这些类型可能会由于“保持为月末”的行为而导致意外结果(完整细节和例子请见 
  <link linkend="snap_to_details">操作可逆性的缺陷</link>)。缺省情况下，这些类型都是可用的。
  要禁止这些类型，只需在你的工程文件中去定义 <code>BOOST_DATE_TIME_OPTIONAL_GREGORIAN_TYPES</code> 即可。</para>

  <para>Another convenience is the default constructors for <code><link linkend="date_time.gregorian.date_class">date</link></code>, and <code><link linkend="date_time.posix_time.ptime_class">ptime</link></code>. These constructors are enabled by default. To disable them, simply define <code>DATE_TIME_NO_DEFAULT_CONSTRUCTOR</code> in your project file.<sbr/>
  另一个方便的用法是 <code><link linkend="date_time.gregorian.date_class">date</link></code> 和 
  <code><link linkend="date_time.posix_time.ptime_class">ptime</link></code> 的缺省构造函数。
  缺省情况下这些构造函数是可用的。要禁止它们，只需在你的工程文件中定义 <code>DATE_TIME_NO_DEFAULT_CONSTRUCTOR</code>
  即可。</para>

  <anchor id="portability" />
  <bridgehead renderas="sect3">Compiler/Portability Notes 编译器/可移植性说明</bridgehead>
  <para>
    The Boost Date-Time library has been built and tested with many compilers and platforms. However, some compilers and standard libraries have issues. While some of these issues can be worked around, others are difficult to work around. The following compilers are known to fully support all aspects of the library:<sbr/>
    Boost Date-Time 库已经在多个编译器和平台上进行了构建和测试。但是，有些编译器和标准库存在问题。
    而这些问题中有些可以绕过，其它一些则很难绕过。以下编译器已知完全支持本库：
    <itemizedlist mark="bullet">
      <listitem>Codewarrior 9.4 Windows</listitem>
      <listitem>GCC 3.2 - 3.4, 4.x on Linux</listitem>
      <listitem>GCC 3.3, 4.x on Darwin</listitem>
      <listitem>GCC 3.3 - 3.4, 4.x on Solaris</listitem>
      <listitem>GCC 3.3, 4.x  on HP-UX</listitem>
      <listitem>QCC 3.3.5 on QNX</listitem>
      <listitem>MSVC 7.1 Windows </listitem>
      <listitem>Intel 8.1-9.x Linux and Windows</listitem>
    </itemizedlist>
  </para>

  <para>
     Unfortunately, the VC8 compiler has some issues with date-time code.  
     The most serious issue is a memory leak which was introduced into the
     VC8 standard library basic_stream code.  Date-time has code has been changed
     to avoid this as much as possible, but if you are using the legacy IO option 
     (NOT the default with VC8) then the issue can still arise.  See the

     <ulink url="http://lists.boost.org/Archives/boost/2006/02/101122.php">mailing list archive</ulink> for more details.<sbr/>
     不幸的是，VC8 编译器对于 date-time 代码有些问题。其中最严重的问题是，在引入VC8标准库的 basic_stream 
     代码时存在内存泄漏。Date-time 的代码已经尽可能作出修改以避免这一问题，但如果你使用遗留IO选项(这不是VC8的缺省选项)，
     那么问题仍会出现。更多细节请见 <ulink url="http://lists.boost.org/Archives/boost/2006/02/101122.php">邮件列表存档</ulink>。
  </para>

  <para>
     In addition to the problem above, some versions of the VC8 library have limited 
     the range of allowed 
     values in the <code>std::tm</code> structure to positive values.  This was a new 
     restriction added in the VC8.  The effect is that dates prior to the year
     1900 will cause exceptions.  There is, unfortunately, no easy workaround for 
     this issue.  Note that the new 64bit version of the VC8 compiler
     does not appear to have this limitation.  <sbr/>
     除了以上问题，有些版本的VC8库限制了 <code>std::tm</code> 结构中的值为正值。这是VC8中新增的限制。产生的影响是，
     1900年以前的日期将引发异常。不幸的是，这一问题没有替代方案。注意，新的64位版本VC8编译器不再存在这一限制。
  </para>

  <para>
    These compilers support all aspects of the library except <code>wstring/wstream</code> 
    output.<sbr/>
    以下编译器支持本库除 <code>wstring/wstream</code> 输出以外的所有功能。
    <itemizedlist mark="bullet">
      <listitem>MinGW 3.2, 3.4, 3.5 *</listitem>
      <listitem>GCC 3.2 (cygwin) *</listitem>
    </itemizedlist>
  </para>

  <para>
    In particular, a lack of support for standard locales limits the ability of the library to support iostream based input output. For these compilers a set of more limited string based input-output is provided. Some compilers/standard libraries with this limitation include: <sbr/>
    特别地，缺乏标准 locales 支持将会限制本库的能力，无法支持基于 iostream 的输入输出。
    对于这些编译器，我们提供一组更为有限的基于字符串的输入输出。具有这种限制的编译器/标准库包括：
    <itemizedlist mark="bullet">
      <listitem>Borland 5.6</listitem>
    </itemizedlist>
  </para>

  <para>
    Official support for some older compilers has now been dropped.  This includes:<sbr/>
    对一些较老的编译器的官方支持现在已被停止。它们包括：
    <itemizedlist mark="bullet">
      <listitem>GCC 2.9x</listitem>
      <listitem>Borland 5.1.1</listitem>
      <listitem>MSVC 7.0 and 6 SP5 </listitem>
    </itemizedlist>
  </para>

  <bridgehead renderas="sect5">Visual Studio &amp; STLPort</bridgehead>
  <para>There is a known issue with Visual Studio (7.0 &amp; 7.1) and STLPort. The build errors typically make reference to a type issue or 'no acceptable conversion' and are attempting to instantiate a template with <code>wchar_t</code>. The default build of STLPort does not support <code>wchar_t</code>. There are two possible workarounds for this issue. The simplest is the user can build date_time with no wide stream/string etc. The other is to rebuild STLPort with wchar_t support.<sbr/>
  对于 Visual Studio (7.0 &amp; 7.1) 和 STLPort，有一个著名的问题。构建错误通常会指向一个类型问题或 
  'no acceptable conversion' 以及试图以 <code>wchar_t</code> 实例化一个模板。STLPort 的缺省构建并不支持 
  <code>wchar_t</code>. 这个问题有两个解决方法。最简单的方法是，用法可以构建不带宽字符流/宽字符串的 date_time. 
  另一个方法是，重建 STLPort 以支持 wchar_t. 
  </para>
  <para>To build date_time with no wide stream/string etc, execute the following command from <code>$BOOST_ROOT</code>:<sbr/>
  要构建不带宽字符流/宽字符串的 date_time, 在 <code>$BOOST_ROOT</code> 下执行以下命令：
    <screen>bjam -a "-sTOOLS=vc-7_1-stlport" "-sSTLPORT_PATH=..." \
     "-sBUILD=&lt;define>BOOST_NO_STD_WSTRING"           \
     --stagedir=... --with-date_time stage</screen>
    (replace the ellipsis with the correct paths for the build system and adjust the <code>TOOLS</code> to the proper toolset if necessary)<sbr/>
    (将省略号换为构建系统的正确路径，有需要时将 <code>TOOLS</code> 调整为正确的工具集)
  </para>
  <para>Rebuilding STLPort with <code>wchar_t</code> support involves placing <code>/Zc:wchar_t</code> in the STLPort makefile. Date_time should then be built with the following command from <code>$BOOST_ROOT</code>:<sbr/>
  要重建 STLPort 以支持 <code>wchar_t</code>，只需在 STLPort 的 makefile中指定 <code>/Zc:wchar_t</code>. 
  然后从 <code>$BOOST_ROOT</code> 执行以下命令以构建 Date_time: 
    <screen>bjam -a "-sTOOLS=vc-7_1-stlport" "-sSTLPORT_PATH=..." \
     "-sBUILD=&amp;native-wchar_t>on"                     \
     --stagedir=... --with-date_time stage</screen>
    (replace the ellipsis with the correct paths for the build system and adjust the <code>TOOLS</code> to the proper toolset if necessary)<sbr/>
    (将省略号换为构建系统的正确路径，有需要时将 <code>TOOLS</code> 调整为正确的工具集) 
  </para>
  
  <anchor id="dir_structure" />
  <bridgehead renderas="sect3">Directory Structure 目录结构</bridgehead>
  <para>
    The directory tree has the following structure:<sbr/>
    目录树结构如下：
    <programlisting>/boost/date_time                    -- common headers and template code 公用头文件和模板代码
/boost/date_time/gregorian          -- Gregorian date system header files 格里历系统头文件
/boost/date_time/posix_time         -- Posix time system headers Posix时间系统头文件
/boost/date_time/local_time         -- Local time system headers 本地时间系统头文件
/libs/date_time/build               -- build files and output directory 构建文件和输入目录
/libs/date_time/test                -- test battery for generic code 泛型代码的测试程序
/libs/date_time/test/gregorian      -- test battery for the Gregorian system 格里历系统的测试程序
/libs/date_time/test/posix_time     -- test battery for the posix_time system  posix_time系统的测试程序
/libs/date_time/test/local_time     -- test battery for the local_time system  local_time系统的测试程序
/libs/date_time/examples/gregorian  -- example programs for dates  dates的例子程序
/libs/date_time/examples/posix_time -- time example programs  time的例子程序
/libs/date_time/examples/local_time -- nifty example programs  nifty的例子程序
/libs/date_time/src/gregorian       -- cpp files for libboost_date_time   libboost_date_time 的cpp文件
/libs/date_time/src/posix_time      -- empty (one file, but no source code...) 空 (有一个文件，但无源代码...)</programlisting>
  </para>
  
  <anchor id="other_boost_libs" />
  <bridgehead renderas="sect3">Required Boost Libraries 所需的 Boost 库 </bridgehead>
  <para>
    Various parts of date-time depend on other boost libraries.  These include:<sbr/>
    date-time 的各个部分依赖于某些 boost 库。它们包括：
    <itemizedlist mark="bullet">
      <listitem><ulink url="../../libs/tokenizer/index.html">boost.tokenizer</ulink> </listitem>
      <listitem><ulink url="../../libs/integer/cstdint.htm">boost.integer(cstdint)</ulink> </listitem>
      <listitem><ulink url="../../libs/utility/operators.htm">boost.operators</ulink> </listitem>
      <listitem><ulink url="../../libs/conversion/lexical_cast.htm">boost.lexical_cast </ulink> </listitem>
      <listitem><ulink url="../../libs/smart_ptr/smart_ptr.htm">boost.smart_ptr (local time only)</ulink> </listitem>
      <listitem><ulink url="../../libs/algorithm/string/">boost::string_algorithms </ulink> </listitem>
      <listitem><ulink url="../../libs/serialization/index.html">boost::serialize (serialization code only) </ulink> </listitem>
    </itemizedlist>
    so these libraries need to be installed. <sbr/>
    所以这些库必须被安装。
  </para>
</section>
