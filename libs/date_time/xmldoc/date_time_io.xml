<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN" 
"../../../tools/boostbook/dtd/boostbook.dtd">

<!-- Copyright (c) 2005 CrystalClear Software, Inc.
     Subject to the Boost Software License, Version 1.0. 
     (See accompanying file LICENSE_1_0.txt or  http://www.boost.org/LICENSE_1_0.txt)
-->

<section id="date_time.date_time_io" 
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Date Time Input/Output 日期时间的输入/输出</title>
  <using-namespace name="boost"/>
  <using-namespace name="boost::date_time"/>
  <bridgehead renderas="sect2">Date Time IO System 日期时间 IO 系统</bridgehead>
  <para>
    <link linkend="streaming_exceptions">Exception Handling on Streams 流的异常处理</link>
  </para>
  
  <para>As of version 1.33, the date_time library utilizes a new IO streaming system. This new system gives the user great control over how dates and times can be represented. The customization options can be broken down into two groups: format flags and string elements. Format flags provide flexibility in the order of the date elements as well as the type. Customizing the string elements allows the replacement of built in strings from month names, weekday names, and other strings used in the IO.<sbr/>
  和版本1.33一样，本 date_time 库使用了一个新的流IO系统。这个新系统可以让用户控制如何表示日期和时间。
  定制化的选项可分为两组：格式化标志和字符串元素。格式化标志提供了日期各元素顺序和类型的灵活性。
  而对字符串元素进行客户化可以在IO时替换内建的月份名、星期名和其它字符串。</para>

  <para>The output system is based on a date_facet (derived from std::facet), while the input system is based on a date_input_facet (also derived from std::facet). The time and local_time facets are derived from these base types. The output system utilizes three formatter objects, whereas the input system uses four parser objects. These formatter and parser objetcs are also customizable.<sbr/>
  输出系统基于一个 date_facet (派生自 std::facet)，而输入系统则基于一个 date_input_facet (也是派生自 std::facet)。
  而时间和 local_time 的 facets 则派生自这两个类型。输出系统使用了三个格式化器对象，而输入系统则使用四个分析器对象。
  这些格式化器和分析器对象都是可定制化的。</para>

  <para>It is important to note, that while all the examples shown here use narrow streams, there are wide stream facets available as well (see <link linkend="io_objects_table">IO Objects</link> for a complete list).<sbr/>
  有一点很重要，后面所提供的所有例子均使用了窄字符流，而系统同样提供了宽字符流的 facets (完整的列表请见 
  <link linkend="io_objects_table">IO对象</link>)。</para>

  <para>It should be further noted that not all compilers are capable of using this IO system. For those compilers the IO system used in previous <code>date_time</code> versions is still available. The "legacy IO" is automatically selected for these compilers, however, the legacy IO system can be manually selected by defining <code>USE_DATE_TIME_PRE_1_33_FACET_IO</code>. See the <link linkend="date_time.buildinfo">Build-Compiler Information</link> for more information.<sbr/>
  还要注意的是，不是所有编译器都能够使用这个IO系统。对于那些编译器，以前的 <code>date_time</code> 版本所使用的IO系统依然可用。
  对于这些编译器，系统将自动选择"旧的IO系统"，不过也可以通过定义 <code>USE_DATE_TIME_PRE_1_33_FACET_IO</code> 
  来人工选择使用旧IO系统。更多信息请见 <link linkend="date_time.buildinfo">构建及编译器信息</link>。</para>

  <anchor id="streaming_exceptions" />
  <bridgehead renderas="sect5">Exception Handling on Streams 流的异常处理</bridgehead>
  <para>When an error occurs during the input streaming process, the <code>std::ios_base::failbit</code> will (always) be set on the stream. It is also possible to have exceptions thrown when an error occurs. To "turn on" these exceptions, call the stream's <code>exceptions</code> function with a parameter of <code>std::ios_base::failbit</code>.<sbr/>
  在进行流输入时，如果发生了错误，那么流中的 <code>std::ios_base::failbit</code> 将(总是)被置位。
  也可以在发生错误时抛出异常。要"开启"这些异常的抛出，请以 <code>std::ios_base::failbit</code> 作为参数调用流的
  <code>exceptions</code> 函数。</para>
  <screen>// "Turning on" exceptions  "开启"异常
date d(not_a_date_time);
std::stringstream ss;
ss.exceptions(std::ios_base::failbit);
ss.str("204-Jan-01");
ss >> d; // throws bad_year exception AND sets failbit on stream  抛出 bad_year 异常并设置流的 failbit</screen>
  
  <bridgehead renderas="sect5">A simple example of this new system: 新系统的一个简单例子：</bridgehead>
  <screen>//example to customize output to be 例子：定制输出为 "LongWeekday LongMonthname day, year"
//                                  "%A %b %d, %Y"
date d(2005,Jun,25);
date_facet* facet(new date_facet("%A %B %d, %Y"));
std::cout.imbue(std::locale(std::cout.getloc(), facet));
std::cout &lt;&lt; d &lt;&lt; std::endl;
// "Saturday June 25, 2005"</screen>

  <xi:include href="format_flags.xml" />
  
  <para>The following table lists the available facets.<sbr/>
  下表列出了可用的 facets.</para>

  <anchor id="io_objects_table" />
  <bridgehead renderas="sect3">IO Objects IO对象</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry>Output 输出</entry>
	    <entry>Input 输入</entry>
	  </row>
	</thead>
	<tbody>
          <row>
            <entry><classname>date_facet</classname></entry>
	    <entry><classname>date_input_facet</classname></entry>
	  </row>
          <row>
            <entry><classname alt="boost::date_time::date_facet">wdate_facet</classname></entry>
	    <entry><classname alt="boost::date_time::date_input_facet">wdate_input_facet</classname></entry>
	  </row>
          <row>
            <entry><classname>time_facet</classname></entry>
	    <entry><classname>time_input_facet</classname></entry>
	  </row>
          <row>
            <entry><classname alt="boost::date_time::time_facet">wtime_facet</classname></entry>
	    <entry><classname alt="boost::date_time::time_input_facet">wtime_input_facet</classname></entry>
	  </row>
          <row>
            <entry><classname alt="boost::date_time::time_facet">local_time_facet</classname>*</entry>
	    <entry><classname alt="boost::date_time::time_input_facet">local_time_input_facet</classname>*</entry>
	  </row>
          <row>
            <entry><classname alt="boost::date_time::time_facet">wlocal_time_facet</classname>*</entry>
	    <entry><classname alt="boost::date_time::time_input_facet">wlocal_time_input_facet</classname>*</entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>
    * These links lead to the <code>time_facet</code> and <code>time_input_facet</code> reference sections. They are not actual classes but typedefs.<sbr/>
    * 这些链接引向 <code>time_facet</code> 和 <code>time_input_facet</code> 参考一节。它们不是真正的类而是 typedefs.
  </para>
  
  <bridgehead renderas="sect3">Formatter/Parser Objects 格式化器/分析器对象</bridgehead>
  <para>To implement the new i/o facets the date-time library uses a number of new parsers and formatters. These classes are available for users that want to implement specialized input/output routines.<sbr/>
  为了实现新的 new i/o facets，date-time 库使用了多个新分析器和格式化器。这些类可以让用户实现特定的输入/输出程序。</para>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry>Output 输出</entry>
	    <entry>Input 输入</entry>
	  </row>
	</thead>
	<tbody>
          <row>
            <entry><classname>period_formatter</classname></entry>
	    <entry><classname>period_parser</classname></entry>
	  </row>
          <row>
            <entry><classname>date_generator_formatter</classname></entry>
	    <entry><classname>date_generator_parser</classname></entry>
	  </row>
          <row>
            <entry><classname>special_values_formatter</classname></entry>
	    <entry><classname>special_values_parser</classname></entry>
	  </row>
          <row>
            <entry></entry>
	    <entry><classname>format_date_parser</classname></entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>
  </para>

  <xi:include href="date_facet.xml" />
  <xi:include href="date_input_facet.xml" />
  <xi:include href="time_facet.xml" />
  <xi:include href="time_input_facet.xml" />
  <xi:include href="io_objects.xml" />
  <xi:include href="io_tutorial.xml" />
  
</section>
