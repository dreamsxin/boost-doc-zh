<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN" 
"../../../tools/boostbook/dtd/boostbook.dtd">

<!-- Copyright (c) 2005 CrystalClear Software, Inc.
     Subject to the Boost Software License, Version 1.0. 
     (See accompanying file LICENSE_1_0.txt or  http://www.boost.org/LICENSE_1_0.txt)
-->

<section id="date_time.io_objects" 
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Date Time Formatter/Parser Objects 日期时间格式化器/分析器对象</title>
  <!-- <using-namespace name="boost"/> -->
  <using-namespace name="boost::date_time"/>
  <bridgehead renderas="sect2">Date Time Formatter/Parser Objects 日期时间格式化器/分析器对象</bridgehead>

  <link linkend="io_objects.periods">Periods 时间段</link> |
  <link linkend="io_objects.date_generators">Date Generators 日期生成器</link> |
  <link linkend="io_objects.special_values">Special Values 特殊值</link> |
  <link linkend="io_objects.format_date_parser">Format Date Parser 格式化日期分析器 </link>

  <anchor id="io_objects.periods" /> 
  <bridgehead renderas="sect3">Periods 时间段</bridgehead> 
  <para>The period_formatter and period_parser provide a uniform interface for the input and output of date_periods, time_periods, and in a future release, local_date_time_periods. The user has control over the delimiters, formats of the date/time components, and the form the period takes. The format of the date/time components is controlled via the date_time input and output facets.<sbr/>
  period_formatter 和 period_parser 为 date_periods, time_periods, 以及未来版本中的 local_date_time_periods 
  的输入和输出提供了统一的接口。用户可以控制所用的定界符、日期/时间组件的格式，以及时间段的表示形式。
  日期/时间组件的格式通过 date_time 的输入输出 facets 来控制。

</para>
  
  <bridgehead renderas="sect4">Period Form 时间段的表示形式</bridgehead> 
  <para>Periods are constructed with open ranged parameters. The first value is the starting point, and is included in the period. The end value is not included but immediately follows the last value: [begin/end). However, a period can be streamed as either an open range or a closed range.<sbr/>
  时间段是以开区间参数来构造的。first 值为开始的时间点，并且包含在时间段中。end 值则不包含在时间段中，
  它紧随在 last 值之后：[begin/end). 不过，时间段既可以作为开区间也可以作为闭区间的方式来进行流操作。</para>
  <screen>[2003-Jan-01/2003-Dec-31] &lt;-- period holding 365 days 包含365天的时间段
[2003-Jan-01/2004-Jan-01) &lt;-- period holding 365 days 包含365天的时间段</screen>
  
  <bridgehead renderas="sect4">Delimiters 定界符</bridgehead> 
  <para>There are four delimiters. The default values are<sbr/>
  共有四个定界符。它们的缺省值是：<simplelist type="vert" columns="1">
      <member>"\" - separator 分隔符</member>
      <member>"[" - start delimiter 开始定界符</member>
      <member>")" - open range end delimiter 开区间的结束定界符</member>
      <member>"]" - closed range end delimiter 闭区间的结束定界符</member>
  </simplelist>A user can provide a custom set of delimiters. Custom delimiters may contain spaces.<sbr/>
  用户可以提供定制的定界符。用户定制的定界符可以包含空格。</para>

  <bridgehead renderas="sect4">Customization 定制</bridgehead> 
  <para>The period form and delimiters can be set as construction parameters or by means of accessor functions. A custom period parser/formatter can then be used as a construction parameter to a new facet, or can be set in an existing facet via an accessor function.<sbr/>
  时间段的形式和定界符可以通过构造参数或访问器函数来设置。而定制的时间段分析器/格式化器则可以作为构造参数来构造新的 facet, 
  或者通过访问器函数设置到已有的 facet 中。</para>


  <bridgehead renderas="sect4">Period Formatter/Parser Reference 时间段格式化器/分析器的参考</bridgehead>
  The complete class reference can be found here: <classname alt="boost::date_time::period_formatter">Period Formatter Doxygen Reference</classname> and here: <classname alt="boost::date_time::period_parser">Period Parser Doxygen Reference</classname><sbr/>
  完整的类参考请见：<classname alt="boost::date_time::period_formatter">时间段格式化器Doxygen参考</classname> 和 
  <classname alt="boost::date_time::period_parser">时间段分析器Doxygen参考</classname>

  <para>
    <bridgehead renderas="sect4">Period Formatter Construction 时间段格式化器构造</bridgehead>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry valign="top">Syntax 语法</entry>
            <entry>Description 说明</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top"><screen>period_formatter(...)
  Parameters:
    range_display_options
    char_type*
    char_type*
    char_type*
    char_type*</screen></entry>
            <entry>NOTE: All five construction parameters have default values so this constructor also doubles as the default constructor. The <code>range_display_options</code> is a public type enum of the <code>period_formatter</code> class. The possible choices are AS_OPEN_RANGE or AS_CLOSED_RANGE. The closed range is the default. A period has three significant points: the begining, the last, and the end. A closed range period takes the form [begin,end), where an open range period takes the form [begin,last]. The four char_type* parameters are: the period separator, the start delimiter, the open range end delimiter, and the closed range end delimiter.<sbr/>
            注：所有五个构造函数都具有缺省值，所以这个构造函数也可用为缺省构造函数。<code>range_display_options</code> 是
            <code>period_formatter</code> 类的一个公有枚举类型。可能的选择为 AS_OPEN_RANGE 或 AS_CLOSED_RANGE. 
            缺省值是闭区间。时间段有三个主要的时间点：begining, last, 和 end. 闭区间时间段格式为 [begin,end), 
            而开区间时间格式为 [begin,last]. 四个 char_type* 参数分别是：时间段分隔符，开始定界符，
            开区间结束定界符，和闭区间结束定界符。</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <bridgehead renderas="sect4">Period Formatter Accessors 时间段格式化器访问器</bridgehead>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry valign="top" morerows="1">Syntax 语法</entry>
            <entry>Description 说明</entry>
          </row>
          <row>
              <entry>Example 例子</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top" morerows="1"><screen>range_display_options range_option()</screen></entry>
            <entry>Returns the current setting for the range display (either AS_OPEN_RANGE or AS_CLOSED_RANGE).<sbr/>
            返回区间显示的当前设置(AS_OPEN_RANGE 或 AS_CLOSED_RANGE).</entry>
          </row>
          <row>
            <entry><screen></screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>void range_option(...)
  Parameter:
    range_display_options</screen></entry>
            <entry>Sets the option for range display (either AS_OPEN_RANGE or AS_CLOSED_RANGE).<sbr/>
            设置区间显示选项(AS_OPEN_RANGE 或 AS_CLOSED_RANGE).</entry>
          </row>
          <row>
            <entry><screen></screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>void delimiter_strings(...)
  Parameters:
    string_type
    string_type
    string_type
    string_type</screen></entry>
            <entry>Set new delimiter strings in the formatter.<sbr/>
            设置格式化器中的定界符字符串。</entry>
          </row>
          <row>
            <entry><screen>string beg("->| ");
string sep(" || ");
string opn(" ->|");
string clo(" |&lt;-");
pf.delimiter_strings(beg, sep, 
                     opn, clo);</screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>put_period_start_delimeter(...)
  Return Type:
    OutItrT
  Parameter:
    OutItrT</screen></entry>
            <entry>Puts the start delimiter into the stream at position pointed to by OutItrT parameter.<sbr/>
            将开始定界符放入到流中由 OutItrT 参数所指的位置。</entry>
          </row>
          <row>
            <entry><screen></screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>put_period_sepatator(...)
  Return Type:
    OutItrT
  Parameter:
    OutItrT</screen></entry>
            <entry>Puts the separator into the stream at position pointed to by OutItrT parameter.<sbr/>
            将分隔符放入到流中由 OutItrT 参数所指的位置。</entry>
          </row>
          <row>
            <entry><screen></screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>put_period_end_delimeter(...)
  Return Type:
    OutItrT
  Parameter:
    OutItrT</screen></entry>
            <entry>Puts the end delimiter into the stream at position pointed to by OutItrT parameter.<sbr/>
            将结束定界符放入到流中由 OutItrT 参数所指的位置。</entry>
          </row>
          <row>
            <entry><screen></screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>OutItrT put_period(...)
  Parameters:
    OutItrT
    ios_base
    char_type
    period_type
    facet_type</screen></entry>
            <entry>Puts a period into the stream using the set values for delimiters, separator, and range display. The facet parameter is used to put the date (or time) objects of the period.<sbr/>
            将一个时间段放入流中，使用设置的定界符，分隔符和区间表示法。参数 facet 用于输出时间段中的日期(或时间)。</entry>
          </row>
          <row>
            <entry><screen></screen></entry>
          </row>

        </tbody>
      </tgroup>
    </informaltable>
  </para>
  <para>
    <bridgehead renderas="sect4">Period Parser Construction 时间段分析器构造</bridgehead>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry valign="top">Syntax 语法</entry>
            <entry>Description 说明</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top"><screen>period_parser(...)
  Parameters:
    period_range_option
    char_type*
    char_type*
    char_type*
    char_type*</screen></entry>
            <entry>NOTE: All five construction parameters have default values so this constructor also doubles as the default constructor. The <code>period_range_option</code> is a public type enum of the <code>period_parser</code> class. The possible choices are AS_OPEN_RANGE or AS_CLOSED_RANGE. The closed range is the default. A period has three significant points: the begining, the last, and the end. A closed range period takes the form [begin,end), where an open range period takes the form [begin,last]. The four char_type* parameters are: the period separator, the start delimiter, the open range end delimiter, and the closed range end delimiter.<sbr/>
            注：所有五个构造函数都具有缺省值，所以这个构造函数也可用为缺省构造函数。<code>period_range_option</code> 是 
            <code>period_parser</code> 类的一个公有枚举类型。可能的选择为 AS_OPEN_RANGE 或 AS_CLOSED_RANGE. 
            缺省值是闭区间。时间段有三个主要的时间点：begining, last, 和 end. 闭区间时间段格式为 [begin,end), 
            而开区间时间格式为 [begin,last]. 四个 char_type* 参数分别是：时间段分隔符，开始定界符，
            开区间结束定界符，和闭区间结束定界符。</entry>
          </row>
          <row>
            <entry valign="top"><screen>period_parser(period_parser)</screen></entry>
            <entry>Copy constructor<sbr/>
            复制构造函数</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <bridgehead renderas="sect4">Period Parser Accessors 时间段分析器访问器</bridgehead>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry valign="top" morerows="1">Syntax 语法</entry>
            <entry>Description 说明</entry>
          </row>
          <row>
              <entry>Example 例子</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top" morerows="1"><screen>period_range_option range_option()</screen></entry>
            <entry>Returns the current setting for the period range (either AS_OPEN_RANGE or AS_CLOSED_RANGE).<sbr/>
            返回时间段区间表示的当前设置(AS_OPEN_RANGE 或 AS_CLOSED_RANGE).</entry>
          </row>
          <row>
            <entry><screen></screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>void range_option(...)
  Parameter:
    period_range_option </screen></entry>
            <entry>Sets the option for period range (either AS_OPEN_RANGE or AS_CLOSED_RANGE).<sbr/>
            设置时间段区间的表示选项(AS_OPEN_RANGE 或 AS_CLOSED_RANGE).</entry>
          </row>
          <row>
            <entry><screen></screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>void delimiter_strings(...)
  Parameters:
    string_type
    string_type
    string_type
    string_type</screen></entry>
            <entry>Set new delimiter strings in the parser.<sbr/>
            为分析器设置新的定界符字符串。</entry>
          </row>
          <row>
            <entry><screen>string beg("->| ");
string sep(" || ");
string opn(" ->|");
string clo(" |&lt;-");
pp.delimiter_strings(beg, sep, 
                     opn, clo);</screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>collection_type delimiter_strings()</screen></entry>
            <entry>Returns the set of delimiter strings currently held in the parser.<sbr/>
            返回分析器中当前的定界符字符串。</entry>
          </row>
          <row>
            <entry><screen></screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>period_type get_period(...)
  Parameters:
    stream_itr_type
    stream_itr_type
    ios_base
    period_type
    duration_type
    facet_type</screen></entry>
<entry>Parses a period from the stream. The iterator parameters point to the begining and end of the stream. The duration_type is relevant to the period type, for example: A <code>date_period</code> would use <code>days</code> as a duration_type. The period will be parsed according to the formats and strings found in the facet parameter.<sbr/>
从流中分析出一个时间段。两个迭代器参数分别指向流的开始位置和结束位置。duration_type 与 period 的类型相关，例如：
<code>date_period</code> 以 <code>days</code> 作为 duration_type. 根据 facet 参数中的格式和字符串来分析得取时间段。</entry>
          </row>
          <row>
            <entry><screen></screen></entry>
          </row>

        </tbody>
      </tgroup>
    </informaltable>
  </para>

  <para>_____________________________________________________</para>

  <anchor id="io_objects.date_generators" /> 
  <bridgehead renderas="sect3">Date Generators 日期生成器</bridgehead>
  <para>The date_generator formatter and parser provide flexibility by allowing the user to use custom "phrase elements". These phrase elements are the "in-between" words in the date_generators. For example, in the date_generator "Second Monday of March", "Second" and "of" are the phrase elements, where "Monday" and "March" are the date elements. Customization of the date elements is done with the facet. The order of the date and phrase elements cannot be changed. When parsing, all elements of the date_generator phrase must parse correctly or an ios_base::failure exception will be thrown.<sbr/>
  date_generator 格式化器和分析器提供了灵活性，允许用户使用定制的"短语元素"。这些短语元素是 date_generators 中的"分隔"单词。
  例如，在 date_generator "Second Monday of March" 中，"Second" 和 "of" 都是短语元素，而 "Monday" 和 "March" 就是日期元素。
  日期元素的定制由 facet 负责。日期元素和短语元素的顺序是不能改变的。在进行分析时，date_generator 的所有元素必须都能正确分析，
  否则将抛出一个 ios_base::failure 异常。</para>

  <bridgehead renderas="sect4">Customization 定制</bridgehead> 
  <para>The default "phrase_strings" are:<sbr/>
  缺省的 "phrase_strings" 为：
    <simplelist type="horiz" columns="9">
      <member>"first"</member>
      <member>"second"</member>
      <member>"third"</member>
      <member>"fourth"</member>
      <member>"fifth"</member>
      <member>"last"</member>
      <member>"before"</member>
      <member>"after"</member>
      <member>"of"</member>
    </simplelist>
    A custom set of phrase_strings must maintain this order of occurance (Ex: "1st", "2nd", "3rd", "4th", "5th", "last", "prior", "past", "in").<sbr/>
    一组定制的 phrase_strings 必须保持以下顺序(如："1st", "2nd", "3rd", "4th", "5th", "last", "prior", "past", "in")。</para>
  <para> Examples using default phrase_strings and default facet formats for weekday &amp; month: <sbr/>
  例如，使用缺省的 phrase_strings 以及缺省 facet 格式的 weekday &amp; month: <screen>"first Tue of Mar"</screen>And using custom phrase_strings: <sbr/>
  而使用定制的 phrase_strings: <screen>"1st Tue in Mar"</screen>
  </para>
  <para>The custom set of phrase elements can be set as construction parameters or through an accessor function.A custom date_generator parser/formatter can then be used as a construction parameter to a new facet, or can be set in an existing facet via an accessor function.<sbr/>
  短语元素的定制可以在构造参数中设置，也可以通过访问器函数来设置。一个定制的 date_generator 分析器/格式化器可以用作一个新的
  facet 的构造参数，或者通过访问器函数设置到已有的 facet 中。</para>
  <para>IMPORTANT NOTE: Prior to 1.33, partial_date was output as "1 Jan" with a single *or* double digit number for the day. The new behavior is to *always* place a double digit number for the day - "01 Jan".<sbr/>
  重要说明：在版本1.33以前，partial_date 的输出形如 "1 Jan"，其中日期是用一位或两位数字来表示的。
  而新的版本中则总是以两位数字表示日期 - "01 Jan"。</para>

  <bridgehead renderas="sect4">Date Generator Reference 日期生成器参考</bridgehead>
  The complete class references can be found here: <classname alt="boost::date_time::date_generator_formatter">Date Generator Formatter Doxygen Reference</classname> and here: <classname alt="boost::date_time::date_generator_parser">Date Generator Parser Doxygen Reference</classname><sbr/>
  完整的类参考请见：<classname alt="boost::date_time::date_generator_formatter">日期生成器格式化器Doxygen参考</classname>
  和 <classname alt="boost::date_time::date_generator_parser">日期生成器分析器Doxygen参考</classname>

  <para>
    <bridgehead renderas="sect4">Date Generator Formatter Construction 日期生成器的格式化器构造</bridgehead>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry valign="top">Syntax 语法</entry>
            <entry>Description 说明</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top"><screen>date_generator_formatter()</screen></entry>
            <entry>Uses the default date generator elements.<sbr/>
            使用缺省的日期生成器元素。</entry>
          </row>
          <row>
            <entry valign="top"><screen>date_generator_formatter(...)
  Parameters:
    string_type first_element
    string_type second_element
    string_type third_element
    string_type fourth_element
    string_type fifth_element
    string_type last_element
    string_type before_element
    string_type after_element
    string_type of_element</screen></entry>
            <entry>Constructs a date_generator_formatter using the given element strings.<sbr/>
            使用给定的元素字符串构造一个 date_generator_formatter.</entry>
          </row>

        </tbody>
      </tgroup>
    </informaltable>
    <bridgehead renderas="sect4">Date Generator Formatter Accessors 日期生成器的格式化器访问器</bridgehead>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry valign="top" morerows="1">Syntax 语法</entry>
            <entry>Description 说明</entry>
          </row>
          <row>
              <entry>Example 例子</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top" morerows="1"><screen>void elements(...)
  Parameters:
    collection_type
    phrase_elements</screen></entry>
            <entry>Replace the current phrase elements with a collection of new ones. The <code>phrase_elements</code> parameter is an enum that indicates what the first element in the new collection is (defaults to first).<sbr/>
            替换当前的短语元素。参数 <code>phrase_elements</code> 为枚举值，表示新的短语集中的第一个元素(缺省为 first)。</entry>
          </row>
          <row>
            <entry><screen>// col is a collection holding  col中存有 
// "final", "prior", "following",
// and "in"
typedef date_generator_formatter dgf;                                  
dgf formatter();
formatter.elements(col, dgf::last);
// complete elements in dgf are now:  现在 dgf 的完整元素为：
"first", "second", "third", 
"fourth", "fifth", "final", 
"prior", "following", and "in"</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>put_partial_date(...)
  Return Type:
    facet_type::OutItrT
  Parameters:
    OutItrT next
    ios_base
    char_type fill
    partial_date
    facet_type</screen></entry>
            <entry>A put function for partial_date. This is a templated function that takes a facet_type as a parameter.<sbr/>
            用于 partial_date 的 put 函数。这是一个以 facet_type 为参数的模板函数。</entry>
          </row>
          <row>
            <entry>Put a partial_date => "dd Month".</entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>put_nth_kday(...)
  Return Type:
    facet_type::OutItrT
  Parameters:
    OutItrT next
    ios_base
    char_type fill
    nth_kday_type
    facet_type</screen></entry>
            <entry>A put function for nth_kday_type. This is a templated function that takes a facet_type as a parameter.<sbr/>
            用于 nth_kday_type 的 put 函数。这是一个以 facet_type 为参数的模板函数。</entry>
          </row>
          <row>
            <entry>Put an nth_day_of_the_week_in_month => "nth weekday of month".</entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>put_first_kday(...)
  Return Type:
    facet_type::OutItrT
  Parameters:
    OutItrT next
    ios_base
    char_type fill
    first_kday_type
    facet_type</screen></entry>
            <entry>A put function for first_kday_type. This is a templated function that takes a facet_type as a parameter.<sbr/>
            用于 first_kday_type 的 put 函数。这是一个以 facet_type 为参数的模板函数。</entry>
          </row>
          <row>
            <entry>Put a first_day_of_the_week_in_month => "first weekday of month".</entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>put_last_kday(...)
  Return Type:
    facet_type::OutItrT
  Parameters:
    OutItrT next
    ios_base
    char_type fill
    last_kday_type
    facet_type</screen></entry>
            <entry>A put function for last_kday_type. This is a templated function that takes a facet_type as a parameter.<sbr/>
            用于 last_kday_type 的 put 函数。这是一个以 facet_type 为参数的模板函数。</entry>
          </row>
          <row>
            <entry>Put a last_day_of_the_week_in_month => "last weekday of month".</entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>put_kday_before(...)
  Return Type:
    facet_type::OutItrT
  Parameters:
    OutItrT next
    ios_base
    char_type fill
    kday_before_type
    facet_type</screen></entry>
            <entry>A put function for kday_before_type. This is a templated function that takes a facet_type as a parameter.<sbr/>
            用于 kday_before_type 的 put 函数。这是一个以 facet_type 为参数的模板函数。</entry>
          </row>
          <row>
            <entry>Put a first_day_of_the_week_before => "weekday before"</entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>put_kday_after(...)
  Return Type:
    facet_type::OutItrT
  Parameters:
    OutItrT next
    ios_base
    char_type fill
    kday_after_type
    facet_type</screen></entry>
            <entry>A put function for kday_after_type. This is a templated function that takes a facet_type as a parameter.<sbr/>
            用于 kday_after_type 的 put 函数。这是一个以 facet_type 为参数的模板函数。</entry>
          </row>
          <row>
            <entry>Put a first_day_of_the_week_after => "weekday after".</entry>
          </row>

        </tbody>
      </tgroup>
    </informaltable>
  </para>
  <para>
    <bridgehead renderas="sect4">Date Generator Parser Construction 日期生成器的分析器构造</bridgehead>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry valign="top">Syntax 语法</entry>
            <entry>Description 说明</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top"><screen>date_generator_parser()</screen></entry>
            <entry>Uses the default date generator elements.<sbr/>
            使用缺省的日期生成器元素。</entry>
          </row>
          <row>
            <entry valign="top"><screen>date_generator_parser(...)
  Parameter:
    date_generator_parser</screen></entry>
            <entry>Copy Constructor<sbr/>
            复制构造函数。</entry>
          </row>
          <row>
            <entry valign="top"><screen>date_generator_parser(...)
  Parameters:
    string_type first_element
    string_type second_element
    string_type third_element
    string_type fourth_element
    string_type fifth_element
    string_type last_element
    string_type before_element
    string_type after_element
    string_type of_element</screen></entry>
            <entry>Constructs a date_generator_parser using the given element strings.<sbr/>
            使用给定的元素字符串构造一个 date_generator_parser.</entry>
          </row>

        </tbody>
      </tgroup>
    </informaltable>
    <bridgehead renderas="sect4">Date Generator Parser Accessors 日期生成器的分析器访问器</bridgehead>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry valign="top" morerows="1">Syntax 语法</entry>
            <entry>Description 说明</entry>
          </row>
          <row>
              <entry>Example 例子</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top" morerows="1"><screen>void element_strings(...)
  Parameter:
    collection_type</screen></entry>
            <entry>Replace the set of date generator element string with a new set.<sbr/>
            为日期生成器替换一组新的元素字符串。</entry>
          </row>
          <row>
            <entry><screen></screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>void element_strings(...)
  Parameters:
    string_type first
    string_type second
    string_type third
    string_type fourth
    string_type fifth
    string_type last
    string_type before
    string_type after
    string_type of</screen></entry>
            <entry>Replace the set of date generator elements with new values.<sbr/>
            为日期生成器元素替换一组新值。</entry>
          </row>
          <row>
            <entry><screen></screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>get_partial_date_type(...)
  Return Type:
    facet_type::partial_date_type
  Parameters:
    stream_itr_type next
    stream_itr_type str_end
    ios_base
    facet_type</screen></entry>
            <entry>A templated function that parses a date_generator from the stream.<sbr/>
            模板函数，从流中分析出一个 date_generator.</entry>
          </row>
          <row>
            <entry>Parses a partial_date => "dd Month".<sbr/>
            分析一个 partial_date => "dd Month".</entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>get_nth_kday_type(...)
  Return Type:
    facet_type::nth_kday_type
  Parameters:
    stream_itr_type next
    stream_itr_type str_end
    ios_base
    facet_type</screen></entry>
            <entry>A templated function that parses a date_generator from the stream.<sbr/>
            模板函数，从流中分析出一个 date_generator.</entry>
          </row>
          <row>
            <entry>Parses an nth_day_of_the_week_in_month => "nth weekday of month".<sbr/>
            分析一个 nth_day_of_the_week_in_month => "nth weekday of month".</entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>get_first_kday_type(...)
  Return Type:
    facet_type::firat_kday_type
  Parameters:
    stream_itr_type next
    stream_itr_type str_end
    ios_base
    facet_type</screen></entry>
            <entry>A templated function that parses a date_generator from the stream.<sbr/>
            模板函数，从流中分析出一个 date_generator.</entry>
          </row>
          <row>
            <entry>Parses a first_day_of_the_week_in_month => "first weekday of month".<sbr/>
            分析一个 first_day_of_the_week_in_month => "first weekday of month".</entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>get_last_kday_type(...)
  Return Type:
    facet_type::last_kday_type
  Parameters:
    stream_itr_type next
    stream_itr_type str_end
    ios_base
    facet_type</screen></entry>
            <entry>A templated function that parses a date_generator from the stream.<sbr/>
            模板函数，从流中分析出一个 date_generator.</entry>
          </row>
          <row>
            <entry>Parses a last_day_of_the_week_in_month => "last weekday of month".<sbr/>
            分析一个 last_day_of_the_week_in_month => "last weekday of month".</entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>get_kday_before_type(...)
  Return Type:
    facet_type::kday_before_type
  Parameters:
    stream_itr_type next
    stream_itr_type str_end
    ios_base
    facet_type</screen></entry>
            <entry>A templated function that parses a date_generator from the stream.<sbr/>
            模板函数，从流中分析出一个 date_generator.</entry>
          </row>
          <row>
            <entry>Parses a first_day_of_the_week_before => "weekday before"<sbr/>
            分析一个 first_day_of_the_week_before => "weekday before"</entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>get_kday_after_type(...)
  Return Type:
    facet_type::kday_after_type
  Parameters:
    stream_itr_type next
    stream_itr_type str_end
    ios_base
    facet_type</screen></entry>
            <entry>A templated function that parses a date_generator from the stream.<sbr/>
            模板函数，从流中分析出一个 date_generator.</entry>
          </row>
          <row>
            <entry>Parses a first_day_of_the_week_after => "weekday after".<sbr/>
            分析一个 first_day_of_the_week_after => "weekday after".</entry>
          </row>

        </tbody>
      </tgroup>
    </informaltable>
  </para>

  <para>_____________________________________________________</para>

  <anchor id="io_objects.special_values" /> 
  <bridgehead renderas="sect3">Special Values 特殊值</bridgehead>
  <para>The date_time library uses five special_values. They are:<sbr/>
  date_time 库中使用了五个 special_values. 它们是： 
    <simplelist type="horiz" columns="5">
      <member>not_a_date_time</member>
      <member>neg_infin</member>
      <member>pos_infin</member>
      <member>min_date_time</member>
      <member>max_date_time</member>
    </simplelist>
  </para>
  <para>The default set of strings used to represent these types are: "not-a-date-time", "-infinity", "+infinity", "minimum-date-time", "maximum-date-time". When output, the min_date-time and max_date_time appear as normal date/time representations: "1400-Jan-01" and "9999-Dec-31" repectively.<sbr/>
  用于表示这些类型的缺省字符串是："not-a-date-time", "-infinity", "+infinity", "minimum-date-time", "maximum-date-time". 
  在输出时，min_date-time 和 max_date_time以普通的日期/时间表示来显示，分别为："1400-Jan-01" 和 "9999-Dec-31".</para>

  <bridgehead renderas="sect4">Customization 定制</bridgehead> 
  <para>The special values parser/formatter allows the user to set custom strings for these special values. These strings can be set as construction parameters to a new facet, or can be set in an existing facet via an accessor function.<sbr/>
  特殊值分析器/格式化器允许用户为这些特殊值设置定制的字符串。这些字符串可以用为构造参数设置给一个新的 facet, 
  或者可以通过访问器函数设置给一个已有的 facet.</para>
  
  <bridgehead renderas="sect4">Special Values Formatter/Parser Reference 特殊值的分析器/格式化器参考</bridgehead>
  The complete class references can be found here: <classname alt="boost::date_time::special_values_formatter">Special Values Formatter Doxygen Reference</classname> and here: <classname alt="boost::date_time::special_values_parser">Special Values Parser Doxygen Reference</classname><sbr/>
  完整的类参考请见：<classname alt="boost::date_time::special_values_formatter">特殊值格式化器Doxygen参考</classname> 和
  <classname alt="boost::date_time::special_values_parser">特殊值分析器Doxygen参考</classname>

  <para>
    <bridgehead renderas="sect4">Special Values Formatter Constructor 特殊值的格式化器构造函数</bridgehead>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry valign="top">Syntax 语法</entry>
            <entry>Description 说明</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top"><screen>special_values_formatter()</screen></entry>
            <entry>Constructor uses defaults for special value strings.<sbr/>
            使用缺省的特殊值字符串的构造函数。</entry>
          </row>
          <row>
            <entry valign="top"><screen>special_values_formatter(...)
  Parameters:
    collection_type::iterator
    collection_type::iterator</screen></entry>
            <entry>Constructs using values in collection. NOTE: Only the first three strings of the collection will be used. Strings for minimum_date_time and maximum_date_time are ignored as those special values are output as normal dates/times.<sbr/>
            使用 collection 中的值进行构造。注：只使用 collection 中的前三个字符串。minimum_date_time 和 maximum_date_time 
            的字符串被忽略，因为这两个特殊值以普通的日期/时间来输出。</entry>
          </row>
          <row>
            <entry valign="top"><screen>special_values_formatter(...)
  Parameters:
    char_type*
    char_type*</screen></entry>
            <entry>Constructs special values formatter from an array of strings.<sbr/>
            从一个字符串数组构造特殊值格式化器。</entry>
          </row>

        </tbody>
      </tgroup>
    </informaltable>
  </para>
  
  <para>
    <bridgehead renderas="sect4">Special Values Formatter Accessors 特殊值格式化器的访问器</bridgehead>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry valign="top" morerows="1">Syntax 语法</entry>
            <entry>Description 说明</entry>
          </row>
          <row>
              <entry>Example 例子</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top" morerows="1"><screen>OutItrT put_special(...)
  Parameters:
    OutItrT next
    special_values value</screen></entry>
            <entry>Puts the given special value into the stream.<sbr/>
            将给定的特殊值放入到流中。</entry>
          </row>
          <row>
            <entry><screen>date d1(not_a_date_time);
date d2(minimum_date_time);
special_values_formatter formatter;
formatter.put_special(itr, d1); 
// Puts: "not-a-date-time"
formatter.put_special(itr, d2); 
// Puts: "1400-Jan-01"</screen></entry>
          </row>

        </tbody>
      </tgroup>
    </informaltable>
  </para>
  
  <para>
    <bridgehead renderas="sect4">Special Values Parser Constructor 特殊值分析器的构造函数</bridgehead>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry valign="top">Syntax 语法</entry>
            <entry>Description 说明</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top"><screen>special_values_parser()</screen></entry>
            <entry></entry>
          </row>

          <row>
            <entry valign="top"><screen>special_values_parser(...)
  Parameters:
    collection_type::iterator
    collection_type::iterator</screen></entry>
            <entry>Constructs a special values parser using the strings in the collection.<sbr/>
            使用 collection 中的字符串构造一个特殊值分析器。</entry>
          </row>

          <row>
            <entry valign="top"><screen>special_values_parser(...)
  Parameter:
    scpecial_values_parser</screen></entry>
            <entry>Copy constructor.<sbr/>
            复制构造函数。</entry>
          </row>

          <row>
            <entry valign="top"><screen>special_values_parser(...)
  Parameters:
    string_type nadt_str
    string_type neg_inf_str
    string_type pos_inf_str
    string_type min_dt_str
    string_type max_dt_str</screen></entry>
            <entry>Constructs a special values parser using the supplied strings.<sbr/>
            使用给定的字符串构造一个特殊值分析器。</entry>
          </row>

        </tbody>
      </tgroup>
    </informaltable>
  </para>
  
  <para>
    <bridgehead renderas="sect4">Special Values Parser Accessors 特殊值分析器的访问器</bridgehead>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry valign="top" morerows="1">Syntax 语法</entry>
            <entry>Description 说明</entry>
          </row>
          <row>
              <entry>Example 例子</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top" morerows="1"><screen>void sv_strings(...)
  Parameters:
    string_type nadt_str
    string_type neg_inf_str
    string_type pos_inf_str
    string_type min_dt_str
    string_type max_dt_str</screen></entry>
            <entry>Replace the set of special value strings with the given ones.<sbr/>
            以给定的字符串替换特殊值字符串。</entry>
          </row>
          <row>
            <entry><screen></screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>bool match(...)
  Parameters:
    stream_itr_type beg
    stream_itr_type end
    match_results</screen></entry>
            <entry>Returns true if parse was successful. Upon a successful parse, <code>mr.current_match</code> will be set an int values corresponding to the equivalent special_value.<sbr/>
            返回 true 如果分析成功。对于一次成功的分析，mr.current_match 被设置为一个 int 值，对应于等价的 special_value.</entry>
          </row>
          <row>
            <entry><screen>// stream holds 流中有 "maximum_date_time"
typedef special_values_parser svp;
svp parser;
svp::match_results mr;
if(parser.match(itr, str_end, mr)) {
  d = date(static_cast&lt;special_values>(
           mr.match_results))
} else {
  // error, failed parse 错误，分析失败
}
// d == "9999-Dec-31"</screen></entry>
          </row>

        </tbody>
      </tgroup>
    </informaltable>
  </para>
  
  <para>_____________________________________________________</para>

  <anchor id="io_objects.format_date_parser" /> 
  <bridgehead renderas="sect3">Format Date Parser 格式化日期分析器</bridgehead>
  <para>The format date parser is the object that holds the strings for months and weekday names, as well as their abbreviations. Custom sets of strings can be set at construction time, or, the strings in an existing format_date_parser can be replaced through accessor functions. Both the constructor and the accessor functions take a vector of strings as their arguments.<sbr/>
  格式化日期分析器是一个保存有月份名和周日的全名及其缩写名的字符串的对象。可以在构造时对字符串进行定制，
  或者通过访问器函数替换已有 format_date_parser 中的字符串。构造函数以及访问器函数均以一个字符串 vector 作为其参数。</para>
  
  <bridgehead renderas="sect4">Format Date Parser Reference 格式化日期分析器的参考</bridgehead>
  The complete class reference can be found here: <classname alt="boost::date_time::format_date_parser">Doxygen Reference</classname><sbr/>
  完整的类参考请见：<classname alt="boost::date_time::format_date_parser">Doxygen参考</classname>

  <para>
    <bridgehead renderas="sect4">Format Date Parser Constructor 格式化日期分析器的构造函数</bridgehead>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry valign="top">Syntax 语法</entry>
            <entry>Description 说明</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top"><screen>format_date_parser(...)
                Parameters:
                string_type format
                std::locale</screen></entry>
            <entry>Creates a parser that uses the given format for parsing dates (in those functions where there is no format parameter). The names and abbreviations used are extracted from the given locale.<sbr/>
            创建一个分析器，以给定的格式来分析日期(在那些函数中没有格式化参数)。
            所使用的名字及缩写从给定的 locale 中取出。</entry>
          </row>

          <row>
            <entry valign="top"><screen>format_date_parser(...)
  Parameters:
    string_type format
    input_collection_type
    input_collection_type
    input_collection_type
    input_collection_type</screen></entry>
            <entry>Creates a parser from using the given components. The input_collection_type parameters are for: short month names, long month names, short weekday names, and long weekday names (in that order). These collections must contain values for every month and every weekday (begining with January and Sunday).<sbr/>
            创建一个分析器，使用给定的组件。参数 input_collection_type 为：短月份名，长月份名，短周日名，长周日名(按顺序)。
            这些 collections 必须包含每个月份和每个周日(从一月和星期天开始)的值。</entry>
          </row>

          <row>
            <entry valign="top"><screen>format_date_parser(...)
  Parameters:
    format_date_parser</screen></entry>
            <entry>Copy Constructor<sbr/>
            复制构造函数。</entry>
          </row>

        </tbody>
      </tgroup>
    </informaltable>
  </para>
  
  <para>
    <bridgehead renderas="sect4">Format Date Parser Accessors 格式化日期分析器的访问器</bridgehead>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry valign="top" morerows="1">Syntax 语法</entry>
            <entry>Description 说明</entry>
          </row>
          <row>
              <entry>Example 例子</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top" morerows="1"><screen>string_type format()</screen></entry>
            <entry>Returns the format that will be used when parsing dates in those functions where there is no format parameter.<sbr/>
            返回在那些不带格式化参数的函数中进行日期分析时所使用的格式。</entry>
          </row>
          <row>
            <entry><screen></screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>void format(string_type)</screen></entry>
            <entry>Sets the format that will be used when parsing dates in those functions where there is no format parameter.<sbr/>
            设置在那些不带格式化参数的函数中进行日期分析时所使用的格式。</entry>
          </row>
          <row>
            <entry><screen></screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>void short_month_names(...)
  Parameter:
    input_collection_type names</screen></entry>
            <entry>Replace the short month names used by the parser. The collection must contain values for each month, starting with January.<sbr/>
            替换分析器所用的短月份名。collection 必须包含每个月份的值，从一月开始。</entry>
          </row>
          <row>
            <entry><screen></screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>void long_month_names(...)
  Parameter:
    input_collection_type names</screen></entry>
            <entry>Replace the long month names used by the parser. The collection must contain values for each month, starting with January.<sbr/>
            替换分析器所用的长月份名。collection 必须包含每个月份的值，从一月开始。</entry>
          </row>
          <row>
            <entry><screen></screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>void short_weekday_names(...)
  Parameter:
    input_collection_type names</screen></entry>
            <entry>Replace the short weekday names used by the parser. The collection must contain values for each weekday, starting with Sunday.<sbr/>
            替换分析器所用的短周日名。collection 必须包含每个周日的值，从星期天开始。</entry>
          </row>
          <row>
            <entry><screen></screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>void long_weekday_names(...)
  Parameter:
    input_collection_type names</screen></entry>
            <entry>Replace the long weekday names used by the parser. The collection must contain values for each weekday, starting with Sunday.<sbr/>
            替换分析器所用的长周日名。collection 必须包含每个周日的值，从星期天开始。</entry>
          </row>
          <row>
            <entry><screen></screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>date_type parse_date(...)
  Parameters:
    string_type input
    string_type format 
    special_values_parser</screen></entry>
            <entry>Parse a date from the given input using the given format.<sbr/>
            以给定格式从给定的输入中分析日期。</entry>
          </row>
          <row>
            <entry><screen>string inp("2005-Apr-15");
string format("%Y-%b-%d");
date d;
d = parser.parse_date(inp, 
                      format,
                      svp);
// d == 2005-Apr-15</screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>date_type parse_date(...)
  Parameters:
    istreambuf_iterator input
    istreambuf_iterator str_end
    special_values_parser</screen></entry>
            <entry>Parse a date from stream using the parser's format.<sbr/>
            使用分析器的格式从流中分析日期。</entry>
          </row>
          <row>
            <entry><screen></screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>date_type parse_date(...)
  Parameters:
    istreambuf_iterator input
    istreambuf_iterator str_end
    string_type format
    special_values_parser</screen></entry>
            <entry>Parse a date from stream using the given format.<sbr/>
            使用给定格式从流中分析日期。</entry>
          </row>
          <row>
            <entry><screen>// stream holds 流中有 "2005-04-15"
string format("%Y-%m-%d");
date d;
d = parser.parse_date(itr, 
                      str_end, 
                      format,
                      svp);
// d == 2005-Apr-15</screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>month_type parse_month(...)
  Parameters:
    istreambuf_iterator input
    istreambuf_iterator str_end
    string_type format</screen></entry>
            <entry>Parses a month from stream using given format. Throws bad_month if unable to parse.<sbr/>
            使用给定的格式从流中分析月份。如果无法分析则抛出 bad_month.</entry>
          </row>
          <row>
            <entry><screen>// stream holds 流中有 "March"
string format("%B");
greg_month m;
m = parser.parse_month(itr, 
                       str_end, 
                       format);
// m == March</screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>day_type parse_day_of_month(...)
  Parameters:
    istreambuf_iterator input
    istreambuf_iterator str_end</screen></entry>
            <entry>Parses a day_of_month from stream. The day must appear as a two digit number (01-31), or a bad_day_of_month will be thrown.<sbr/>
            从流中分析一个 day_of_month. 日期必须以两位数字出现(01-31)，否则抛出 bad_day_of_month.</entry>
          </row>
          <row>
            <entry><screen>// stream holds 流中有 "01"
greg_day d;
d = parser.parse_day_of_month(itr, 
                       str_end);
// d == 1st</screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>day_type parse_var_day_of_month(...)
  Parameters:
    istreambuf_iterator input
    istreambuf_iterator str_end</screen></entry>
            <entry>Parses a day_of_month from stream. The day must appear as a one or two digit number (1-31), or a bad_day_of_month will be thrown.<sbr/>
            从流中分析一个 day_of_month. 日期必须以一位或两位数字出现(1-31)，否则抛出 bad_day_of_month.</entry>
          </row>
          <row>
            <entry><screen>// stream holds 流中有 "1"
greg_day d;
d = parser.parse_var_day_of_month(itr, 
                       str_end);
// d == 1st</screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>day_of_week_type parse_weekday(...)
  Parameters:
    istreambuf_iterator input
    istreambuf_iterator str_end
    string_type format</screen></entry>
            <entry>Parse a weekday from stream according to the given format. Throws a bad_weekday if unable to parse.<sbr/>
            以给定格式从流中分析一个周日。如果无法分析则抛出 bad_weekday.</entry>
          </row>
          <row>
            <entry><screen>// stream holds 流中有 "Tue"
string format("%a");
greg_weekday wd;
wd = parser.parse_weekday(itr, 
                          str_end, 
                          format);
// wd == Tuesday</screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>year_type parse_year(...)
  Parameters:
    istreambuf_iterator input
    istreambuf_iterator str_end
    string_type format</screen></entry>
            <entry>Parse a year from stream according to given format. Throws bad year if unable to parse.<sbr/>
            以给定格式从流中分析一个年份。如果无法分析则抛出 bad year.</entry>
          </row>
          <row>
            <entry><screen>// stream holds 流中有 "98"
string format("%y");
greg_year y;
y = parser.parse_year(itr, 
                      str_end, 
                      format);
// y == 1998</screen></entry>
          </row>

        </tbody>
      </tgroup>
    </informaltable>
  </para>
  
</section>
