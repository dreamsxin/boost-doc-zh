<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
"../../../tools/boostbook/dtd/boostbook.dtd">

<!-- Copyright (c) 2001-2005 CrystalClear Software, Inc.
     Subject to the Boost Software License, Version 1.0.
     (See accompanying file LICENSE_1_0.txt or  http://www.boost.org/LICENSE_1_0.txt)
-->

<section id="date_time.local_time.posix_time_zone">
  <title>Posix Time Zone  Posix时区</title>

  <link linkend="posix_time_zone_intro">Introduction 简介</link> --
  <link linkend="posix_time_zone_notes">Important Notes 重要说明</link> --
  <link linkend="posix_time_zone_header">Header 头文件</link> --
  <link linkend="posix_time_zone_constr">Construction 构造</link> --
  <link linkend="posix_time_zone_accessors">Accessors 访问器</link>

  <anchor id="posix_time_zone_intro" />
  <bridgehead renderas="sect3">Introduction 简介</bridgehead>
  <para>
    A posix_time_zone object is a set of data and rules that provide information about a time zone. Information such as the offset from UTC, it's name and abbreviation, as well as daylight savings rules, called <link linkend="date_time.local_time.dst_calc_rules">dst_calc_rules</link>. These rules are stored as a boost::shared_ptr&lt;dst_calc_rules&gt;.<sbr/>
    posix_time_zone 对象是一组数据和规则，它提供了与时区有关的信息。这些信息包括：距UTC的偏移、时区的名字和缩写，
    以及被称为 <link linkend="date_time.local_time.dst_calc_rules">dst_calc_rules</link> 的夏令时规则。
    这些规则被保存为一个 boost::shared_ptr&lt;dst_calc_rules&gt;. 
  </para>
  <para>
    As a convenience, a typedef for shared_ptr&lt;dst_calc_rules&gt; is provided.<sbr/>
    为方便使用，系统为 shared_ptr&lt;dst_calc_rules&gt; 提供了一个 typedef. 
    <programlisting>typedef boost::shared_ptr&lt;dst_calc_rules&gt; local_time::dst_calc_rule_ptr;</programlisting>
  </para>
  <para>
    A posix_time_zone is unique in that the object is created from a Posix time zone string (IEEE Std 1003.1). A POSIX time zone string takes the form of:<sbr/>
    posix_time_zone 是唯一的，因为该对象创建自一个 Posix 时区字符串(IEEE Std 1003.1)。POSIX 时区字符串的格式如下：
    <literallayout>
      "std offset dst [offset],start[/time],end[/time]" (w/no spaces 可带或不带空格).</literallayout>'std' specifies the abbrev of the time zone. 'offset' is the offset from UTC. 'dst' specifies the abbrev of the time zone during daylight savings time. The second offset is how many hours changed during DST. 'start' and 'end' are the dates when DST goes into (and out of) effect. 'offset' takes the form of: <sbr/>
      'std' 给出时区的缩写。'offset' 为距UTC的偏移。'dst' 给出时区在夏令时的缩写。第二个 offset 表示在DST时要改变的小时数。
      'start' 和 'end' 为开始(和结束)DST的日期。'offset' 的格式如下：
    <literallayout>
      [+|-]hh[:mm[:ss]] {h=0-23, m/s=0-59}</literallayout>'time' and 'offset' take the same form. 'start' and 'end' can be one of three forms: <sbr/>
      'time' 和 'offset' 具有相同的格式。'start' 和 'end' 可以是以下三种格式之一：
    <literallayout>
      Mm.w.d {month=1-12, week=1-5 (5 is always last  5总是表示最后一周), day=0-6} 
      Jn {n=1-365 Feb29 is never counted  Feb29不被计算} 
      n {n=0-365 Feb29 is counted in leap years  Feb29 在闰年时被计算}</literallayout>
  </para>
  <para>
    Exceptions will be thrown under the following conditions: <sbr/>
    在以下条件下将抛出异常：
    <itemizedlist>
      <listitem>An exception will be thrown for an invalid date spec (see <link linkend="date_time.gregorian.date_class">date class</link>).<sbr/>
      无效的日期表示(请见 <link linkend="date_time.gregorian.date_class">date 类</link>)会抛出异常。</listitem>
      <listitem>A boost::local_time::bad_offset exception will be thrown for:<sbr/>
      以下情况会抛出 boost::local_time::bad_offset 异常：</listitem>
      <listitem>A DST start or end offset that is negative or more than 24 hours.<sbr/>
      DST开始或结束的偏移量为负或大于24小时。</listitem>
      <listitem>A UTC zone that is greater than +12 or less than -12 hours.<sbr/>
      UTC时区大于 +12 或小于 -12 小时。</listitem>
      <listitem>A boost::local_time::bad_adjustment exception will be thrown for a DST adjustment that is 24 hours or more (positive or negative)<sbr/>
      DST调整量为24小时或更多(正的或负的)时将抛出 boost::local_time::bad_adjustment 异常。</listitem>
    </itemizedlist>
  </para>
  <para>As stated above, the 'offset' and '/time' portions of the string are not required. If they are not given they default to 01:00 for 'offset', and 02:00 for both occurrences of '/time'.<sbr/>
  如上所述，字符串的 'offset' 和 '/time' 部分不是必须的。如果没有给出这些部分，则缺省的 'offset' 为 01:00，两次 '/time' 均为 02:00。
  </para>
  <para>
    Some examples are:<sbr/>
    举例如下：
    <literallayout>
      "PST-8PDT01:00:00,M4.1.0/02:00:00,M10.1.0/02:00:00"
      "PST-8PDT,M4.1.0,M10.1.0"</literallayout>These two are actually the same specification (defaults were used in the second string). This zone lies eight hours west of GMT and makes a one hour shift forward during daylight savings time. Daylight savings for this zone starts on the first Sunday of April at 2am, and ends on the first Sunday of October at 2am.<sbr/>
      这两个字符串其实是相同的表示(第二个字符串中使用了缺省值)。该时区位于GMT以西8小时，且在夏令时要向前调整1个小时。
      该时区的夏令时开始于4月第一个星期天的2am, 结束于10月第一个星期天的2am. 
    <literallayout>
      "MST-7"</literallayout>This zone is as simple as it gets. This zone lies seven hours west of GMT and has no daylight savings.<sbr/>
      这个时区非常简单。它位于GMT以西7个小时且没有夏令时。
    <literallayout>
      "EST10EDT,M10.5.0,M3.5.0/03"</literallayout>This string describes the time zone for Sydney Australia. It lies ten hours east of GMT and makes a one hour shift forward during daylight savings. Being located in the southern hemisphere, daylight savings begins on the last Sunday in October at 2am and ends on the last Sunday in March at 3am.<sbr/>
      该字符串表示了澳大利亚悉尼的时区。它位于GMT以东10个小时，其夏令时要向前调整1个小时。由于它位于南半球，
      所以夏令时开始于10月最后一个星期天的2am，结束于3月最后一个星期天的3am.
    <literallayout>
      "FST+3FDT02:00,J60/00,J304/02"</literallayout>This specification describes a fictitious zone that lies three hours east of GMT. It makes a two hour shift forward for daylight savings which begins on March 1st at midnight, and ends on October 31st at 2am. The 'J' designation in the start/end specs signifies that counting starts at one and February 29th is never counted.<sbr/>
      它表示了一个位于GMT以东3个小时的假想的时区。其夏令时要向前调整2个小时，开始于3月1日的午夜，
      结束于10月31日的2am. 其中的 'J' 指明 start/end 的表示从1起计且不计2月29日。
    <literallayout>
      "FST+3FDT,59,304"</literallayout>This specification is significant because of the '59'. The lack of 'J' for the start and end dates, indicates that the Julian day-count begins at zero and ends at 365. If you do the math, you'll see that allows for a total of 366 days. This is fine in leap years, but in non-leap years '59' (Feb-29) does not exist. This will construct a valid posix_time_zone object but an exception will be thrown if the date of '59' is accessed in a non-leap year. Ex:<sbr/>
      这个表示中的'59'尤其重要。在 start 和 end 日期的表示中没有 'J', 表示天数的计数从0起计且结束于365. 
      如果你算一下，可以算出总天数为366天。如果是闰年这没有问题，但是在非闰年就不存在 '59' (Feb-29) 这天。
      所以，它将构造一个有效的 posix_time_zone 对象，但是如果在非闰年访问 '59' 这天将会抛出异常。如：
    <programlisting>posix_time_zone leap_day(std::string("FST+3FDT,59,304"));
leap_day.dst_local_start_time(2004); // ok
leap_day.dst_local_start_time(2003); // Exception thrown 抛出异常</programlisting>
  </para>
  <para>
    The posix_time_zone objects are used via a boost::shared_ptr&lt;local_time::time_zone_base&gt;. As a convenience, a typedef for boost::shared_ptr&lt;local_time::time_zone_base&gt; is provided: <sbr/>
    posix_time_zone 对象是通过一个 boost::shared_ptr&lt;local_time::time_zone_base&gt; 被使用的。
    为方便使用，系统提供了对 boost::shared_ptr&lt;local_time::time_zone_base&gt; 的 typedef:
    <programlisting>typedef boost::shared_ptr&lt;time_zone_base&gt; local_time::time_zone_ptr;</programlisting>
  </para>
  <para>
    See <link linkend="date_time.examples.simple_time_zone">Simple time zone</link> for a side by side example of time_zone and posix_time_zone usage.<sbr/>
    有关 time_zone 和 posix_time_zone 的用法的例子，请见 <link linkend="date_time.examples.simple_time_zone">简单的时区</link>。
  </para>
  
  <anchor id="posix_time_zone_notes" />
  <bridgehead renderas="sect3">Important Notes 重要说明</bridgehead>
  <itemizedlist>
    <listitem>posix_time_zone objects use the standard and daylight savings abbreviations in place of the full names (see <link linkend="posix_time_zone_accessors">Accessors</link> below).<sbr/>
    posix_time_zone 对象使用标准的和夏令时的缩写来代替全称(请见后面的 
    <link linkend="posix_time_zone_accessors">访问器</link>)。</listitem>
    <listitem>'Jn' and 'n' date specifications can not be mixed in a specification string. Ex: "FST+3FDT,59,J304" <sbr/>
    'Jn' 和 'n' 日期表示法不能在一个字符串中混用。如："FST+3FDT,59,J304"</listitem>
    <listitem>'n' date specification of 59 represents Feb-29. Do not attempt to access in a non-leap year or an exception will be thrown.<sbr/>
    'n' 日期表示法中的 59 表示 Feb-29. 不要在非闰年时访问它，否则将抛出异常。</listitem>
  </itemizedlist>

  <anchor id="posix_time_zone_header" />
  <bridgehead renderas="sect3">Header 头文件</bridgehead>
  <para>
    The inclusion of a single header will bring in all boost::local_time types, functions, and IO operators.<sbr/>
    包含单个头文件即可引入所有 boost::local_time 类型、函数和 IO 操作符。
    <programlisting>#include "boost/date_time/local_time/local_time.hpp"</programlisting>
  </para>

  <anchor id="posix_time_zone_constr" />
  <bridgehead renderas="sect3">Construction 构造</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Syntax 语法</entry>
            <entry>Example 例子</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top"><screen>posix_time_zone(std::string)</screen></entry>
            <entry><screen>std::string nyc("EST-5EDT,M4.1.0,M10.5.0");
time_zone_ptr zone(new posix_time_zone(nyc));</screen>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </para>

  <anchor id="posix_time_zone_accessors" />
  <bridgehead renderas="sect3">Accessors 访问器</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry valign="top" morerows="1">Syntax 语法</entry>
            <entry>Description 说明</entry>
          </row>
          <row>
            <entry>Example 例子</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top" morerows="1"><screen>std::string dst_zone_abbrev()</screen></entry>
            <entry>Returns the daylight savings abbreviation for the represented time zone.<sbr/>
            返回被表示时区的夏令时缩写。</entry>
          </row>
          <row>
            <entry><screen>nyc_zone_sh_ptr-&gt;dst_zone_abbrev(); // "EDT"</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>std::string std_zone_abbrev()</screen></entry>
            <entry>Returns the standard abbreviation for the represented time zone.<sbr/>
            返回被表示时区的标准缩写。</entry>
          </row>
          <row>
            <entry><screen>nyc_zone_sh_ptr-&gt;std_zone_abbrev(); // "EST"</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>std::string dst_zone_name()</screen></entry>
            <entry>Returns the daylight savings ABBREVIATION for the represented time zone.<sbr/>
            返回被表示时区的夏令时缩写。</entry>
          </row>
          <row>
            <entry><screen>nyc_zone_sh_ptr-&gt;dst_zone_name(); // "EDT"</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>std::string std_zone_name()</screen></entry>
            <entry>Returns the standard ABBREVIATION for the represented time zone.<sbr/>
            返回被表示时区的标准缩写。</entry>
          </row>
          <row>
            <entry><screen>nyc_zone_sh_ptr-&gt;std_zone_name(); // "EST"</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>bool has_dst()</screen></entry>
            <entry>Returns true when time_zone's shared_ptr to dst_calc_rules is not NULL.<sbr/>
            返回 true 如果 time_zone 中指向 dst_calc_rules 的 shared_ptr 非空。</entry>
          </row>
          <row>
            <entry><screen>nyc_zone_sh_ptr-&gt;has_dst(); // true
phx_zone_sh_ptr-&gt;has_dst(); // false</screen>
            </entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>
ptime dst_local_start_time(greg_year)</screen></entry>
            <entry>The date and time daylight savings time begins in given year. Returns not_a_date_time if this zone has no daylight savings.<sbr/>
            给定年份的夏令时开始日期和时间。如果该时区没有夏令时，则返回 not_a_date_time.</entry>
          </row>
          <row>
            <entry><screen>nyc_zone_sh_ptr-&gt;dst_local_start_time(2004);
// 2004-Apr-04 02:00</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>
ptime dst_local_end_time(greg_year)</screen></entry>
            <entry>The date and time daylight savings time ends in given year. Returns not_a_date_time if this zone has no daylight savings.<sbr/>
            给定年份的夏令时结束日期和时间。如果该时区没有夏令时，则返回 not_a_date_time.</entry>
          </row>
          <row>
            <entry><screen>nyc_zone_sh_ptr-&gt;dst_local_end_time(2004);
// 2004-Oct-31 02:00</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>
time_duration base_utc_offset()</screen></entry>
            <entry>The amount of time offset from UTC (typically in hours).<sbr/>
            距UTC的偏移量(通常以小时数表示)。</entry>
          </row>
          <row>
            <entry><screen>nyc_zone_sh_ptr-&gt;base_utc_offset(); // -05:00</screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>posix_time::time_duration dst_offset()</screen></entry>
            <entry>The amount of time shifted during daylight savings.<sbr/>
            夏令时的时间偏移量。</entry>
          </row>
          <row>
            <entry><screen>nyc_zone_sh_ptr-&gt;dst_offset(); // 01:00</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>std::string to_posix_string()</screen></entry>
            <entry>Returns a posix time zone string representation of this time_zone_base object. Depending on how the time_zone object was created, the date-spec format of the string will be in either 'M' notation or 'n' notation. Every possible date-spec that can be represented in 'J' notation can also be represented in 'n' notation. The reverse is not true so only 'n' notation is used for these types of date-specs. For a detailed description of a posix time zone string see <link linkend="date_time.local_time.posix_time_zone">posix_time_zone</link>.<sbr/>
            返回该 time_zone_base 对象的 posix 时区字符串表示。取决于 time_zone 对象是如何创建的，
            返回的字符串的日期表示格式可能是 'M' 格式或 'n' 格式。每个可以用 'J' 格式来表示的日期都可以表示为 'n' 格式。
            反之则不然，所以在这些日期表示法中只使用了 'n' 格式。有关 posix 时区字符串的详细描述，
            请见 <link linkend="date_time.local_time.posix_time_zone">posix_time_zone</link>.</entry>
          </row>
          <row>
            <entry><screen>nyc_zone_sh_ptr-&gt;to_posix_string();
// "EST-05EDT+01,M4.1.0/02:00,M10.5.0/02:00"
phx_zone_sh_ptr-&gt;to_posix_string();
// "MST-07"
            </screen></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </para>

</section>
