<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN" 
"../../../tools/boostbook/dtd/boostbook.dtd">

<!-- Copyright (c) 2001-2006 CrystalClear Software, Inc.
     Subject to the Boost Software License, Version 1.0. 
     (See accompanying file LICENSE_1_0.txt or  http://www.boost.org/LICENSE_1_0.txt)
-->

<section id="date_time.gregorian.date_period">
  <title>Date Period 日期段</title>

  <link linkend="period_intro">Introduction 简介</link> --
  <link linkend="period_header">Header 头文件</link> --
  <link linkend="period_construction">Construction 构造</link> --
  <link linkend="date_period_mutators">Mutators 修改器</link> --
  <link linkend="period_accessors">Accessors 访问器</link> --
  <link linkend="period_convert_to_string">Convert to String 转换为字符串</link> --
  <link linkend="period_operators">Operators 操作符</link>

  <anchor id="period_intro" />
  <bridgehead renderas="sect3">Introduction 简介</bridgehead>
  <para>
    The class boost::gregorian::date_period provides direct representation for ranges between two dates. Periods provide the ability to simplify some types of calculations by simplifying the conditional logic of the program. For example, testing if a date is within an irregular schedule such as a weekend or holiday can be accomplished using collections of date periods. This is facilitated by several methods that allow evaluation if a date_period intersects with another date period, and to generate the period resulting from the intersection. The <link linkend="date_time.examples.date_period_calc">date period calculation Example</link> provides an example of this.<sbr/>
    类 boost::gregorian::date_period 提供了对两个日期之间的范围的直接表示。
    日期段可以通过简化程序的条件判断逻辑来简化一些计算类型。
    例如，测试某个日期是否在某个没有规律的时间表如周末或假日中，就可以用一组日期段来实现。
    有多种方法来判断一个 date_period 是否与另一个 date period 交叉，以及生成重叠的日期段。
    <link linkend="date_time.examples.date_period_calc">日期段计算例子</link> 一节中提供了这个例子。
  </para>
  <para>
    A period that is created with beginning and end points being equal, or with a duration of zero, is known as a zero length period. Zero length periods are considered invalid (it is perfectly legal to construct an invalid period). For these periods, the <code>last</code> point will always be one unit less that the <code>begin</code> point.<sbr/>
    由相同的开始日期和结束日期所创建的日期段，称为零长度日期段。零长度日期段被认为是无效的
    (构造一个无效的日期段是完全合法的)。对于这些日期段，<code>last</code> 点总是比 <code>begin</code> 小一个单元。
  </para>
  <para>
    Date periods used in combination with infinity values have the ability to represent complex concepts such as 'until further notice'. <sbr/>
    日期段与无限值结合使用可以表示象 '直至另行通知为止' 这样的复杂概念。
  </para>

  <anchor id="period_header" />
  <bridgehead renderas="sect3">Header 头文件</bridgehead>
  <para>
    <programlisting>#include "boost/date_time/gregorian/gregorian.hpp" //include all types plus i/o 包含所有类型和i/o
or
#include "boost/date_time/gregorian/gregorian_types.hpp" //no i/o just types 只有类型没有i/o</programlisting>
  </para>

  <anchor id="period_construction" />
  <bridgehead renderas="sect3">Construction 构造</bridgehead>
  <informaltable frame="all">
    <tgroup cols="2">
      <thead>
	<row>
	  <entry valign="top" morerows="1">Syntax 语法</entry>
	  <entry>Description 说明</entry>
	</row>
	<row>
	  <entry>Example 例子</entry>
	</row>
      </thead>
      <tbody>
        <row>
	  <entry valign="top" morerows="1"><screen>date_period(date, date)</screen></entry>
	  <entry>Create a period as [begin, end). If end is &lt;= begin then the period will be invalid.<sbr/>
      创建一个 [begin, end) 日期段。如果 end &lt;= begin 则日期段无效。</entry>
	</row>
	<row>
          <entry><screen>date_period dp(date(2002,Jan,10),
               date(2002,Jan,12));</screen></entry>
        </row>

	<row>
	  <entry valign="top" morerows="1"><screen>date_period(date, days)</screen></entry>
	  <entry>Create a period as [begin, begin+len) where end point would be begin+len. If len is &lt;= zero then the period will be defined as invalid.<sbr/>
      创建一个 [begin, begin+len) 日期段，其中 end 点为 begin+len. 如果 len &lt;= 0 则日期段定义为无效。</entry>
	</row>
	<row>
          <entry><screen>date_period dp(date(2002,Jan,10),
               days(2));</screen></entry>
        </row>
        
        <row>
	  <entry valign="top" morerows="1"><screen>date_period(date_period)</screen></entry>
	  <entry> Copy constructor<sbr/>
      复制构造函数</entry>
	</row>
	<row>
	  <entry><screen>date_period dp1(dp);</screen></entry>
	</row>
      </tbody>
    </tgroup>
  </informaltable>


  <anchor id="date_period_mutators" />
  <bridgehead renderas="sect3">Mutators 修改器</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry valign="top" morerows="1">Syntax 语法</entry>
	    <entry>Description 说明</entry>
	  </row>
	  <row>
	    <entry>Example 例子</entry>
	  </row>
	</thead>
	<tbody>
          <row>
	    <entry valign="top" morerows="1"><screen>date_period shift(days)</screen></entry>
	    <entry>Add duration to both begin and end.<sbr/>
        同时为 begin 和 end 加上偏移量。</entry>
	  </row>
	  <row>
	    <entry>
              <screen>
date_period dp(date(2005,Jan,1), days(3));
dp.shift(days(3)); 
// dp == 2005-Jan-04 to 2005-Jan-07
             </screen>
	    </entry>
	  </row>

          <row>
	    <entry valign="top" morerows="1"><screen>date_period expand(days)</screen></entry>
	    <entry>Subtract duration from begin and add duration to end.<sbr/>
        从 begin 减去日期长度而为 end 加上日期长度。</entry>
	  </row>
	  <row>
	    <entry>
              <screen>
date_period dp(date(2005,Jan,2), days(2));
dp.expand(days(1)); 
// dp == 2005-Jan-01 to 2005-Jan-04
              </screen>
            </entry>
	  </row>

	</tbody>
      </tgroup>
    </informaltable>
  </para>


  <anchor id="period_accessors" />
  <bridgehead renderas="sect3">Accessors 访问器</bridgehead>
  <informaltable frame="all">
    <tgroup cols="2">
      <thead>
	<row>
	  <entry valign="top" morerows="1">Syntax 语法</entry>
	  <entry>Description 说明</entry>
	</row>
	<row>
	  <entry>Example 例子</entry>
	</row>
      </thead>
      <tbody>
        <row>
	  <entry valign="top" morerows="1"><screen>date begin()</screen></entry>
	  <entry> Return first day of period.<sbr/>
      返回日期段的第一天。</entry>
	</row>
	<row>
          <entry><screen>date_period dp(date(2002,Jan,1),
               date(2002,Jan,10));
dp.begin() --> 2002-Jan-01</screen>
	  </entry>
        </row>

	<row>
	  <entry valign="top" morerows="1"><screen>date last()</screen></entry>
	  <entry>Return last date in the period<sbr/>
      返回日期段的最后一天。</entry>
	</row>
	<row>
          <entry><screen>date_period dp(date(2002,Jan,1),
               date(2002,Jan,10));
dp.last() --> 2002-Jan-09</screen>
	  </entry>
        </row>
        
	<row>
	  <entry valign="top" morerows="1"><screen>date end()</screen></entry>
	  <entry>Return one past the last in period<sbr/>
      返回日期段最后一天后的一天。</entry>
	</row>
	<row>
          <entry><screen>date_period dp(date(2002,Jan,1),
               date(2002,Jan,10));
dp.end() --> 2002-Jan-10</screen>
	  </entry>
        </row>
        
	<row>
	  <entry valign="top" morerows="1"><screen>days length()</screen></entry>
	  <entry>Return the length of the date_period<sbr/>
      返回 date_period 的长度。</entry>
	</row>
	<row>
          <entry><screen>date_period dp(date(2002,Jan,1),
               days(2));
dp.length() --> 2</screen>
	  </entry>
        </row>
        
	<row>
	  <entry valign="top" morerows="1"><screen>bool is_null()</screen></entry>
	  <entry>True if period is not well formed. eg: end less than or equal to begin.<sbr/>
      返回 True 如果日期段是无效的。如：end 小于或等于 begin.</entry>
	</row>
	<row>
          <entry><screen>date_period dp(date(2002,Jan,10),
               date(2002,Jan,1));
dp.begin() --> true</screen>
	  </entry>
        </row>
        
	<row>
	  <entry valign="top" morerows="1"><screen>bool contains(date)</screen></entry>
	  <entry>True if date is within the period. Zero length periods cannot contain any points<sbr/>
      返回 True 如果 date 包含在日期段中。零长度日期段不包含任何日期。</entry>
	</row>
	<row>
          <entry><screen>date d(2002,Jan,1);
date_period dp(d, date(2002,Jan,10));
dp.contains(date(2002,Jan,2));// true
date_period dp2(d, d);
dp.contains(date(2002,Jan,1));// false</screen>
	  </entry>
        </row>
        
	<row>
	  <entry valign="top" morerows="1"><screen>bool contains(date_period)</screen></entry>
	  <entry>True if date period is within the period<sbr/>
      返回 True 如果 date period 包含在日期段中。</entry>
	</row>
	<row>
          <entry><screen>date_period dp1(date(2002,Jan,1),
                date(2002,Jan,10));
date_period dp2(date(2002,Jan,2),
                date(2002,Jan,3));
dp1.contains(dp2) --> true
dp2.contains(dp1) --> false</screen>
	  </entry>
        </row>
        
	<row>
	  <entry valign="top" morerows="1"><screen>bool intersects(date_period)</screen></entry>
	  <entry>True if periods overlap<sbr/>
      返回 True 如果两个日期段交叉。</entry>
	</row>
	<row>
          <entry><screen>date_period dp1(date(2002,Jan,1),
               date(2002,Jan,10));
date_period dp2(date(2002,Jan,2),
               date(2002,Jan,3));
dp2.intersects(dp1) --> true</screen>
	  </entry>
        </row>
        
	<row>
          <entry valign="top" morerows="1"><screen>date_period intersection(date_period)</screen></entry>
	  <entry>Calculate the intersection of 2 periods. Null if no intersection.<sbr/>
      计算两个日期段的交集。返回 Null 如果没有交叉。</entry>
	</row>
	<row>
          <entry><screen>date_period dp1(date(2002,Jan,1),
                date(2002,Jan,10));
date_period dp2(date(2002,Jan,2),
                date(2002,Jan,3));
dp2.intersection(dp1) --> dp2</screen>
	  </entry>
        </row>
        
	<row>
          <entry valign="top" morerows="1"><screen>date_period is_adjacent(date_period)</screen></entry>
	  <entry>Check if two periods are adjacent, but not overlapping.<sbr/>
      检验两个日期段是否相邻且不交叉。</entry>
	</row>
	<row>
          <entry><screen>date_period dp1(date(2002,Jan,1),
                date(2002,Jan,3));
date_period dp2(date(2002,Jan,3),
                date(2002,Jan,10));
dp2.is_adjacent(dp1) --> true</screen>
	  </entry>
        </row>
        
	<row>
	  <entry valign="top" morerows="1"><screen>date_period is_after(date)</screen></entry>
	  <entry>Determine the period is after a given date.<sbr/>
      判断日期段是否在给定的 date 之后。</entry>
	</row>
	<row>
          <entry><screen>date_period dp1(date(2002,Jan,10),
                date(2002,Jan,30));
date d(2002,Jan,3);
dp1.is_after(d) --> true</screen>
	  </entry>
        </row>
        
	<row>
	  <entry valign="top" morerows="1"><screen>date_period is_before(date)</screen></entry>
	  <entry>Determine the period is before a given date.<sbr/>
      判断日期段是否在给定的 date 之前。</entry>
	</row>
	<row>
          <entry><screen>date_period dp1(date(2002,Jan,1),
                date(2002,Jan,3));
date d(2002,Jan,10);
dp1.is_before(d) --> true</screen>
	  </entry>
        </row>
        
	<row>
	  <entry valign="top" morerows="1"><screen>date_period merge(date_period)</screen></entry>
	  <entry>Returns union of two periods. Null if no intersection.<sbr/>
      返回两个日期段的并集。返回 Null 如果交叉。</entry>
	</row>
	<row>
          <entry><screen>date_period dp1(date(2002,Jan,1),
                date(2002,Jan,10));
date_period dp2(date(2002,Jan,9),
                date(2002,Jan,31));
dp2.merge(dp1)
// 2002-Jan-01/2002-Jan-31</screen>
	  </entry>
        </row>
        
	<row>
	  <entry valign="top" morerows="1"><screen>date_period span(date_period)</screen></entry>
	  <entry>Combines two periods and any gap between them such that begin = min(p1.begin, p2.begin) and end = max(p1.end , p2.end)<sbr/>
      合并两个日期段及它们之间的间隔，相当于 begin = min(p1.begin, p2.begin) 且 end = max(p1.end , p2.end)</entry>
	</row>
	<row>
          <entry><screen>
date_period dp1(date(2002,Jan,1),
                date(2002,Jan,5));
date_period dp2(date(2002,Jan,9),
                date(2002,Jan,31));
dp2.span(dp1); // 2002-Jan-01/2002-Jan-31</screen>
	  </entry>
        </row>
        
        <row>
	  <entry valign="top" morerows="1"><screen>date_period shift(days)</screen></entry>
	  <entry>Add duration to both begin and end.<sbr/>
      同时为 begin 和 end 加上偏移量。</entry>
	</row>
	<row>
          <entry><screen>date_period dp1(date(2002,Jan,1),
                date(2002,Jan,10));
dp1.shift(days(1));
// 2002-Jan-02/2002-Jan-11</screen>
	  </entry>
	</row>

        <row>
	  <entry valign="top" morerows="1"><screen>date_period expand(days)</screen></entry>
	  <entry>Subtract duration from begin and add duration to end.<sbr/>
      从 begin 减去日期长度而为 end 加上日期长度。</entry>
	</row>
	<row>
          <entry><screen>date_period dp1(date(2002,Jan,4),
                date(2002,Jan,10));
dp1.expand(days(2));
// 2002-Jan-02/2002-Jan-12</screen>
	  </entry>
	</row>
      </tbody>
    </tgroup>
  </informaltable>


  <anchor id="period_convert_to_string" />
  <bridgehead renderas="sect3">Convert to String 转换为字符串</bridgehead>
  <informaltable frame="all">
    <tgroup cols="2">
      <thead>
	<row>
	  <entry valign="top" morerows="1">Syntax 语法</entry>
          <entry>Description 说明</entry>
        </row>
        <row>
	  <entry>Example 例子</entry>
	</row>
      </thead>
      <tbody>
        <row>
	  <entry valign="top" morerows="1"><screen>std::string to_simple_string(date_period dp)</screen></entry>
          <entry>To <code>[YYYY-mmm-DD/YYYY-mmm-DD]</code> string where <code>mmm</code> is 3 char month name.<sbr/>
          转换为 <code>[YYYY-mmm-DD/YYYY-mmm-DD]</code> 字符串，其中 <code>mmm</code> 为3字符的月份名。</entry>
        </row>
        <row>
	  <entry><screen>[2002-Jan-01/2002-Jan-31]</screen></entry>
	</row>
      </tbody>
    </tgroup>
  </informaltable>


  <anchor id="period_operators" />
  <bridgehead renderas="sect3">Operators 操作符</bridgehead>
  <informaltable frame="all">
    <tgroup cols="2">
      <thead>
	<row>
	  <entry valign="top" morerows="1">Syntax 语法</entry>
	  <entry>Description 说明</entry>
	</row>
	<row>
	  <entry>Example 例子</entry>
	</row>
      </thead>
      <tbody>
        <row>
	  <entry valign="top" morerows="1"><screen>operator&lt;&lt;</screen></entry>
	  <entry>ostream operator for date_period. Uses facet to format time points. Typical output: [2002-Jan-01/2002-Jan-31].<sbr/>
      date_period 的流输出操作符。使用 facet 来格式化时间点。典型的输出：[2002-Jan-01/2002-Jan-31].</entry>
	</row>
	<row>
	  <entry><screen>std::cout &lt;&lt; dp &lt;&lt; std::endl;</screen></entry>
        </row>

        <row>
	  <entry valign="top" morerows="1"><screen>operator&gt;&gt;</screen></entry>
	  <entry>istream operator for date_period. Uses facet to parse time points.<sbr/>
      date_period 的流输入操作符。使用 facet 来分析时间点。</entry>
	</row>
	<row>
	  <entry><screen>"[2002-Jan-01/2002-Jan-31]"</screen></entry>
        </row>

	<row>
          <entry valign="top" morerows="1"><screen>operator==, operator!=,
operator&gt;, operator&lt;</screen>
	  </entry>
	  <entry>A full complement of comparison operators<sbr/>
      完整的比较操作符。</entry>
	</row>
	<row>
	  <entry><screen>dp1 == dp2, etc</screen></entry>
        </row>
        
	<row>
	  <entry valign="top" morerows="1"><screen>operator&lt;</screen></entry>
	  <entry>True if dp1.end() less than dp2.begin()<sbr/>
      返回 True 如果 dp1.end() 小于 dp2.begin()</entry>
	</row>
	<row>
	  <entry><screen>dp1 &lt; dp2, etc</screen></entry>
        </row>
        
        <row>
	  <entry valign="top" morerows="1"><screen>operator&gt;</screen></entry>
	  <entry>True if dp1.begin() greater than dp2.end()<sbr/>
      返回 True 如果 dp1.begin() 大于 dp2.end()</entry>
	</row>
	<row>
	  <entry><screen>dp1 &gt; dp2, etc</screen></entry>
	</row>
      </tbody>
    </tgroup>
  </informaltable>

</section>
