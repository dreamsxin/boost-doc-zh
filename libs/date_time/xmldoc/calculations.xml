<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN" 
"../../../tools/boostbook/dtd/boostbook.dtd">

<!-- Copyright (c) 2001-2004 CrystalClear Software, Inc.
     Subject to the Boost Software License, Version 1.0. 
     (See accompanying file LICENSE_1_0.txt or  http://www.boost.org/LICENSE_1_0.txt)
-->

<section id="date_time.calculations">
  <title>Calculations 运算</title>

  <para>
    <link linkend="timepoints">Timepoints 时间点</link> -- 
    <link linkend="durations">Durations 时长</link> -- 
    <link linkend="intervals">Intervals (Periods) 时间间隔(时间段) </link> -- 
    <link linkend="special_value_handling">Special Value Handling 特殊值的处理 </link>
  </para>
  <anchor id="timepoints" />
  <bridgehead renderas="sect3">Timepoints 时间点</bridgehead>
  <para>
    This section describes some of basic arithmetic rules that can be performed with timepoints. In general, Timepoints support basic arithmetic in conjunction with Durations as follows:<sbr/>
    本节描述一些用于时间点的基本算术规则。通常，时间点支持以下与时长的基本算术操作：
    <programlisting>
      Timepoint + Duration  --> Timepoint
      Timepoint - Duration  --> Timepoint
      Timepoint - Timepoint --> Duration
    </programlisting>
    Unlike regular numeric types, the following operations are undefined:<sbr/>
    和普通的算术类型不同，以下操作是未定义的：
    <programlisting>
      Duration + Timepoint  --> Undefined
      Duration - Timepoint  --> Undefined
      Timepoint + Timepoint --> Undefined
    </programlisting>
  </para>
  <anchor id="durations" />
  <bridgehead renderas="sect3">Durations 时长</bridgehead>
  <para>
    Durations represent a length of time and can have positive and negative values. It is frequently useful to be able to perform calculations with other durations and with simple integral values. The following describes these calculations:<sbr/>
    时长表示一段时间的长度，它的值可正可负。它通常会与另一个时长或者简单的整数值进行运算。以下描述了这些运算：
    <programlisting>
      Duration + Duration  --> Duration
      Duration - Duration  --> Duration
      
      Duration * Integer   --> Duration
      Integer  * Duration  --> Duration
      Duration / Integer   --> Duration  (Integer Division rules 整数除法规则)
    </programlisting>
  </para>
  <anchor id="intervals" />
  <bridgehead renderas="sect3">Intervals (Periods) 时间间隔(时间段) </bridgehead>
  <para>
    Interval logic is extremely useful for simplifying many 'calculations' for dates and times. The following describes the operations provided by periods which are based on half-open range. The following operations calculate new time periods based on two input time periods: <sbr/>
    时间间隔对于简化日期和时间的很多'运算'是非常有用的。下面描述了基于半开区间的时间段所提供的操作。
    以下操作基于两个输入时间段计算得到新的时间段：
    <programlisting>
Timeperiod intersection Timeperiod --> Timeperiod 
  (null interval if no intersection 如果不相交则为空时间段)
Timeperiod merge Timeperiod        --> Timeperiod 
  (null interval if no intersection 如果不相交则为空时间段)
Timeperiod shift Duration          --> Timeperiod 
  (shift start and end by duration amount 将开始时间点和结束时间点位移一定时长)
    </programlisting>
    In addition, periods support various queries that calculate boolean results. The first set is caluculations with other time periods:<sbr/>
    另外，时间段支持多种查询操作，返回布尔类型的结果。第一组操作是与另一个时间段进行运算：
    <programlisting>
  Timeperiod == Timeperiod           --> bool
  Timeperiod &lt; Timeperiod            --> bool (true if lhs.last &lt;= rhs.begin)
  Timeperiod intersects Timeperiod   --> bool
  Timeperiod contains Timeperiod     --> bool
  Timeperiod is_adjacent Timeperiod  --> bool 
    </programlisting>
    The following calculations are performed versus the Timepoint.<sbr/>
    以下是与时间点之间的运算：
    <programlisting>
  Timeperiod contains Timepoint      --> bool
  Timeperiod is_before Timepoint     --> bool
  Timeperiod is_after Timepoint      --> bool 
    </programlisting>
  </para>
  <anchor id="special_value_handling" />
  <bridgehead renderas="sect3">Special Value Handling 特殊值的处理 </bridgehead>
  <para>
    For many temporal problems it is useful for Duration and Timepoint types to support special values such as Not A Date Time (NADT) and infinity. In general special values such as Not A Date Time (NADT) and infinity should follow rules like floating point values. Note that it should be possible to configure NADT based systems to throw an exception instead of result in NADT. <sbr/>
    让时长和时间点类型支持象无效日期时间(NADT)和无限时长这样的特殊值，对于很多时间运算的问题来说是很有用的。通常，
    象无效日期时间(NADT)和无限时长这样的特殊值同样遵循浮点数的规则。注意，你可以将系统配置为以抛出异常来替代 NADT 的结果。
    <programlisting>
  Timepoint(NADT) + Duration --> Timepoint(NADT)
  Timepoint(&#8734;) + Duration    --> Timepoint(&#8734;)
  Timepoint + Duration(&#8734;)    --> Timepoint(&#8734;)
  Timepoint - Duration(&#8734;)    --> Timepoint(-&#8734;)
    </programlisting>
    When performing operations on both positive and negative infinities, the library will produce results consistent with the following. <sbr/>
    同时对正无限和负无限进行运算时，本库将产生以下结果：
    <programlisting>
  Timepoint(+&#8734;) + Duration(-&#8734;) --> NADT
  Duration(+&#8734;) + Duration(-&#8734;)  --> NADT
  Duration(&#177;&#8734;) * Zero          --> NADT
  
  Duration(&#8734;) * Integer(Not Zero) --> Duration(&#8734;)
  Duration(+&#8734;) * -Integer         --> Duration(-&#8734;)
  Duration(&#8734;) / Integer           --> Duration(&#8734;)
    </programlisting>
  </para>
</section>
