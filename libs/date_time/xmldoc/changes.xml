<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN" 
"../../../tools/boostbook/dtd/boostbook.dtd">

<!-- Copyright (c) 2001-2006 CrystalClear Software, Inc.
     Subject to the Boost Software License, Version 1.0. 
     (See accompanying file LICENSE_1_0.txt or  http://www.boost.org/LICENSE_1_0.txt)
-->

<section id="date_time.changes">
  <title>Change History 变更历史</title>

  <!-- if each new change tgroup has a "Bug Fix" as the first "Type", the columns will line up nicely -->

  <bridgehead renderas="sect3">Changes from Boost 1.41 to 1.44 (date_time 1.08 to 1.09)</bridgehead>
  <informaltable frame="all">
    <tgroup cols="2">
      <thead>
        <row>
          <entry>Type 类型</entry>
          <entry>Description 说明</entry>
        </row>
      </thead>
      <tbody>

        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>
            The "%T" and "%R" format specifiers are now processed by the library rather than underlying standard facet.
            This fixes the cases when the placeholders are not supported by the facet
            (<ulink url="https://svn.boost.org/trac/boost/ticket/3876">#3876</ulink>).<sbr/>
            "%T" 和 "%R" 格式化符由库而不是底层的标准 facet 来处理。它修正了当 facet 不支持占位符时的情形
            (<ulink url="https://svn.boost.org/trac/boost/ticket/3876">#3876</ulink>)。
          </entry>
        </row>

      </tbody>
    </tgroup>
  </informaltable>

  <bridgehead renderas="sect3">Changes from Boost 1.40 to 1.41 (date_time 1.07 to 1.08)</bridgehead>
  <informaltable frame="all">
    <tgroup cols="2">
      <thead>
        <row>
          <entry>Type 类型</entry>
          <entry>Description 说明</entry>
        </row>
      </thead>
      <tbody>

        <row>
          <entry>Change 变更</entry>
          <entry>
            The default format for time durations is now "%-%O:%M:%S%F" instead of "%-%H:%M:%S%F" that was used previously. In order to retain the old behavior, the format string has to be specified explicitly during the time IO facet construction (<ulink url="https://svn.boost.org/trac/boost/ticket/1861">#1861</ulink>).<sbr/>
            时间长度的缺省格式现在变为 "%-%O:%M:%S%F"，代替了以前的 "%-%H:%M:%S%F"。为了保留原有的行为，
            格式化串必须在时间的 IO facet 构造期间明确指定(<ulink url="https://svn.boost.org/trac/boost/ticket/1861">#1861</ulink>)。
          </entry>
        </row>

        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>
            Gregorian dates now use 32-bit integer type internally on 64-bit platforms (<ulink url="https://svn.boost.org/trac/boost/ticket/3308">#3308</ulink>).<sbr/>
            格里历日期现在在64位平台上内部使用32位整数类型(<ulink url="https://svn.boost.org/trac/boost/ticket/3308">#3308</ulink>)。
          </entry>
        </row>
        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>
            Adjusted UTC time zone offset boundaries in order to allow offsets up to +14 hours (<ulink url="https://svn.boost.org/trac/boost/ticket/2213">#2213</ulink>).<sbr/>
            调整了UTC时区偏移边界，以支持最大为+14小时的偏移量(<ulink url="https://svn.boost.org/trac/boost/ticket/2213">#2213</ulink>)。
          </entry>
        </row>

      </tbody>
    </tgroup>
  </informaltable>

  <bridgehead renderas="sect3">Changes from Boost 1.38 to 1.40 (date_time 1.06 to 1.07)</bridgehead>
  <informaltable frame="all">
    <tgroup cols="2">
      <thead>
        <row>
          <entry>Type 类型</entry>
          <entry>Description 说明</entry>
        </row>
      </thead>
      <tbody>

        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>
            Minor bug fixes (<ulink url="https://svn.boost.org/trac/boost/ticket/2809">#2809</ulink>,
            <ulink url="https://svn.boost.org/trac/boost/ticket/2824">#2824</ulink>,
            <ulink url="https://svn.boost.org/trac/boost/ticket/3015">#3015</ulink>,
            <ulink url="https://svn.boost.org/trac/boost/ticket/3105">#3105</ulink> and others).<sbr/>
            次要缺陷修复(<ulink url="https://svn.boost.org/trac/boost/ticket/2809">#2809</ulink>,
            <ulink url="https://svn.boost.org/trac/boost/ticket/2824">#2824</ulink>,
            <ulink url="https://svn.boost.org/trac/boost/ticket/3015">#3015</ulink>,
            <ulink url="https://svn.boost.org/trac/boost/ticket/3105">#3105</ulink> 及其它)。 
          </entry>
        </row>

      </tbody>
    </tgroup>
  </informaltable>

  <bridgehead renderas="sect3">Changes from Boost 1.34 to 1.38 (date_time 1.05 to 1.06)</bridgehead>
  <informaltable frame="all">
    <tgroup cols="2">
      <thead>
    <row>
      <entry>Type 类型</entry>
      <entry>Description 说明</entry>
    </row>
      </thead>
      <tbody>
        <row>
          <entry>Feature 特性</entry>
          <entry>
            Added support for formatting and reading time durations longer than 24 hours.
            A new formatter <code>%O</code> is used indicate such long durations in the
            format string. The old <code>%H</code> format specifier is thus restricted
            to represent durations that fit into two characters, in order to retain support
            for reading durations in ISO format. In case if it is detected that the <code>%H</code>
            format specifier is used with longer durations, the results are not specified
            (an assertion in debug builds is raised).<sbr/>
            增加了对长于24小时的时间长度的格式化和读入。使用一个新的格式化符 <code>%O</code> 来表示格式化串中的较长时间跨度。
            为了保持对ISO格式的时间长度的读入，旧的 <code>%H</code> 格式化符被限于所表示的时间长度必须适于2个字符的容量。
            如果检测到 <code>%H</code> 格式化符被用于较长的时间长度，则其结果是未指定的(在调试构建中将触发一个断言)。 
          </entry>
        </row>

        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>
            Added support for GCC 4.3. Several compilation issues were solved, as well as
            compiler warnings were taken care of.<sbr/>
            增加了对 GCC 4.3 的支持。解决了多个编译问题，并照顾到编译器的警告信息。 
          </entry>
        </row>

        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>
            Added missing streaming operators for the <code>local_time_period</code> class.<sbr/>
            增加了 <code>local_time_period</code> 类的流操作符。 
          </entry>
        </row>

        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>
            Added several missing includes in different places. Some includes that are
            not needed in some configurations were made conditional.<sbr/>
            在多个不同地方增加了缺失的包含文件。在某些配置下可以不需要的包含文件被设为条件性的。 
          </entry>
        </row>

        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>
            Solved compilation problem that was caused by not finding streaming operators
            for <code>gregorian::date_duration</code> via ADL. The type is now made actually
            a class rather a typedef for the <code>date_time::date_duration</code> template.
            The similar change was done for <code>gregorian::weeks</code>.<sbr/>
            解决了无法通过ADL查找到 <code>gregorian::date_duration</code> 的流操作符所引起的编译问题。
            该类型现在是一个真正的类，而不是 <code>date_time::date_duration</code> 模板的一个typedef了。
            对于 <code>gregorian::weeks</code>，也有相类似的修改。 
          </entry>
        </row>

        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>
            Added a correctly spelled <code>date_time::hundredth</code> time resolution enum
            value. The old one <code>date_time::hundreth</code> is considered deprecated and
            to be removed in future releases.<sbr/>
            增加了一个正确拼写的 <code>date_time::hundredth</code> 时间精度枚举值。
            原有的 <code>date_time::hundreth</code> 建议不再使用，将在以后的版本中删除。 
          </entry>
        </row>

        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>
            Fixed compilation error in <code>format_date_parser.hpp</code> because of incorrect
            stream type being used.<sbr/>
            修正了 <code>format_date_parser.hpp</code> 中由于使用了不正确的流类型所引起的编译错误。 
          </entry>
        </row>

        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>
            On Windows platform made inclusion of <code>windows.h</code> optional. The header is only used
            when the <code>BOOST_USE_WINDOWS_H</code> macro is defined. Otherwise (and by default),
            the library uses internal definitions of symbols from this header.<sbr/>
            在 Windows 平台上，将 <code>windows.h</code> 的包含列为可选。该头文件仅在定义了 
            <code>BOOST_USE_WINDOWS_H</code> 宏时被使用。否则(也是缺省的)，本库使用该头中的符号的内部定义。 
          </entry>
        </row>

        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>
            On Windows platform function <code>from_ftime</code> could return incorrect time if
            the <code>FILETIME</code> that is being passed to the function contained dates before 1970-Jan-01.<sbr/>
            在 Windows 平台上，函数 <code>from_ftime</code> 可以返回错误的时间，如果传入的 
            <code>FILETIME</code> 带有 1970-Jan-01 以前的日期。 
          </entry>
        </row>

        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>
            Fixed a possible crash in <code>gregorian::special_value_from_string</code> if the string
            did not represent a valid special value.<sbr/>
            修复了 <code>gregorian::special_value_from_string</code> 中的一个可能的崩溃，如果该字符串不是表示一个有效的特定值。 
          </entry>
        </row>

        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>
            Removed the <code>testfrmwk.hpp</code> file from the public include directory. This file
            was internal for the library tests and was not documented.<sbr/>
            从公有包含目录中删除 <code>testfrmwk.hpp</code> 文件。该文件是本库内部测试使用，不列入文档。 
          </entry>
        </row>

        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>
            Fixed missing include in <code>filetime_functions.hpp</code>
            (<ulink url="https://svn.boost.org/trac/boost/ticket/2688">#2688</ulink>).<sbr/>
            修复 <code>filetime_functions.hpp</code> (<ulink url="https://svn.boost.org/trac/boost/ticket/2688">#2688</ulink>)
            中缺失的头文件包含。
          </entry>
        </row>

        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>
            Fixed dereferencing end string iterators in different places of code,
            which could cause crashes on MSVC
            (<ulink url="https://svn.boost.org/trac/boost/ticket/2698">#2698</ulink>).<sbr/>
            修复多处代码中对 end 字符串迭代器的解引用，这些解引用在 MSVC 
            (<ulink url="https://svn.boost.org/trac/boost/ticket/2698">#2698</ulink>)上会导致崩溃。 
          </entry>
        </row>

      </tbody>
    </tgroup>
  </informaltable>



  <bridgehead renderas="sect3">Changes from Boost 1.33 to 1.34 (date_time 1.04 to 1.05)</bridgehead>
  <informaltable frame="all">
    <tgroup cols="2">
      <thead>
	<row>
	  <entry>Type 类型</entry>
	  <entry>Description 说明</entry>
	</row>
      </thead>
      <tbody>
        <row>
          <entry>Feature 特性</entry>
          <entry>
             Updated the data in the date_time_zonespec.csv file to reflect new US/Canada 
             daylight savings time rules for 2007.  If you upgrade to the new file, be aware
             that the library will only give correct answers for current/future date
             conversions.  So if you are converting dates from earlier years the answers 
             will reflect current time zone rules not past rules.  The library doesn't support 
             historic timezone rules presently. <sbr/>
             更新了 date_time_zonespec.csv 文件中的数据，以反映美国/加拿大2007年新的夏时制规则。如果你升级到了新的文件，
             那么要清楚本库只有对于当前或以后的日期转换才能得到正确的答案。所以，如果你要对以前的年份进行日期转换，
             那么得到的答案将反映当前的时区规则而不是旧的规则。当前本库不能支持历史时区。 
          </entry>
        </row>
        <row>
          <entry>Feature 特性</entry>
          <entry>
              Two other dst calculation features have also been update to reflect the new
              US/Canada timzone rules. This is the boost::date_time::us_dst_rules and
              dst_calc_engine.  While the us_dst_rules is officially deprecated, a patch
              by Graham Bennett has been applied which allows this class to work correctly
              for both historical and future dates.  The dst_calc_engine was updated to also
              work for historical and future times.  This allows the various local_adjustor
              classes to work correctly.  There was an interface change for classes using the
              dst_calc_engine with custom dst traits classes.  The traits classes signatures
              changed to take a 'year' parameter on most of the methods such as end_month.
              In addition,  2 new functions are needed on the traits classes:
                   <code>static date_type local_dst_start_day(year_type year)</code> and
                   <code>static date_type local_dst_end_day(year_type year)</code>.
              Implementers should see <code>date_time/local_timezone_defs.hpp</code> for
              examples.<sbr/>
              还更新了另外两个 dst 计算特性，以反映新的美国/加拿大时区规则。它们是 boost::date_time::us_dst_rules 和
              dst_calc_engine. us_dst_rules 已经被官方反对使用，Graham Bennett 
              提供的一个补丁可以让这个类正确用于历史和未来的日期。而 dst_calc_engine 也被更新，
              可以正确用于历史和未来的时间。这样，各个 local_adjustor 类均可以正确工作。
              对于使用 dst_calc_engine 的类，其接口有些变化，变化是关于定制的 dst traits 类的。
              该 traits 类的签名变为接受一个象 end_month 那样的 'year' 参数。此外，该 traits 类需要2个新的函数：
              <code>static date_type local_dst_start_day(year_type year)</code> 和 
              <code>static date_type local_dst_end_day(year_type year)</code>. 
              实现请见 <code>date_time/local_timezone_defs.hpp</code> 中的例子。 
          </entry>
        </row>

        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>Fix DST traits for Austrialia (sf# 1672139) to set end of DST at 3:00 am instead of 2:00 am.<sbr/>
          修复澳大利亚的 DST traits (sf# 1672139)，将DST的结束时间设为 3:00 am，替代原来的 2:00 am. 
          </entry>
        </row>

        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>Fix a problem with potential linking error with multiple definitions due
                 to I/O code.<sbr/>
                 修复因I/O代码所引起的多重定义链接错误。 
          </entry>
        </row>
        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>Changed serialization code in both greg_serialize.hpp and time_serialize.hpp
                 to eliminate warnings due to unused variables for version and file_version.
                 Thanks to Caleb Epstein for the patch suggestion.<sbr/>
                 修改 greg_serialize.hpp 和 time_serialize.hpp 中的序列化代码，消除因未使用变量 version 和
                 file_version 引起的告警。感谢 Caleb Epstein 的建议。 
          </entry>
        </row>
        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>Fix regression errors that showed up under FreeBSD with GCC and the 
                 LANG environment set to russian -- changed parser to use classic 
                 locale instead of blank locale.<sbr/>
                 修复在 FreeBSD 的 GCC 下将 LANG 环境变量设为 russian 时出现的退化错误  -- 
                 将分析器改为使用 classic locale 而不是 blank locale. 
          </entry>
        </row>

        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>Changes for tracker issue 1178092 -- change in convert_to_lower to make 
                 local a const static and speed up parsing.<sbr/>
                 修改 tracker 问题 1178092 -- 修改 convert_to_lower，将 local 改为 const static 以加快分析的速度。 
          </entry>
        </row>

        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>Patches from Ulrich Eckhardt to fix support for EVC++ 4.<sbr/>
          来自 Ulrich Eckhardt 的补丁，修复对 EVC++ 4 的支持。 
          </entry>
        </row>

        <row>
          <entry>Feature 特性</entry>
          <entry>Reduce the usage of basic_stringstream as much a possible to work around 
                 a bug in the VC8 standard library. See 
                 <ulink url="http://lists.boost.org/Archives/boost/2006/02/101122.php">mailing list archive</ulink> 
                 for more information.<sbr/>
                 尽量减少对 basic_stringstream 的使用，以避开 VC8 标准库中的缺陷。更多信息请见 
                 <ulink url="http://lists.boost.org/Archives/boost/2006/02/101122.php">邮件列表存档</ulink>。  
          </entry>
        </row>

      </tbody>
    </tgroup>
  </informaltable>


  <bridgehead renderas="sect3">Changes from Boost 1.32 to 1.33 (date_time 1.03 to 1.04)</bridgehead>
  <informaltable frame="all">
    <tgroup cols="2">
      <thead>
	<row>
	  <entry>Type 类型</entry>
	  <entry>Description 说明</entry>
	</row>
      </thead>
      <tbody>
        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>Period lengths, when beginning and end points are the same, or are consecutive, were being incorrectly calculated. The corrected behavior, where end and beginning points are equal, or a period is created with a zero duration, now return a length of zero. A period where beginning and end points are consecutive will return a length of one.<sbr/>
          如果时间段的开始点和结束点相同或相连，则时间段长度的计算会有错。在修正后，当开始点和结束点相同时，
          或者时间段以零时长创建时，现在将返回长度0。对于开始点和结束点相连的时间段，则返回长度1。 
          </entry>
        </row>
        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>Time_input_facet was missing functions to set iso formats. It also failed to parse time values that did not use a separator (%H%M%S). Both these bugs have been corrected.<sbr/>
          Time_input_facet 缺少设为ISO格式的函数。而且在不使用分隔符时(%H%M%S)，将不能进行分析。这两个缺陷均已修正。 
          </entry>
        </row>
        <row>
          <entry>Feature 特性</entry>
          <entry>Preliminary names of ptime_facet and ptime_input_facet changed to simply time_facet and time_input_facet. The ptime_* versions have been removed all together.<sbr/>
          将 ptime_facet 和 ptime_input_facet 的名字改为 time_facet 和 time_input_facet. 同时删除所有 ptime_* 版本。 
          </entry>
        </row>
        <row>
          <entry>Feature 特性</entry>
          <entry>The from_iso_string function failed to parse fractional digits. We added code that correctly parses when input has more digits, or too few digits, that the compiled library precision. Ptimes with only a decimal are also correctly parsed.<sbr/>
          函数 from_iso_string function 不能分析小数。我们增加了代码以正确地按已编译库的精度进行过多或过少数位的分析。
          带小数的 Ptimes 也可以正确分析。 
          </entry>
        </row>
        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>The parsing mechanism in the new IO would consume the next character after a match was made. This bug presented itself when attempting to parse a period that had special value for it's beginning point.<sbr/>
          新IO中的分析机制在进一次匹配后会吃掉下一个字符。在试图分析以特殊值作为开始点的时间段时就会出现这个缺陷。 
          </entry>
        </row>
        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>The new IO system failed to provide the ability for the user to "turn on" exceptions on the stream. The failbit was also not set when parsing failed. Both of these problems have been fixed.<sbr/>
          新的IO系统无法为用户提供“打开”流操作的异常机制的功能。即使分析失败，failbit 位也不会置位。现在这些问题都已得到修正。 
          </entry>
        </row>
        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>Parsing of special values, by means of from_*_string functions, has been fixed. This also effects the libraries ability to serialize special values. Time_duration now serializes as either a string or individual fields (depending on is_special()).<sbr/>
          以 from_*_string 函数分析特殊值的问题已修正。这使得本库可以对特殊值进行序列化。
          Time_duration 现在可以序列化为字符串或单独的字段(取决于 is_special())。 
          </entry>
        </row>
        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>Previously, output streaming of <code>partial_date</code> would display the day as either a single or double digit integer (ie '1', or '12'). This has been corrected to always display a double digit integer (ie '01').<sbr/>
          以前，<code>partial_date</code> 的流输出会以一位或两位数字的方式来显示天数
          (即 '1', 或 '12')。现在已更正为只使用两位数字(即 '01')。 
          </entry>
        </row>
        <row>
          <entry>Feature 特性</entry>
          <entry>Major new features related to management of local times.
                 This includes the introduction of a series of new classes to
                 represent time zones and local times (see <link linkend="date_time.local_time">Date Time Local Time</link> for complete details).<sbr/>
                 主要的新特性都与本地时间的管理有关。包括引入了一系列新类，用于表示时区和本地时间
                 (完整的细节请见 <link linkend="date_time.local_time">日期与时间的本地时间</link>)。 
          </entry>
        </row>
        <row>
          <entry>Feature 特性</entry>
          <entry>Input and output facets have been re-written to support format-based 
            redefinition of formats (see <link linkend="date_time.date_time_io">Date Time IO</link> for complete details).<sbr/>
            输入和输出 facets 已被重写以支持基于格式的格式重定义(完整的细节请见 
            <link linkend="date_time.date_time_io">日期和时间的IO</link>)。 
          </entry>
        </row>
        <row>
          <entry>Feature 特性</entry>
          <entry>Functions have been added to facilitate conversions between <code>tm</code> structs for <code>date</code>, <code>ptime</code>, <code>time_duration</code>, and <code>local_date_time</code>. Functions for converting <code>FILETIME</code>, and <code>time_t</code> to <code>ptime</code> are also provided. See the individual sections for details.<sbr/>
          增加一些函数，以方便在 <code>tm</code> 结构与 <code>date</code>, <code>ptime</code>, <code>time_duration</code>, 
          和 <code>local_date_time</code> 之间的转换。还提供了将 <code>FILETIME</code> 和 <code>time_t</code> 转换为 
          <code>ptime</code> 的函数。详情请见单独的章节。 
          </entry>
        </row>
        <row>
          <entry>Feature 特性</entry>
          <entry>A <code>universal_time</code> function has been added to the <code>microsec_time_clock</code> (full details of this function can be found <link linkend="ptime_from_clock">here</link>).<sbr/>
          在 <code>microsec_time_clock</code> 中增加了一个 <code>universal_time</code> 函数
          (有关该函数的完整细节请见 <link linkend="ptime_from_clock">这里</link>)。 
          </entry>
        </row>
        <row>
          <entry>Feature 特性</entry>
          <entry>Date-time now uses reentrant POSIX functions on those platforms that
                 support them when BOOST_HAS_THREADS is defined. <sbr/>
          Date-time 现在在可支持的平台上将使用重入的 POSIX 函数，如果定义了 BOOST_HAS_THREADS。 
          </entry>
        </row>
        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>Fixed a bug in serialization code where special values 
                (not-a-date-time, infinities, etc) for
                ptime, time_duration would not read back correctly from an archive.  
                The output serialization code wrote subfields such
                as time_duration.seconds() which are invalid for special values and 
                thus undefined values.  Thus when read back the values could cause
                strange behavior including execeptions on construction.<sbr/>
                修正了在序列化代码中不能从存档中正确读回 ptime, time_duration 的特殊值
                (not-a-date-time, infinities, 等等)的缺陷。输出用的序列化代码为特殊值和未定义值的无效
                time_duration.seconds() 写出子字段。这样当读回这些值时，可以引发奇特的行为，包括在构造时抛出异常。 
          </entry>
        </row>
        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>Fixed multiple warnings generated with various platforms/compilers.<sbr/>
          修正了由不同平台/编译器产生的多个告警。 
          </entry>
        </row>
        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>Construction of a ptime with a time_duration beyond the range of 00:00 to 23:59:59.9... now adjusts the date and time to make the time_duration fall within this range (ie <code>ptime(date(2005,2,1), hours(-5))</code> -> "2005-Jan-31 19:00:00" &amp; <code>ptime(date(2005,2,1), hours(35))</code> -> "2005-Feb-02 11:00:00").<sbr/>
          以一个超过从 00:00 到 23:59:59.9... 范围的 time_duration 来构造 ptime，现在会对日期和时间进行调整，
          以使得 time_duration 落在这一范围内(即 <code>ptime(date(2005,2,1), hours(-5))</code> -> "2005-Jan-31 19:00:00"，
          而 <code>ptime(date(2005,2,1), hours(35))</code> -> "2005-Feb-02 11:00:00")。 
          </entry>
        </row>
        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>Time parsing now correctly handles excessive digits for fractional seconds. Leading zeros are dropped ("000100" -> 100 frac_sec), and excessive digits are truncated at the proper place ("123456789876" -> 123456 or 123456789 depending on what precision the library was compiled with).<sbr/>
          时间分析现在可以正确处理过多位的小数秒。前导的0将被扔掉("000100" -> 100 frac_sec)，
          而过多的数位将在正确的位置被截断("123456789876" -> 123456 或 123456789，取决于编译本库时的精度)。 
          </entry>
        </row>
        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>Changes to the <code>boost::serialization</code> interface broke serialization compatibility for <code>date_time</code>. The user must provide a function to insure <code>date_time</code> objects are <code>const</code> before they are serialized. The function should be similar to:<sbr/>
          改为 <code>boost::serialization</code> 的接口破坏了 <code>date_time</code> 的序列化兼容性。
          用户必须提供函数来在序列化之前确保 <code>date_time</code> 对象是 <code>const</code> 的。该函数类似于：
            <screen>template&lt;class archive_type, class temporal_type>
void save_to(archive_type&amp; ar,
             const temporal_type&amp; tt)
{
  ar &lt;&lt; tt;
}</screen>
          </entry>
        </row>
        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>Use of the depricated <code>boost::tokenizer</code> interface has been updated to the current interface. This fixes compiler errors on some older compilers.<sbr/>
          对于已不使用的 <code>boost::tokenizer</code> 接口，已升级为当前的接口。修正了在某些旧编译器上的编译错误。 
          </entry>
        </row>
        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>Templatized formatters in the legacy IO system to accept char type. Also removed calls to <code>boost::lexical_cast</code>.<sbr/>
          在遗留IO系统中的模板化格式化器接受 char 类型。同时删掉了对 <code>boost::lexical_cast</code> 的调用。 
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>


  <bridgehead renderas="sect3">Changes from Boost 1.31 to 1.32 (date_time 1.02 to 1.03)</bridgehead>
  <informaltable frame="all">
    <tgroup cols="2">
      <thead>
	<row>
	  <entry>Type 类型</entry>
	  <entry>Description 说明</entry>
	</row>
      </thead>
      <tbody>
        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>Snap to end of month behavior corrected for year_functor. Previously, starting 
                 from 2000-Feb-28 (leap year and not end of month) and iterating through the next 
                 leap year would result in 2004-Feb-29 instead of 2004-Feb-28. This behavior has 
                 been corrected to produce the correct result of 2004-Feb-28. Thanks to Bart Garst 
                 for this change.<sbr/>
                 修正了 year_functor 的“保持为月末”的行为。以前，从 2000-Feb-28 (闰年的非月末日期)开始迭代到下一个闰年，
                 会得到 2004-Feb-29 而不是 2004-Feb-28. 这一行为已得到改正，以生成正确结果 2004-Feb-28. 
                 感谢 Bart Garst 所做的修正。 
          </entry>
        </row>
        <row>
          <entry>Feature 特性</entry>
          <entry>Free function for creating a ptime object from a FILETIME struct. This function 
                 is only available on platforms that define BOOST_HAS_FTIME.<sbr/>
                 从 FILETIME 结构创建 ptime 对象的自由函数。该函数只在定义了 BOOST_HAS_FTIME 的平台上可用。 
          </entry>
        </row>
        <row>
          <entry>Feature 特性</entry>
          <entry>Microsecond time clock is now available on most windows compilers as well as
                 Unix.<sbr/>
                 微秒时钟现在在多数 windows 和 Unix 编译器上都可以用了。 
          </entry>
        </row>
        <row>
          <entry>Feature 特性</entry>
          <entry>Use of the boost::serialization library is now available with most of the 
                 date_time classes. Classes capable of serialization are: date_generator classes, 
                 date, days, date_period, greg_month, greg_weekday, greg_day, ptime, time_duration,
                 and time_period. Thanks to Bart Garst for this change.<sbr/>
                 现在 boost::serialization 库可以和多数 date_time 类一起使用。具有序列化能力的类有：
                 date_generator 类, date, days, date_period, greg_month, greg_weekday, greg_day, ptime, 
                 time_duration, 和 time_period. 感谢 Bart Garst 所做的修正。 
          </entry>
        </row>
        <row>
          <entry>Feature 特性</entry>
          <entry>Functions added to convert date and time classes to wstring. The library now 
                 provides to_*_wstring as well as to_*_string functions for: simple, iso, 
                 iso_extended, and sql for dates and compilers that support wstrings. Thanks to 
                 Bart Garst for this change.<sbr/>
                 新增了将 date 和 time 类转换为 wstring 的函数。本库现在提供 to_*_wstring，
                 和 to_*_string 函数一样，simple, iso, iso_extended, 和 sql for dates 
                 以及编译器均支持 wstrings. 感谢 Bart Garst 所做的修正。 
          </entry>
        </row>
        <row>
          <entry>Feature 特性</entry>
          <entry>Period classes now handle zero length and NULL periods correctly. A NULL period 
                 is a period with a negative length. Thanks to Frank Wolf and Bart Garst for this 
                 change.<sbr/>
                 时间段类现在可以正确处理零时长和 NULL 时间段。NULL 时间段是具有负长度的时间段。
                 感谢 Frank Wolf 和 Bart Garst 所做的修改。 
          </entry>
        </row>
        <row>
          <entry>Feature 特性</entry>
          <entry>Added end_of_month function to gregorian::date to return the last day of
                 the current month represented by the date.  Result is undefined for
                 not_a_date_time or infinities.<sbr/>
                 在 gregorian::date 中增加了 end_of_month 函数，以日期表示法返回当前月的最后一天。
                 对于 not_a_date_time 或无限日期，结果未定义。 
          </entry>
        </row>
        <row>
          <entry>Bug fix 缺陷修复</entry>
          <entry>Removed incorrect usage of BOOST_NO_CWCHAR macro throughout library.<sbr/>
          删掉整个库中对 BOOST_NO_CWCHAR 宏的不正确使用。 
          </entry>
        </row>
        <row>
          <entry>Feature 特性</entry>
          <entry>New names added for some date classes. Original names are still valid but may 
                 some day be deprecated. Changes are:<sbr/>
                 为一些日期类增加了新的名字。原来的名字仍然可用，但以后可能会不再使用。改变如下：
            <simplelist type='horiz' columns='3'>
              <member>date_duration</member>
              <member>is now</member>
              <member>days</member>
              <member>nth_kday_of_month</member>
              <member>is now</member>
              <member>nth_day_of_the_week_in_month</member>
              <member>first_kday_of_month</member>
              <member>is now</member>
              <member>first_day_of_the_week_in_month</member>
              <member>last_kday_of_month</member>
              <member>is now</member>
              <member>last_day_of_the_week_in_month</member>
              <member>first_kday_after</member>
              <member>is now</member>
              <member>first_day_of_the_week_after</member>
              <member>first_kday_before</member>
              <member>is now</member>
              <member>first_day_of_the_week_before</member>
            </simplelist>
          </entry>
        </row>
        <row>
          <entry>Feature 特性</entry>
          <entry>Free functions for date generators added. Functions are: days_until_weekday, days_before_weekday, next_weekday, and previous_weekday.<sbr/>
          增加了日期生成器的自由函数。新增的函数是：days_until_weekday, days_before_weekday, next_weekday, 和 previous_weekday.
            <screen>days days_until_weekday(date, greg_weekday);
days days_before_weekday(date, greg_weekday);
date next_weekday(date, greg_weekday);
date previous_weekday(date, greg_weekday);</screen>
	    Thanks to Bart Garst for this change.<sbr/>
        感谢 Bart Garst 所做的修改。
          </entry>
        </row>
        <row>
          <entry>Feature 特性</entry>
          <entry>New experimental duration types added for months, years, and weeks. These classes 
                 also provide mathematical operators for use with date and time classes.  Be aware
                 that adding of months or years a time or date past the 28th of a month may show 
                 non-normal mathematical properties.  This is a result of 'end-of-month' 
                 snapping used in the calculation.  The last example below illustrates the    
                 issue.  <sbr/>
                 为月数、年数和周数增加新的试验用时长类型。这些类还提供了与日期和时间类的数学操作符。
                 一个28日之后的时间或日期加上一定的月数或年数，可能会出现不正常的数学特性。这是由于这一运算采用了'月末'保持。
                 以下例子示范了这一问题。 
           
            <screen>months m(12);
years y(1);
m == y; // true
days d(7);
weeks w(1);
d == w; // true
ptime t(...);
t += months(3);
date d(2004,Jan,30);
d += months(1); //2004-Feb-29
d -= months(1); //2004-Jan-29</screen>
            Input  streaming is not yet implemented for these types.              
	    Thanks to Bart Garst for this change.<sbr/>
        这些类型的流输入尚未实现。感谢 Bart Garst 所做的修改。
          </entry>
        </row>
        <row>
          <entry>Feature 特性</entry>
          <entry>Unifying base class for date_generators brought in to gregorian namespace. See <link linkend="date_time.examples.print_holidays">Print Holidays Example</link>.<sbr/>
          统一 date_generators 的基类并带入到 gregorian 名字空间中。请见 
          <link linkend="date_time.examples.print_holidays">打印假日的例子</link>。 
          </entry>
        </row>
        <row>
          <entry>Feature 特性</entry>
          <entry>Added constructors for date and ptime that allow for default construction (both) 
                 and special values construction (ptime, both now support this). Default 
                 constructors initialize the objects to not_a_date_time (NADT).<sbr/>
                 增加了 date 和 ptime 的缺省构造函数(两者都有)以及特殊值的构造函数(ptime, 现在两者均支持)。
                 缺省构造函数将对象初始化为
                 <screen>ptime p_nadt(not_a_date_time);
ptime p_posinf(pos_infin);
ptime p; // p == NADT
date d;  // d == NADT</screen>
	    Thanks to Bart Garst for this change.<sbr/>
        感谢 Bart Garst 所做的修改。 
          </entry>
        </row>
	<row>
	  <entry>Feature 特性</entry>
	  <entry>Output streaming now supports wide stream output on compiler / standard library combinations that support wide streams. This allows code like:<sbr/>
      流输出现在已可以在支持宽字符流的编译器/标准库组合上支持宽字符流。如以下代码：
	    <screen>std::wstringstream wss;
date d(2003,Aug,21);
wss &lt;&lt; d;</screen>
	    Thanks to Bart Garst for this change.<sbr/>
        感谢 Bart Garst 所做的修改。
	  </entry>
	</row>
	<row>
	  <entry>Feature 特性</entry>
          <entry>Input streaming for date and time types is now supported on both wide and narrow streams:<sbr/>
          date 和 time 类型的流输入现在已可以支持宽字符和窄字符流：
	    <screen>date d(not_a_date_time);
std::stringstream ss("2000-FEB-29");
ss &gt;&gt; d; //Feb 29th, 2000
std::wstringstream ws("2000-FEB-29");
ws &gt;&gt; d; //Feb 29th, 2000</screen>
	    Thanks to Bart Garst for this change.<sbr/>
        感谢 Bart Garst 所做的修改。
	  </entry>
	</row>
	<row>
	  <entry>Bug fix 缺陷修复</entry>
	  <entry> Fixed bug in duration_from_string() where a string formatted with
                  less than full amount of fractional digits created an incorrect
                  time_duration.  With microsecond resolution for time durations
                  the string "1:01:01.010" created a time duration of 
                  01:01:01.000010 instead of 01:01:01.010000<sbr/>
                  修正了以下缺陷：duration_from_string() 当字符串的格式中的小数位不足时会创建一个不正确的
                  time_duration. 在微秒解析度下，字符串 "1:01:01.010" 会创建时长 01:01:01.000010 而不是 01:01:01.010000 
          </entry>
	</row>
	<row>
	  <entry>Bug fix 缺陷修复</entry>
	  <entry>Fixed the special value constructor for gregorian::date and posix_time::ptime 
                 when constructing with min_date_time or max_date_time.  The wrong value was 
                 constructed for these.<sbr/>
                 修正了 gregorian::date 和 posix_time::ptime 的特殊值构造函数以 min_date_time 或 
                 max_date_time 进行构造的问题。这些情形下会构造出错误的值。 
          </entry>
	</row>
      </tbody>
    </tgroup>
  </informaltable>
  
  <bridgehead renderas="sect3">Changes from Boost 1.30 to 1.31 (date_time 1.01 to 1.02)</bridgehead>
  <informaltable frame="all">
    <tgroup cols="2">
      <thead>
	<row>
	  <entry>Type 类型</entry>
	  <entry>Description 说明</entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry>Bug fix 缺陷修复</entry>
	  <entry>Build configuration updated so dll, statically, and dynamically linkable library files are now produced with MSVC compilers. See <link linkend="date_time.buildinfo">Build/Compiler Information</link> for more details.<sbr/>
      更新了构建配置文件，现在可以用MSVC编译器生成 dll, 静态和动态链接的库文件。更多细节请见 
      <link linkend="date_time.buildinfo">构建/编译器信息</link>。</entry>
	</row>
	<row>
	  <entry>Bug fix 缺陷修复</entry>
	  <entry>Time_duration from_string is now correctly constructed from a negative value. (ie "-0:39:00.000") Code provided by Bart Garst.<sbr/>
      Time_duration from_string 现在可以正确地从负值进行构造(如 "-0:39:00.000")。代码由 Bart Garst 提供。</entry>
	</row>
	<row>
	  <entry>Bug fix 缺陷修复</entry>
	  <entry>Fixed many MSVC compiler warnings when compiled with warning level 4.<sbr/>
      修正了在MSVC编译器下以4级告警级别编译时的多个告警。</entry>
	</row>
	<row>
	  <entry>Feature 特性</entry>
	  <entry>Added prefix decrement operator (--) for date and time iterators. See <link linkend="date_time.posix_time.time_iterators">Time Iterators</link>  and <link linkend="date_time.gregorian.date_iterators">Date Iterators</link> for more details. Code provided by Bart Garst.<sbr/>
      为 date 和 time 迭代器增加了前缀递减操作符。更多细节请见 <link linkend="date_time.posix_time.time_iterators">
      Time 迭代器</link> 和 <link linkend="date_time.gregorian.date_iterators">Date 迭代器</link>。代码由 Bart Garst 提供。</entry>
	</row>
	<row>
	  <entry>Feature 特性</entry>
	  <entry>Special_values functionality added for date_duration, time_duration and time classes. Code provided by Bart Garst.<sbr/>
      Special_values 功能被增加到 date_duration, time_duration 和 time 类。代码由 Bart Garst 提供。</entry>
	</row>
	<row>
	  <entry>Bug fix 缺陷修复</entry>
	  <entry>Fixed time_duration_traits calculation bug which was causing time duration to be limited to 32bit range even when 64 bits were available. Thanks to Joe de Guzman for tracking this down.<sbr/>
      修正了 time_duration_traits 运算中的以下缺陷：尽管有64位环境可用，时长还是被限制在32位的范围内。
      感谢 Joe de Guzman 对此缺陷的跟踪。</entry>
	</row>
	<row>
	  <entry>Bug fix 缺陷修复</entry>
	  <entry>Provided additional operators for duration types (eg: date_duration, time_duration). This includes dividable by integer and fixes to allow +=, -= operators. Thanks to Bart Garst for writing this code. Also, the documentation of <link linkend="date_time.calculations">Calculations</link> has been improved.<sbr/>
      为时间长度类型(如：date_duration, time_duration)提供了其它操作符。这些操作包括：与整数相除以及 +=, -= 操作符。
      感谢 Bart Garst 编写了这些代码。另外，相关的 <link linkend="date_time.calculations">运算</link> 文档也有了改进。</entry>
	</row>
	<row>
	  <entry>Bug fix 缺陷修复</entry>
	  <entry>Added typedefs to boost::gregorian gregorian_types.hpp various date_generator function classes.<sbr/>
      为 boost::gregorian gregorian_types.hpp 中多个 date_generator 函数类增加了 typedef.</entry>
	</row>
	<row>
	  <entry>Feature 特性</entry>
	  <entry>Added from_time_t function to convert time_t to a ptime.<sbr/>
      增加了 from_time_t function 将 time_t 转换为 ptime.</entry>
	</row>
	<row>
	  <entry>Feature 特性</entry>
	  <entry>Added a span function for combining periods. See <link linkend="date_time.gregorian.date_period">date period</link> and <link linkend="date_time.posix_time.time_period">time period</link> docs.<sbr/>
      增加了对时间段进行合并的 span 函数。请见 <link linkend="date_time.gregorian.date_period">日期段</link> 和 
      <link linkend="date_time.posix_time.time_period">时间段</link> 的文档。</entry>
	</row>
	<row>
	  <entry>Feature 特性</entry>
	  <entry>Added a function to time_duration to get the total number of seconds in a 
                 duration truncating any fractional seconds. In addition, other resolutions 
                 were added to allow for easy conversions. For example<sbr/>
                 为 time_duration 增加了一个函数，以取出在时长内的总秒数，截断小数部分。
                 另外，还增加了其它解析度以方便转换。例如：
	    <screen>seconds(1).total_milliseconds() == 1000
seconds(1).total_microseconds() == 1000000
hours(1).total_milliseconds() == 3600*1000 //3600 sec/hour
seconds(1).total_nanoseconds() == 1000000000</screen>

           </entry>
	</row>
	<row>
	  <entry>Feature 特性</entry>
	  <entry>Added output streaming operators for the <link linkend="date_time.gregorian.date_algorithms">date generator</link> classes - partial_date, first_kday_after, first_kday_before, etc. Thanks to Bart Garst for this work.<sbr/>
      为 <link linkend="date_time.gregorian.date_algorithms">日期生成器</link> 类 - partial_date, first_kday_after, 
      first_kday_before, 等等 - 增加了流输出操作符。感谢 Bart Garst 的工作。</entry>
	</row>
	<row>
	  <entry>Feature 特性</entry>
	  <entry>Added unary- operators for durations for reversing the sign of a time duration. For example:<sbr/>
      为时长类型增加了单参数的 - 操作符，将时长的符号反转。例如：
	    <screen>time_duration td(5,0,0); //5 hours
td = -td; //-5 hours</screen>
	  Thanks to Bart Garst for this work.<sbr/>
      感谢 Bart Garst 的工作。</entry>
	</row>
	<row>
	  <entry>Feature 特性</entry>
	  <entry>Added support for parsing strings with 'month names'. Thus creating a date object from string now accepts multiple formats ("2003-10-31","2003-Oct-31", and "2003-October-31"). Thus, date d = from_simple_string("2003-Feb-27") is now allowed. A bad month name string ( from_simple_string("2003-SomeBogusMonthName-27")) will cause a bad_month exception. On most compilers the string compare is case insensitive. Thanks to Bart Garst for this work.<sbr/>
      增加了对‘月份名’字符串的分析支持。现在可以从字符串创建 date 对象，可以接受多种格式 ("2003-10-31","2003-Oct-31", 
      和 "2003-October-31")。因此，现在可以写 date d = from_simple_string("2003-Feb-27"). 错误的月份名字符串 
      ( from_simple_string("2003-SomeBogusMonthName-27")) 将引发一个 bad_month 异常。
      多数编译器上，字符串的比较是大小写敏感的。感谢 Bart Garst 的工作。</entry>
	</row>
	<row>
	  <entry>Feature 特性</entry>
	  <entry>In addition to support for month names or numbers, functions have been added to create date objects from multi-ordered date strings. Ex: "January-21-2002", "2002-Jan-21", and "21-Jan-2003". See <link linkend="date_time.gregorian.date_class">Date Class</link> for more details.<sbr/>
      增加了对月份名或月份数的支持，加入了从多顺序日期字符串创建 date 对象的函数。如： "January-21-2002", "2002-Jan-21", 
      和 "21-Jan-2003". 更多详情请见 <link linkend="date_time.gregorian.date_class">Date 类</link>。</entry>
	</row>
	<row>
	  <entry>Bug-Fix</entry><!-- leave '-' so table cell doesn't wrap -->
	  <entry>Various documentation fixes. Thanks to Bart Garst for updates.<sbr/>
      多个文档上的修正。感谢 Bart Garst 所做的更新。</entry>
	</row>
      </tbody>
    </tgroup>
  </informaltable>
  
  <bridgehead renderas="sect3">Changes from Boost 1.29 to 1.30 (date_time 1.00 to 1.01)</bridgehead>
  <para>
    Notice: The interface to the partial_date class (see <link linkend="date_time.gregorian.date_algorithms">date_algorithms</link>) was changed. The order of construction parameters was changed which will cause some code to fail execution. This change was made to facilitate more generic local time adjustment code. Thus instead of specifying partial_date pd(Dec,25) the code needs to be changed to partial_date pd(25, Dec); <sbr/>
    说明：partial_date 类的接口(见 <link linkend="date_time.gregorian.date_algorithms">日期算法</link>) 有所改变。 
    构造函数的参数顺序有所变化，这会导致某些代码执行失败。这个改变是为了便于提供更多的本地时间调整泛型代码。
    因此，要将使用 partial_date pd(Dec,25) 的代码改为 partial_date pd(25, Dec); 
  </para>
  <informaltable frame="all">
    <tgroup cols="2">
      <thead>
	<row>
	  <entry>Type 类型</entry>
	  <entry>Description 说明</entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry>Bug fix 缺陷修复</entry>
	  <entry>Added new experimental feature for Daylight Savings Time calculations. This allows traits based specification of dst rules.<sbr/>
      增加了新的试验特性：夏时制计算。基于 traits 来指定 dst 规则。</entry>
	</row>
	<row>
	  <entry>Feature 特性</entry>
	  <entry>Added new interfaces to calculate julian day and modified julian day to the gregorian date class. See <link linkend="date_time.gregorian.date_class">boost::gregorian::date</link>.<sbr/>
      增加了新的接口，以计算儒略日以及将儒略日修改为 gregorian date 类。请见 
      <link linkend="date_time.gregorian.date_class">boost::gregorian::date</link>.</entry>
	</row>
	<row>
	  <entry>Feature 特性</entry>
	  <entry>Add new interface to calculate iso 8601 week number for a date. See <link linkend="date_time.gregorian.date_class">boost::gregorian::date</link>.<sbr/>
      增加了新的接口，计算某个日期的 iso 8601 周数。请见 <link linkend="date_time.gregorian.date_class">
      boost::gregorian::date</link>.</entry>
	</row>
	<row>
	  <entry>Feature 特性</entry>
	  <entry>Add an iso 8601 time date-time format (eg: YYYYMMDDTHHHMMSS) parsing function. See <link linkend="date_time.posix_time.ptime_class">Class ptime</link> for more information.<sbr/>
      增加了一个 iso 8601 时间的 date-time 格式 (如：YYYYMMDDTHHHMMSS) 分析函数。更多信息请见 <link linkend="date_time.posix_time.ptime_class">类 ptime</link>。</entry>
	</row>
	<row>
	  <entry>Feature 特性</entry>
	  <entry> Added a length function to the period template so that both date_periods and time_periods will now support this function.<sbr/>
      为 period 模板增加一个 length 函数，date_periods 和 time_periods 现在都将支持这个函数。</entry>
	</row>
	<row>
	  <entry>Bug fix 缺陷修复</entry>
	  <entry>Split Jamfiles so that libs/date_time/build/Jamfile only builds library and /libs/date_time/libs/test/Jamfile which runs tests.<sbr/>
      对 Jamfiles 进行分离，libs/date_time/build/Jamfile 仅构建库文件，而 /libs/date_time/libs/test/Jamfile 则运行测试。</entry>
	</row>
	<row>
	  <entry>Bug fix 缺陷修复</entry>
	  <entry>Fixed many minor documentation issues.<sbr/>
      修正多个不重要的文档问题。</entry>
	</row>
	<row>
	  <entry>Bug fix 缺陷修复</entry>
	  <entry>Removed the DATE_TIME_INLINE macro which was causing link errors. This macro is no longer needed in projects using the library.<sbr/>
      去掉了引起链接错误的 DATE_TIME_INLINE 宏。该宏在使用本库的工程中不再需要。</entry>
	</row>
	<row>
	  <entry>Bug fix 缺陷修复</entry>
	  <entry>Added missing typedef for year_iterator to gregorian_types.hpp<sbr/>
      为 gregorian_types.hpp 中的 year_iterator 增加了缺少的 typedef.</entry>
	</row>
	<row>
	  <entry>Bug fix 缺陷修复</entry>
	  <entry>Fixed problem with gregorian ostream operators that prevented the use of wide streams.<sbr/>
      修正了格里历 ostream 操作符，以避免使用宽字符流。</entry>
	</row>
	<row>
	  <entry>Bug-Fix</entry><!-- leave '-' so table cell doesn't wrap -->
	  <entry>Tighten error handling for dates so that date(2002, 2, 29) will throw a bad_day_of_month exception. Previously the date would be incorrectly constructed. Reported by sourceforge bug: 628054 among others.<sbr/>
      对日期的错误处理更为严格，如 date(2002, 2, 29) 将抛出 bad_day_of_month 异常。以前这样的日期会错误构造。
      由 sourceforge bug 报告： 628054 及其它。</entry>
	</row>
      </tbody>
    </tgroup>
  </informaltable>
</section>
