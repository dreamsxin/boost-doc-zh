<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
"../../../tools/boostbook/dtd/boostbook.dtd">

<!-- Copyright (c) 2001-2005 CrystalClear Software, Inc.
     Subject to the Boost Software License, Version 1.0.
     (See accompanying file LICENSE_1_0.txt or  http://www.boost.org/LICENSE_1_0.txt)
-->

<section id="date_time.local_time.local_date_time">
  <title>Local Date Time 本地日期时间</title>

  <link linkend="local_date_time_intro">Introduction 简介</link> --
  <link linkend="local_date_time_header">Header 头文件</link> --
  <link linkend="local_date_time_clock_constr">Construct From Clock 从时钟构造</link> --
  <link linkend="local_date_time_constr">Construction 构造</link> --
  <link linkend="local_date_time_accessors">Accessors 访问器</link> --
  <link linkend="local_date_time_operators">Operators 操作符</link> --
  <link linkend="local_date_time_tm_func">Struct tm Functions</link>

  <anchor id="local_date_time_intro" />
  <bridgehead renderas="sect3">Introduction 简介</bridgehead>
  <para>
    A local_date_time object is a point in time and an associated time zone. The time is represented internally as UTC.<sbr/>
    local_date_time 对象是一个时间点加上一个相应时区。该时间在内部表示为 UTC. 
  </para>

  <anchor id="local_date_time_header" />
  <bridgehead renderas="sect3">Header 头文件</bridgehead>
  <para>
    The inclusion of a single header will bring in all boost::local_time types,
functions, and IO operators.<sbr/>
包含单个头文件即可引入所有 boost::local_time 类型、函数和 IO 操作符。
    <programlisting>
      #include "boost/date_time/local_time/local_time.hpp"
    </programlisting>
  </para>
  
  <anchor id="local_date_time_clock_constr" />
  <bridgehead renderas="sect3">Construct From Clock 从时钟构造</bridgehead>
  <para>
    Creation of a local_date_time object from clock is possible with either second, or sub second resolution.<sbr/>
    从时钟创建一个 local_date_time 对象，精度可以是秒或次秒级。
  </para>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Syntax 语法</entry>
            <entry>Example 例子</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top"><screen>local_microsec_clock(...)
  Return Type:
    local_date_time
  Parameter:
    time_zone_ptr</screen></entry>
            <entry><screen>time_zone_ptr zone(
  new posix_time_zone("MST-07")
);
local_date_time ldt = 
  local_microsec_clock::local_time(
    zone);</screen>
            </entry>
          </row>
          <row>
            <entry valign="top"><screen>local_sec_clock(...)
  Return Type:
    local_date_time 
  Parameter:
    time_zone_ptr</screen></entry>
            <entry><screen>time_zone_ptr zone(
  new posix_time_zone("MST-07")
);
local_date_time ldt = 
  local_sec_clock::local_time(zone);</screen>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </para>
  
  <anchor id="local_date_time_constr" />
  <bridgehead renderas="sect3">Construction 构造</bridgehead>
  <para>
    Construction of a local_date_time object can be done with a ptime and a time_zone_ptr where the ptime represents UTC time. Construction with a wall-clock representation takes the form of a date, a time_duration, a time_zone_ptr, and a fourth parameter that addresses the following complication.<sbr/>
    要构造一个 local_date_time 对象，可以用一个 ptime 加一个 time_zone_ptr 来构造，其中 ptime 表示 UTC 时间。
    从一个带有日期、time_duration 和 time_zone_ptr 的 wall-clock 表示进行构造，要解决以下复杂性。
  </para>
  <para>
    Construction from a wall-clock rep may result in differing shifts for a particular time zone, depending on daylight savings rules for that zone. This means it is also possible to create a local_date_time with a non-existent, or duplicated, UTC representation. These cases occur during the forward shift in time that is the transition into daylight savings and during the backward shift that is the transition out of daylight savings. The user has two options for handling these cases: a bool flag that states if the time is daylight savings, or an enum that states what to do when either of these cases are encountered.<sbr/>
    从一个 wall-clock 表示进行构造可能导致对某个时区进行不同的位移，这取决于该时区的夏令时规则。
    这意味着也可能会创建出一个不存在的或重复的，以UTC表示的 local_date_time. 
    这种情况会发生在刚好转入夏令时和从夏令时转出的时候。用户有两个选择来处理这种情况：
    用一个 bool 标志来表示该时间是否为夏令时，或者使用一个 enum 来表示遇到这种情形时要做什么。
  </para>
  <para>
    The bool flag is ignored when the given time_zone has no daylight savings specification. When the daylight savings status of a given time label is calculated and it does not match the flag, a <code>local_time::dst_not_valid</code> exception is thrown. If a time label is invalid (does not exist), a <code>local_time::time_label_invalid</code> exception is thrown.<sbr/>
    当给定的 time_zone 没有夏令时规则时，该 bool 标志将被忽略。当给定的时间标签的夏令时状态被计算出来并且与该标志不匹配时，
    将抛出一个 <code>local_time::dst_not_valid</code> 异常。如果时间标签是无效的(即不存在)，则抛出 
    <code>local_time::time_label_invalid</code> 异常。
  </para>
  <para>
    There are two elements in the <code>local_date_time::DST_CALC_OPTIONS</code> enum: <code>EXCEPTION_ON_ERROR</code> and <code>NOT_DATE_TIME_ON_ERROR</code>. The possible exceptions thrown are a <code>local_time::ambiguous_result</code> or a <code>local_time::time_label_invalid</code>. The <code>NOT_DATE_TIME_ON_ERROR</code> sets the time value to the special value <code>local_time::not_a_date_time</code> in the event of either a invalid or an ambiguous time label.<sbr/>
    在 <code>local_date_time::DST_CALC_OPTIONS</code> enum 是有两个元素：<code>EXCEPTION_ON_ERROR</code> 和 
    <code>NOT_DATE_TIME_ON_ERROR</code>. 可能抛出的异常是 <code>local_time::ambiguous_result</code> 或 
    <code>local_time::time_label_invalid</code>. 如果时间标签无效或不明确时，<code>NOT_DATE_TIME_ON_ERROR</code> 
    将时间值设为特定的 <code>local_time::not_a_date_time</code>. 


  </para>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry morerows="1">Syntax 语法</entry>
            <entry>Description 说明</entry>
          </row>
          <row>
            <entry>Example 例子</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top" morerows="1"><screen>local_date_time(...)
  Parameters:
    posix_time::ptime
    time_zone_ptr</screen></entry>
            <entry>The given time is expected to be UTC. Therefore, the given time will be adjusted according to the offset described in the time zone.<sbr/>
            给定的时间应为 UTC. 因此给定时间将被根据时区的偏移量来调整。</entry>
          </row>
          <row>
            <entry><screen>
// 3am, 2004-Nov-05 local time
ptime pt(date(2004,Nov,5), 
         hours(10));
time_zone_ptr zone(
  new posix_time_zone("MST-07"));
local_date_time az(pt, zone);</screen>
            </entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>local_date_time(...)
  Parameters:
    date
    time_duration 
    time_zone_ptr
    bool</screen></entry>
<entry>The passed time information understood to be in the passed tz. The DST flag must be passed to indicate whether the time is in daylight savings or not. May throw a <code>dst_not_valid</code> or <code>time_label_invalid</code> exception.<sbr/>
传入的时间信息被理解为在被传入时区的时间。必须传入 DST 标志以表示该时间是否为夏令时。可能抛出 <code>dst_not_valid</code> 
或 <code>time_label_invalid</code> 异常。</entry>
          </row>
          <row>
            <entry><screen>date d(2004,Nov,5);
time_duration td(5,0,0,0);
string z("PST-8PDT,M4.1.0,M10.1.0")
time_zone_ptr zone(
  new posix_time_zone(z));
local_date_time nyc(d, td, 
                    zone, false);</screen>
            </entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>local_date_time(...)
  Parameters:
    date
    time_duration
    time_zone_ptr
    DST_CALC_OPTIONS</screen></entry>
            <entry>The passed time information understood to be in the passed tz. The DST flag is calculated according to the specified rule. May throw a <code>ambiguous_result</code> or <code>time_label_invalid</code> exception.<sbr/>
            被传入的时间信息被理解为在被传入时区的时间。DST 标志会根据指定规则计算出来。可能抛出 <code>ambiguous_result</code> 
            或 <code>time_label_invalid</code> 异常。</entry>
          </row>
          <row>
            <entry><screen>date d(2004,Nov,5);
time_duration td(5,0,0,0);
string z("PST-8PDT,M4.1.0,M10.1.0")
time_zone_ptr zone(
  new posix_time_zone(z));
local_date_time nyc(d, td, zone, 
  NOT_DATE_TIME_ON_ERROR);</screen>
            </entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>local_date_time(local_date_time);</screen></entry>
            <entry>Copy Constructor.<sbr/>
            复制构造函数。</entry>
          </row>
          <row>
            <entry><screen>local_date_time az_2(az);</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>local_date_time(...)
  Parameters:
    special_values
    time_zone_ptr</screen></entry>
            <entry>Special Values constructor.<sbr/>
            特殊值构造函数。</entry>
          </row>
          <row>
            <entry><screen>time_zone_ptr zone(
  new posix_time_zone("MST-07")
);
local_date_time nadt(not_a_date_time, 
                     zone);
// default NULL time_zone_ptr
local_date_time nadt(pos_infin);</screen>
            </entry>
          </row>
          
        </tbody>
      </tgroup>
    </informaltable>
  </para>

  <anchor id="local_date_time_accessors" />
  <bridgehead renderas="sect3">Accessors 访问器</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry valign="top" morerows="1">Syntax 语法</entry>
            <entry>Description 说明</entry>
          </row>
          <row>
              <entry>Example 例子</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top" morerows="1"><screen>time_zone_ptr zone()</screen></entry>
            <entry>Returns associated time_zone object via a time_zone_ptr<sbr/>
            通过一个 time_zone_ptr 返回相关联的 time_zone 对象。</entry>
          </row>
          <row>
            <entry><screen></screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>bool is_dst()</screen></entry>
            <entry>Determines if time value is in DST for associated zone.<sbr/>
            判断时间值是否在相关时区的DST中。</entry>
          </row>
          <row>
            <entry></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>ptime utc_time()</screen></entry>
            <entry>Converts the local time value to a UTC value.<sbr/>
            将本地时间转为UTC值。</entry>
          </row>
          <row>
            <entry><screen>ptime pt(date(2004,Nov,5), 
         hours(10));
time_zone_ptr zone(
  new posix_time_zone("MST-07"));
local_date_time az(pt, zone);
az.utc_time(); // 10am 2004-Nov-5</screen>
            </entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>ptime local_time()</screen></entry>
            <entry>Returns the local time for this object (Wall-clock).<sbr/>
            返回该对象的本地时间(Wall-clock)。</entry>
          </row>
          <row>
            <entry><screen>ptime pt(date(2004,Nov,5), 
         hours(10));
time_zone_ptr zone(
  new posix_time_zone("MST-07"));
local_date_time az(pt, zone);
az.utc_time(); // 10am 2004-Nov-5
az.local_time(); // 3am 2004-Nov-5</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>local_time_in(...)
  Return Type:
    local_date_time 
  Parameters:
    time_zone_ptr
    time_duration</screen></entry>
            <entry>Returns a local_date_time representing the same UTC time as calling object, plus optional time_duration, with given time zone.<sbr/>
            给定某个时区，返回该时区与调用对象相同UTC时间的 local_date_time，可能会加上一段 time_duration.</entry>
          </row>
          <row>
            <entry><screen>local_date_time nyc = az.local_time_in(nyc_zone);
// nyc == 7am 2004-Nov-5</screen>
            </entry>
          </row>
          <!-- 
          <row>
            <entry valign="top" morerows="1"><screen>std::string zone_name()</screen></entry>
            <entry>Returns full zone name from associated time zone or "Coordinated Universal Time" if time_zone_ptr is NULL.</entry>
          </row>
          <row>
            <entry>
            </entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>std::string zone_abbrev()</screen></entry>
            <entry>Returns zone abbreviation from associated time zone or "UTC" if time_zone_ptr is NULL.</entry>
          </row>
          <row>
            <entry>
            </entry>
          </row>
          -->
          <row>
            <entry valign="top" morerows="1"><screen>bool is_infinity() const</screen></entry>
            <entry>Returns true if local_date_time is either positive or negative infinity<sbr/>
            返回 true 如果 local_date_time 为正无限或负无限。</entry>
          </row>
          <row>
            <entry><screen>local_date_time ldt(pos_infin); 
ldt.is_infinity(); // --> true</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>bool is_neg_infinity() const</screen></entry>
            <entry>Returns true if local_date_time is negative infinity<sbr/>
            返回 true 如果 local_date_time 为负无限。</entry>
          </row>
          <row>
            <entry><screen>local_date_time ldt(neg_infin);
ldt.is_neg_infinity(); // --> true</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>bool is_pos_infinity() const</screen></entry>
            <entry>Returns true if local_date_time is positive infinity<sbr/>
            返回 true 如果 local_date_time 为正无限。</entry>
          </row>
          <row>
            <entry><screen>local_date_time ldt(neg_infin); 
ldt.is_pos_infinity(); // --> true</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>bool is_not_a_date_time() const</screen></entry>
            <entry>Returns true if value is not a date<sbr/>
            返回 true 如果该值不是一个有效日期。</entry>
          </row>
          <row>
            <entry><screen>local_date_time ldt(not_a_date_time);
ldt.is_not_a_date_time(); // --> true</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>bool is_special() const</screen></entry>
            <entry>Returns true if local_date_time is any <code>special_value</code><sbr/>
            返回 true 如果 local_date_time 为任一 <code>special_value</code> </entry>
          </row>
          <row>
            <entry><screen>local_date_time ldt(pos_infin); 
local_date_time ldt2(not_a_date_time);
time_zone_ptr 
  mst(new posix_time_zone("MST-07"));
local_date_time 
  ldt3(local_sec_clock::local_time(mst));
ldt.is_special(); // --> true
ldt2.is_special(); // --> true
ldt3.is_special(); // --> false</screen></entry>
          </row>
        
        </tbody>
      </tgroup>
    </informaltable>
  </para>

  <anchor id="local_date_time_operators" />
  <bridgehead renderas="sect3">Operators 操作符</bridgehead>
  <informaltable frame="all">
    <tgroup cols="2">
      <thead>
	<row>
	  <entry valign="top" morerows="1">Syntax 语法</entry>
	  <entry>Description 说明</entry>
	</row>
	<row>
	  <entry>Example 例子</entry>
	</row>
      </thead>
      <tbody>
	<row>
          <entry valign="top" morerows="1"><screen>operator&lt;&lt;</screen></entry>
          <entry>Output streaming operator. This operator is part of the v1.33 IO addition to date_time. For complete details on this feature see <link linkend="date_time.date_time_io">Date Time IO</link>. The default output is shown in this example.<sbr/>
          流输出操作符。该操作符是 v1.33 中所增加的对 date_time 的 IO 的一部分。有关详情请见 
          <link linkend="date_time.date_time_io">日期时间 IO</link> 一节。缺省的输出请见下例。</entry>
	</row>
	<row>
          <entry><screen>
time_zone_ptr zone(new posix_time_zone("MST-07");
local_date_time ldt(date(2005,Jul,4),
                    hours(20), 
                    false);
std::cout &lt;&lt; ldt &lt;&lt; std::endl;
// "2005-Jul-04 20:00:00 MST"
          </screen></entry>
        </row>
        
	<row>
          <entry valign="top" morerows="1"><screen>operator>></screen></entry>
          <entry>Input streaming operator. This operator is part of the v1.33 IO addition to date_time. For complete details on this feature see <link linkend="date_time.date_time_io">Date Time IO</link>. At this time, <code>local_date_time</code> objects can only be streamed in with a Posix Time Zone string. A complete description of a Posix Time Zone string can be found in the documentation for the <link linkend="posix_time_zone_intro">posix_time_zone</link> class.<sbr/>
          流输入操作符。该操作符是 v1.33 中所增加的对 date_time 的 IO 的一部分。有关详情请见 
          <link linkend="date_time.date_time_io">日期时间 IO</link> 一节。当前 ，<code>local_date_time</code> 
          对象只能使用 Posix 时区字符串进行流输入。有关 Posix 时区字符串的完整描述请见 
          <link linkend="posix_time_zone_intro">posix_time_zone</link> 类的相关文档。</entry>
	</row>
	<row>
          <entry><screen>stringstream ss;
ss.str("2005-Jul-04 20:00:00 MST-07");
ss >> ldt;
          </screen></entry>
        </row>
        
	<row>
	  <entry valign="top" morerows="1"><screen>operator==, operator!=,
operator>, operator&lt;,
operator>=, operator&lt;=</screen></entry>
	  <entry>A full complement of comparison operators<sbr/>
      完整的比较操作符。</entry>
	</row>
	<row>
	  <entry><screen>ldt1 == ldt2, etc</screen></entry>
        </row>
        
	<row>
	  <entry valign="top" morerows="1"><screen>operator+, operator+=,
operator-, operator-=</screen></entry>
          <entry>Addition, subtraction, and shortcut operators for <code>local_date_time</code> and date duration types. These include: <code>days</code>, <code>months</code>, and <code>years</code>.<sbr/>
          <code>local_date_time</code> 和日期长度类型间的加法、减法以及相关简写操作符。日期长度类型包括有：
          <code>days</code>, <code>months</code>, 和 <code>years</code>.</entry>
	</row>
	<row>
	  <entry><screen>ldt + days(5), etc</screen></entry>
        </row>
        
	<row>
	  <entry valign="top" morerows="1"><screen>operator+, operator+=,
operator-, operator-=</screen></entry>
          <entry>Addition, subtraction, and shortcut operators for <code>local_date_time</code> and <code>time_duration</code>.<sbr/>
          <code>local_date_time</code> 和 <code>time_duration</code> 间的加法、减法以及相关简写操作符。</entry>
	</row>
	<row>
	  <entry><screen>ldt + hours(5), etc</screen></entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <anchor id="local_date_time_tm_func" />
  <bridgehead renderas="sect3">Struct tm Functions</bridgehead>
  <para>Function for converting a <code>local_date_time</code> object to a <code>tm</code> struct is provided.<sbr/>
  系统提供了将 <code>local_date_time</code> 对象转换为 <code>tm</code> 结构的函数。</para>
  <informaltable frame="all">
    <tgroup cols="2">
      <thead>
	<row>
	  <entry valign="top" morerows="1">Syntax 语法</entry>
	  <entry>Description 说明</entry>
	</row>
	<row>
	  <entry>Example 例子</entry>
	</row>
      </thead>
      <tbody>
        <row>
	  <entry valign="top" morerows="1"><screen>tm to_tm(local_date_time)</screen></entry>
          <entry>A function for converting a <code>local_date_time</code> object to a <code>tm</code> struct.<sbr/>
          将 <code>local_date_time</code> 对象转换为 <code>tm</code> 结构的函数。</entry>
	</row>
	<row>
          <entry><screen>
// 6am, 2005-Jul-05 local time  本地时间
std::string z("EST-05EDT,M4.1.0,M10.1.0");
ptime pt(date(2005,Jul,5), 
         hours(10));
time_zone_ptr zone( new posix_time_zone(z));
local_date_time ldt(pt, zone);
tm ldt_tm = to_tm(ldt);
/* tm_year => 105
   tm_mon  => 6
   tm_mday => 5
   tm_wday => 2 (Tuesday 星期二)
   tm_yday => 185
   tm_hour => 6
   tm_min  => 0
   tm_sec  => 0
   tm_isddst => 1 */</screen>
	  </entry>
        </row>

      </tbody>
    </tgroup>
  </informaltable>
</section>
