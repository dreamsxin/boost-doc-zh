<?xml version="1.0" encoding="utf-8"?>
<!--
   Copyright (c) 2002 Douglas Gregor <doug.gregor -at- gmail.com>
  
   Distributed under the Boost Software License, Version 1.0.
   (See accompanying file LICENSE_1_0.txt or copy at
   http://www.boost.org/LICENSE_1_0.txt)
  -->
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
  "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<section id="function.misc" last-revision="$Date: 2008-07-14 14:32:29 -0400 (Mon, 14 Jul 2008) $">
  <title>Miscellaneous Notes 杂项注记</title>

  <section>
    <title>Boost.Function vs. Function Pointers  Boost.Function与函数指针比较</title>
<para>Boost.Function has several advantages over function pointers, namely:<sbr/>
Boost.Function 有几个超越函数指针的好处，即：

<itemizedlist spacing="compact">
   <listitem><para>Boost.Function allows arbitrary compatible function objects to be targets (instead of requiring an exact function signature).<sbr/>
   Boost.Function 允许任意的兼容函数对象作为目标（而不需要严格的函数识别标识）。</para></listitem>
   <listitem><para>Boost.Function may be used with argument-binding and other function object construction libraries.<sbr/>
   Boost.Function 可以和参数绑定及其它函数对象构造库一起使用。</para></listitem>
   <listitem><para>Boost.Function has predictible behavior when an empty function object is called. <sbr/>
   当一个空函数对象被调用时，Boost.Function 有可预期行为。</para></listitem>
</itemizedlist></para>

<para> And, of course, function pointers have several advantages over Boost.Function:<sbr/>
当然，函数指针也有几个超越 Boost.Function 的好处：

<itemizedlist spacing="compact">
    <listitem><para> Function pointers are smaller (the size of one pointer instead of four or more) <sbr/>
    函数指针更小（只有一个指针而不是三个指针的大小）</para></listitem>
    <listitem><para> Function pointers are faster (Boost.Function may require two calls through function pointers) <sbr/>
    函数指针更快（Boost.Function 可能需要两次通过函数指针的调用）</para></listitem>
    <listitem><para> Function pointers are backward-compatible with C libraries.<sbr/>
    函数指针可以向后兼容 C 库。</para></listitem>
    <listitem><para> More readable error messages. <sbr/>
    更可读的错误信息。</para></listitem>
</itemizedlist>
</para>
  </section>

  <section>
    <title>Performance 性能</title>

<section>
  <title>Function object wrapper size 函数对象包装类的大小</title>
  <para> Function object wrappers will be the size of a struct containing a member function pointer and two data pointers. The actual size can vary significantly depending on the underlying platform; on 32-bit Mac OS X with GCC, this amounts to 16 bytes, while it is 32 bytes Windows with Visual C++. Additionally, the function object target may be allocated on the heap, if it cannot be placed into the small-object buffer in the <code>boost::function</code> object.<sbr/>
  函数对象包装类相当于一个成员函数指针加上两个数据指针所组成的结构的大小。实际的大小依据不同的底层平台而有所不同；
  在32位 Mac OS X 的 GCC 上，大小为16字节，而在 Windows 的 Visual C++ 上，则为32字节。
  另外，函数对象目标可能分配在堆上，如果它不能被放入 <code>boost::function</code> 对象的小对象缓冲区中。</para>
</section>

<section>
  <title>Copying efficiency 拷贝效率</title>
  <para> Copying function object wrappers may require allocating memory for a copy of the function object target. The default allocator may be replaced with a faster custom allocator or one may choose to allow the function object wrappers to only store function object targets by reference (using <computeroutput>ref</computeroutput>) if the cost of this cloning becomes prohibitive. Small function objects can be stored within the <code>boost::function</code> object itself, improving copying efficiency.<sbr/>
  拷贝函数对象包装类可能需要为函数对象目标的拷贝分配内存。缺省的分配器可以替换成一个更快的、
  定制的分配器或者由于这个克隆的成本高得令人望而却步，而可能选择一个允许函数对象包装类仅仅以引用方式
  （使用 <computeroutput>ref</computeroutput>）存储函数对象目标的方式。小的函数对象可以被保存在 
  <code>boost::function</code> 对象本身中，以提高复制的效率。

</para>
 </section>

<section>
  <title>Invocation efficiency 调用效率</title>
<para> With a properly inlining compiler, an invocation of a function object requires one call through a function pointer. If the call is to a free function pointer, an additional call must be made to that function pointer (unless the compiler has very powerful interprocedural analysis).<sbr/>
使用一个彻底内联的编译器，对一个函数对象的调用需要一次通过函数指针的调用。
如果这个调用是一个自由的函数指针，就必须有一次附加的调用以生成这个函数指针
（除非编译器具有非常强大的）进程间的分析能力。</para>
  </section>
</section>

  <section>
    <title>Combatting virtual function "bloat" 阻止虚拟函数“膨胀”</title>
<para> The use of virtual functions tends to cause 'code bloat' on many compilers. When a class contains a virtual function, it is necessary to emit an additional function that classifies the type of the object. It has been our experience that these auxiliary functions increase the size of the executable significantly when many <computeroutput>boost::function</computeroutput> objects are used. <sbr/>
在很多编译器上虚拟函数的使用趋向于代码膨胀。当一个类包含一个虚拟函数值，
它必须发行一个额外的函数将对象的类型分类。根据我们的经验，当使用了很多 
<computeroutput>boost::function</computeroutput> 对象时，
这些辅助函数对于可执行代码大小的增加是值得注意的。</para>

<para> In Boost.Function, an alternative but equivalent approach was taken using free functions instead of virtual functions. The Boost.Function object essentially holds two pointers to make a valid target call: a void pointer to the function object it contains and a void pointer to an "invoker" that can call the function object, given the function pointer. This invoker function performs the argument and return value conversions Boost.Function provides. A third pointer points to a free function called the "manager", which handles the cloning and destruction of function objects. The scheme is typesafe because the only functions that actually handle the function object, the invoker and the manager, are instantiated given the type of the function object, so they can safely cast the incoming void pointer (the function object pointer) to the appropriate type.<sbr/>
在 Boost.Function 中，一个可选且有效的方法是使用自由函数代替虚拟函数。
Boost.Function 对象实际上持有两个指针做一次合法的目标调用：
一个指向它所包含的函数对象的 void 指针和一个指向可以调用这个函数对象的“调用者”的 void 指针，
它给出函数指针。这个调用者函数执行 Boost.Function 提供的参数和返回值转换。
第三个指针指向一个被称为“管理者”的函数，它处理函数对象的克隆和析构。
这个方案是类型安全的，因为只有实际处理函数对象的函数（调用者和管理者），
被给定的函数对象类型实例化，所以它们可以安全地将输入的 void 指针（函数对象指针）转型为适当的类型。</para>
  </section>

  <section>
    <title>Acknowledgements 鸣谢</title> 

    <para> Many people were involved in the construction of this
    library. William Kempf, Jesse Jones and Karl Nelson were all
    extremely helpful in isolating an interface and scope for the
    library. John Maddock managed the formal review, and many
    reviewers gave excellent comments on interface, implementation,
    and documentation. Peter Dimov led us to the function
    declarator-based syntax.<sbr/>
    很多人投身于此库的构建。William Kempf，Jesse Jones 和 Karl Nelson 
    在隔绝此库的接口和范围中给予极大的帮助。John Maddock 主持了正式评审，
    很多详审参与者给出了关于接口，实现和文档的极好的意见。
    Peter Dimov 引导我们走向 function declarator-based（基于函数声明符）的语法。</para>
  </section>
</section>
