<?xml version="1.0" encoding="utf-8"?>
<!--
   Copyright (c) 2002 Douglas Gregor <doug.gregor -at- gmail.com>
  
   Distributed under the Boost Software License, Version 1.0.
   (See accompanying file LICENSE_1_0.txt or copy at
   http://www.boost.org/LICENSE_1_0.txt)
  -->
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
  "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<section id="function.history" last-revision="$Date: 2008-10-16 09:21:50 -0400 (Thu, 16 Oct 2008) $">
  <title>History &amp; Compatibility Notes 历史和兼容性注记</title>

<itemizedlist spacing="compact">

  <listitem><para><bold>Version 1.37.0</bold>: </para>
    <itemizedlist spacing="compact">
      <listitem><para>Improved the performance of Boost.Function's
      swap() operation for large function objects. Original patch
      contributed by Niels Dekker.<sbr/>
      改进了 Boost.Function 的 swap() 操作对于大的函数对象的性能。
      最初的补丁贡献自 Niels Dekker.</para></listitem>

      <listitem><para>Added a new header &lt;boost/function/function_typeof.hpp&gt; that provides support for using the Boost.Typeof library on Boost.Function objects.<sbr/>
      增加新的头文件 &lt;boost/function/function_typeof.hpp&gt;，
      提供对 Boost.Function 对象使用 Boost.Typeof 库的支持。</para></listitem>

      <listitem><para>Added a new header &lt;boost/function/function_fwd.hpp&gt; that provides support for using the Boost.Typeof library on Boost.Function objects.<sbr/>
      增加新的头文件 &lt;boost/function/function_fwd.hpp&gt;，
      提供对 Boost.Function 对象使用 Boost.Typeof 库的支持。</para></listitem>

      <listitem><para>The <methodname alt="boost::function::target">target</methodname>()
      function now respects the cv-qualifiers of function objects
      stored by reference
      (using <classname>boost::reference_wrapper</classname>), such
      that a reference to a <code>const</code> function object cannot
      be accessed as a reference to a non-<code>const</code> function
      object.<sbr/>
      <methodname alt="boost::function::target">target</methodname>() 
      函数现在会关注以引用方式(用 <classname>boost::reference_wrapper</classname>)
      保存的函数对象的cv-限定符，这样，一个 <code>const</code> 函数对象的引用将不能被当成一个非-
      <code>const</code> 函数对象的引用来访问。</para></listitem>
    </itemizedlist>
  </listitem>

  <listitem><para><bold>Version 1.36.0</bold>: </para>
    <itemizedlist spacing="compact">
      <listitem><para>Boost.Function now implements allocator support
      in the same way that is is provided in C++0x, based on C++
      committee
      proposal <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2308.html">N2308</ulink>. This
      change removes the <computeroutput>Allocator</computeroutput>
      template parameter of <classname>boost::function</classname> in
      favor of a constructor that takes an argument. While this is a
      backward-incompatible change, it is likely to affect only a few
      users. This change to Function was contributed by Emil
      Dotchevski, which also authored the corresponding C++ committee
      proposal.<sbr/>
      Boost.Function 现在实现了与基于 C++ 委员会的建议书 
      <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2308.html">N2308</ulink> 
      的 C++0x 分配器相同方式的分配器。这一变更去掉了 <classname>boost::function</classname> 
      的 <computeroutput>Allocator</computeroutput> 模板参数，有利于构造函数只带一个参数。
      虽然这是一个后向不兼容的变更，但是它只影响到少量用户。Function 的这一变更是由 
      Emil Dotchevski 贡献的，他也是相应的 C++ 委员会建议书的作者是。</para></listitem>
    </itemizedlist>
  </listitem>

  <listitem><para><bold>Version 1.34.0</bold>: </para> 
    <itemizedlist spacing="compact">
      <listitem><para>Boost.Function now implements a small buffer optimization, which can drastically improve the performance when copying or construction Boost.Function objects storing small function objects. For instance, <code>bind(&amp;X:foo, &amp;x, _1, _2)</code> requires no heap allocation when placed into a Boost.Function object. Note that some exception-safety guarantees have changed: assignment provides the basic exception guarantee and <code>swap()</code> may throw.<sbr/>
      Boost.Function 现在实现了一个 small buffer optimization（小缓冲优化），
      在拷贝或构造存储小函数对象的 Boost.Function 对象时强有力地提升了性能。
      例如，<code>bind(&amp;X:foo, &amp;x, _1, _2)</code> 在放入一个 Boost.Function 
      对象时，不再请求堆分配。注意一些反对观点——安全保证被改变：
      赋值提供基本的异常保证而且 <code>swap()</code> 可能抛出异常。</para></listitem>
    </itemizedlist>
  </listitem>

  <listitem><para><bold>Version 1.30.0</bold>: </para> 
    <itemizedlist spacing="compact">
      <listitem><para>All features deprecated in version 1.29.0 have
      been removed from Boost.Function.<sbr/>
      版本 1.29.0 中所有被列为反对的特性从 Boost.Function 中移除。</para></listitem>
 
      <listitem><para><code><classname>boost::function</classname></code>
      and <code><classname>boost::functionN</classname></code> objects
      can be assigned to 0 (semantically equivalent to calling
      <code><methodname
      alt="boost::function::clear">clear</methodname>()</code>) and
      compared against 0 (semantically equivalent to calling
      <code><methodname
      alt="boost::function::empty">empty</methodname>()</code>).<sbr/>
      <code><classname>boost::function</classname></code> 和 
      <code><classname>boost::functionN</classname></code> 可以被赋为 0
      （语义上等价于调用 <code><methodname alt="boost::function::clear">clear</methodname>()</code>），
      还可以和 0 进行比较（语义上等价于调用 <code><methodname
      alt="boost::function::empty">empty</methodname>()</code>）。</para></listitem>

      <listitem><para>The Boost.Function code is now generated
      entirely by the <libraryname>Preprocessor</libraryname> library,
      so it is now possible to generate
      <code><classname>boost::function</classname></code> and
      <code><classname>boost::functionN</classname></code> class
      templates for any number of arguments.<sbr/>
      Boost.Function 的代码现在全部由 <libraryname>Preprocessor</libraryname> 
      库生成，所以现在为任何参数个数生成 <code><classname>boost::function</classname></code> 
      和 <code><classname>boost::functionN</classname></code> 类模板都是有可能的。</para></listitem>

      <listitem><para>The
      <classname>boost::bad_function_call</classname> exception class
      was introduced.<sbr/>
      引入了 <classname>boost::bad_function_call</classname> 异常类。</para></listitem>
      </itemizedlist>
  </listitem>

  <listitem><para><bold>Version 1.29.0</bold>:
  Boost.Function has been partially redesigned to minimize the
  interface and make it cleaner. Several seldom- or never-used
  features of the older Boost.Function have been deprecated and will
  be removed in the near future. Here is a list of features that have
  been deprecated, the likely impact of the deprecations, and how to
  adjust your code:<sbr/>
  Boost.Function 的一部分被重新设计以最小化接口并使它更干净。
  几个很少使用或从来不用的旧 Boost.Function 的特性被列为反对并会在不远的将来被移除。
  以下是一个列表，列出这些被反对的特性，还有被反对后可能的影响，以及如何调整你的代码：

<itemizedlist spacing="compact">
  <listitem><para>The <computeroutput>boost::function</computeroutput> class template syntax has
  changed. The old syntax, e.g., <computeroutput>boost::function&lt;int, float,
  double, std::string&gt;</computeroutput>, has been changed to a more natural
  syntax <computeroutput>boost::function&lt;int (float, double,
  std::string)&gt;</computeroutput>, where all return and argument types are
  encoded in a single function type parameter. Any other template
  parameters (e.g., the <computeroutput>Allocator</computeroutput>) follow this single
  parameter.<sbr/>
  <computeroutput>boost::function</computeroutput> 类模板的语法发生了变化。
  老的语法，比如 <computeroutput>boost::function&lt;int, float, double, std::string&gt;</computeroutput> 
  被改变成更自然的语法 <computeroutput>boost::function&lt;int (float, double, std::string)&gt;</computeroutput>，
  这里所有的返回和参数类型被编码到一个单独的函数类型参数中。
  任何其它模板参数（比如 <computeroutput>Allocator</computeroutput>）跟在这个单独参数之后。</para>

  <para> The resolution to this change depends on the
  abilities of your compiler: if your compiler supports template
  partial specialization and can parse function types (most do), modify 
  your code to use the newer
  syntax (preferable) or directly use one of the
  <computeroutput>functionN</computeroutput> classes whose syntax has not
  changed. If your compiler does not support template partial
  specialization or function types, you must take the latter option and 
  use the numbered Boost.Function classes. This option merely requires 
  changing types such as <computeroutput>boost::function&lt;void, int, int&gt;</computeroutput>
  to <computeroutput>boost::function2&lt;void, int, int&gt;</computeroutput> (adding the number of
  function arguments to the end of the class name).<sbr/>
  这一改变的决定依赖于你的编译器的能力：如果你的编译器支持模板偏特化并可以解析函数参数
  （大多数都可以），那就使用新的语法改变你的代码（推荐）或者直接使用那个语法没有变化的 
  <computeroutput>functionN</computeroutput> 类。如果你的编译器不支持模板偏特化或函数类型，
  你必须使用后一种选择并使用带有编号的 Boost.Function 类。这一选择只不过需要将类似 
  <computeroutput>boost::function&lt;void, int, int&gt;</computeroutput> 的类型改为 
  <computeroutput>boost::function2&lt;void, int, int&gt;</computeroutput>
  （在类名的最后增加函数参数的个数）。</para>

  <para> Support for the old syntax with the
  <computeroutput>boost::function</computeroutput> class template will persist for a short
  while, but will eventually be removed so that we can provide better
  error messages and link compatibility. <sbr/>
  <computeroutput>boost::function</computeroutput> 类模板对旧语法的支持会持续一小段时间，
  但最终会被移除，以便我们可以提供更好的错误信息和连接兼容性。</para></listitem> 

  <listitem><para>The invocation
  policy template parameter (<computeroutput>Policy</computeroutput>) has been deprecated
  and will be removed. There is no direct equivalent to this rarely
  used feature.<sbr/>
  invocation policy 类模板 (<computeroutput>Policy</computeroutput>) 被列为反对并将被移除。
  对这一很少使用的特性没有直接的对应物。</para></listitem> 

  <listitem><para>The mixin template parameter
  (<computeroutput>Mixin</computeroutput>) has been deprecated and will be removed. There
  is not direct equivalent to this rarely used feature.<sbr/>
  mixin 模板参数 (<computeroutput>Mixin</computeroutput>) 被列为反对并将被移除。
  对这一很少使用的特性没有直接的对应物。</para></listitem> 

  <listitem><para>The
  <computeroutput>set</computeroutput> methods have been deprecated and will be
  removed. Use the assignment operator instead.<sbr/>
  <computeroutput>set</computeroutput> 方法被列为反对并将被移除。
  使用赋值操作符代替。</para></listitem>
</itemizedlist>
</para>
</listitem>
</itemizedlist>
</section>
