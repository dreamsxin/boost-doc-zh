[/
 / Copyright (c) 2008 Marcin Kalicinski (kalita <at> poczta dot onet dot pl)
 / Copyright (c) 2009 Sebastian Redl (sebastian dot redl <at> getdesigned dot at)
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]
[section XML Parser  XML分析器]
[def __xml__ [@http://en.wikipedia.org/wiki/XML XML format]]
[def __xml_parser.hpp__ [headerref boost/property_tree/xml_parser.hpp xml_parser.hpp]]
[def __RapidXML__ [@http://rapidxml.sourceforge.net/ RapidXML]]
[def __boost__ [@http://www.boost.org Boost]]
The __xml__ is an industry standard for storing information in textual
form. Unfortunately, there is no XML parser in __boost__ as of the
time of this writing. The library therefore contains the fast and tiny
__RapidXML__ parser (currently in version 1.13) to provide XML parsing support.
RapidXML does not fully support the XML standard; it is not capable of parsing
DTDs and therefore cannot do full entity substitution.

__xml__ 是以文本方式保存信息的工业标准。不幸的是，目前在 __boost__ 还没有XML分析器。
因此，本库包含了一个小而快的 __RapidXML__ 分析器(当前版本为 1.13)以提供XML分析的支持。
RapidXML 并不完全支持XML标准；它不能分析DTDs，因此不能实现完全的实体替换。

By default, the parser will preserve most whitespace, but remove element content
that consists only of whitespace. Encoded whitespaces (e.g. &#32;) does not
count as whitespace in this regard. You can pass the trim_whitespace flag if you
want all leading and trailing whitespace trimmed and all continuous whitespace
collapsed into a single space.

缺省情况下，这个分析器会保留最多的空白符，但会删掉仅包含空白符的元素内容。
在此，编码的空白符(如 &#32;)并不被算作空白符。如果你想去掉所有前置和后置的空白符，
且将所有连续的空白符压缩为单个空格，可以传入 trim_whitespace 标志。

Please note that RapidXML does not understand the encoding specification. If
you pass it a character buffer, it assumes the data is already correctly
encoded; if you pass it a filename, it will read the file using the character
conversion of the locale you give it (or the global locale if you give it none).
This means that, in order to parse a UTF-8-encoded XML file into a wptree, you
have to supply an alternate locale, either directly or by replacing the global
one.

请注意，RapidXML 并不了解编码规范。如果你传入一个字符缓冲区，它会假定其中的数据已正确编码；
如果你传入一个文件名，它将使用你给定的locale (如果你没有给定，则使用全局locale)的字符转换。
这意味着，为了分析一个UTF-8编码的XML文件并存入 wptree，你必须提供一个替代locale，
或者直接提供，或者替换掉全局locale。

XML / property tree conversion schema (__read_xml__ and __write_xml__):

XML/属性树转换机制(__read_xml__ and __write_xml__)：

* Each XML element corresponds to a property tree node. The child elements
  correspond to the children of the node.[br]
  每个XML元素对应于一个属性树节点。子元素对应于该节点的子节点。
* The attributes of an XML element are stored in the subkey [^<xmlattr>]. There
  is one child node per attribute in the attribute node. Existence of the
  [^<xmlattr>] node is not guaranteed or necessary when there are no attributes.[br]
  一个XML元素的属性被保存于子键 [^<xmlattr>] 中。在属性节点中每个属性有一个子节点。
  当没有属性时，并不保证也不需要一定有 [^<xmlattr>] 节点。
* XML comments are stored in nodes named [^<xmlcomment>], unless comment
  ignoring is enabled via the flags.[br]
  XML注释被保存于名为 [^<xmlcomment>] 的节点中，除非用标志位激活了忽略注释。
* Text content is stored in one of two ways, depending on the flags. The default
  way concatenates all text nodes and stores them in a single node called
  [^<xmltext>]. This way, the entire content can be conveniently read, but the
  relative ordering of text and child elements is lost. The other way stores
  each text content as a separate node, all called [^<xmltext>].[br]
  文本内容以两种方法中的一种进行保存，由标志位决定。缺省的方法是将所有文本节点串接起来，
  将它们保存在单个名为 [^<xmltext>] 的节点中。这种方法方便读取整个内容，但文本的相对顺序
  以及子元素全部丢失。另一种方法是，将每个文本内容保存为单个节点，均命名为 [^<xmltext>]。

The XML storage encoding does not round-trip perfectly. A read-write cycle loses
trimmed whitespace, low-level formatting information, and the distinction
between normal data and CDATA nodes. Comments are only preserved when enabled.
A write-read cycle loses trimmed whitespace; that is, if the origin tree has
string data that starts or ends with whitespace, that whitespace is lost.

XML的存储编码并不是一个完美的循环。一次读-写循环会丢失前置和后置的空白符、
低级的格式化信息，以及普通数据与CDATA节点间的差异。注释仅在激活时被保留。
一次写-读循环则会丢失前置和后置的空白符；即，如果原树中有以空白符开头或结尾
的字符串数据，则空白符会丢掉。
[endsect] [/xml_parser]
