[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:localization_and_regex_traits Localization and Regex Traits 本地化和Regex Traits ]

[h2 Overview 概述 ]

Matching a regular expression against a string often requires locale-dependent information. For example,
how are case-insensitive comparisons performed? The locale-sensitive behavior is captured in a traits class.
xpressive provides three traits class templates: `cpp_regex_traits<>`, `c_regex_traits<>` and `null_regex_traits<>`.
The first wraps a `std::locale`, the second wraps the global C locale, and the third is a stub traits type for
use when searching non-character data. All traits templates conform to the
[link boost_xpressive.user_s_guide.concepts.traits_requirements Regex Traits Concept].\n
将一个正则表达式与一个字符串进行匹配，通常需要与locale有关的信息。例如，如何执行大小写不敏感的比较？
与locale有关的行为被收集到一个 traits 类中。xpressive提供了三个traits类模板：`cpp_regex_traits<>`, `c_regex_traits<>` 和 
`null_regex_traits<>`。第一个包装了一个 `std::locale`，第二个包装了全部 C locale，第三个则是在进行非字符数据搜索时使用的stub traits类型。
所有traits模板都符合 [link boost_xpressive.user_s_guide.concepts.traits_requirements Regex Traits 概念]。

[h2 Setting the Default Regex Trait 设置缺省的Regex Trait ]

By default, xpressive uses `cpp_regex_traits<>` for all patterns. This causes all regex objects to use
the global `std::locale`. If you compile with `BOOST_XPRESSIVE_USE_C_TRAITS` defined, then xpressive will use
`c_regex_traits<>` by default.\n
缺省地，xpressive对所有模式使用 `cpp_regex_traits<>`。这使得所有regex对象都使用全局的 `std::locale`。
如果你在编译时定义了 `BOOST_XPRESSIVE_USE_C_TRAITS`，则xpressive将缺省使用 `c_regex_traits<>`。

[h2 Using Custom Traits with Dynamic Regexes 对动态Regex使用定制的Traits ]

To create a dynamic regex that uses a custom traits object, you must use _regex_compiler_.
The basic steps are shown in the following example:\n
要创建一个使用定制的traits对象的动态regex，你必须使用 _regex_compiler_。以下例子示范了基本的步骤：

  // Declare a regex_compiler that uses the global C locale
  regex_compiler<char const *, c_regex_traits<char> > crxcomp;
  cregex crx = crxcomp.compile( "\\w+" );

  // Declare a regex_compiler that uses a custom std::locale
  std::locale loc = /* ... create a locale here ... */;
  regex_compiler<char const *, cpp_regex_traits<char> > cpprxcomp(loc);
  cregex cpprx = cpprxcomp.compile( "\\w+" );

The `regex_compiler` objects act as regex factories. Once they have been imbued with a locale,
every regex object they create will use that locale.\n
`regex_compiler` 对象就象一个regex工厂。一旦它们被注入一个locale，那么他们所创建的每一个regex对象都将使用那个locale。

[h2 Using Custom Traits with Static Regexes 对静态Regex使用定制的Traits ]

If you want a particular static regex to use a different set of traits, you can use the special `imbue()`
pattern modifier. For instance:\n
如果你想某个特定的静态regex使用一个不同的traits集，你可以使用特定的 `imbue()` 模式修饰符。例如：

  // Define a regex that uses the global C locale
  c_regex_traits<char> ctraits;
  sregex crx = imbue(ctraits)( +_w );

  // Define a regex that uses a customized std::locale
  std::locale loc = /* ... create a locale here ... */;
  cpp_regex_traits<char> cpptraits(loc);
  sregex cpprx1 = imbue(cpptraits)( +_w );

  // A shorthand for above
  sregex cpprx2 = imbue(loc)( +_w );

The `imbue()` pattern modifier must wrap the entire pattern. It is an error to `imbue` only
part of a static regex. For example:\n
`imbue()` 模式修饰符必须将整个模式包起来。只用 `imbue` 包裹一个静态regex的部分是错误的。例如：

  // ERROR! Cannot imbue() only part of a regex
  sregex error = _w >> imbue(loc)( _w );

[h2 Searching Non-Character Data With [^null_regex_traits] 搜索带[^null_regex_traits]的非字符数据]

With xpressive static regexes, you are not limitted to searching for patterns in character sequences.
You can search for patterns in raw bytes, integers, or anything that conforms to the
[link boost_xpressive.user_s_guide.concepts.chart_requirements Char Concept]. The `null_regex_traits<>` makes it simple. It is a
stub implementation of the [link boost_xpressive.user_s_guide.concepts.traits_requirements Regex Traits Concept]. It recognizes
no character classes and does no case-sensitive mappings.\n
对于xpressive静态regexes，你并没有被限于只能对字符序列进行模式搜索。
你可以对裸字节、整数或其它任意符合 [link boost_xpressive.user_s_guide.concepts.chart_requirements Char 概念] 的东西进行模式搜索。
`null_regex_traits<>` 令此非常简单。它是 [link boost_xpressive.user_s_guide.concepts.traits_requirements Regex Traits 概念]
的一个stub实现。它不识别任何字符类，也没有大小写映射。 

For example, with `null_regex_traits<>`, you can write a static regex to find a pattern in a
sequence of integers as follows:\n
例如，使用 `null_regex_traits<>`，你可以写一个如下的静态regex来在一个整数序列中查找模式： 

    // some integral data to search
    int const data[] = {0, 1, 2, 3, 4, 5, 6};

    // create a null_regex_traits<> object for searching integers ...
    null_regex_traits<int> nul;

    // imbue a regex object with the null_regex_traits ...
    basic_regex<int const *> rex = imbue(nul)(1 >> +((set= 2,3) | 4) >> 5);
    match_results<int const *> what;

    // search for the pattern in the array of integers ...
    regex_search(data, data + 7, what, rex);

    assert(what[0].matched);
    assert(*what[0].first == 1);
    assert(*what[0].second == 6);

[endsect]
