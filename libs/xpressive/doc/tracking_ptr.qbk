[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:cycle_collection_with___tracking_ptr___ Cycle collection with [^tracking_ptr<>] 用 [^tracking_ptr<>] 进行循环收集]

In xpressive, regex objects can refer to each other and themselves by value or by reference.
In addition, they ref-count their referenced regexes to keep them alive. This creates the possibility
for cyclic reference counts, and raises the possibility of memory leaks. xpressive avoids leaks
by using a type called `tracking_ptr<>`. This doc describes at a high level how `tracking_ptr<>`
works.\n
在xpressive中，regex对象可以以值方式或引用方式相互引用或自身引用。另外，它们对所引用的regexes进行引用计数以确保它们的生存。
这样就可能产生循环的引用计数，并可能导致内存泄漏。xpressive通过使用一个名为 `tracking_ptr<>` 的类型来防止泄漏。
本文档从较高的层面来说明 `tracking_ptr<>` 是如何工作的。 

[h2 Constraints 约束]

Our solution must meet the following design constraints:\n
我们的解决方案必须符合以下设计约束：

* No dangling references: All objects referred to directly or indirectly must be kept alive
  as long as the references are needed.\n
  没有悬空的引用：所有被直接或间接的对象必须在引用需要的期间保持生存。
* No leaks: all objects must be freed eventually.\n
  没有泄漏：所有对象最后必须被释放。
* No user intervention: The solution must not require users to explicitly invoke some cycle
  collection routine.\n
  没有用户干预：解决方案必须不需要用户显式地执行一些周期性的收集例程。
* Clean-up is no-throw: The collection phase will likely be called from a destructor, so it
  must never throw an exception under any circumstance.\n
  无抛出的清理：收集的阶段通常都是从析构函数调用的，所以在任何情况下都必须不会抛出异常。
  
[h2 Handle-Body Idiom 句柄-实体惯用法]

To use `tracking_ptr<>`, you must separate your type into a handle and a body. In the case of
xpressive, the handle type is called `basic_regex<>` and the body is called `regex_impl<>`. The
handle will store a `tracking_ptr<>` to the body.\n
要使用 `tracking_ptr<>`，你必须将你的类型分为句柄和实体。对于xpressive，句柄类型名为 `basic_regex<>` 
而实体类型名为 `regex_impl<>`。句柄将保存一个到实体的 `tracking_ptr<>`。

The body type must inherit from `enable_reference_tracking<>`. This gives the body the bookkeeping
data structures that `tracking_ptr<>` will use. In particular, it gives the body:\n
实体类型必须继承自 `enable_reference_tracking<>`。这为实体提供了一些 `tracking_ptr<>` 会用到的簿记数据结构。特定地，实体中有：

# `std::set<shared_ptr<body> > refs_` : collection of bodies to which this body refers, and\n
  `std::set<shared_ptr<body> > refs_` : 收集了该实体所引用的实体，和 
# `std::set<weak_ptr<body> > deps_` : collection of bodies which refer to this body.\n
  `std::set<weak_ptr<body> > deps_` : 收集了引用了该实体的实体。

[h2 References and Dependencies 引用与依赖]

We refer to (1) above as the "references" and (2) as the "dependencies". It is crucial to the
understanding of `tracking_ptr<>` to recognize that the set of references includes both those
objects that are referred to directly as well as those that are referred to indirectly (that
is, through another reference). The same is true for the set of dependencies. In other words,
each body holds a ref-count directly to every other body that it needs. \n
我们将以上的(1)称为"引用"，而(2)称为"依赖"。要弄明白 `tracking_ptr<>`，很重要的一点是，
要知道这个"引用"集合既包含直接引用的对象，也包含那些间接引用的对象(即通过另一个引用来引用的)。
对于"依赖"集合也同样如此。换句话说，每一个实体都持有对它所需的每一个其它实体的直接引用计数。

Why is this important?  Because it means that when a body no longer has a handle referring
to it, all its references can be released immediately without fear of creating dangling references. \n
为什么这点很重要？因为它意味着当一个实体不再有某个句柄引向它的时候，它的所有引用物就可以立即释放，而不用害怕会导致悬空的引用。

References and dependencies cross-pollinate. Here's how it works:\n
引用和依赖是交叉pollinate的。以下是它的工作方式：

# When one object acquires another as a reference, the second object acquires the first as
  a dependency.\n
  当一个对象获得另一个对象作为引用时，第二个对象获得第一个对象作为依赖。
# In addition, the first object acquires all of the second object's references, and the second
  object acquires all of the first object's dependencies.\n
  此外，第一个对象获得第二个对象的所有引用，且第二个对象获得第一个对象的所有依赖。
# When an object picks up a new reference, the reference is also added to all dependent objects.\n
  当一个对象增加一个新的引用时，该引用也会被增加到所有依赖对象中。
# When an object picks up a new dependency, the dependency is also added to all referenced
  objects.\n
  当一个对象增加一个新的依赖时，该依赖也会被增加到所有引用对象中。
# An object is never allowed to have itself as a dependency. Objects may have themselves as
  references, and often do.\n
  对象不允许以自己为依赖。但对象可以把自己作为引用，而且经常如此。

Consider the following code:\n
考虑以下代码：

    sregex expr;
    {
        sregex group  = '(' >> by_ref(expr) >> ')';                 // (1)
        sregex fact   = +_d | group;                                // (2)
        sregex term   = fact >> *(('*' >> fact) | ('/' >> fact));   // (3)
        expr          = term >> *(('+' >> term) | ('-' >> term));   // (4)
    }                                                               // (5)

Here is how the references and dependencies propagate, line by line:\n
以下逐行列出引用和依赖是如何传播的：

[table
[[Expression][Effects]]
[[1) `sregex group  = '(' >> by_ref(expr) >> ')';`]
[[^group: cnt=1 refs={expr} deps={}\n
expr:  cnt=2 refs={} deps={group}]]]

[[2) `sregex fact   = +_d | group;`]
[[^group: cnt=2 refs={expr} deps={fact}\n
expr:  cnt=3 refs={} deps={group,fact}\n
fact:  cnt=1 refs={expr,group} deps={}]]]

[[3) `sregex term   = fact >> *(('*' >> fact) | ('/' >> fact));`]
[[^group: cnt=3 refs={expr} deps={fact,term}\n
expr:  cnt=4 refs={} deps={group,fact,term}\n
fact:  cnt=2 refs={expr,group} deps={term}\n
term:  cnt=1 refs={expr,group,fact} deps={}]]]

[[4) `expr          = term >> *(('+' >> term) | ('-' >> term));`]
[[^group: cnt=5 refs={expr,group,fact,term} deps={expr,fact,term}\n
expr:  cnt=5 refs={expr,group,fact,term} deps={group,fact,term}\n
fact:  cnt=5 refs={expr,group,fact,term} deps={expr,group,term}\n
term:  cnt=5 refs={expr,group,fact,term} deps={expr,group,fact}]]]

[[5) `}`]
[[^expr:  cnt=2 refs={expr,group,fact,term} deps={group,fact,term}]]]
]

This shows how references and dependencies propagate when creating cycles of objects. After
line (4), which closes the cycle, every object has a ref-count on every other object, even
to itself. So how does this not leak? Read on.\n
这显示了在创建循环对象时，它们的引用和依赖是如何传播的。
在第(4)行之后，当循环结束时，每个对象都有到每个其它对象的引用计数，甚至是到它们自身的引用。
那么，怎样做才能不泄漏呢？继续看下去。

[h2 Cycle Breaking 打破循环]

Now that the bodies have their sets of references and dependencies, the hard part is done.
All that remains is to decide when and where to break the cycle. That is the job of `tracking_ptr<>`,
which is part of the handle. The `tracking_ptr<>` holds 2 `shared_ptr`s. The first, obviously,
is the `shared_ptr<body>` -- the reference to the body to which this handle refers. The other
`shared_ptr` is used to break the cycle. It ensures that when all the handles to a body go out
of scope, the body's set of references is cleared.\n
现在实体中存有它们的引用集合和依赖集合，困难的部分已经完成。剩下的就是决定何时以及在何处打破这个循环。
这是 `tracking_ptr<>` 的任务，它是句柄的组成部分。`tracking_ptr<>` 持有2个` shared_ptr`。
显然，第一个是 `shared_ptr<body>` -- 到该句柄所引向的实体的引用。另一个 `shared_ptr` 则用于打破循环。
它确保当指向某个实体的所有句柄离开作用域时，实体的引用集合被清除。

This suggests that more than one handle can refer to a body. In fact, `tracking_ptr<>` gives
you copy-on-write semantics -- when you copy a handle, the body is shared. That makes copies
very efficient. Eventually, all the handles to a particular body go out of scope. When that
happens, the ref count to the body might still be greater than 0 because some other body (or
this body itself!) might be holding a reference to it. However, we are certain that the cycle-breaker's
ref-count goes to 0 because the cycle-breaker only lives in handles. No more handles, no more
cycle-breakers.\n
可以有一个以上的句柄引向同一个实体。事实上，`tracking_ptr<>` 具有写时复制的语义 -- 当你复制一个句柄时，其实体是共享的。
这样令得复制操作非常高效。最后，指向某个特定实体的所有句柄离开作用域。
当此事发生时，该实体的引用计数可能还会大于0，因为某些其它的实体(或该实体本身)可能持有它的引用。
不过，我们可以肯定循环破坏者的引用计数为0，因为循环破坏者只存在于句柄中。没有其它句柄，也没有其它循环破坏者。

What does the cycle-breaker do? Recall that the body has a set of references of type 
`std::set<shared_ptr<body> >`. Let's call this type "references_type". The cycle-breaker is a
`shared_ptr<references_type>`. It uses a custom deleter, which is defined as follows:\n
循环破坏者都做些什么呢？记得在实体中有一个引用集合，其类型为 `std::set<shared_ptr<body> >`。
我们称之为"references_type"。循环破坏者是一个 `shared_ptr<references_type>`。它使用一个定制的删除器，定义如下：

  template<typename DerivedT>
  struct reference_deleter
  {
      void operator ()(std::set<shared_ptr<DerivedT> > *refs) const
      {
          refs->clear();
      }
  };

The job of to the cycle breaker is to ensure that when the last handle to a body goes away,
the body's set of references is cleared. That's it.\n
循环破坏者的任务是确保当一个实体的最后一个句柄离开时，实体的引用集合被清除。这就是了。

We can clearly see how this guarantees that all bodies are cleaned up eventually. Once every
handle has gone out of scope, all the bodies' sets of references will be cleared, leaving none
with a non-zero ref-count. No leaks, guaranteed.\n
我们可以清楚地看到，它是如何保证最后所有实体都被清除。
一旦所有句柄离开作用域，所有实体的引用集合将被清除，不会留下非零引用计数的东西。保证没有泄漏。

It's a bit harder to see how this guarantees no dangling references. Imagine that there are 3 
bodies: A, B and C. A refers to B which refers to C. Now all the handles to B go out of scope,
so B's set of references is cleared. Doesn't this mean that C gets deleted, even though it
is being used (indirectly) by A? It doesn't. This situation can never occur because we propagated
the references and dependencies above such that A will be holding a reference directly to C
in addition to B. When B's set of references is cleared, no bodies get deleted, because they
are all still in use by A.\n
要看出它如何保证不会有悬空引用有一点难度。想象有3个实体：A, B 和 C。A 引用 B，B 引用 C。
现在B的所有句柄离开了作用域，所以B的引用集合被清除。这是否意味着即使 C 还被 A (间接)使用着，它也会被删除？
不会的。这种情况永远不会发生，因为我们传播了引用和依赖，这样A除了持有B的引用，也直接持有到C的引用。
当B的引用集合被清除时，没有实体被删除，因为它们全都还被 A 使用着。

[h2 Future Work 未来的工作]

All these `std::set`s and `shared_ptr`s and `weak_ptr`s! Very inefficient. I used them because
they were handy. I could probably do better.\n
这些所有的 `std::sets` 和 `shared_ptr`s 和 `weak_ptr`s! 都非常低效。我完全是因为方便才使用它们的。我可能可以做得更好些。

Also, some objects stick around longer than they need to. Consider:\n
还有，有些对象存在的时间会比所需的时间长一些。例如：

    sregex b;
    {
        sregex a = _;
        b = by_ref(a);
        b = _;
    }
    // a is still alive here!

Due to the way references and dependencies are propagated, the `std::set` of references can only
grow. It never shrinks, even when some references are no longer needed. For xpressive this
isn't an issue. The graphs of referential objects generally stay small and isolated. If someone
were to try to use `tracking_ptr<>` as a general ref-count-cycle-collection mechanism, this problem
would have to be addressed.\n
由于引用和依赖的传播方式，保存引用的 `std::set` 只增不减。即使有些引用已不再需要，它也不会缩减。对于xpressive来说这不是一个问题。
对象的引用图通常都很小且相互独立。如果有人试图把 `tracking_ptr<>` 用作通用的引用计数循环收集机制，这个问题就必须要解决。

[endsect]
