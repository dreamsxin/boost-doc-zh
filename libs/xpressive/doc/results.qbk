[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:accessing_results Accessing Results 访问结果]

[h2 Overview 概述]

Sometimes, it is not enough to know simply whether a _regex_match_ or _regex_search_ was successful or not. If
you pass an object of type _match_results_ to _regex_match_ or _regex_search_, then after the algorithm has completed
successfully the _match_results_ will contain extra information about which parts of the regex matched which parts
of the sequence. In Perl, these sub-sequences are called ['back-references], and they are stored in the variables
[^$1], [^$2], etc. In xpressive, they are objects of type _sub_match_, and they are stored in the _match_results_
structure, which acts as a vector of _sub_match_ objects.\n
有时，只知道一次 _regex_match_ 或 _regex_search_ 是否成功是不够的。
如果你将一个 _match_results_ 对象传给 _regex_match_ 或 _regex_search_，那么在算法成功完成后，这个 
_match_results_ 对象将含有额外的关于哪部分regex匹配到哪部分序列的信息。在Perl中，这些子序列被称为['后向引用]，
它们被保存在变量 [^$1], [^$2], 等等之中。在xpressive中，它们是类型为 _sub_match_ 的对象，被保存在 _match_results_ 
结构中，该结构起到一个 _sub_match_ 对象向量的作用。

[h2 match_results]

So, you've passed a _match_results_ object to a regex algorithm, and the algorithm has succeeded. Now you want
to examine the results. Most of what you'll be doing with the _match_results_ object is indexing into it to access
its internally stored _sub_match_ objects, but there are a few other things you can do with a _match_results_
object besides.\n
好的，你已经传入一个 _match_results_ 对象给一个regex算法，并且该算法已经完成了。现在你想检查一下结果。
你要对 _match_results_ 对象所做的事情，主要就是按索引来访问它内部所保存的 _sub_match_ 对象，不过你还可以对 
_match_results_ 对象做一些其它事情。

The table below shows how to access the information stored in a _match_results_ object named `what`.\n
下表列出了如何访问保存在一个名为 `what` 的 _match_results_ 对象中的信息的方法。

[table match_results<> Accessors
    [[Accessor]             [Effects]]
    [[`what.size()`]        [Returns the number of sub-matches, which is always greater than zero after a successful match because the full match is stored in the zero-th sub-match.\n
    返回子匹配的数量，匹配成功后该值总是大于零，因为全匹配会被保存在第零个子匹配中。]]
    [[`what[n]`]            [Returns the ['n]-th sub-match.\n
    返回第['n]-个子匹配。]]
    [[`what.length(n)`]     [Returns the length of the ['n]-th sub-match. Same as `what[n].length()`.\n
    返回第['n]-个子匹配的长度。与 `what[n].length()` 相同。]]
    [[`what.position(n)`]   [Returns the offset into the input sequence at which the ['n]-th sub-match begins.\n
    返回第['n]-个子匹配的始端在输入序列中的偏移量。]]
    [[`what.str(n)`]        [Returns a `std::basic_string<>` constructed from the ['n]-th sub-match. Same as `what[n].str()`.\n
    返回一个由第['n]-个子匹配构造的 `std::basic_string<>`。与 `what[n].str()` 相同。]]
    [[`what.prefix()`]      [Returns a _sub_match_ object which represents the sub-sequence from the beginning of the input sequence to the start of the full match.\n
    返回一个 _sub_match_ 对象，表示从输入序列的始端到全匹配的始端的一个子序列。]]
    [[`what.suffix()`]      [Returns a _sub_match_ object which represents the sub-sequence from the end of the full match to the end of the input sequence.\n
    返回一个 _sub_match_ 对象，表示从全匹配的末端到输入序列的末端的一个子序列。]]
    [[`what.regex_id()`]    [Returns the `regex_id` of the _basic_regex_ object that was last used with this _match_results_ object.\n
    返回该 _match_results_ 对象最后使用的 _basic_regex_ 对象的 `regex_id`。]]
]

There is more you can do with the _match_results_ object, but that will be covered when we talk about
[link boost_xpressive.user_s_guide.grammars_and_nested_matches Grammars and Nested Matches].\n
对于 _match_results_ 对象，你还可以做更多的事情，我们讨论 
[link boost_xpressive.user_s_guide.grammars_and_nested_matches 语法和嵌套匹配] 的时候会提及。

[h2 sub_match]

When you index into a _match_results_ object, you get back a _sub_match_ object. A _sub_match_ is basically a pair
of iterators. It is defined like this:\n
当你对 _match_results_ 对象求索引时，你会得到一个 _sub_match_ 对象。本质上一个 _sub_match_ 是一对迭代器。其定义类似于：

    template< class BidirectionalIterator >
    struct sub_match
        : std::pair< BidirectionalIterator, BidirectionalIterator >
    {
        bool matched;
        // ...
    };

Since it inherits publicaly from `std::pair<>`, _sub_match_ has `first` and `second` data members of type
`BidirectionalIterator`. These are the beginning and end of the sub-sequence this _sub_match_ represents.
_sub_match_ also has a Boolean `matched` data member, which is true if this _sub_match_ participated in the full
match.\n
由于它公有地继承自 `std::pair<>`，所以 _sub_match_ 有两个类型为 `BidirectionalIterator` 的 `first` 和 `second` 数据成员。
它们是这个 _sub_match_ 所表示的子序列的始端和末端。_sub_match_ 还有一个布尔型的 matched 数据成员，如果该 _sub_match_ 
参与了全匹配，则为 true。

The following table shows how you might access the information stored in a _sub_match_ object called `sub`.\n
表示列出了如何访问保存在一个名为 `sub` 的 _sub_match_ 对象中的信息的方法。

[table sub_match<> Accessors
    [[Accessor]             [Effects]]
    [[`sub.length()`]       [Returns the length of the sub-match. Same as `std::distance(sub.first,sub.second)`.\n
    返回子匹配的长度。与 `std::distance(sub.first,sub.second)` 相同。]]
    [[`sub.str()`]          [Returns a `std::basic_string<>` constructed from the sub-match. Same as `std::basic_string<char_type>(sub.first,sub.second)`.\n
    返回一个由子匹配构造的 `std::basic_string<>`。与 `std::basic_string<char_type>(sub.first,sub.second)` 相同。]]
    [[`sub.compare(str)`]   [Performs a string comparison between the sub-match and `str`, where `str` can be a `std::basic_string<>`, C-style null-terminated string, or another sub-match. Same as `sub.str().compare(str)`.\n
    执行子匹配与 `str` 之间的一次字符串比较，其中 `str` 可以是 `std::basic_string<>`, C-风格的以空字符结尾的字符串，或是另一个子匹配。
    与 `sub.str().compare(str)` 相同。]]
]

[h2 __alert__ Results Invalidation 结果失效 __alert__]

Results are stored as iterators into the input sequence. Anything which invalidates
the input sequence will invalidate the match results. For instance, if you match a `std::string` object,
the results are only valid until your next call to a non-const member function of that `std::string` object.
After that, the results held by the _match_results_ object are invalid. Don't use them!\n
匹配的结果是保存为输入序列的迭代器的。任何使输入序列失效的事件都会使匹配结果失效。
例如，如果你匹配一个 `std::string` 对象，匹配的结果仅在你下一次调用该 `std::string` 对象的非常量成员函数之前是有效的。
之后，由 _match_results_ 对象所保存的结果就会失效。不要再使用它们！

[endsect]
