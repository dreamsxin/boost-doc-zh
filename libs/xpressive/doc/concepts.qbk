[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:concepts Concepts 概念]

[h2 CharT requirements  CharT的要求]
If type `BidiIterT` is used as a template argument to _basic_regex_, then `CharT` is
`iterator_traits<BidiIterT>::value_type`. Type `CharT` must have a trivial default
constructor, copy constructor, assignment operator, and destructor.  In addition
the following requirements must be met for objects; `c` of type `CharT`, `c1` and `c2` of
type `CharT const`, and `i` of type `int`:\n
如果类型 `BidiIterT` 被用作 _basic_regex_ 的一个模板参数，则 `CharT` 为 `iterator_traits<BidiIterT>::value_type`。
类型 `CharT` 必须带有一个平凡的缺省构造函数、复制构造函数、赋值操作符和析构函数。
另外，还必须符合以下要求；其中 `c` 的类型为 `CharT`, `c1` 和 `c2` 的类型为 `CharT const`, 而 `i` 的类型为 `int`: 

[table CharT Requirements
    [
        [[*Expression 表达式]]
        [[*Return type 返回类型]]
        [[*Assertion / Note / Pre- / Post-condition 断言/说明/先验/后验条件]]
    ]
    [
        [`CharT c`]
        [`CharT`]
        [Default constructor (must be trivial).\n
        缺省构造函数(必须是平凡的)。]
    ]
    [
        [`CharT c(c1)`]
        [`CharT`]
        [Copy constructor (must be trivial).\n
        复制构造函数(必须是平凡的)。]
    ]
    [
        [`c1 = c2`]
        [`CharT`]
        [Assignment operator (must be trivial).\n
        赋值操作符(必须是平凡的)。]
    ]
    [
        [`c1 == c2`]
        [`bool`]
        [`true` if `c1` has the same value as `c2`.\n
        `true` 如果 `c1` 的值与 `c2` 相同。]
    ]
    [
        [`c1 != c2`]
        [`bool`]
        [`true` if `c1` and `c2` are not equal.\n
        `true` 如果 `c1` 的值与 `c2` 不同。]
    ]
    [
        [`c1 < c2`]
        [`bool`]
        [`true` if the value of `c1` is less than `c2`.\n
        `true` 如果 `c1` 的值小于 `c2`。]
    ]
    [
        [`c1 > c2`]
        [`bool`]
        [`true` if the value of `c1` is greater than `c2`.\n
        `true` 如果 `c1` 的值大于 `c2`。]
    ]
    [
        [`c1 <= c2`]
        [`bool`]
        [`true` if `c1` is less than or equal to `c2`.\n
        `true` 如果 `c1` 的值小于等于 `c2`。]
    ]
    [
        [`c1 >= c2`]
        [`bool`]
        [`true` if `c1` is greater than or equal to `c2`.\n
        `true` 如果 `c1` 的值大于等于 `c2`。]
    ]
    [
        [`intmax_t i = c1`]
        [`int`]
        [
            `CharT` must be convertible to an integral type.\n
            `CharT` 必须可以转换为一个整数类型。
        ]
    ]
    [
        [`CharT c(i);`]
        [`CharT`]
        [`CharT` must be constructable from an integral type.\n
        `CharT` 必须可以从一个整数类型构造。]
    ]
]

[h2 Traits Requirements  Traits的要求]
In the following table `X` denotes a traits class defining types and functions
for the character container type `CharT`; `u` is an object of type `X`; `v` is an
object of type `const X`; `p` is a value of type `const CharT*`; `I1` and `I2` are
`Input Iterators`; `c` is a value of type `const CharT`; `s` is an object of type
`X::string_type`; `cs` is an object of type `const X::string_type`; `b` is a value of
type `bool`; `i` is a value of type `int`; `F1` and `F2` are values of type `const CharT*`;
`loc` is an object of type `X::locale_type`; and `ch` is an object of `const char`.\n
在下表中，`X` 表示一个traits类，为字符容器类型 `CharT` 定义了相关类型和函数；`u` 是一个类型为 `X` 的对象；
`v` 是一个类型为 `const X` 的对象；`p` 是类型为 `const CharT*` 的值；`I1` 和 `I2` 为 `Input Iterators`；
`c` 是类型为 `const CharT` 的值；`s` 是一个类型为 `X::string_type` 的对象；`cs` 是一个类型为 `const X::string_type` 的对象；
`b` 是类型为 `bool` 的值；`i` 是类型为 `int` 的值；`F1` 和 `F2` 是类型为 `const CharT*` 的值；
`loc` 是一个类型为 `X::locale_type` 的对象；`ch` 是一个类型为 `const char` 的对象。

[table Traits Requirements
    [
        [
            [*Expression 表达式]
        ]
        [
            [*Return type 返回类型]
        ]
        [
            [*Assertion / Note  断言/说明\n
                Pre / Post condition 先验/后验条件]
        ]
    ]
    [
        [
            `X::char_type`
        ]
        [
            `CharT`
        ]
        [
            The character container type used in the implementation of class template _basic_regex_.\n
            在类模板 _basic_regex_ 的实现中所使用的字符容器类型。
        ]
    ]
    [
        [
            `X::string_type`
        ]
        [
            `std::basic_string<CharT>` or `std::vector<CharT>`
        ]
        [

        ]
    ]
    [
        [
            `X::locale_type`
        ]
        [
            ['Implementation defined]
        ]
        [
            A copy constructible type that represents the locale used by the traits class.\n
            一个表示该traits类所使用的locale的可复制构造类型。
        ]
    ]
    [
        [
            `X::char_class_type`
        ]
        [
            ['Implementation defined]
        ]
        [
            A bitmask type representing a particular character classification. Multiple
                values of this type can be bitwise-or'ed together to obtain a new valid value.\n
                一个表示特定字符分类的掩码类型。可以对该类型的多个值进行位或操作以得到一个新的有效值。
        ]
    ]
    [
        [
            `X::hash(c)`
        ]
        [
            `unsigned char`
        ]
        [
            Yields a value between `0` and `UCHAR_MAX` inclusive.\n
            生成一个在 `0` 到 `UCHAR_MAX` (含)之间的值。
        ]
    ]
    [
        [
            `v.widen(ch)`
        ]
        [
            `CharT`
        ]
        [
            Widens the specified `char` and returns the resulting `CharT`.\n
            对指定的 `char` 加宽并返回得到的 `CharT`.
        ]
    ]
    [
        [
            `v.in_range(r1, r2, c)`
        ]
        [
            `bool`
        ]
        [
            For any characters `r1` and `r2`, returns `true` if `r1 <= c && c <= r2`.
                Requires that `r1 <= r2`.\n
                对于任意字符 `r1` 和 `r2`，返回 `true` 如果 `r1 <= c && c <= r2`。要求 `r1 <= r2`.
        ]
    ]
    [
        [
            `v.in_range_nocase(r1, r2, c)`
        ]
        [
            `bool`
        ]
        [
            For characters `r1` and `r2`, returns `true` if there is some character
                `d` for which `v.translate_nocase(d) == v.translate_nocase(c)` and
                `r1 <= d && d <= r2`. Requires that `r1 <= r2`.\n
                对于任意字符 `r1` 和 `r2`，返回 `true` 如果存在某个字符 `d` 满足 `v.translate_nocase(d) == v.translate_nocase(c)` 
                且 `r1 <= d && d <= r2`。要求 `r1 <= r2`. 
        ]
    ]
    [
        [
            `v.translate(c)`
        ]
        [
            `X::char_type`
        ]
        [
            Returns a character such that for any character `d` that is to be considered
                equivalent to `c` then `v.translate(c) == v.translate(d)`.\n
                返回一个字符，满足对于任意被认为等同于 `c` 的字符 `d` 有 `v.translate(c) == v.translate(d)`. 
        ]
    ]
    [
        [
            `v.translate_nocase(c)`
        ]
        [
            `X::char_type`
        ]
        [
            For all characters `C` that are to be considered
            equivalent to `c` when comparisons are to be performed without regard to case,
            then `v.translate_nocase(c) == v.translate_nocase(C)`.\n
            对于所有被认为等同于 `c` 的字符 `C`，如果比较操作不考虑大小写，则 `v.translate_nocase(c) == v.translate_nocase(C)`. 
        ]
    ]
    [
        [
            `v.transform(F1, F2)`
        ]
        [
            `X::string_type`
        ]
        [
            Returns a sort key for the character sequence designated by the iterator range
                `[F1, F2)` such that if the character sequence `[G1, G2)` sorts before the
                character sequence `[H1, H2)` then `v.transform(G1, G2) < v.transform(H1, H2)`.\n
                对于由迭代器区间 `[F1, F2)` 所指定的字符序列，返回一个分类键，满足如果字符序列 `[G1, G2)` 
                排在字符序列 `[H1, H2)` 之前，则 `v.transform(G1, G2) < v.transform(H1, H2)`.
        ]
    ]
    [
        [
            `v.transform_primary(F1, F2)`
        ]
        [
            `X::string_type`
        ]
        [
            Returns a sort key for the character sequence designated by the iterator range
                `[F1, F2)` such that if the character sequence `[G1, G2)` sorts before the
                character sequence `[H1, H2)` when character case is not considered then
                `v.transform_primary(G1, G2) < v.transform_primary(H1, H2)`.\n
                对于由迭代器区间 `[F1, F2)` 所指定的字符序列，返回一个分类键，满足如果字符序列 `[G1, G2)` 
                在不考虑大小写时，排在字符序列 `[H1, H2)` 之前，则 `v.transform_primary(G1, G2) < v.transform_primary(H1, H2)`. 
        ]
    ]
    [
        [
            `v.lookup_classname(F1, F2)`
        ]
        [
            `X::char_class_type`
        ]
        [
            Converts the character sequence designated by the iterator range `[F1,F2)` into a
                bitmask type that can subsequently be passed to `isctype`. Values returned from
                `lookup_classname` can be safely bitwise or'ed together. Returns `0` if the
                character sequence is not the name of a character class recognized by `X`. The
                value returned shall be independent of the case of the characters in the
                sequence.\n
                将由迭代器区间 `[F1,F2)` 所指定的字符序列转换为一个可以传递给 `isctype` 的掩码类型。
                由 `lookup_classname` 返回值可以安全地进行位或操作。如果该字符序列不是由 `X` 
                所承认的字符类的名字，则返回 `0`。返回值应该与序列中的字符大小写无关。
        ]
    ]
    [
        [
            `v.lookup_collatename(F1, F2)`
        ]
        [
            `X::string_type`
        ]
        [
            Returns a sequence of characters that represents the collating element
                consisting of the character sequence designated by the iterator range `[F1, F2)`.
                Returns an empty string if the character sequence is not a valid collating
                element.\n
                返回一个字符序列，表示包含由迭代器区间 `[F1, F2)` 所指定的字符序列的校对元素。
                如果该字符序列不是一个有效的校对元素，则返回一个空串。
        ]
    ]
    [
        [
            `v.isctype(c, v.lookup_classname(F1, F2))`
        ]
        [
            `bool`
        ]
        [
            Returns `true` if character `c` is a member of the character class designated by
                the iterator range `[F1, F2)`, `false` otherwise.\n
                如果字符 `c` 是由迭代器区间 `[F1, F2)` 所指定的字符类的成员，则返回 `true`，否则返回 `false`。
        ]
    ]
    [
        [
            `v.value(c, i)`
        ]
        [
            `int`
        ]
        [
            Returns the value represented by the digit `c` in base `i` if the character `c` is a
                valid digit in base `i`; otherwise returns `-1`.\n
                \[Note: the value of `i` will only be `8`, `10`, or `16`. -end note\]\n
                如果字符 `c` 是 `i` 进制的有效数字，返回由数字 `c` 在 `i` 进制中所表示的数值；否则返回 `-1`.\n
                \[注：`i` 的值只能为 `8`, `10`, 或 `16`. -注完\] 
        ]
    ]
    [
        [
            `u.imbue(loc)`
        ]
        [
            `X::locale_type`
        ]
        [
            Imbues `u` with the locale `loc`, returns the previous
                locale used by `u`.\n
                将 locale `loc` 注入 `u`，返回 `u` 原来所使用的locale。
        ]
    ]
    [
        [
            `v.getloc()`
        ]
        [
            `X::locale_type`
        ]
        [
            Returns the current locale used by `v`.\n
            返回 `v` 当前所使用的locale。
        ]
    ]
]

[h2 Acknowledgements 鸣谢]

This section is adapted from the equivalent page in the _regexpp_ documentation and from the
_proposal_ to add regular expressions to the Standard Library.\n
本节改编自 _regexpp_ 文档中的相同部分以及关于为标准库增加正则表达式的 _proposal_。

[endsect]
