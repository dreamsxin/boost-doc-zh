[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:string_splitting_and_tokenization String Splitting and Tokenization 字符串分拆和记号化]

_regex_token_iterator_ is the Ginsu knife of the text manipulation world. It slices! It dices! This section describes
how to use the highly-configurable _regex_token_iterator_ to chop up input sequences.\n
_regex_token_iterator_ 是文本处理世界中的Ginsu刀。它可以切片！也可以切块！
本节将描述如何使用高可配置的 _regex_token_iterator_ 来将输入序列剁碎。 

[h2 Overview 概述]

You initialize a _regex_token_iterator_ with an input sequence, a regex, and some optional configuration parameters.
The _regex_token_iterator_ will use _regex_search_ to find the first place in the sequence that the regex matches. When
dereferenced, the _regex_token_iterator_ returns a ['token] in the form of a `std::basic_string<>`. Which string it returns
depends on the configuration parameters. By default it returns a string corresponding to the full match, but it could also
return a string corresponding to a particular marked sub-expression, or even the part of the sequence that ['didn't] match.
When you increment the _regex_token_iterator_, it will move to the next token. Which token is next depends on the configuration
parameters. It could simply be a different marked sub-expression in the current match, or it could be part or all of the
next match. Or it could be the part that ['didn't] match.\n
你要用一个输入序列、一个regex和一些可选的配置参数来初始化 _regex_token_iterator_。_regex_token_iterator_ 会用 _regex_search_ 
在输入序列中找到匹配regex的第一个地方。当你对它解引用时，_regex_token_iterator_ 以 `std::basic_string<>` 的形式返回一个['记号]。
它返回哪个字符串取决于那些配置参数。缺省下，它返回一个与全匹配相对应的字符串，不过它也可以返回一个与某个特定子表达式相对应的字符串，
甚至是不被匹配的那部分串。当你以 _regex_token_iterator_ 进行递增时，它将移至下一个记号。哪个记号是下一个，也取决于配置参数。
它可以只是当前匹配中的另一个子表达式，也可以是下一个匹配的部分或全部。或者可以是不被匹配的部分。

As you can see, _regex_token_iterator_ can do a lot. That makes it hard to describe, but some examples should make it clear.\n
如你所见，_regex_token_iterator_ 可以做很多事情。这使得它很难被说得明白，不过来些例子可以清楚一点。

[h2 Example 1: Simple Tokenization 示例1：简单的记号化]

This example uses _regex_token_iterator_ to chop a sequence into a series of tokens consisting of words.\n
这个例子用 _regex_token_iterator_ 来将一个序列分成一系列由单词组成的记号。

    std::string input("This is his face");
    sregex re = +_w;                      // find a word

    // iterate over all the words in the input
    sregex_token_iterator begin( input.begin(), input.end(), re ), end;

    // write all the words to std::cout
    std::ostream_iterator< std::string > out_iter( std::cout, "\n" );
    std::copy( begin, end, out_iter );

This program displays the following:\n
程序输出如下：

[pre
This
is
his
face
]

[h2 Example 2: Simple Tokenization, Reloaded 示例2：简单的记号化，再来]

This example also uses _regex_token_iterator_ to chop a sequence into a series of tokens consisting of words,
but it uses the regex as a delimiter. When we pass a `-1` as the last parameter to the _regex_token_iterator_
constructor, it instructs the token iterator to consider as tokens those parts of the input that ['didn't]
match the regex.\n
这个例子也是用 _regex_token_iterator_ 来将一个序列分为一系列由单词组成的记号，不过它是用regex来作为分隔符。
当我们传入一个 -1 作为 _regex_token_iterator_ 构造函数的最后一个参数时，它会令该记号迭代器将输入中不被regex匹配的部分视为记号。

    std::string input("This is his face");
    sregex re = +_s;                      // find white space

    // iterate over all non-white space in the input. Note the -1 below:
    sregex_token_iterator begin( input.begin(), input.end(), re, -1 ), end;

    // write all the words to std::cout
    std::ostream_iterator< std::string > out_iter( std::cout, "\n" );
    std::copy( begin, end, out_iter );

This program displays the following:\n
程序输出如下：

[pre
This
is
his
face
]

[h2 Example 3: Simple Tokenization, Revolutions 示例3：简单的记号化，革命]

This example also uses _regex_token_iterator_ to chop a sequence containing a bunch of dates into a series of
tokens consisting of just the years. When we pass a positive integer [^['N]] as the last parameter to the
_regex_token_iterator_ constructor, it instructs the token iterator to consider as tokens only the [^['N]]-th
marked sub-expression of each match.\n
这个例子还是用 _regex_token_iterator_ 来将一个含有多个日期的序列分成一系列仅由年份组成的记号。
当我们把一个正整数 [^['N]] 作为 _regex_token_iterator_ 构造函数的最后一个参数传入时，它会令该记号迭代器仅将每次匹配中的第
[^['N]]- 个子表达式视为记号。

    std::string input("01/02/2003 blahblah 04/23/1999 blahblah 11/13/1981");
    sregex re = sregex::compile("(\\d{2})/(\\d{2})/(\\d{4})"); // find a date

    // iterate over all the years in the input. Note the 3 below, corresponding to the 3rd sub-expression:
    sregex_token_iterator begin( input.begin(), input.end(), re, 3 ), end;

    // write all the words to std::cout
    std::ostream_iterator< std::string > out_iter( std::cout, "\n" );
    std::copy( begin, end, out_iter );

This program displays the following:\n
程序输出如下：

[pre
2003
1999
1981
]

[h2 Example 4: Not-So-Simple Tokenization 示例4：不太简单的记号化]

This example is like the previous one, except that instead of tokenizing just the years, this program
turns the days, months and years into tokens. When we pass an array of integers [^['{I,J,...}]] as the last
parameter to the _regex_token_iterator_ constructor, it instructs the token iterator to consider as tokens the
[^['I]]-th, [^['J]]-th, etc. marked sub-expression of each match.\n
这个例子与上一个相似，不过它不是仅将年份记号化，它把日、月、年全部放入记号中。当我们传入一个整数数组 [^['{I,J,...}]] 作为 
_regex_token_iterator_ 构造函数的最后一个参数时，它会令该记号迭代器将每次匹配中的第 [^['I]]- 个，第 [^['J]]- 个子表达式等等，视为记号。

    std::string input("01/02/2003 blahblah 04/23/1999 blahblah 11/13/1981");
    sregex re = sregex::compile("(\\d{2})/(\\d{2})/(\\d{4})"); // find a date

    // iterate over the days, months and years in the input
    int const sub_matches[] = { 2, 1, 3 }; // day, month, year
    sregex_token_iterator begin( input.begin(), input.end(), re, sub_matches ), end;

    // write all the words to std::cout
    std::ostream_iterator< std::string > out_iter( std::cout, "\n" );
    std::copy( begin, end, out_iter );

This program displays the following:\n
程序输出如下：

[pre
02
01
2003
23
04
1999
13
11
1981
]

The `sub_matches` array instructs the _regex_token_iterator_ to first take the value of the 2nd sub-match, then
the 1st sub-match, and finally the 3rd. Incrementing the iterator again instructs it to use _regex_search_ again
to find the next match. At that point, the process repeats -- the token iterator takes the value of the 2nd
sub-match, then the 1st, et cetera.\n
这个 `sub_matches` 数据使得 _regex_token_iterator_ 首先取出第2个子匹配的值，然后是第1个子匹配，最后是第3个。
再次递增该迭代器将使它再次调用 _regex_search_ 来查找下一个匹配。然后重复以上过程 -- 
该记号迭代器取出第2个子匹配的值，然后是第1个，依此类推。

[endsect]
