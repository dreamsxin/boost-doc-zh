[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:perf Appendix 4: Performance Comparison 附录4：性能比较]

The performance of xpressive is competitive with _regexpp_. I have run performance
benchmarks comparing static xpressive, dynamic xpressive and _regexpp_ on two platforms:
gcc (Cygwin) and Visual C++. The tests include short matches and long searches. For both
platforms, xpressive comes off well on short matches and roughly on par with _regexpp_ on
long searches.\n
xpressive 的性能可以与 _regexpp_ 相比。我在两个平台上运行了性能测试，比较了静态xpressive、动态xpressive 和 _regexpp_：gcc (Cygwin) 
和 Visual C++。测试包括了短匹配和长查找。在两个平台上，xpressive都在短匹配上胜出，而在长查找中则大致与 _regexpp_ 相同。

<disclaimer>
As with all benchmarks,
the true test is how xpressive performs with ['your] patterns, ['your] input, and ['your]
platform, so if performance matters in your application, it's best to run your own tests.
</disclaimer>\n
<disclaimer> 和所有基准测试一样，真实的测试视乎xpressive如何执行['你的]模式，['你的]输入，和['你的]平台，
所以，如果性能对于你的应用是至关重要的，最好能运行你自己的测试。 </disclaimer> 

[section:perf_gcc xpressive vs. Boost.Regex with GCC (Cygwin)]

Below are the results of a performance comparison between:\n
以下是它们之间的性能比较结果：

* static xpressive
* dynamic xpressive
* _regexpp_

[variablelist Test Specifications 测试规范
[[Hardware:]             [hyper-threaded 3GHz Xeon with 1Gb RAM]]
[[Operating System:]     [Windows XP Pro + Cygwin]]
[[Compiler:]             [GNU C++ version 3.4.4 (Cygwin special)]]
[[C++ Standard Library:] [GNU libstdc++ version 3.4.4]]
[[_regexpp_ Version:]    [1.33+, BOOST_REGEX_USE_CPP_LOCALE, BOOST_REGEX_RECURSIVE]]
[[xpressive Version:]    [0.9.6a]]
]

[h2 Comparison 1: Short Matches 比较1：短匹配]

The following tests evaluate the time taken to match the expression to the input string.
For each result, the top number has been normalized relative to the fastest time, so 1.0
is as good as it gets. The bottom number (in parentheses) is the actual time in seconds.
The best time has been marked in green.\n
以下测试评估了将正则表达式与输入串进行匹配所花的时间。对于每一个结果，上面的数字已相对于最快时间进行了规范化，所以1.0是最好的。
底下的数字(括号上的)是以秒计的实际时间。最佳时间以绿色标出。

[xinclude ../perf/gcc/short_matches.xml]

[h2 Comparison 2: Long Searches 比较2：长查找]

The next test measures the time to find ['all] matches in a long English text. The text is the
[@http://www.gutenberg.org/dirs/3/2/0/3200/3200.zip complete works of Mark Twain],
from [@http://promo.net/pg/ Project Gutenberg]. The text is 19Mb long. As above, the top number
is the normalized time and the bottom number is the actual time. The best time is in green.\n
下一个测试计量在一篇较长的英文中找出['所有]匹配所花的时间。文章是 
[@http://www.gutenberg.org/dirs/3/2/0/3200/3200.zip complete works of Mark Twain]，来自 [@http://promo.net/pg/ Project Gutenberg]。
该文章长度为19Mb。同上，上面的数字是规范化的时间，底下的数字则是实际时间。最佳时间为绿色。

[xinclude ../perf/gcc/long_twain_search.xml]

[endsect]
[section:perf_msvc xpressive vs. Boost.Regex with Visual C++]

Below are the results of a performance comparison between:\n
以下是它们之间的性能比较结果：

* static xpressive
* dynamic xpressive
* _regexpp_

[variablelist Test Specifications 测试规范
[[Hardware:]             [hyper-threaded 3GHz Xeon with 1Gb RAM]]
[[Operating System:]     [Windows XP Pro]]
[[Compiler:]             [Visual C++ .NET 2003 (7.1)]]
[[C++ Standard Library:] [Dinkumware, version 313]]
[[_regexpp_ Version:]    [1.33+, BOOST_REGEX_USE_CPP_LOCALE, BOOST_REGEX_RECURSIVE]]
[[xpressive Version:]    [0.9.6a]]
]

[h2 Comparison 1: Short Matches 比较1：短匹配]

The following tests evaluate the time taken to match the expression to the input string.
For each result, the top number has been normalized relative to the fastest time, so 1.0
is as good as it gets. The bottom number (in parentheses) is the actual time in seconds.
The best time has been marked in green.\n
以下测试评估了将正则表达式与输入串进行匹配所花的时间。对于每一个结果，上面的数字已相对于最快时间进行了规范化，所以1.0是最好的。
底下的数字(括号上的)是以秒计的实际时间。最佳时间以绿色标出。

[xinclude ../perf/msvc/short_matches.xml]

[h2 Comparison 2: Long Searches 比较2：长查找]

The next test measures the time to find ['all] matches in a long English text. The text is the
[@http://www.gutenberg.org/dirs/3/2/0/3200/3200.zip complete works of Mark Twain],
from [@http://promo.net/pg/ Project Gutenberg]. The text is 19Mb long. As above, the top number
is the normalized time and the bottom number is the actual time. The best time is in green.\n
下一个测试计量在一篇较长的英文中找出['所有]匹配所花的时间。文章是 
[@http://www.gutenberg.org/dirs/3/2/0/3200/3200.zip complete works of Mark Twain]，来自 [@http://promo.net/pg/ Project Gutenberg]。
该文章长度为19Mb。同上，上面的数字是规范化的时间，底下的数字则是实际时间。最佳时间为绿色。

[xinclude ../perf/msvc/long_twain_search.xml]

[endsect]
[endsect]
