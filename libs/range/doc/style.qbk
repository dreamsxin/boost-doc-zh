[section:style_guide Terminology and style guidelines 术语与风格指导]

The use of a consistent terminology is as important for __ranges__ and range-based algorithms as it is for iterators and iterator-based algorithms. If a conventional set of names are adopted, we can avoid misunderstandings and write generic function prototypes that are [*/self-documenting/].\n
使用一致的术语对于 __ranges__ 和基于区间的算法是很重要的，就象对于迭代器和基于迭代器的算法一样。
采用一组约定俗成的名字，我们可以避免误解并写出的泛型函数原型将是 [*/自说明的/]。

Since ranges are characterized by a specific underlying iterator type, we get a type of range for each type of iterator. Hence we can speak of the following types of ranges:\n
由于区间的特点在于其底层的迭代器类型，我们从每一种迭代器类型得到一种区间类型。因此我们可以有以下几种类型的区间：

* [*/Value access/] category:\n
  [*/值访问/] 类别：
  * Readable Range\n
    可读区间
  * Writeable Range\n
    可写区间
  * Swappable Range\n
    可交换区间
  * Lvalue Range \n
    左值区间
* [*/Traversal/] category:\n
  [*/遍历/] 类别：
  * __single_pass_range__
  * __forward_range__
  * __bidirectional_range__
  * __random_access_range__

Notice how we have used the categories from the __new_style_iterators__.\n
注意，我们使用的是 __new_style_iterators__ 的分类类别。

Notice that an iterator (and therefore an range) has one [*/traversal/] property and one or more properties from the [*/value access/] category. So in reality we will mostly talk about mixtures such as\n
一个迭代器(或一个区间)有一个 [*/遍历/] 属性和一个或多个 [*/值访问/] 类别。所以事实上我们多数时候讨论的是一个混合物，如：

* Random Access Readable Writeable Range\n
  随机访问可读可写区间
* Forward Lvalue Range \n
  前向左值区间

By convention, we should always specify the [*/traversal/] property first as done above. This seems reasonable since there will only be one [*/traversal/] property, but perhaps many [*/value access/] properties.\n
为了方便起见，我们总是先指定 [*/遍历/] 属性，象上面那样。因为只有一个 [*/遍历/] 属性而可能有多个 [*/值访问/] 属性，所以这是合理的。

It might, however, be reasonable to specify only one category if the other category does not matter. For example, the __iterator_range__ can be constructed from a Forward Range. This means that we do not care about what [*/value access/] properties the Range has. Similarly, a Readable Range will be one that has the lowest possible [*/traversal/] property (Single Pass).\n
不过，只指定一个类别也是合理的，如果不关心另一个类别的话。例如，__iterator_range__ 可以从一个前向区间构造。
这意味着我们不关心这个区间的[*/值访问/]属性。同样，一个可读区间具有最小可能的[*/遍历/]属性(单遍)。

As another example, consider how we specify the interface of `std::sort()`. Algorithms are usually more cumbersome to specify the interface of since both [*/traversal/] and [*/value access/] properties must be exactly defined. The iterator-based version looks like this:\n
再看另一个例子，我们如何指定 `std::sort()` 的接口。
通常，算法在指定接口时很麻烦，因为必须同时精确地定义 [*/遍历/] 和 [*/值访问/] 属性。基于迭代器的版本如下：

``
   template< class RandomAccessTraversalReadableWritableIterator >
   void sort( RandomAccessTraversalReadableWritableIterator first,
              RandomAccessTraversalReadableWritableIterator last );
`` 

For ranges the interface becomes\n
而对于区间来说，接口变为：

``
   template< class RandomAccessReadableWritableRange >
   void sort( RandomAccessReadableWritableRange& r );
``
 
[endsect]

