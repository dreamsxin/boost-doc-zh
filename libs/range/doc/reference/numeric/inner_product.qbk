[section:inner_product inner_product]

[heading Prototype 原型]

``
template<class SinglePassRange1,
         class SinglePassRange2,
         class Value>
    Value inner_product( const SinglePassRange1& rng1,
                         const SinglePassRange2& rng2,
                         Value                   init );

template<class SinglePassRange1,
         class SinglePassRange2,
         class Value,
         class BinaryOperation1,
         class BinaryOperation2>
    Value inner_product( const SinglePassRange1& rng1,
                         const SinglePassRange2& rng2,
                         Value                   init,
                         BinaryOperation1        op1 );
``

[heading Description 说明]

`inner_product` calculates a generalised inner product of the range `rng1` and `rng2`.\n
`inner_product` 计算区间 `rng1` 和 `rng2` 的泛型内积。

For further information on the `inner_product` algorithm please see __sgi_inner_product__.\n
关于 `inner_product` 算法的更多信息，请见 __sgi_inner_product__.

[heading Definition 定义]

Defined in the header file `boost/range/numeric.hpp`\n
定义于头文件 `boost/range/numeric.hpp` 中

[heading Requirements 要求]

[heading For the first version 对于第一个版本]

# `SinglePassRange1` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange1` 符合 __single_pass_range__ 概念。
# `SinglePassRange2` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange2` 符合 __single_pass_range__ 概念。
# `Value` is a model of the `AssignableConcept`.\n
  `Value` 符合 `AssignableConcept`.
# If `x` is an object of type `Value`, `y` is an object of `SinglePassRange1`'s value
type, and `z` is an object of `SinglePassRange2`'s value type, then `x + y * z`
is defined.\n
  如果 `x` 是类型为 `Value` 的对象，`y` 是 `SinglePassRange1` 值类型的对象，且 `z` 是 `SinglePassRange2` 
  值类型的对象，则 `x + y * z` 是有定义的。
# The return type of the above operator is convertible to `Value`.\n
  表达式 `x + y * z` 的结果类型可转换为 `Value`.

[heading For the second version 对于第二个版本]

# `SinglePassRange1` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange1` 符合 __single_pass_range__ 概念。
# `SinglePassRange2` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange2` 符合 __single_pass_range__ 概念。
# `Value` is a model of the `AssignableConcept`.\n
  `Value` 符合 `AssignableConcept`.
# `BinaryOperation1` is a model of the `BinaryFunctionConcept`.\n
  `BinaryOperation1` 符合 `BinaryFunctionConcept`.
# `BinaryOperation2` is a model of the `BinaryFunctionConcept`.\n
  `BinaryOperation2` 符合 `BinaryFunctionConcept`.
# The value type of `SinglePassRange1` is convertible to the first argument type of `BinaryOperation2`.\n
  `SinglePassRange1` 的值类型可转换为 `BinaryOperation2` 的第一参数类型。
# The value type of `SinglePassRange2` is convertible to the second argument type of `BinaryOperation2`.\n
  `SinglePassRange2` 的值类型可转换为 `BinaryOperation2` 的第二参数类型。
# `Value` is convertible to the value type of `BinaryOperation1`.\n
  `Value` 可转换为 `BinaryOperation1` 的值类型。
# The return type of `BinaryOperation2` is convertible to the second argument type of `BinaryOperation1`.\n
  `BinaryOperation2` 的返回类型可转换为 `BinaryOperation1` 的第二参数类型。
# The return type of `BinaryOperation1` is convertible to `Value`.\n
  `BinaryOperation1` 的返回类型可转换为 `Value`.

[heading Precondition: 前提条件：]

`distance(rng2) >= distance(rng1)` is a valid range.\n
`distance(rng2) >= distance(rng1)` 为有效区间。

[heading Complexity 复杂度]

Linear. Exactly `distance(rng)`.\n
线性。正好 `distance(rng)` 次运算。

[endsect]
