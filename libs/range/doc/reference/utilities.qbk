[section:utilities Utilities 工具]

Having an abstraction that encapsulates a pair of iterators is very useful. The standard library uses `std::pair` in some circumstances, but that class is cumbersome to use because we need to specify two template arguments, and for all range algorithm purposes we must enforce the two template arguments to be the same. Moreover, `std::pair<iterator,iterator>` is hardly self-documenting whereas more domain specific class names are. Therefore these two classes are provided:\n
封装一对迭代器的抽象方法非常有用。标准库在某些情况下会使用 `std::pair`，但是这个类用起来很麻烦，因为我们需要指定两个模板参数，
而且对于所有的区间算法来说，我们必须强制要求这两个模板参数是相同的。此外，`std::pair<iterator,iterator>` 要比其它的领域特定的类名更难记。
因此我们提供了以下两个类：

* Class `iterator_range`
* Class `sub_range`
* Function `join`

The `iterator_range` class is templated on an __forward_traversal_iterator__ and should be used whenever fairly general code is needed. The `sub_range` class is templated on an __forward_range__ and it is less general, but a bit easier to use since its template argument is easier to specify. The biggest difference is, however, that a `sub_range` can propagate constness because it knows what a corresponding `const_iterator` is.\n
类 `iterator_range` 针对一个 __forward_traversal_iterator__ 模板化，可在需要通用代码时使用。类 `sub_range` 则针对一个 __forward_range__
模板化，它相对不太通用，但更容易使用一些，因为它的模板参数比较容易指定。不过，最大的区别是，`sub_range` 可以传播常量性，因为它知道相应的
`const_iterator` 是什么。

Both classes can be used as ranges since they implement the __minimal_interface__ required for this to work automatically.\n
这两个类都可用作区间，因为它们实现了自动工作所要求的 __minimal_interface__。

[section:iterator_range Class `iterator_range`]

The intention of the `iterator_range` class is to encapsulate two iterators so they fulfill the __forward_range__ concept. A few other functions are also provided for convenience.\n
类 `iterator_range` 的目标是封装两个迭代器，所以它符合 __forward_range__ 概念。为方便使用，还提供了几个其它函数。

If the template argument is not a model of __forward_traversal_iterator__, one can still use a subset of the interface. In particular, `size()` requires Random Access Traversal Iterators whereas `empty()` only requires Single Pass Iterators.\n
如果模板参数不符合 __forward_traversal_iterator__，你还是可以使用该接口的一个子集。特别是，`size()` 要求随机访问迭代器，而
`empty()` 只要求单遍迭代器。

Recall that many default constructed iterators are [*/singular/] and hence can only be assigned, but not compared or incremented or anything. However, if one creates a default constructed `iterator_range`, then one can still call all its member functions. This design decision avoids the `iterator_range` imposing limitations upon ranges of iterators that are not singular. Any singularity limitation is simply propogated from the underlying iterator type.\n
记得许多缺省构造的迭代器是 [*/奇异的/]，只能被赋值，不能进行比较、递增或其它操作。但是，如果你创建了一个缺省构造的 `iterator_range`，
你还是可以调用它的所有成员函数。这个设计避免了 `iterator_range` 对非奇异的迭代器区间强加限制。任何奇异限制只是传递至底层的迭代器类型。


[h4 Synopsis 摘要]

``
namespace boost
{
    template< class ForwardTraversalIterator >
    class iterator_range
    {
    public: // Forward Range types
        typedef ForwardTraversalIterator   iterator;
        typedef ForwardTraversalIterator   const_iterator;
        typedef iterator_difference<iterator>::type difference_type;

    public: // construction, assignment
        template< class ForwardTraversalIterator2 >
        iterator_range( ForwardTraversalIterator2 Begin, ForwardTraversalIterator2 End );
                    
        template< class ForwardRange >
        iterator_range( ForwardRange& r );
  
        template< class ForwardRange >
        iterator_range( const ForwardRange& r );
        
        template< class ForwardRange >
        iterator_range& operator=( ForwardRange& r );

        template< class ForwardRange >
        iterator_range& operator=( const ForwardRange& r );
    
    public: // Forward Range functions
        iterator  begin() const;
        iterator  end() const;
        
    public: // convenience
        operator    unspecified_bool_type() const;
        bool        equal( const iterator_range& ) const;
        value_type& front() const;
        value_type& back() const;
        iterator_range& advance_begin(difference_type n);
        iterator_range& advance_end(difference_type n);
        bool      empty() const;
        // for Random Access Range only: 
        reference operator[]( difference_type at ) const;
        value_type operator()( difference_type at ) const;
        size_type size() const;
    };
    
    // stream output
    template< class ForwardTraversalIterator, class T, class Traits >
    std::basic_ostream<T,Traits>& 
    operator<<( std::basic_ostream<T,Traits>& Os,
                const iterator_range<ForwardTraversalIterator>& r );

    // comparison
    template< class ForwardTraversalIterator, class ForwardTraversalIterator2 >
    bool operator==( const iterator_range<ForwardTraversalIterator>& l, 
                     const iterator_range<ForwardTraversalIterator2>& r );

    template< class ForwardTraversalIterator, class ForwardRange >
    bool operator==( const iterator_range<ForwardTraversalIterator>& l, 
                     const ForwardRange& r );

    template< class ForwardTraversalIterator, class ForwardRange >
    bool operator==( const ForwardRange& l,
                     const iterator_range<ForwardTraversalIterator>& r );

    template< class ForwardTraversalIterator, class ForwardTraversalIterator2 >
    bool operator!=( const iterator_range<ForwardTraversalIterator>& l, 
                     const iterator_range<ForwardTraversalIterator2>& r );

    template< class ForwardTraversalIterator, class ForwardRange >
    bool operator!=( const iterator_range<ForwardTraversalIterator>& l, 
                     const ForwardRange& r );

    template< class ForwardTraversalIterator, class ForwardRange >
    bool operator!=( const ForwardRange& l,
                     const iterator_range<ForwardTraversalIterator>& r );

    template< class ForwardTraversalIterator, class ForwardTraversalIterator2 >
    bool operator<( const iterator_range<ForwardTraversalIterator>& l, 
                    const iterator_range<ForwardTraversalIterator2>& r );

    template< class ForwardTraversalIterator, class ForwardRange >
    bool operator<( const iterator_range<ForwardTraversalIterator>& l, 
                    const ForwardRange& r );

    template< class ForwardTraversalIterator, class ForwardRange >
    bool operator<( const ForwardRange& l,
                    const iterator_range<ForwardTraversalIterator>& r );
 
    // external construction
    template< class ForwardTraversalIterator >
    iterator_range< ForwardTraversalIterator >
    make_iterator_range( ForwardTraversalIterator Begin, 
                         ForwardTraversalIterator End );
       
    template< class ForwardRange >
    iterator_range< typename range_iterator<ForwardRange>::type >
    make_iterator_range( ForwardRange& r );

    template< class ForwardRange >
    iterator_range< typename range_iterator<const ForwardRange>::type >
    make_iterator_range( const ForwardRange& r );
    
    template< class Range >
    iterator_range< typename range_iterator<Range>::type >
    make_iterator_range( Range& r,
                         typename range_difference<Range>::type advance_begin,
                         typename range_difference<Range>::type advance_end );
    
    template< class Range >
    iterator_range< typename range_iterator<const Range>::type >
    make_iterator_range( const Range& r, 
                         typename range_difference<const Range>::type advance_begin,
                         typename range_difference<const Range>::type advance_end );
    
    // convenience
    template< class Sequence, class ForwardRange >
    Sequence copy_range( const ForwardRange& r );
    
} // namespace 'boost'
``    

If an instance of `iterator_range` is constructed by a client with two iterators, the client must ensure that the two iterators delimit a valid closed-open range [begin,end).\n
如果一个 `iterator_range` 实例是由使用者以两个迭代器构造的，则使用者必须确保这两个迭代器界定了一个有效的半开区间 [begin,end).

It is worth noticing that the templated constructors and assignment operators allow conversion from `iterator_range<iterator>` to `iterator_range<const_iterator>`. Similarly, since the comparison operators have two template arguments, we can compare ranges whenever the iterators are comparable; for example when we are dealing with const and non-const iterators from the same container.\n
值得留意的是，模板化的构造函数和赋值操作符允许从 `iterator_range<iterator>` 到 `iterator_range<const_iterator>` 的转换。
类似地，由于比较操作符具有两个模板参数，所以我们可以对其迭代器可比较的两个区间进行比较；
例如当我们处理来自同一个容器的常量和非常量迭代器时。

[h4 Details member functions 详细的成员函数]

`operator unspecified_bool_type() const;`

[:['[*Returns]] `!empty();`]

`bool equal( iterator_range& r ) const;`

[:['[*Returns]] `begin() == r.begin() && end() == r.end();`]

[h4 Details functions]

`bool operator==( const ForwardRange1& l, const ForwardRange2& r );`

[:['[*Returns]] `size(l) != size(r) ? false : std::equal( begin(l), end(l), begin(r) );`]

`bool operator!=( const ForwardRange1& l, const ForwardRange2& r );`

[:['[*Returns]] `!( l == r );`]

`bool operator<( const ForwardRange1& l, const ForwardRange2& r );`

[:['[*Returns]] `std::lexicographical_compare( begin(l), end(l), begin(r), end(r) );`]

``
iterator_range make_iterator_range( Range& r,
                                    typename range_difference<Range>::type advance_begin, 
                                    typename range_difference<Range>::type advance_end );
``

[:['[*Effects:]]]

``
    iterator new_begin = begin( r ),
    iterator new_end   = end( r );
    std::advance( new_begin, advance_begin );
    std::advance( new_end, advance_end );
    return make_iterator_range( new_begin, new_end );
``

`Sequence copy_range( const ForwardRange& r );`

[:['[*Returns]] `Sequence( begin(r), end(r) );`]

[endsect]

[section:sub_range Class `sub_range`]

The `sub_range` class inherits all its functionality from the __iterator_range__ class. The `sub_range` class is often easier to use because one must specify the __forward_range__ template argument instead of an iterator. Moreover, the `sub_range` class can propagate constness since it knows what a corresponding `const_iterator` is.\n
`sub_range` 类从 __iterator_range__ 类继承了所有功能。`sub_range` 类更易于使用，因为你要给出的模板参数是一个 __forward_range__ 
而不是一个迭代器。此外，`sub_range` 类可以传播常量性，因为它知道对应的 `const_iterator` 是什么。 

[h4 Synopsis 摘要]

``
namespace boost
{
    template< class ForwardRange >
    class sub_range : public iterator_range< typename range_iterator<ForwardRange>::type >
    {
    public: 
        typedef typename range_iterator<ForwardRange>::type iterator;
        typedef typename range_iterator<const ForwardRange>::type  const_iterator;
        typedef typename iterator_difference<iterator>::type difference_type;
    
    public: // construction, assignment
        template< class ForwardTraversalIterator >
        sub_range( ForwardTraversalIterator Begin, ForwardTraversalIterator End );

        template< class ForwardRange2 >
        sub_range( ForwardRange2& r );
         
        template< class ForwardRange2 >
        sub_range( const Range2& r );
         
        template< class ForwardRange2 >
        sub_range& operator=( ForwardRange2& r );

        template< class ForwardRange2 >
        sub_range& operator=( const ForwardRange2& r );    
    
    public:  // Forward Range functions 
        iterator        begin();
        const_iterator  begin() const;
        iterator        end();
        const_iterator  end() const;    
        
    public: // convenience 
        value_type&       front();
        const value_type& front() const;
        value_type&       back();
        const value_type& back() const;
        // for Random Access Range only: 
        value_type&       operator[]( size_type at );
        const value_type& operator[]( size_type at ) const;
    
    public:
        // rest of interface inherited from iterator_range
    };
    
} // namespace 'boost'
``

The class should be trivial to use as seen below. Imagine that we have an algorithm that searches for a sub-string in a string. The result is an iterator_range, that delimits the match. We need to store the result from this algorithm. Here is an example of how we can do it with and without `sub_range`\n
这个类的用法非常简单，请看下文。设想我们有一个算法，在一个字符串中查找子字符串。结果是一个 `iterator_range`, 界定了匹配的子串。
我们需要保存该算法的结果。下面的例子示范了在如何使用或不用 `sub_range` 来实现：

``
std::string str("hello");
iterator_range<std::string::iterator> ir = find_first( str, "ll" );
sub_range<std::string>               sub = find_first( str, "ll" );
``

[endsect]

[section:join Function join]

The intention of the `join` function is to join two ranges into one longer range.\n
`join` 函数的用途是将两个区间合并为一个更长的区间。

The resultant range will have the lowest common traversal of the two ranges supplied as parameters.\n
结果区间具有作为参数提供的两个区间的最小公共遍历类别。

Note that the joined range incurs a performance cost due to the need to check if the end of a range has been reached internally during traversal.\n
注意，合并后的区间会带来性能的开销，因为在遍历时在内部需要检查是否到达区间的末尾。

[h4 Synposis 摘要]
``
template<typename SinglePassRange1, typename SinglePassRange2>
iterator_range<range_detail::join_iterator<
    typename range_iterator<const SinglePassRange1>::type,
    typename range_iterator<const SinglePassRange2>::type,
    typename add_const<
        typename range_value<const SinglePassRange1>::type>::type>
>
join(const SinglePassRange1& rng1, const SinglePassRange2& rng2)

template<typename SinglePassRange1, typename SinglePassRange2>
iterator_range<range_detail::join_iterator<
    typename range_iterator<SinglePassRange1>::type,
    typename range_iterator<SinglePassRange2>::type,
    typename range_value<SinglePassRange1>::type>
>
join(SinglePassRange1& rng1, SinglePassRange2& rng2);
``

[h4 Example 示例]

The expression `join(irange(0,5), irange(5,10))` would evaluate to a range representing an integer range `[0,10)`\n
表达式 `join(irange(0,5), irange(5,10))` 将得到一个表示整数区间 `[0,10)` 的区间。


[endsect]

[endsect]

