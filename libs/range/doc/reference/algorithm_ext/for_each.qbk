[section:for_each for_each]

[heading Prototype 原型]

``
template<
    class SinglePassRange1,
    class SinglePassRange2,
    class BinaryFunction
    >
BinaryFunction for_each(const SinglePassRange1& rng1,
                        const SinglePassRange2& rng2,
                        BinaryFunction fn);

template<
    class SinglePassRange1,
    class SinglePassRange2,
    class BinaryFunction
    >
BinaryFunction for_each(const SinglePassRange1& rng1,
                        SinglePassRange2& rng2,
                        BinaryFunction fn);

template<
    class SinglePassRange1,
    class SinglePassRange2,
    class BinaryFunction
    >
BinaryFunction for_each(SinglePassRange1& rng1,
                        const SinglePassRange2& rng2,
                        BinaryFunction fn);

template<
    class SinglePassRange1,
    class SinglePassRange2,
    class BinaryFunction
    >
BinaryFunction for_each(SinglePassRange1& rng1,
                        SinglePassRange2& rng2,
                        BinaryFunction fn);
``

[heading Description 说明]

`for_each` traverses forward through `rng1` and `rng2` simultaneously.
For each iteration, the element `x` is used from `rng1` and the corresponding
element `y` is used from `rng2` to invoke `fn(x,y)`.\n
`for_each` 同时向前遍历 `rng1` 和 `rng2`。每次迭代时，使用来自 `rng1` 的元素 `x` 和来自 `rng2` 的对应元素 `y` 调用 `fn(x,y)`.

Iteration is stopped upon reaching the end of the shorter of `rng1`, or `rng2`.
It is safe to call this function with unequal length ranges.\n
迭代在到达 `rng1` 或 `rng2` 的末端时停止。对于不等长的两个区间调用该函数是安全的。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm_ext/for_each.hpp`\n
定义于头文件 `boost/range/algorithm_ext/for_each.hpp` 中

[heading Requirements 要求]

# `SinglePassRange1` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange1` 符合 __single_pass_range__ 概念。
# `SinglePassRange2` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange2` 符合 __single_pass_range__ 概念。
# `BinaryFunction` is a model of the `BinaryFunctionConcept`.\n
  `BinaryFunction` 符合 `BinaryFunctionConcept`.
# `SinglePassRange1`'s value type is convertible to `BinaryFunction`'s first argument type.\n
  `SinglePassRange1` 的值类型可转换为 `BinaryFunction` 的第一参数类型。
# `SinglepassRange2`'s value type is convertible to `BinaryFunction`'s second argument type.\n
  `SinglePassRange2` 的值类型可转换为 `BinaryFunction` 的第二参数类型。

[heading Complexity 复杂度]

Linear. Exactly `min(distance(rng1), distance(rng2))` applications of `BinaryFunction`.\n
线性。正好执行 `min(distance(rng1), distance(rng2))` 次 `BinaryFunction`.

[endsect]
