[section:is_sorted is_sorted]

[heading Prototype 原型]

``
template<class SinglePassRange>
bool is_sorted(const SinglePassRange& rng);

template<class SinglePassRange, class BinaryPredicate>
bool is_sorted(const SinglePassRange& rng, BinaryPredicate pred);
``

[heading Description 说明]

`is_sorted` determines if a range is sorted.
For the non-predicate version the return value is `true` if and only if for
each adjacent elements `[x,y]` the expression `x < y` is `true`.
For the predicate version the return value is `true` is and only if for each
adjacent elements `[x,y]` the expression `pred(x,y)` is `true`.\n
`is_sorted` 判断一个区间是否排好序。对于不带谓词的版本，当且仅当对于每对相邻元素 `[x,y]` 表达式 `x < y` 均为 `true` 时返回 `true`。
对于带谓词的版本，当且仅当对于每对相邻元素 `[x,y]` 表达式 `pred(x,y)` 均为 `true` 时返回 `true`。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm_ext/is_sorted.hpp`\n
定义于头文件 `boost/range/algorithm_ext/is_sorted.hpp` 中

[heading Requirements 要求]

# `SinglePassRange` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange` 符合 __single_pass_range__ 概念。
# `BinaryPredicate` is a model of the `BinaryPredicate` Concept.\n
  `BinaryPredicate` 符合 `BinaryPredicate` 概念。
# The value type of `SinglePassRange` is convertible to both argument types of `BinaryPredicate`.\n
  `SinglePassRange` 的值类型可转换为 `BinaryPredicate` 的两个参数类型。

[heading Complexity 复杂度]

Linear. A maximum of `distance(rng)` comparisons are performed.\n
线性。最多执行 `distance(rng)` 次比较。

[endsect]
