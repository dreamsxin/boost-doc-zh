[section:indirected indirected]

[table
    [[Syntax 语法] [Code 代码]]
    [[Pipe 通道式] [`rng | boost::adaptors::indirected`]]
    [[Function 函数式] [`boost::adaptors::indirect(rng)`]]
]

* [*Precondition:] The `value_type` of the range defines unary `operator*()`\n
  [*前提条件:] 区间的 `value_type` 定义了单参 `operator*()`
* [*Postcondition:] For all elements `x` in the returned range, `x` is the result of `*y` where `y` is the corresponding element in the original range.\n
  [*后验条件:] 对于返回区间中的所有元素 `x`，`x` 为 `*y`，其中 `y` 为原区间中的对应元素。
* [*Range Category:] __single_pass_range__\n
  [*区间类别:] __single_pass_range__
* [*Returned Range Category:] The range category of `rng`\n
  [*返回区间类别:] `rng` 的区间类别

[section:indirected_example indirected example 示例]
``
#include <boost/range/adaptor/indirected.hpp>
#include <boost/range/algorithm/copy.hpp>
#include <boost/shared_ptr.hpp>
#include <algorithm>
#include <iostream>
#include <vector>

int main(int argc, const char* argv[])
{
    using namespace boost::adaptors;

    std::vector<boost::shared_ptr<int> > input;

    for (int i = 0; i < 10; ++i)
        input.push_back(boost::shared_ptr<int>(new int(i)));

    boost::copy(
        input | indirected,
        std::ostream_iterator<int>(std::cout, ","));

    return 0;
}
``
[endsect]

This would produce the output:\n
生成以下输出：
``
0,1,2,3,4,5,6,7,8,9
``
[endsect]


