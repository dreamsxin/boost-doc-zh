[section:transformed transformed]

[table
    [[Syntax 语法] [Code 代码]]
    [[Pipe 通道式] [`rng | boost::adaptors::transformed(fun)`]]
    [[Function 函数式] [`boost::adaptors::transform(rng, fun)`]]
]

* [*Precondition:] The `value_type` of the range is convertible to the argument type of `fun`.\n
  [*前提条件:] 区间的 `value_type` 可转换为 `fun` 的参数类型。
* [*Postcondition:] For all elements `x` in the returned range, `x` is the result of `fun(y)` where `y` is the corresponding element in the original range.\n
  [*后验条件:] 对于返回区间中的所有元素 `x`，`x` 为 `fun(y)` 的结果，其中 `y` 为原区间中的对应元素。
* [*Throws:] Whatever the copy-constructor of `fun` might throw.\n
  [*抛出:] `fun` 的复制构造函数所抛出的任何异常。
* [*Range Category:] __single_pass_range__\n
  [*区间类别:] __single_pass_range__
* [*Returned Range Category:] The range category of `rng`.\n
  [*返回区间类别:] `rng` 的区间类别。

[section:transformed_example transformed example 示例]
``
#include <boost/range/adaptor/transformed.hpp>
#include <boost/range/algorithm/copy.hpp>
#include <boost/assign.hpp>
#include <algorithm>
#include <iostream>
#include <vector>

struct double_int
{
    typedef int result_type;
    int operator()(int x) const { return x * 2; }
};

int main(int argc, const char* argv[])
{
    using namespace boost::adaptors;
    using namespace boost::assign;

    std::vector<int> input;
    input += 1,2,3,4,5,6,7,8,9,10;

    boost::copy(
        input | transformed(double_int()),
        std::ostream_iterator<int>(std::cout, ","));

    return 0;
}
``
[endsect]

This would produce the output:\n
生成以下输出：
``
2,4,6,8,10,12,14,16,18,20
``
[endsect]


