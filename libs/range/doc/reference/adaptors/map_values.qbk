[section:map_values map_values]

[table
    [[Syntax 语法] [Code 代码]]
    [[Pipe 通道式] [`rng | boost::adaptors::map_values`]]
    [[Function 函数式] [`boost::adaptors::values(rng)`]]
]

* [*Precondition:] The `value_type` of the range is an instantiation of `std::pair`.\n
  [*前提条件:] 区间的 `value_type` 是一个 `std::pair` 实例。
* [*Postcondition:] For all elements `x` in the returned range, `x` is the result of `y.second` where `y` is the corresponding element in the original range.\n
  [*后验条件:] 对于返回区间中的所有元素 `x`，`x` 为 `y.second` 的结果，其中 `y` 为原区间中的对应元素。
* [*Range Category:] __single_pass_range__\n
  [*区间类别:] __single_pass_range__
* [*Returned Range Category:] The range category of `rng`.\n
  [*返回区间类别:] `rng` 的区间类别。

[section:map_values_example map_values example 示例]
``
#include <boost/range/adaptor/map.hpp>
#include <boost/range/algorithm/copy.hpp>
#include <boost/assign.hpp>
#include <algorithm>
#include <iostream>
#include <map>
#include <vector>

int main(int argc, const char* argv[])
{
    using namespace boost::assign;
    using namespace boost::adaptors;

    std::map<int,int> input;
    for (int i = 0; i < 10; ++i)
        input.insert(std::make_pair(i, i * 10));

    boost::copy(
        input | map_values,
        std::ostream_iterator<int>(std::cout, ","));

    return 0;
}
``
[endsect]

This would produce the output:\n
生成以下输出：
``
0,10,20,30,40,50,60,70,80,90
``
[endsect]


