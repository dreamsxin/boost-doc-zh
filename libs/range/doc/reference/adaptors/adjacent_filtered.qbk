[section:adjacent_filtered adjacent_filtered]

[table
    [[Syntax 语法] [Code 代码]]
    [[Pipe 通道式] [`rng | boost::adaptors::adjacent_filtered(bi_pred)`]]
    [[Function 函数式] [`boost::adaptors::adjacent_filter(rng, bi_pred)`]]
]

* [*Precondition:]  The `value_type` of the range is convertible to both argument types of `bi_pred`.\n
  [*前提条件:] 区间的 `value_type` 可转换为 `bi_pred` 的两个参数类型。
* [*Postcondition:] For all adjacent elements `[x,y]` in the returned range, `bi_pred(x,y)` is `true`.\n
  [*后验条件:] 对于F返回区间中的所有相邻元素 `[x,y]`，`bi_pred(x,y)` 为 `true`.
* [*Throws:] Whatever the copy constructor of `bi_pred` might throw.\n
  [*抛出:] `bi_pred` 的复制构造函数可能抛出的任何异常。
* [*Range Category:] __single_pass_range__\n
  [*区间类别:] __single_pass_range__
* [*Returned Range Category:] The minimum of the range category of `rng` and __forward_range__\n
  [*返回区间类别:] `rng` 和 __forward_range__ 的最小区间类别

[section:adjacent_filtered_example adjacent_filtered example 示例]
``
#include <boost/range/adaptor/adjacent_filtered.hpp>
#include <boost/range/algorithm/copy.hpp>
#include <boost/assign.hpp>
#include <algorithm>
#include <functional>
#include <iostream>
#include <vector>

int main(int argc, const char* argv[])
{
    using namespace boost::assign;
    using namespace boost::adaptors;

    std::vector<int> input;
    input += 1,1,2,2,2,3,4,5,6;

    boost::copy(
        input | adjacent_filtered(std::not_equal_to<int>()),
        std::ostream_iterator<int>(std::cout, ","));

    return 0;
}
``
[endsect]

This would produce the output:\n
生成以下输出：
``
1,2,3,4,5,6
``
[endsect]


