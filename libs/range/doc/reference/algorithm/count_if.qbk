[section:count_if count_if]

[heading Prototype 原型]

``
template<class SinglePassRange, class UnaryPredicate>
typename range_difference<const SinglePassRange>::type
count_if(const SinglePassRange& rng, UnaryPredicate pred);
``

[heading Description 说明]

`count_if` returns the number of elements `x` in `rng` where `pred(x)` is `true`.\n
`count` 返回 `rng` 中满足 `pred(x)` 为 `true` 的元素 `x` 的数量。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/count_if.hpp`\n
定义于头文件 `boost/range/algorithm/count_if.hpp` 中

[heading Requirements 要求]

* `SinglePassRange` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange` 符合 __single_pass_range__ 概念。
* `UnaryPredicate` is a model of the `UnaryPredicateConcept`.\n
  `UnaryPredicate` 符合 `UnaryPredicateConcept`.
* `SinglePassRange`'s value type is a model of the `EqualityComparableConcept`.\n
  `SinglePassRange` 的值类型符合 `EqualityComparableConcept`.
* The value type of `SinglePassRange` is convertible to the argument type of `UnaryPredicate`.\n
  `SinglePassRange` 的值类型可转换为 `UnaryPredicate` 的参数类型。

[heading Complexity 复杂度]

Linear. Exactly `distance(rng)` invocations of `pred`.\n
线性。正好 `distance(rng)` 次 `pred` 调用。

[endsect]


