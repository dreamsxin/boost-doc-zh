[section:find_if find_if]

[heading Prototype 原型]

``
template<class SinglePassRange, class UnaryPredicate>
typename range_iterator<SinglePassRange>::type
find_if(SinglePassRange& rng, UnaryPredicate pred);

template<
    range_return_value re,
    class SinglePassRange,
    class UnaryPredicate
    >
typename range_return<SinglePassRange, re>::type
find_if(SinglePassRange& rng, UnaryPredicate pred);
``

[heading Description 说明]

The versions of `find_if` that return an iterator, returns the first iterator in the range `rng` such that `pred(*i)` is `true`. `end(rng)` is returned if no such iterator exists.\n
返回迭代器的 `find_if` 版本返回一个迭代器，指向 `rng` 中满足 `pred(*i)` 为 `true` 的第一个元素。
如果不存在这样的迭代器，则返回 `end(rng)`。

The versions of `find_if` that return a `range_return`, defines found in the same manner as the returned iterator described above.\n
返回 `range_return` 的 `find_if` 版本则以上述相同风格定义 `found`。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/find_if.hpp`\n
定义于头文件 `boost/range/algorithm/find_if.hpp` 中

[heading Requirements 要求]

* `SinglePassRange` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange` 符合 __single_pass_range__ 概念。
* `UnaryPredicate` is a model of the `PredicateConcept`.\n
  `UnaryPredicate` 符合 `PredicateConcept`.
* The value type of `SinglePassRange` is convertible to the argument type of `UnaryPredicate`.\n
  `SinglePassRange` 的值类型可转换为 `UnaryPredicate` 的参数类型。

[heading Precondition: 前提条件]

For each iterator `i` in `rng`, `*i` is in the domain of `UnaryPredicate`.\n
对于 `rng` 中的每一个迭代器 `i`，`*i` 位于 `UnaryPredicate` 的定义域内。

[heading Complexity 复杂度]

Linear. At most `distance(rng)` invocations of `pred`.\n
线性。最多 `distance(rng)` 次 `pred` 调用。

[endsect]


