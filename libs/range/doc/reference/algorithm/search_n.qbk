[section:search_n search_n]

[heading Prototype 原型]

``
template<class ForwardRange, class Integer, class Value>
typename range_iterator<ForwardRange>::type
search_n(ForwardRange& rng, Integer n, const Value& value);

template<class ForwardRange, class Integer, class Value>
typename range_iterator<const ForwardRange>::type
search_n(const ForwardRange& rng, Integer n, const Value& value);

template<class ForwardRange, class Integer, class Value, class BinaryPredicate>
typename range_iterator<ForwardRange>::type
search_n(ForwardRange& rng, Integer n, const Value& value,
         BinaryPredicate binary_pred);

template<class ForwardRange, class Integer, class Value, class BinaryPredicate>
typename range_iterator<const ForwardRange>::type
search_n(const ForwardRange& rng, Integer n, const Value& value,
         BinaryPredicate binary_pred);
``

[heading Description 说明]

`search_n` searches `rng` for a sequence of length `n` equal to `value` where
equality is determined by operator== in the non-predicate case, and by a
predicate when one is supplied.\n
`search_n` 在 `rng` 是搜索长度为 `n` 的等于 `value` 的序列，其相等性在不带谓词的版本中使用 `operator==` 来决定，若有谓词则由谓词决定。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/search_n.hpp`\n
定义于头文件 `boost/range/algorithm/search_n.hpp` 中

[heading Requirements 要求]

[*For the non-predicate versions: 对于不带谓词的版本：]

* `ForwardRange` is a model of the __forward_range__ Concept.\n
  `ForwardRange` 符合 __forward_range__ 概念。
* `ForwardRange`'s value type is a model of the `EqualityComparableConcept`.\n
  `ForwardRange` 的值类型符合 `EqualityComparableConcept`.
* `ForwardRange`s value type can be compared for equality with `Value`.\n
  `ForwardRange` 的值类型可以与 `Value` 进行相等性比较。
* `Integer` is a model of the `IntegerConcept`.\n
  `Integer` 符合 `IntegerConcept`.

[*For the predicate versions: 对于带谓词的版本：]

* `ForwardRange` is a model of the __forward_range__ Concept.\n
  `ForwardRange` 符合 __forward_range__ 概念。
* `BinaryPredicate` is a model of the `BinaryPredicateConcept`.\n
  `BinaryPredicate` 符合 `BinaryPredicateConcept`.
* `ForwardRange`'s value type is convertible to `BinaryPredicate`'s first argument type.\n
  `ForwardRange` 的值类型可转换为 `BinaryPredicate` 的第一参数类型。
* `Value` is convertible to `BinaryPredicate`'s second argument type.\n
  `Value` 可转换为 `BinaryPredicate` 的第二参数类型。
* `Integer` is a model of the `IntegerConcept`.n
  `Integer` 符合 `IntegerConcept`.

[heading Complexity 复杂度]

Average complexity is Linear. Worst-case complexity is quadratic.\n
平均复杂度为线性。最坏情况复杂度为二次方。

[endsect]


