[section:max_element max_element]

[heading Prototype 原型]

``
template<class ForwardRange>
typename range_iterator<ForwardRange>::type
max_element(ForwardRange& rng);

template<class ForwardRange>
typename range_iterator<const ForwardRange>::type
max_element(const ForwardRange& rng);

template<class ForwardRange, class BinaryPredicate>
typename range_iterator<ForwardRange>::type
max_element(ForwardRange& rng, BinaryPredicate pred);

template<class ForwardRange, class BinaryPredicate>
typename range_iterator<const ForwardRange>::type
max_element(const ForwardRange& rng, BinaryPredicate pred);


template<
    range_return_value re,
    class ForwardRange
    >
typename range_return<ForwardRange, re>::type
max_element(ForwardRange& rng);

template<
    range_return_value_re,
    class ForwardRange
    >
typename range_return<const ForwardRange, re>::type
max_element(const ForwardRange& rng);

template<
    range_return_value re,
    class ForwardRange,
    class BinaryPredicate
    >
typename range_return<ForwardRange, re>::type
max_element(ForwardRange& rng, BinaryPredicate pred);

template<
    range_return_value re,
    class ForwardRange,
    class BinaryPredicate
    >
typename range_return<const ForwardRange, re>::type
max_element(const ForwardRange& rng, BinaryPredicate pred);
``

[heading Description 说明]

The versions of `max_element` that return an iterator, return the iterator to the maximum value as determined by using `operator<` if a predicate is not supplied. Otherwise the predicate `pred` is used to determine the maximum value. The versions of `max_element` that return a `range_return`, defines `found` in the same manner as the returned iterator described above.\n
返回迭代器的 `max_element` 版本返回指向由 `operator<` 确定的最大值元素的迭代器，如果没有给定谓词。否则使用谓词 `pred` 来确定最大值。
返回 `range_return` 的 `max_element` 版本则以上述版本的风格定义 `found`。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/max_element.hpp`\n
定义于头文件 `boost/range/algorithm/max_element.hpp` 中

[heading Requirements 要求]

[*For the non-predicate versions: 对于不带谓词的版本：]

* `ForwardRange` is a model of the __forward_range__ Concept.\n
  `ForwardRange` 符合 __forward_range__ 概念。
* `ForwardRange`'s value type is a model of the `LessThanComparableConcept`.\n
  `ForwardRange` 的值类型符合 `LessThanComparableConcept`。

[*For the predicate versions: 对于带谓词的版本：]

* `ForwardRange` is a model of the __forward_range__ Concept.\n
  `ForwardRange` 符合 __forward_range__ 概念。
* `BinaryPredicate` is a model of the `BinaryPredicateConcept`.\n
  `BinaryPredicate` 符合 `BinaryPredicateConcept`.
* `ForwardRange`'s value type is convertible to both of `BinaryPredicate`'s argument types.\n
  `ForwardRange` 的值类型可转换为 `BinaryPredicate` 的两个参数类型。

[heading Complexity 复杂度]

Linear. Zero comparisons if `empty(rng)`, otherwise `distance(rng) - 1` comparisons.\n
线性。如果 `empty(rng)` 则零次比较，否则 `distance(rng) - 1` 次比较。

[endsect]


