[section:mismatch mismatch]

[heading Prototype 原型]

``
template<class SinglePassRange1, class SinglePassRange2>
std::pair<
    typename range_iterator<SinglePassRange1>::type,
    typename range_iterator<const SinglePassRange2>::type >
mismatch(SinglePassRange1& rng1, const SinglePassRange2& rng2);

template<class SinglePassRange1, class SinglePassRange2>
std::pair<
    typename range_iterator<const SinglePassRange1>::type,
    typename range_iterator<const SinglePassRange2>::type >
mismatch(const SinglePassRange1& rng1, const SinglePassRange2& rng2);

template<class SinglePassRange1, class SinglePassRange2>
std::pair<
    typename range_iterator<SinglePassRange1>::type,
    typename range_iterator<SinglePassRange2>::type >
mismatch(SinglePassRange1& rng1, SinglePassRange2& rng2);

template<class SinglePassRange1, class SinglePassRange2>
std::pair<
    typename range_iterator<const SinglePassRange1>::type,
    typename range_iterator<SinglePassRange2>::type >
mismatch(const SinglePassRange1& rng1, SinglePassRange2& rng2);


template<
    class SinglePassRange1,
    class SinglePassRange2,
    class BinaryPredicate
    >
std::pair<
    typename range_iterator<SinglePassRange1>::type,
    typename range_iterator<const SinglePassRange2>::type >
mismatch(SinglePassRange1& rng1, const SinglePassRange2& rng2,
         BinaryPredicate pred);

template<
    class SinglePassRange1,
    class SinglePassRange2,
    class BinaryPredicate
    >
std::pair<
    typename range_iterator<const SinglePassRange1>::type,
    typename range_iterator<const SinglePassRange2>::type >
mismatch(const SinglePassRange1& rng1, const SinglePassRange2& rng2,
         BinaryPredicate pred);

template<
    class SinglePassRange1,
    class SinglePassRange2,
    class BinaryPredicate
    >
std::pair<
    typename range_iterator<SinglePassRange1>::type,
    typename range_iterator<SinglePassRange2>::type >
mismatch(SinglePassRange1& rng1, SinglePassRange2& rng2,
         BinaryPredicate pred);

template<
    class SinglePassRange1,
    class SinglePassRange2,
    class BinaryPredicate
    >
std::pair<
    typename range_iterator<const SinglePassRange1>::type,
    typename range_iterator<SinglePassRange2>::type >
mismatch(const SinglePassRange1& rng1, SinglePassRange2& rng2,
         BinaryPredicate pred);
``

[heading Description 说明]

`mismatch` finds the first position where the correseponding elements from the two ranges `rng1` and `rng2` are not equal.\n
`mismatch` 查找两个区间 `rng1` 和 `rng2` 间对应元素不相等的第一个位置。

Equality is determined by `operator==` for non-predicate versions of `mismatch`, and by satisfying `pred` in the predicate versions.\n
在不带谓词的 `mismatch` 版本中使用 `operator==` 来比较元素，在带谓词的版本中使用 `pred` 来比较元素。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/mismatch.hpp`\n
定义于头文件 `boost/range/algorithm/mismatch.hpp` 中

[heading Requirements 要求]

[*For the non-predicate versions: 对于不带谓词的版本：]

* `SinglePassRange1` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange1` 符合 __single_pass_range__ 概念。
* `SinglePassRange2` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange2` 符合 __single_pass_range__ 概念。
* `SinglePassRange1`'s value type is a model of the `EqualityComparableConcept`.\n
  `SinglePassRange1` 的值类型符合 `EqualityComparableConcept`.
* `SinglePassRange2`'s value type is a model of the `EqualityComparableConcept`.\n
  `SinglePassRange2` 的值类型符合 `EqualityComparableConcept`.
* `SinglePassRange1`s value type can be compared for equality with `SinglePassRange2`'s value type.\n
  `SinglePassRange1` 的值类型可以与 `SinglePassRange2` 的值类型进行相等性比较。

[*For the predicate versions: 对于带谓词的版本：]

* `SinglePassRange1` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange1` 符合 __single_pass_range__ 概念。
* `SinglePassRange2` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange2` 符合 __single_pass_range__ 概念。
* `BinaryPredicate` is a model of the `BinaryPredicateConcept`.\n
  `BinaryPredicate` 符合 `BinaryPredicateConcept`.
* `SinglePassRange1`'s value type is convertible to `BinaryPredicate`'s first argument type.\n
  `SinglePassRange1` 的值类型可转换为 `BinaryPredicate` 的第一参数类型。
* `SinglePassRange2`'s value type is convertible to `BinaryPredicate`'s second argument type.\n
  `SinglePassRange2` 的值类型可转换为 `BinaryPredicate` 的第二参数类型。

[heading Precondition: 前提条件]

`distance(rng2) >= distance(rng1)`

[heading Complexity 复杂度]

Linear. At most `distance(rng1)` comparisons.\n
线性。最多 `distance(rng1)` 次比较。

[endsect]


