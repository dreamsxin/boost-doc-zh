[section:unique unique]

[heading Prototype 原型]

``
template<class ForwardRange>
typename range_return<ForwardRange, return_begin_found>::type
unique(ForwardRange& rng);

template<class ForwardRange>
typename range_return<const ForwardRange, return_begin_found>::type
unique(const ForwardRange& rng);

template<class ForwardRange, class BinaryPredicate>
typename range_return<ForwardRange, return_begin_found>::type
unique(ForwardRange& rng, BinaryPredicate pred);

template<class ForwardRange, class BinaryPredicate>
typename range_return<const ForwardRange, return_begin_found>::type
unique(const ForwardRange& rng, BinaryPredicate pred);

template<range_return_value re, class ForwardRange>
typename range_return<ForwardRange, re>::type
unique(ForwardRange& rng);

template<range_return_value re, class ForwardRange>
typename range_return<const ForwardRange, re>::type
unique(const ForwardRange& rng);

template<range_return_value re, class ForwardRange, class BinaryPredicate>
typename range_return<ForwardRange, re>::type
unique(ForwardRange& rng, BinaryPredicate pred);

template<range_return_value re, class ForwardRange, class BinaryPredicate>
typename range_return<const ForwardRange, re>::type
unique(const ForwardRange& rng, BinaryPredicate pred);
``

[heading Description 说明]

`unique` removes all but the first element of each sequence of duplicate encountered in `rng`.\n
`unique` 删除 `rng` 中每个重复序列中除第一个元素以外的所有元素。

Elements in the range `[new_last, end(rng))` are dereferenceable but undefined.\n
区间 `[new_last, end(rng))` 中的元素是可提领的，但不确定。

Equality is determined by the predicate if one is supplied, or by `operator==()` for `ForwardRange`'s value type.\n
如果有给定，则相等性由给定的谓词决定，否则由 `ForwardRange` 的值类型的 `operator==()` 决定。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/unique.hpp`\n
定义于头文件 `boost/range/algorithm/unique.hpp` 中

[heading Requirements 要求]

[*For the non-predicate versions of unique: 对于不带谓词的unique版本：]

* `ForwardRange` is a model of the __forward_range__ Concept.\n
  `ForwardRange` 符合 __forward_range__ 概念。
* `ForwardRange` is mutable.\n
  `ForwardRange` 可写。
* `ForwardRange`'s value type is a model of the `EqualityComparableConcept`.\n
  `ForwardRange` 的值类型符合 `EqualityComparableConcept`.

[*For the predicate versions of unique: 对于带谓词的unique版本：]

* `ForwardRange` is a model of the __forward_range__ Concept.\n
  `ForwardRange` 符合 __forward_range__ 概念。
* `ForwardRange` is mutable.\n
  `ForwardRange` 可写。
* `BinaryPredicate` is a model of the `BinaryPredicateConcept`.\n
  `BinaryPredicate` 符合 `BinaryPredicateConcept`.
* `ForwardRange`'s value type is convertible to `BinaryPredicate`'s first argument type and to `BinaryPredicate`'s second argument type.\n
  `ForwardRange` 的值类型可转换为 `BinaryPredicate` 的第一参数类型及第二参数类型。

[heading Complexity 复杂度]

Linear. `O(N)` where `N` is `distance(rng)`. Exactly `distance(rng)` comparisons are performed.\n
线性。`O(N)` 其中 `N` 为 `distance(rng)`。正好执行 `distance(rng)` 次比较。

[endsect]


