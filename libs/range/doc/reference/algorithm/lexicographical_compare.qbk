[section:lexicographical_compare lexicographical_compare]

[heading Prototype 原型]

``
template<
    class SinglePassRange1,
    class SinglePassRange2
    >
bool lexicographical_compare(const SinglePassRange1& rng1,
                             const SinglePassRange2& rng2);

template<
    class SinglePassRange1,
    class SinglePassRange2,
    class BinaryPredicate
    >
bool lexicographical_compare(const SinglePassRange1& rng1,
                             const SinglePassRange2& rng2,
                             BinaryPredicate pred);    
``

[heading Description 说明]

`lexicographical_compare` compares element by element `rng1` against `rng2`. If the element from `rng1` is less than the element from `rng2` then `true` is returned. If the end of `rng1` without reaching the end of `rng2` this also causes the return value to be `true`. The return value is `false` in all other circumstances. The elements are compared using `operator<` in the non-predicate versions of `lexicographical_compare` and using `pred` in the predicate versions.\n
`lexicographical_compare` 逐个元素比较 `rng1` 和 `rng2`。如果 `rng1` 的元素小于 `rng2` 的元素则返回 `true`。
如果 `rng1` 先到结尾而 `rng2` 未到，也返回 `true`。其它情况下返回值无为 `false`。在不带谓词的 `lexicographical_compare` 版本中使用 
`operator<` 来比较元素，在带谓词的版本中使用 `pred` 来比较元素。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/lexicographical_compare.hpp`\n
定义于头文件 `boost/range/algorithm/lexicographical_compare.hpp` 中

[heading Requirements 要求]

[*For the non-predicate versions of lexicographical_compare: 对于不带谓词的版本：]

* `SinglePassRange1` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange1` 符合 __single_pass_range__ 概念。
* `SinglePassRange2` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange2` 符合 __single_pass_range__ 概念。
* `SinglePassRange1`'s value type is a model of the `LessThanComparableConcept`.\n
  `SinglePassRange1` 的值类型符合 `LessThanComparableConcept`.
* `SinglePassRange2`'s value type is a model of the `LessThanComparableConcept`.\n
  `SinglePassRange2` 的值类型符合 `LessThanComparableConcept`.
* Let `x` be an object of `SinglePassRange1`'s value type. Let `y` be an obect of `SinglePassRange2`'s value type. `x < y` must be valid. `y < x` must be valid.\n
  令 `x` 为 `SinglePassRange1` 值类型的一个对象。令 `y` 为 `SinglePassRange2` 值类型的一个对象。`x < y` 必须有效。`y < x` 必须有效。

[*For the predicate versions of lexicographical_compare: 对于带谓词的版本：]

* `SinglePassRange1` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange1` 符合 __single_pass_range__ 概念。
* `SinglePassRange2` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange2` 符合 __single_pass_range__ 概念。
* `BinaryPredicate` is a model of the `BinaryPredicateConcept`.\n
  `BinaryPredicate` 符合 `BinaryPredicateConcept`.
* `SinglePassRange1`'s value type is convertible to `BinaryPredicate`'s first argument type.\n
  `SinglePassRange1` 的值类型可转换为 `BinaryPredicate` 的第一参数类型。
* `SinglePassRange2`'s value type is convertible to `BinaryPredicate`'s second argument type.\n
  `SinglePassRange2` 的值类型可转换为 `BinaryPredicate` 的第二参数类型。

[heading Complexity 复杂度]

Linear. At most `2 * min(distance(rng1), distance(rng2))` comparisons.\n
线性。最多 `2 * min(distance(rng1), distance(rng2))` 次比较。

[endsect]


