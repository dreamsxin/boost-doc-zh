[section:partition partition]

[heading Prototype 原型]

``
template<
    class ForwardRange,
    class UnaryPredicate
    >
typename range_iterator<ForwardRange>::type
partition(ForwardRange& rng, UnaryPredicate pred);

template<
    class ForwardRange,
    class UnaryPredicate
    >
typename range_iterator<const ForwardRange>::type
partition(const ForwardRange& rng, UnaryPredicate pred);

template<
    range_return_value re,
    class ForwardRange,
    class UnaryPredicate
    >
typename range_return<ForwardRange, re>::type
partition(ForwardRange& rng, UnaryPredicate pred);

template<
    range_return_value re,
    class ForwardRange,
    class UnaryPredicate
    >
typename range_return<const ForwardRange, re>::type
partition(const ForwardRange& rng, UnaryPredicate pred);
``

[heading Description 说明]

`partition` orders the elements in `rng` based on `pred`, such that the elements that satisfy `pred` precede the elements that do not. In the versions that return a single iterator, the return value is the middle iterator. In the versions that have a configurable range_return, `found` corresponds to the middle iterator.\n
`partition` 基于 `pred` 对 `rng` 中的元素进行排序，令满足 `pred` 的各个元素在其它不满足条件的元素之前。
在返回单个迭代器的版本中，返回值为中间迭代器。在带有可配置的 range_return 的版本中，`found` 对应于中间迭代器。


[heading Definition 定义]

Defined in the header file `boost/range/algorithm/partition.hpp`\n
定义于头文件 `boost/range/algorithm/partition.hpp` 中

[heading Requirements 要求]

* `ForwardRange` is a model of the __forward_range__ Concept.\n
  `ForwardRange` 符合 __forward_range__ 概念。
* `UnaryPredicate` is a model of the `PredicateConcept`.\n
  `UnaryPredicate` 符合 `PredicateConcept`.
* `ForwardRange`'s value type is convertible to `UnaryPredicate`'s argument type.\n
  `ForwardRange` 的值类型可转换为 `UnaryPredicate` 的参数类型。

[heading Complexity 复杂度]

Linear. Exactly `distance(rng)` applications of `pred`, and at most `distance(rng) / 2` swaps.\n
线性。正妈 `distance(rng)` 次 `pred` 调用以及最多 `distance(rng) / 2` 次交换。

[endsect]


