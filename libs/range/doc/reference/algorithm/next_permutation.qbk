[section:next_permutation next_permutation]

[heading Prototype 原型]

``
template<class BidirectionalRange>
bool next_permutation(BidirectionalRange& rng);

template<class BidirectionalRange>
bool next_permutation(const BidirectionalRange& rng);

template<class BidirectionalRange, class Compare>
bool next_permutation(BidirectionalRange& rng, Compare pred);

template<class BidirectionalRange, class Compare>
bool next_permutation(const BidirectionalRange& rng, Compare pred);
``

[heading Description 说明]

`next_permutation` transforms the range of elements `rng` into the lexicographically next greater permutation of the elements if such a permutation exists. If one does not exist then the range is transformed into the lexicographically smallest permutation and `false` is returned. `true` is returned when the next greater permutation is successfully generated.\n
`next_permutation` 将 `rng` 中的元素变换为按字典序下一个较大的排列，如果这样的排列存在的话。
如果不存在这样的排列，则区间变换为最小的排列，且返回 `false`。当成功得到下一个较大排列时，返回 `true`。

The ordering relationship is determined by using `operator<` in the non-predicate versions, and by evaluating `pred` in the predicate versions.\n
在不带谓词的版本中，顺序关系由 `operator<` 决定，在带谓词的版本中则通过对 `pred` 求值来决定。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/permutation.hpp`\n
定义于头文件 `boost/range/algorithm/permutation.hpp` 中

[heading Requirements 要求]

[*For the non-predicate versions: 对于不带谓词的版本：]

* `BidirectionalRange` is a model of the __bidirectional_range__ Concept.\n
  `BidirectionalRange` 符合 __bidirectional_range__ 概念。
* `BidirectionalRange` is mutable.\n
  `BidirectionalRange` 可写。
* `BidirectionalRange`'s value type is a model of the `LessThanComparableConcept`.\n
  `BidirectionalRange` 的值类型符合 `LessThanComparableConcept`.
* The ordering of objects of type `BidirectionalRange`'s value type is a [*/strict weak ordering/], as defined in the `LessThanComparableConcept` requirements.\n
  `BidirectionalRange` 值类型的对象的顺序是一个 [*/严格弱序/]，正如 `LessThanComparableConcept` 的要求所定义的。

[*For the predicate versions: 对于带谓词的版本：]

* `BidirectionalRange` is a model of the __bidirectional_range__ Concept.\n
  `BidirectionalRange` 符合 __bidirectional_range__ 概念。
* `BidirectionalRange` is mutable.\n
  `BidirectionalRange` 可写。
* `Compare` is a model of the `StrictWeakOrderingConcept`.\n
  `Compare` 符合 `StrictWeakOrderingConcept`.
* `BidirectionalRange`'s value type is convertible to both of `Compare`'s argument types.\n
  `BidirectionalRange` 的值类型可转换为 `Compare` 的两个参数类型。

[heading Complexity 复杂度]

Linear. At most `distance(rng) / 2` swaps.\n
线性。最多 `distance(rng) / 2` 次交换。

[endsect]


