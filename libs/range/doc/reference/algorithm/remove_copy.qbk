[section:remove_copy remove_copy]

[heading Prototype 原型]

``
template<class ForwardRange, class Outputiterator, class Value>
OutputIterator
remove_copy(ForwardRange& rng, OutputIterator out, const Value& val);

template<class ForwardRange, class OutputIterator, class Value>
OutputIterator
remove_copy(const ForwardRange& rng, OutputIterator out, const Value& val);
``

[heading Description 说明]

`remove_copy` copied all of the elements `x` from `rng` for which `x == val` is `false`.\n
`remove_copy` 从 `rng` 中复制所有满足 `x == val` 为 `false` 的元素 `x`。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/remove_copy.hpp`\n
定义于头文件 `boost/range/algorithm/remove_copy.hpp` 中

[heading Requirements 要求]

* `ForwardRange` is a model of the __forward_range__ Concept.\n
  `ForwardRange` 符合 __forward_range__ 概念。
* `ForwardRange` is mutable.\n
  `ForwardRange` 可写。
* `Value` is a model of the `EqualityComparableConcept`.\n
  `Value` 符合 `EqualityComparableConcept`.
* Objects of type `Value` can be compared for equality with objects of `ForwardRange`'s value type.\n
  类型为 `Value` 的对象可以与 `ForwardRange` 值类型的对象比较相等性。

[heading Complexity 复杂度]

Linear. `remove_copy` performs exactly `distance(rng)` comparisons for equality.\n
线性。`remove_copy` 执行正好 `distance(rng)` 次相等性比较。

[endsect]
