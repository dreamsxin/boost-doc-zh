<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><!-- saved from url=(0063)http://www.boost.org/libs/graph/doc/cuthill_mckee_ordering.html --><title>Boost Graph Library: Sloan Ordering</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><!--
  -- Copyright (c) Jeremy Siek 2000
  --
  -- Distributed under the Boost Software License, Version 1.0.
  -- (See accompanying file LICENSE_1_0.txt or copy at
  -- http://www.boost.org/LICENSE_1_0.txt)
  -->
<meta content="MSHTML 6.00.2715.400" name="GENERATOR"></head>
<body alink="#ff0000" bgcolor="#ffffff" link="#0000ee" text="#000000" vlink="#551a8b">
<img src="../../../boost.png" alt="C++ Boost" height="86" width="277"> <br>
<h1><a name="sec:bfs"></a><tt>sloan_ordering</tt></h1>
<p>
</p><div align="left">
<table border="1" cellpadding="3">
  <tbody>
  <tr>
    <th align="left"><b>图：</b></th>
    <td align="left">无向图</td></tr>
  <tr>
    <th align="left"><b>属性：</b></th>
      <td align="left">color, degree, current_degree, priority</td>
    </tr>
  <tr>
    <th align="left"><b>复杂度：</b></th>
    <td align="left">时间：<i>O(log(m)|E|)</i> 其中 <i>m = max { degree(v) | v 
      in V }</i> </td></tr></tbody></table></div>
<pre>  (1)<br>  template &lt;class Graph, class OutputIterator,<br>                  class ColorMap, class DegreeMap, <br>                  class PriorityMap, class Weight&gt;<br>  OutputIterator<br>  sloan_ordering(Graph&amp; g,<br>                 typename graph_traits&lt;Graph&gt;::vertex_descriptor s,<br>                 typename graph_traits&lt;Graph&gt;::vertex_descriptor e,<br>                 OutputIterator permutation, <br>                 ColorMap color, <br>                 DegreeMap degree, <br>                 PriorityMap priority, <br>                 Weight W1, <br>                 Weight W2 )<br><br>  (2)<br>   template &lt;class Graph, class OutputIterator,<br>                  class ColorMap, class DegreeMap, <br>                  class PriorityMap, class Weight&gt;<br>  OutputIterator<br>  sloan_ordering(Graph&amp; g,<br>                 OutputIterator permutation, <br>                 ColorMap color, <br>                 DegreeMap degree, <br>                 PriorityMap priority, <br>                 Weight W1, <br>                 Weight W2 )<br><br><br>(3)<br> template &lt;class Graph, class OutputIterator,<br>                  class ColorMap, class DegreeMap, <br>                  class PriorityMap&gt;<br>  OutputIterator<br>  sloan_ordering(Graph&amp; g,<br>                 typename graph_traits&lt;Graph&gt;::vertex_descriptor s,<br>                 typename graph_traits&lt;Graph&gt;::vertex_descriptor e,<br>                 OutputIterator permutation, <br>                 ColorMap color, <br>                 DegreeMap degree, <br>                 PriorityMap priority )<br><br><br>(4)<br> template &lt;class Graph, class OutputIterator,<br>                  class ColorMap, class DegreeMap, <br>                  class PriorityMap&gt;<br>  OutputIterator<br>  sloan_ordering(Graph&amp; g,<br>                 OutputIterator permutation, <br>                 ColorMap color, <br>                 DegreeMap degree, <br>                 PriorityMap priority )</pre>
<p>Sloan 排序算法[1, 2]的目的是通过重排各个顶点的索引值来减少一个图的轮廓和波前。Sloan
算法需要一个开始顶点和一个结束顶点。这些顶点可以手工赋值。不过也有一个算法
sloan_starting_nodes
可以提供非常好的开始和结束顶点。每个顶点被赋予一个优先级。这个优先级是该顶点至结束顶点距离的一个加权和(全局指标)，被称为顶点的当前度
current degree。这个当前度基本上反映了在一个顶点的邻接点间的重编号状态(局部指标)。因此，Sloan
算法(与McKee算法相反)统筹考虑局部和全局的指标，来对序列进行重编号。你可以使用相对权重，不过 Sloan
提供的缺省值(weight1/weight2=1/2)已被证明在大多数情况下是非常好的。 </p>
<p>该算法的版本1让用户选择开始和结束顶点，而版本2则使用前面提到的 sloan_starting_node 
  算法来找出一个好的开始顶点。这些顶点的选择对于排序的质量有重要影响。版本3和4分别等同于版本1和2，除了使用标准权重 W1=1 和 W2=2。 
</p><p>该算法的输出是按新顺序排列的顶点。取决于你用的是哪种输出迭代器，你可以获得 Sloan 序或逆 Sloan 序。例如，如果你使用一个 vector 
  的反向迭代器来将输出保存到该 vector，则你就得到逆 Sloan 序。 
</p><pre>  std::vector&lt;vertex_descriptor&gt; inv_perm(num_vertices(G));<br>  sloan_ordering(G, inv_perm.rbegin());<br></pre>
<p>另一方面，将输出保存在vector中给了你从新顺序到旧顺序的排列。</p><pre>  inv_perm[new_index[u]] == u<br></pre>
<p>有时，这是你想要的是反向排列，即从旧索引到新索引的排列。这可以按以下方法很容易地计算得到。
</p><p>Sometimes, it is the opposite permutation that you want, the permutation from 
  the old index to the new index. This can easily be computed in the following 
  way. 
</p><pre>  for (size_type i = 0; i != inv_perm.size(); ++i)<br>    perm[old_index[inv_perm[i]]] = i;<br></pre>
<p>通常，你需要 Cuthill-McKee 算法的反向顺序，以及 Sloan 算法的正向顺序。</p>
<h3>Parameters 参数</h3>对于版本1: 
<ul>
  <li><tt>Graph&amp; g</tt> &nbsp;(IN) <br>一个无向图。图的类型必须符合 <a href="./IncidenceGraph.html">关联图IncidenceGraph</a>。 
  </li><li><tt>vertex_descriptor s</tt> &nbsp;(IN) <br>开始顶点。 
  </li><li><tt>vertex_descriptor e</tt>&nbsp;(IN)<br>结束顶点。<br>
  </li><li><tt>OutputIterator permutation</tt> &nbsp;(OUT) <br>新的顶点顺序。这些顶点被按它们的新顺序写出到 <a href="http://www.sgi.com/tech/stl/OutputIterator.html">输出迭代器</a>。 
  </li><li><tt>ColorMap color_map</tt> &nbsp;(WORK) <br>
  在内部使用，以跟踪算法的处理过程(避免重复访问同一个顶点两次)。 
  </li><li><tt>PriorityMap priority_map</tt> &nbsp;(IN)<br>
  在内部使用，以保存每个顶点重编号的优先级。 </li>
  <li><tt>DegreeMap degree_map</tt> &nbsp;(IN) <br>它必须将顶点映射至它们的度数。 </li>
  <li><tt>Weight W1 &amp; W2</tt> &nbsp;(IN) <br>用于 Sloan 算法的启发式权重。 </li>
</ul>
<p>对于版本2: </p>
<ul>
  <li><tt>Graph&amp; g</tt> &nbsp;(IN) <br>一个无向图。图的类型必须符合 <a href="IncidenceGraph.html">关联图IncidenceGraph</a>。</li><li><tt>OutputIterator permutation</tt> &nbsp;(OUT) <br>新的顶点顺序。这些顶点被按它们的新顺序写出到 <a href="http://www.sgi.com/tech/stl/OutputIterator.html">输出迭代器</a>。 
  </li><li><tt>ColorMap color_map</tt> &nbsp;(WORK) <br>
  在内部使用，以跟踪算法的处理过程(避免重复访问同一个顶点两次)。 
  </li><li><tt>PriorityMap priority_map</tt> &nbsp;(IN)<br>
  在内部使用，以保存每个顶点重编号的优先级。 </li><li><tt>DegreeMap degree_map</tt> &nbsp;(IN) <br>它必须将顶点映射至它们的度数。 </li><li><tt>Weight W1 &amp; W2</tt> &nbsp;(IN) <br>用于 Sloan 算法的启发式权重。</li></ul>
<p>对于版本3: </p>
<ul>
  <li><tt>Graph&amp; g</tt> &nbsp;(IN) <br>一个无向图。图的类型必须符合 <a href="IncidenceGraph.html">关联图IncidenceGraph</a>。 
  </li><li><tt>vertex_descriptor s</tt> &nbsp;(IN) <br>开始顶点。 
  </li><li><tt>vertex_descriptor e</tt>&nbsp;(IN)<br>结束顶点。<br>
  </li><li><tt>OutputIterator permutation</tt> &nbsp;(OUT) <br>新的顶点顺序。这些顶点被按它们的新顺序写出到 <a href="http://www.sgi.com/tech/stl/OutputIterator.html">输出迭代器</a>。 
  </li><li><tt>ColorMap color_map</tt> &nbsp;(WORK) <br>
  在内部使用，以跟踪算法的处理过程(避免重复访问同一个顶点两次)。 
  </li><li><tt>PriorityMap priority_map</tt> &nbsp;(IN)<br>
  在内部使用，以保存每个顶点重编号的优先级。 </li><li><tt>DegreeMap degree_map</tt> &nbsp;(IN) <br>它必须将顶点映射至它们的度数。</li></ul>
<p>对于版本4: </p>
<ul>
  <li><tt>Graph&amp; g</tt> &nbsp;(IN) <br>一个无向图。图的类型必须符合 <a href="IncidenceGraph.html">关联图IncidenceGraph</a>。</li><li><tt>OutputIterator permutation</tt> &nbsp;(OUT) <br>新的顶点顺序。这些顶点被按它们的新顺序写出到 <a href="http://www.sgi.com/tech/stl/OutputIterator.html">输出迭代器</a>。 
  </li><li><tt>ColorMap color_map</tt> &nbsp;(WORK) <br>
  在内部使用，以跟踪算法的处理过程(避免重复访问同一个顶点两次)。 
  </li><li><tt>PriorityMap priority_map</tt> &nbsp;(IN)<br>
  在内部使用，以保存每个顶点重编号的优先级。 </li><li><tt>DegreeMap degree_map</tt> &nbsp;(IN) <br>它必须将顶点映射至它们的度数。</li></ul>
<p>&nbsp;</p>
<h3>Example 示例</h3>见&nbsp;<a href="../example/sloan_ordering.cpp"><tt>example/sloan_ordering.cpp</tt></a>. 
<h3>See Also 参见</h3>
<p><a href="./sloan_start_end_vertices.htm">sloan_start_end_vertices</a>, 
  <a href="./bandwidth.html">bandwidth</a>, <a href="./profile.htm">profile</a>, <a href="./wavefront.htm">wavefront</a> 和 <tt>boost/graph/properties.hpp</tt> 中的 <tt>degree_property_map</tt>。 </p>
<p>[1] S. W. Sloan, <i>An algorithm for profile and wavefront reduction of sparse 
  matrices</i>, Int. j. numer. methods eng., <b>23</b>, 239 - 251 (1986)</p>
<p>[2] S. W. Sloan, <i>A fortran program for profile and wavefront reduction</i>, 
  Int. j. numer. methods eng., <b>28</b>, 2651 - 2679 (1989)<br>
</p>
<hr>

<table width="718">
  <tbody> 
  <tr valign="top">
    <td nowrap="nowrap">Copyright © 2001-2002</td>
    <td>Marc Wintermantel, ETH Zurich (<a href="mailto:wintermantel@imes.mavt.ethz.ch">wintermantel@imes.mavt.ethz.ch</a>) 
    </td>
  </tr></tbody></table></body></html>