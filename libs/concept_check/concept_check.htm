<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>

<!-- Copyright (c) 2000 Jeremy Siek and Andrew Lumsdaine, 2007 David Abrahams --><!-- Distributed under the Boost --><!-- Software License, Version 1.0. (See accompanying --><!-- file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt) -->
  <meta name="generator" content="HTML Tidy for Linux/x86 (vers 1 September 2005), see www.w3.org" />

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Concept Check Library</title>


  <link rel="stylesheet" href="../../rst.css" type="text/css" />

</head>








<body style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);" alink="#ff0000" link="#0000ee" vlink="#551a8b">

<img src="../../boost.png" alt="C++ Boost" height="86" width="277" /><br clear="none" />

<h1>Boost 概念检查库 (BCCL)</h1>

<blockquote> 概念检查库可以让你为符合 <a href="http://www.generic-programming.org/languages/conceptcpp/specification/">被
提议为C++语言扩展的</a> 风格的 <a href="http://www.boost.org/more/generic_programming.html#concept">概
念</a> 增加显式的声明和检查。 </blockquote>

<h2><a name="sec:concept-checking" id="sec:concept-checking"></a>Synopsis 概要</h2>

<p>C++中的泛型编程的特点在于，使用模板参数来表示抽象数据类型(或称&ldquo;<a href="http://www.boost.org/more/generic_programming.html#concept">概
念</a>&rdquo;)。但是，C++语言本身本不提供机制让类模板或函数模板的作者明确地指定用户使用的模板参数必须遵循(或
符合)哪些概念。通常的做法是，在模板参数的取名上给用户一些提示，并在代码中明确给出这些概念的要求。但是，编译器并不会特殊对待这些特殊的名字：一个
名为 <code>RandomAccessIterator</code> 的参数对于编译器而言，与名为 T
的参数并无不同。而且： </p>

<ul>

  <li>由于模板参数错误所引起的编译器错误信息是非常难以解读的。很多时候这些错误信息并不是指向调用模板的位置，而是指向模板的内
部，而那些地方是不应该让用户看到的。</li>

  <li>由于无需让编译器来进行检查，所以文档中的要求通常都是含糊的、错误或不存在的，因此用户不可能知道真正需要的是何种类型的参
数。</li>

  <li>文档中的概念要求可能没有完全覆盖整个模板，这意味着那怕用户完全按照文档所说来提供模板参数，也可能会得到编译错误。 </li>

  <li>文档中的概念要求可能太过严格，要求得比模板的实际需要更多。 </li>

  <li>代码中的概念名可能没有与文档同步更新。 </li>

</ul>

<p>Boost概念检查库可以提供： </p>

<ul>

  <li>在使用点插入编译期模板参数检查的机制。 </li>

  <li>通过概念检查类来指定概念要求的框架。 </li>

  <li>对模板进行概念要求验证的机制。 </li>

  <li>一组概念检查类和原型类，对应于C++标准库中的概念要求。</li>

  <li>使用 traits 类以外的另一种方法，用于访问符合下一个C++标准中的语法建议的相关类型。</li>

</ul>

<p>以上机制使用标准C++，并且没有运行期的代价。该机制的主要代价在于编译期。 </p>

<p><span style="font-weight: bold;">任何编写类模板或函数模板的程序员都
应该将概念检查作为他们所编写的代码的正常部分。</span>概念检查可以作为公有接口插入到每个模板参数中。如果该概念来自于标准库，那
么只要使用BCCL中相应的概念检查类就可以了。如果不是，则需要编写一个新的概念检查类 -
毕竟只需要几行代码。对于新的概念，还应该创建一个相应的原型类，作为该概念的一个最小的基本实现。 </p>

<p>本文档按以下章节组织：</p>

<ol>

  <li><a href="#introduction">Introduction 简介</a></li>

  <li><a href="#motivating-example">Motivating
Example 例子</a></li>

  <li><a href="#history">History 历史</a></li>

  <li><a href="#publications">Publications 出版</a></li>

  <li><a href="#acknowledgements">Acknowledgements 鸣谢</a></li>

  <li><a href="./using_concept_check.htm">Using
Concept Checks 使用概念检查</a></li>

  <li><a href="creating_concepts.htm">Creating
Concept Checking Classes 创建概念检查类</a></li>

  <li><a href="./concept_covering.htm">Concept
Covering and Archetypes 概念的充分性和原型</a></li>

  <li><a href="./prog_with_concepts.htm">Programming
With Concepts 以概念编程</a></li>

  <li><a href="./implementation.htm">Implementation
实现</a></li>

  <li><a href="./reference.htm">Reference 参考</a></li>

</ol>

<p><a href="http://www.boost.org/people/jeremy_siek.htm">Jeremy
Siek</a> 贡献了这个库。<a href="http://www.boost.org/people/beman_dawes.html">Beman
Dawes</a> 负责管理正式审查。<a href="http://www.boost.org/people/dave_abrahams.htm">Dave
Abrahams</a> 重写了代码，新的语法更加兼容于支持概念的C++核心语言所建议的语法。</p>

<h2><a name="introduction" id="introduction">Introduction
简介</a></h2>

<p><i>concept概念</i>是指类型必须符合的一组要求(有效表达式，相关类型，语义不变式，复杂度保
证等等)，只有符合这些要求的类型才可以作为正确的参数用于泛型算法的调用。在C++中，概念表现为函数模板(泛型算法)的形参。但是，C++并没有显式
的机制来指定概念 ---
模板参数只不过是一些占位符。按照惯例，这些参数的名字应该反映出相应需要遵循的概念，但C++编译器并会某个模板参数绑定到一个真实类型时进行概念符合
性的检查。 </p>

<p>通常，使用一个类型来调用泛型算法时，如果该类型不满足相应概念的最小语法要求，则将产生一个编译期错误。但是，这个错误并不能真正反
映出该类型不满足概念要求的事实。更有甚者，这个错误可能发生在模板实例化层次的深处，与使用该类型的表达式相距甚远，或者是某个推断出来的相关类型不可
用。这种情况得到的错误信息是没有帮助和基本上无法理解的。 </p>

<p>我们需要的是一种在实例化点(或附近)实现强制"概念安全"的机制。Boost概念检查库使用一些标准的C++结构来强制早期的概念符
合检查，并在不符合时提供更有用的错误信息。 </p>

<p>注意，这些技术只针对概念的语法要求(有效表达式和相关类型)。不能针对概念要求中的其它部分，如语义不变式或复杂度保证。</p>

<h2><a name="motivating-example" id="motivating-example">Motivating
Example 例子</a></h2>

<p>我们给出一个简单的例子来举例说明模板库的错误使用及其产生的错误信息。以下面的代码中，来自STL[<a href="bibliography.htm#austern99:_gener_progr_stl">3</a>,
<a href="bibliography.htm#IB-H965502">4</a>,<a href="bibliography.htm#stepa.lee-1994:the.s:TR">5</a>]的
泛型算法 <tt>std::stable_sort()</tt> 被用于一个链表。&nbsp;</p>

<pre> <a href="./bad_error_eg.cpp">bad_error_eg.cpp</a>:<br /><font color="gray">1</font> #include &lt;vector&gt;<br /><font color="gray">2</font> #include &lt;complex&gt;<br /><font color="gray">3</font> #include &lt;algorithm&gt;<br /><font color="gray">4</font> <br /><font color="gray">5</font> int main()<br /><font color="gray">6</font> {<br /><font color="gray">7</font> std::vector&lt;std::complex&lt;float&gt; &gt; v;<br /><font color="gray">8</font> std::stable_sort(v.begin(), v.end());<br /><font color="gray">9</font> }<br /></pre>

<p>这里，<tt>std::stable_sort()</tt> 算法的原型如下：&nbsp;</p>

<pre> template &lt;class RandomAccessIterator&gt;<br /> void stable_sort(RandomAccessIterator first, RandomAccessIterator last);<br /></pre>

<p>在 Gnu C++ 中编译这段代码时将产生以下编译错误：</p>

<pre>/usr/include/c++/4.1.2/bits/stl_algo.h: In function &lsquo;void std::<br /> __insertion_sort(_RandomAccessIterator, _RandomAccessIterator) [with <br /> _RandomAccessIterator = __gnu_cxx::__normal_iterator&lt;std::complex&lt;float<br /> &gt;*, std::vector&lt;std::complex&lt;float&gt;, std::allocator&lt;std::complex&lt;<br /> float&gt; &gt; &gt; &gt;]&rsquo;:<br />/usr/include/c++/4.1.2/bits/stl_algo.h:3066: instantiated from &lsquo;void <br /> std::__inplace_stable_sort(_RandomAccessIterator, <br /> _RandomAccessIterator) [with _RandomAccessIterator = __gnu_cxx::<br /> __normal_iterator&lt;std::complex&lt;float&gt;*, std::vector&lt;std::complex&lt;<br /> float&gt;, std::allocator&lt;std::complex&lt;float&gt; &gt; &gt; &gt;]&rsquo;<br />/usr/include/c++/4.1.2/bits/stl_algo.h:3776: instantiated from &lsquo;void <br /> std::stable_sort(_RandomAccessIterator, _RandomAccessIterator) [with <br /> _RandomAccessIterator = __gnu_cxx::__normal_iterator&lt;std::complex&lt;float<br /> &gt;*, std::vector&lt;std::complex&lt;float&gt;, std::allocator&lt;std::complex&lt;<br /> float&gt; &gt; &gt; &gt;]&rsquo;<br />bad_error_eg.cpp:8: instantiated from here<br />/usr/include/c++/4.1.2/bits/stl_algo.h:2277: error: no match for <br /> &lsquo;operator&lt;&rsquo; in &lsquo;__val &lt; __first. __gnu_cxx::__normal_iterator&lt;<br /> _Iterator, _Container&gt;::operator* [with _Iterator = std::complex&lt;float<br /> &gt;*, _Container = std::vector&lt;std::complex&lt;float&gt;, std::allocator&lt;<br /> std::complex&lt;float&gt; &gt; &gt;]()&rsquo;<br /></pre>

<p>这个例子中，根本的错误是 <tt>std:complex&lt;float&gt;</tt>
不符合 <a href="http://www.sgi.com/tech/stl/LessThanComparable.html">LessThanComparable
可小于比较</a>
的概念。不幸的是，没有任何错误信息可以提示用户这一点。 </p>

<p>对于一个有足够的模板库使用经验的C++程序员而言，这个错误可能是显而易见的，但是，这些错误信息还是难以理解的，原因如下：</p>

<ol>

  <li>错误信息与文档中的 <tt>std::stable_sort()</tt> 和 <a href="http://www.sgi.com/tech/stl/LessThanComparable.html">LessThanComparable
可小于比较</a> 没有一点联系。 </li>

  <li>错误信息太长了，列出了STL中的内部函数(如 <code>__insertion_sort</code>)，
这是用户不想(也不该!)知道和关心的。 </li>

  <li>由于错误信息中列出了太多内部函数，程序员很容易认为错误的是程序库，而不是他或她自己的代码。 </li>

</ol>

<p>以下是我们希望得到的更有用的信息(也正是Boost概念检查库所产生的):<br />
</p>
<pre>boost/concept_check.hpp: In destructor &lsquo;boost::LessThanComparable&lt;TT&gt;::~<br /> LessThanComparable() [with TT = std::complex&lt;float&gt;]&rsquo;:<br />boost/concept/detail/general.hpp:29: instantiated from &lsquo;static void boost::<br /> concepts::requirement&lt;Model&gt;::failed() [with Model = boost::<br /> LessThanComparable&lt;std::complex&lt;float&gt; &gt;]&rsquo;<br />boost/concept/requires.hpp:30: instantiated from &lsquo;boost::_requires_&lt;void<br /> (*)(boost::LessThanComparable&lt;std::complex&lt;float&gt; &gt;)&gt;&rsquo;<br />bad_error_eg.cpp:8: instantiated from here<br />boost/concept_check.hpp:236: error: no match for &lsquo;operator&lt;&rsquo; in &lsquo;((boost::<br /> LessThanComparable&lt;std::complex&lt;float&gt; &gt;*)this)-&gt;boost::<br /> LessThanComparable&lt;std::complex&lt;float&gt; &gt;::a &lt; ((boost::<br /> LessThanComparable&lt;std::complex&lt;float&gt; &gt;*)this)-&gt;boost::<br /> LessThanComparable&lt;std::complex&lt;float&gt; &gt;::b&rsquo;<br /></pre>

<p>以上信息纠正了标准错误信息中的几处缺点：</p>
<ul>
  <li>这些信息所引用的概念正是用户可以在STL文档中找到的(<a href="http://www.sgi.com/tech/stl/LessThanComparable.html">LessThanComparable
可小于比较</a>)。 
  </li>
  <li>错误信息更短了，而且没有暴露STL的内部函数，也没有指向 <code>std::stable_sort</code>。 
  </li>
  <li>错误信息中出现的 <tt>concept_check.hpp</tt> 告诉了用户，错误出在用户代码中，而不是程序库的实现中。<br />
  </li>
</ul>
<h2><a name="history" id="history">History 历史</a></h2>

<p>这个概念检查系统的第一个版本是由 Jeremy Siek 在 SGI 工作时开发的，使用它们的 C++ 编译器和库。那个版本现在成为了
SGI STL 发布版的组成部分。原先的 boost 概念检查库系统与 SGI STL
中的概念检查有所不同，概念检查类的定义得到了极大的简化，其代价是在错误提示中有用的信息少了。在2006年，该系统由 Dave Abrahams 重写(保留了向后兼容性)，变得更易于使用，与C++核心语言所建议的概念支持更为相似，以及可以得到更好的错误信息。
</p>

<h2><a name="publications" id="publications">Publications 出版</a></h2>

<ul>

  <li><a href="http://www.oonumerics.org/tmpw00/">C++
Template Workshop 2000</a>, Concept Checking</li>

</ul>

<h2><a name="acknowledgements" id="acknowledgements">Acknowledgements 鸣谢</a></h2>

<p>The idea to use function pointers to cause instantiation is
due to Alexander Stepanov. We are not sure of the origin of the idea to
use expressions to do up-front checking of templates, but it did appear
in D&amp;E[ <a href="bibliography.htm#stroustrup94:_design_evolution">2</a>].
Thanks to Matt Austern for his excellent documentation and organization
of the STL concepts, upon which these concept checks are based. Thanks
to Boost members for helpful comments and reviews. </p>

<p><a href="./using_concept_check.htm">Next: Using
Concept Checks 使用概念检查</a><br />

</p>

<hr />
<table>

  <tbody>

    <tr valign="top">

      <td nowrap="nowrap">Copyright &copy; 2000</td>

      <td><a href="http://www.boost.org/people/jeremy_siek.htm">Jeremy
Siek</a>(<a href="mailto:jsiek@osl.iu.edu">jsiek@osl.iu.edu</a>)
Andrew Lumsdaine(<a href="mailto:lums@osl.iu.edu">lums@osl.iu.edu</a>),
2007 <a href="mailto:dave@boost-consulting.com">David
Abrahams</a>.
      </td>

    </tr>

  </tbody>
</table>

</body>
</html>
