<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<!-- Copyright (c) Jeremy Siek and Andrew Lumsdaine 2000 --><!-- Distributed under the Boost --><!-- Software License, Version 1.0. (See accompanying --><!-- file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt) -->
  
  <meta name="generator" content="HTML Tidy for Linux/x86 (vers 1 September 2005), see www.w3.org" />


  
  
  <title>Programming With Concepts</title>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

  
  <link rel="stylesheet" href="../../rst.css" type="text/css" />
</head>








<body alink="#ff0000" bgcolor="#ffffff" link="#0000ee" text="#000000" vlink="#551a8b">

  <img src="../../boost.png" alt="C++ Boost" height="86" width="277" /><br clear="none" />


  
<h2><a name="programming-with-concepts" id="programming-with-concepts">Programming with Concepts 用概念编程</a></h2>


  
<p>在建立一个泛型库时，最困难(也是最重要)的可能就是决定如何将一组要求组成概念，以及决定每个算法使用哪些概念。在此过程中，我们有一个指导原则，称为 
<i>requirement minimization principle最小要求原则</i>。 
</p>
<p><b>Requirement Minimization Principle最小要求原则:</b> 最小化对一个组件的输入参数的要求，以增加组件的可重用性。 
</p>

<p>这个原则有一定的难度。按照定义，组件必须使用输入参数来完成它的工作(``组件''的意思是指函数模板或类模板)。那么困难在于以什么方法来实现组件才可以使得对输入的假定最少(即最小要求)而又可以完成任务。 
</p>

<p>抽象的传统观念与最小要求的想法是有直接联系的。输入越抽象，要求越少。因此，概念只不过是体现了C++模板编程中通用的抽象数据类型而已。 </p>

<p>在为问题域设计概念时，重要的是要时刻紧记它们的意图，亦即如何表达对组件的输入的要求。至于最小要求原则，其实就是我们想要把概念最小化。 <!-- the following discussion does not match the Standard definition
 of LessThanComparable and needs to be changed -Jeremy

<p>
It is important to note, however, that
minimizing concepts does not mean simply 
reducing the number of valid expressions
in the concept.
For example, the
<tt>std::stable_sort()</tt> function requires that the value type of
the iterator be <a
href="http://www.sgi.com/tech/stl/LessThanComparable.html">
LessThanComparable</a>, which not only
includes <tt>operator&lt;()</tt>, but also <tt>operator&gt;()</tt>,
<tt>operator&lt;=()</tt>, and <tt>operator&gt;=()</tt>.  
It turns out that <tt>std::stable_sort()</tt> only uses
<tt>operator&lt;()</tt>.  The question then arises: should 
<tt>std::stable_sort()</tt> be specified in terms of the concept
<a
href="http://www.sgi.com/tech/stl/LessThanComparable.html">
LessThanComparable</a> or in terms of a concept that only
requires <tt>operator&lt;()</tt>?

<p>
We remark first that the use of <a
href="http://www.sgi.com/tech/stl/LessThanComparable.html">
LessThanComparable</a> does not really violate the requirement
minimization principle because all of the other operators can be
trivially implemented in terms of <tt>operator&lt;()</tt>. By
``trivial'' we mean one line of code and a constant run-time cost.  
More fundamentally, however, the use of <a
href="http://www.sgi.com/tech/stl/LessThanComparable.html">
LessThanComparable</a> does not violate the requirement minimization
principle because all of the comparison operators (<tt>&lt;</tt>,
<tt>></tt>, <tt><=</tt>, <tt>>=</tt>) are conceptually equivalent (in
a mathematical sense).  Adding conceptually equivalent valid
expressions is not a violation of the requirement minimization
principle because no new semantics are being added --- only new
syntax. The added syntax increases re-usability.

<p>
For example,
the
maintainer of the <tt>std::stable_sort()</tt> may some day change the
implementation in places to use <tt>operator>()</tt> instead of
<tt>operator<()</tt>, since, after all, they are equivalent.  Since the
requirements are part of the public interface, such a change could
potentially break client code.  If instead
<a
href="http://www.sgi.com/tech/stl/LessThanComparable.html">
LessThanComparable</a> is given as the requirement for
<tt>std::stable_sort()</tt>, then the maintainer is given a reasonable
amount of flexibility within which to work.

--></p>

<p>概念最小化是与问题域底层语义相关的一种表达。在基本容器的问题域中，对单向遍历的要求就比对双向遍历的要求要小(这也正是 <a href="http://www.sgi.com/tech/stl/ForwardIterator.html">ForwardIterator前向迭代器</a> 
和 <a href="http://www.sgi.com/tech/stl/BidirectionalIterator.html">BidirectionalIterator双向迭代器</a>
之间的差别)。语义的差别很容易就可以从带有前向迭代器的具体数据结构与双向迭代器的数据结构中看到。例如，单链接链表就是一种带有前向迭代器的数据结
构，而不是双向迭代器。此外，只需要前向迭代器即可实现的算法，与需要双向迭代器的算法也很不相同。因此，将相似的要求归纳成定义精确的概念是很重要的。
例如，迭代器的要求就被归纳为六个STL迭代器概念(trivial平凡, output输出, input输入, forward前向,
bidirectional双向, 以及random access随机访问)。<br />
</p>
<p><a href="./implementation.htm">Next: Implementation 实现</a><br />

  <a href="./concept_covering.htm">Prev: Concept Covering and
  Archetypes 概念的充分性和原型</a><br />
</p>

  
<hr />

  
<table>

    <tbody>
    <tr valign="top">

      <td nowrap="nowrap">Copyright &copy; 2000</td>


      <td><a href="http://www.boost.org/people/jeremy_siek.htm">Jeremy Siek</a>(<a href="mailto:jsiek@osl.iu.edu">jsiek@osl.iu.edu</a>) Andrew
      Lumsdaine(<a href="mailto:lums@osl.iu.edu">lums@osl.iu.edu</a>),
        2007 <a href="mailto:dave@boost-consulting.com">David Abrahams</a>.
    </td>
    </tr>

  
  </tbody>
</table>

</body>
</html>
