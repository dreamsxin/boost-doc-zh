<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta name="GENERATOR" content="Microsoft FrontPage 5.0"><title>Boost Libraries</title>

<link rel="stylesheet" href="../doc/html/boostbook.css" type="text/css"></head>
<body style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">
<table style="border-collapse: collapse;" border="0" bordercolor="#111111" cellpadding="5" cellspacing="0">
<tbody>
<tr>
<td width="277"> <a href="../index.html">
<img src="../boost.png" alt="boost.png (6897 bytes)" align="middle" border="0" height="86" width="277"></a></td>
<td align="center" width="337"> <font size="7">库</font> </td>
</tr>
</tbody>
</table>
<table style="border-collapse: collapse; width: 700px; height: 46px;" bgcolor="#d7eeff" border="0" bordercolor="#111111" cellpadding="5" cellspacing="0">
<tbody>
<tr>
<td height="16" width="663"><a href="../more/getting_started/index.html">入门</a>&nbsp;&nbsp;<font color="#ffffff">&nbsp; </font>&nbsp;&nbsp;&nbsp;&nbsp;
<a href="../tools/index.html">工具</a>&nbsp;<font color="#ffffff">&nbsp; </font>&nbsp;&nbsp;&nbsp;&nbsp;
<a href="http://www.boost.org">网站</a>&nbsp;&nbsp;<font color="#ffffff">&nbsp; </font>&nbsp;&nbsp;&nbsp;&nbsp;
<a href="http://www.boost.org/users/news/">新闻</a>&nbsp;&nbsp;<font color="#ffffff">&nbsp; </font>&nbsp;&nbsp;&nbsp;&nbsp;
<a href="http://www.boost.org/community/">社区</a>&nbsp;&nbsp;<font color="#ffffff">&nbsp; </font>&nbsp;&nbsp;&nbsp;&nbsp;
<a href="http://www.boost.org/users/faq.html">FAQ</a>&nbsp;&nbsp;<font color="#ffffff">&nbsp; </font>&nbsp;&nbsp;&nbsp;&nbsp;
<a href="../more/index.htm">更多信息</a></td>
</tr>
</tbody>
</table>
<dl>
<dt><a href="#Alphabetically">Libraries Listed
Alphabetically 按字母序的库列表</a></dt>
<dt><a href="#Category">Libraries Listed by
Category 分类的库列表</a></dt>
<dl>
<dt><a href="#String">String and text
processing 字符串与文本处理</a></dt>
<dt><a href="#Containers">Containers 容器</a></dt>
<dt><a href="#Iterators">Iterators 迭代器</a></dt>
<dt><a href="#Algorithms">Algorithms 算法</a></dt>
<dt><a href="#Function-objects">Function Objects
and higher-order programming 函数对象与高阶编程</a></dt>
<dt><a href="#Generic">Generic Programming 泛型编程</a></dt>
<dt><a href="#Metaprogramming">Template
Metaprogramming 模板元编程</a></dt>
<dt><a href="#Preprocessor">Preprocessor
Metaprogramming 预处理元编程</a></dt>
<dt><a href="#Concurrent">Concurrent
Programming 并发编程</a> </dt>
<dt><a href="#Math">Math and numerics 数学与数字</a></dt>
<dt><a href="#Correctness">Correctness and
testing 正确性与测试</a></dt>
<dt><a href="#Data">Data structures 数据结构</a></dt>
<dt><a href="#Image-processing">Image
processing 图像处理</a></dt>
<dt><a href="#IO">Input/Output 输入/输出</a></dt>
<dt><a href="#Inter-language">Inter-language
support 交叉语言支持</a></dt>
<dt><a href="#Memory">Memory 内存</a></dt>
<dt><a href="#Parsing">Parsing 语法分析</a></dt>
<dt><a href="#Programming">Programming
Interfaces 编程接口</a></dt>
<dt><a href="#Miscellaneous">Miscellaneous 杂项</a></dt>
<dt><a href="#workarounds">Broken compiler
workarounds 不合标准的编译器支持</a></dt>
</dl>
<dt><a href="#Removed">Libraries Retired from
Boost 从Boost退出的库</a></dt>
</dl>
<p>要找到如何下载、创建和安装以上库，请见 <a href="../more/getting_started.html">入
门</a> 页。</p>
<p>有些Boost库的文档以其它形式提供，包括 DocBook, XSL Formatting Objects, 和 Unix
man 帮助页。这些文档在&nbsp;<a href="https://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=159715">Sourceforge
上可以找到。</a></p>
<hr>
<h2>Libraries Listed <a name="Alphabetically">Alphabetically
按字母序的库列表</a></h2>
<ul>
<li><a href="accumulators/index.html">accumulators</a> - 进行累增计算的框架，以及一组统计学的累加器，来自 Eric 
Niebler. </li><li><a href="any/index.html">any</a> -
保存具有不同值类型的单个值的一种安全、泛型的容器，来自 Kevlin Henney.&nbsp; </li>
<li><a href="array/index.html">array</a> -
兼容STL的容器，是固定大小的数组的包装，来自 Nicolai Josuttis. </li>
<li><a href="asio/index.html">asio</a> -
可移植的网络和其它底层I/O，包括 sockets, 定时器, 主机名解释，socket 输入输出流，串行端口，文件描述符和 Windows HANDLEs，来自 Chris Kohlhoff.</li>
<li><a href="assign/index.html">assign</a> -
以从所未有如此容易的方法将常数或生成的数据填入容器，来自 Thorsten Ottosen. </li>
<li><a href="bimap/index.html">bimap</a> -
双向 maps, 来自 Matias Capeletto.</li>
<li><a href="bind/bind.html">bind</a> and <a href="bind/mem_fn.html">mem_fn</a> -
泛型绑定器，用于函数/对象/指针和成员函数，来自 Peter Dimov. </li>
<li><a href="utility/call_traits.htm">call_traits</a>
- 定义用于传递参数的类型，来自 John Maddock, Howard Hinnant 等人.</li>
<li><a href="circular_buffer/index.html">circular_buffer</a>
- STL 兼容的环或循环缓冲区容器，来自 Jan Gaspar.</li>
<li><a href="compatibility/index.html">compatibility</a>
- 协助非一致性的标准库，来自 Ralf Grosse-Kunstleve 和 Jens Maurer. </li>
<li><a href="utility/compressed_pair.htm">compressed_pair</a>
- 空成员优化，来自 John Maddock, Howard Hinnant 等人. </li>
<li><a href="concept_check/concept_check.htm">concept
check</a> - 泛型编程的工具，来自 Jeremy Siek. </li>
<li><a href="config/config.htm">config</a> -
协助 boost 库开发人员适应编译器的特性，不适用于库用户。 </li>
<li><a href="conversion/index.html">conversion</a>
- 多态和字面转换，来自 Dave Abrahams 和 Kevlin Henney. </li>
<li><a href="crc/index.html">crc</a> -
循环冗余码，来自 Daryle Walker. </li>
<li><a href="date_time/doc/index.html">date_time</a>
- 日期-时间库，来自 Jeff Garland. </li>
<li><a href="dynamic_bitset/dynamic_bitset.html">dynamic_bitset</a>
-&nbsp;一个在运行期可变大小的 <tt>std::bitset</tt> 版本，来自 Jeremy
Siek 和 Chuck Allison. </li>
<li><a href="utility/enable_if.html">enable_if</a>
- 函数模板重载的选择性内含物，来自 Jaakko Järvi, Jeremiah Willcock, 和 Andrew
Lumsdaine. </li>
<li><a href="exception/doc/boost-exception.html">exception</a> - 用于在异常对象中传送任意数据的库，可以在线程间传送异常(<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2179.html">N2179</a>)，来自 Emil Dotchevski. </li><li><a href="filesystem/doc/index.htm">filesystem</a>
- 可移植的路径、目录遍历和其它有用的文件系统操作，来自 Beman Dawes.</li><li><a href="flyweight/doc/index.html">flyweight</a> - 管理大量高度冗余的对象的一个设计模式，来自 Joaquín M López Muñoz. </li>
<li><a href="foreach/index.html">foreach</a>
- BOOST_FOREACH 宏可以很容易地遍历一个序列的所有元素，来自 Eric Niebler. </li>
<li><a href="format/index.html">format</a> -
类型安全的 '类printf' 的格式化操作，来自 Samuel Krempp. </li>
<li><a href="function/index.html">function</a>
- 延期调用和回调的函数对象包装，来自 Doug Gregor.</li>
<li><a href="function_types/index.html">function_types</a>
- 用于可调用、内建类型的类型 traits, 来自 Tobias Schwinger.</li>
<li><a href="functional/index.html">functional</a>
- 增强的函数对象适配器，来自 Mark Rodgers.</li><li><a href="functional/factory/index.html">functional/factory</a> - 用于动态和静态对象创建的函数对象模板，来自 Tobias Schwinger 
</li><li><a href="functional/forward/index.html">functional/forward</a> - 允许泛型函数对象接受变长参数的适配器，来自 Tobias 
Schwinger </li>
<li><a href="functional/hash/index.html">functional/hash</a>
- 一个 TR1 的散列函数对象，可以扩展为对用户定义类型进行散列，来自 Daniel James.</li>
<li><a href="fusion/index.html">fusion</a> -
与 tuples 一起使用的库，包括多种容器、算法等。来自 Joel de Guzman, Dan Marsden 和 Tobias
Schwinger.</li>
<li><a href="gil/doc/index.html">gil</a> -
通用图像库，来自 Lubomir Bourdev 和 Hailin Jin.</li>
<li><a href="graph/doc/table_of_contents.html">graph</a>
- 通用的图组件和算法，来自 Jeremy Siek 和一个Notre Dame大学的团队；目前由 Andrew Sutton 和 Jeremiah Willcock 维护。 </li>
<li><a href="integer/index.html">integer</a>
- 头文件，使得处理整型类型更为容易.</li>
<li><a href="interprocess/index.html">interprocess
</a>- 共享内存、内存映射文件、进程共享互斥体、条件变量、容器和分配器，来自 Ion
Gaztañaga.</li>
<li><a href="numeric/interval/doc/interval.htm">interval
</a>- 将常用的算术函数扩展至数学区间，来自 Guillaume Melquiond, Herv´
Brönnimann 和 Sylvain Pion.</li>
<li><a href="intrusive/index.html">intrusive </a>-
插入式的容器和算法，来自 Ion Gaztañaga.</li>
<li><a href="utility/in_place_factories.html">in_place_factory,
typed_in_place_factory</a> - 泛型的用参数列表就地构造所含对象，来自 Fernando
Cacciola. </li>
<li><a href="io/doc/ios_state.html">io state savers</a>
- 保存 I/O 状态，以防止数据混乱，来自 Daryle Walker. </li>
<li><a href="iostreams/doc/index.html">iostreams</a>
- 一个框架，用于定义流、流缓冲和i/o过滤器，来自 Jonathan Turkanis. </li>
<li><a href="iterator/doc/index.html">iterators</a>
- 迭代器构造框架，适配器、概念及其它，来自 Dave Abrahams, Jeremy Siek, 和 Thomas Witt. </li>
<li><a href="lambda/index.html">lambda</a> -
就地定义小型的无名函数对象，及其它，来自 Jaakko Järvi 和 Gary Powell.</li><li><a href="conversion/lexical_cast.htm">lexical_cast</a> - 通用的字面文本转换，如：将 <code>int</code> 表示为字符串，或反之，来自 Kevlin Henney.</li>
<li><a href="math/doc/index.html">math</a> -
数学领域的几个贡献，来自多个作者.</li>
<li><a href="math/doc/complex/html/index.html">math/complex
number algorithms</a>
- 这些复数算法是目前C++标准中的三角函数的反面，来自 John Maddock.</li>
<li><a href="math/doc/common_factor.html">math/common_factor</a>
- 最大公约数和最小公倍数，来自 Daryle Walker.</li>
<li><a href="math/doc/octonion/html/index.html">math/octonion</a>
- 八元数，来自 Hubert Holin.</li>
<li><a href="math/doc/quaternion/html/index.html">math/quaternion</a>
- 四元数，来自 Hubert Holin.</li>
<li><a href="math/doc/sf_and_dist/html/index.html">math/special_functions</a>
- 大量选定的特殊数学函数，来自 John Maddock, Paul Bristow, Hubert Holin 和 Xiaogang
Zhang.</li>
<li><a href="math/doc/sf_and_dist/html/index.html">math/statistical
distributions</a>
- 大量选定的单变量统计分布和函数，来自 John Maddock 和 Paul Bristow</li>
<li><a href="algorithm/minmax/index.html">minmax</a>
- 标准库的扩展，同时的 min/max 和 min/max 元素计算，来自 Hervé
Brönnimann.</li>
<li><a href="../doc/html/mpi.html">MPI</a> -
消息传送接口库，用于分布式内存的并行应用编程，来自 Douglas Gregor 和 Matthias Troyer.</li>
<li><a href="mpl/doc/index.html">mpl</a> -
模板元编程框架，编译期算法、序列和元函数类，来自 Aleksey Gurtovoy. </li>
<li><a href="multi_array/doc/index.html">multi_array</a>
- 多维容器和用于邻接数据数组的适配器，来自 Ron Garcia. </li>
<li><a href="multi_index/doc/index.html">multi_index</a>
- 具有多个STL兼容访问接口的容器，来自 Joaquín M López
Muñoz. </li>
<li><a href="numeric/conversion/doc/html/index.html">numeric/conversion</a>
- 优化的基于策略的数字转换，来自 Fernando Cacciola. </li>
<li><a href="utility/operators.htm">operators</a>
- 用模板来简化算术类和迭代器，来自 Dave Abrahams 和 Jeremy Siek. </li>
<li><a href="optional/doc/html/index.html">optional</a>
- 任意值的可区别联合包装，来自 Fernando Cacciola. </li>
<li><span class="library"><a href="parameter/doc/html/index.html">parameter</a></span>
- 用于编写以名字来接受参数的函数，来自 David Abrahams 和 Daniel Wallin. </li>
<li><a href="ptr_container/index.html">pointer
container</a> - 用于存放分配在堆上的多态对象的容器，以便于OO编程，来自 Thorsten Ottosen. </li>
<li><a href="pool/doc/index.html">pool</a> -
内存池管理，来自 Steve Cleary. </li>
<li><a href="preprocessor/doc/index.html">preprocessor</a>
- 预处理器元编程工具，包含循环和递归，来自 Vesa Karvonen 和 Paul Mensonides. </li>
<li><a href="../doc/html/program_options.html">program_options</a>
- 存取来自命令行、配置文件或其它来源的配置数据，来自 Vladimir Prus. </li>
<li><a href="property_map/doc/property_map.html">property
map</a> - 用于定义接口的概念，将键值对象映射到值对象，来自 Jeremy Siek.</li><li><a href="property_tree/index.html">property tree</a> - 一个树型数据结构，尤其适合于保存配置数据，来自 Marcin Kalicinski 和 
Sebastian Redl. </li><li><a href="proto/index.html">proto</a> - 表达式模板库以及用于领域专用嵌入式语言的编译器构造工具集，来自 Eric 
Niebler.</li>
<li><a href="python/doc/index.html">python</a>
- 将C++的类和函数反射到 <a href="http://www.python.org/">Python</a>,
来自 Dave Abrahams.</li>
<li><a href="random/index.html">random</a> -
一个完整的随机数生成系统，来自 Jens Maurer. </li>
<li><a href="range/index.html">range</a> -
用于基于区间的算法的概念和工具，以及基于区间的算法和区间适配器，可写出高效和易读的代码，来自 Thorsten Ottosen 和 Neil Groves. </li>
<li><a href="rational/index.html">rational</a>
- 有理数类，来自 Paul Moore. </li>
<li><a href="bind/ref.html">ref</a> -
一个工具库，用于将引用传递给泛型函数，来自 Jaako Järvi, Peter Dimov, Doug Gregor, 和
Dave Abrahams. </li>
<li><a href="regex/index.html">regex</a> -
正则表达式库，来自 John Maddock.</li><li><a href="utility/utility.htm#result_of">result_of</a> - 确定某个函数调用表达式的类型。 </li><li><a href="scope_exit/doc/html/index.html">scope_exit</a> - 在退出作用域时执行任意代码，来自 Alexander Nasonov. </li>
<li><a href="serialization/doc/index.html">serialization</a>
- 数据持久化和整编的串行化，来自 Robert Ramey </li>
<li><a href="signals/index.html">signals</a>
- 可管理的信号和插槽回调实现，来自 Doug Gregor. </li>
<li><a href="signals2/index.html">signals2</a> - 可管理的信号和插槽回调实现(线程安全的版本2)，来自 Frank Mori Hess. </li><li><a href="smart_ptr/index.html">smart_ptr</a>
- 六种智能指针类模板，来自 Greg Colvin, Beman Dawes, Peter Dimov, 和 Darin Adler. </li>
<li><a href="statechart/doc/index.html">statechart</a>
- 任意复杂的有限状态机，可以实现为非常易读和易维护的C++代码，来自 Andreas Huber. </li>
<li><a href="static_assert/static_assert.htm">static_assert</a>
- 静态断言(编译期断言), 来自 John Maddock. </li>
<li><a href="spirit/index.html">spirit</a> -
LL 分析器框架，以内联的C++方式直接从 EBNF 语法实现分析器，来自 Joel de Guzman 及其团队. </li>
<li><a href="algorithm/string/index.html">string_algo</a>
- 字符串算法库，来自 Pavol Droba.</li><li><a href="utility/swap.html">swap</a> - 增强的泛型 swap 函数，来自
Joseph Gauterin.</li>
<li><a href="system/doc/index.html">system</a>
- 操作系统支持，包括即将成为 C++0x 标准库组成部分的诊断支持，来自 Beman Dawes.</li>
<li><a href="test/doc/html/index.html">test</a> -
支持简单的程序测试、全单元测试，以及程序执行监控，来自 Gennadiy Rozental. </li>
<li><a href="thread/doc/index.html">thread</a>
- 可移植的C++多线程，来自 William Kempf. </li>
<li><a href="timer/index.html">timer</a> -
事件定时器，进度计时器，以及进度显示类，来自 Beman Dawes. </li>
<li><a href="tokenizer/index.html">tokenizer</a>
- 将一个字符串或其它字符序列分解为一系列记号，来自 John Bandela. </li>
<li><a href="tr1/index.html">TR1</a> -
对C++库扩展技术报告的一个实现，以其它 Boost 库为基础，来自 John Maddock. </li>
<li><a href="../doc/html/tribool.html">tribool</a>
- 三态布尔类型库，来自 Doug Gregor. </li>
<li><a href="tuple/doc/tuple_users_guide.html">tuple</a>
- 更易于定义返回多个数值的函数，及其它，来自 Jaakko Järvi. </li>
<li><a href="type_traits/index.html">type_traits</a>
- 用于类型的基本特性的模板，来自 John Maddock, Steve Cleary 等人. </li>
<li><a href="typeof/index.html">typeof</a> -
模拟 typeof 操作符，来自 Arkadiy Vertleyb 和 Peder Holt. </li>
<li><a href="numeric/ublas/doc/index.htm">uBLAS</a>
- 基本的线性代数，用于密集矩阵、压缩矩阵和稀疏矩阵，来自 Joerg Walter 和 Mathias Koch. </li>
<li><a href="units/index.html">units</a> - 零开销的量纲分析和单位/数量操作和转换，来自 Matthias Schabel 和 Steven 
Watanabe.&nbsp;</li><li><a href="../doc/html/unordered.html">unordered</a> - 无序关联式容器，来自 Daniel James. </li><li><a href="utility/utility.htm">utility</a>
- 类 <b>noncopyable</b> 和 <b>checked_delete()</b>,
<b>checked_array_delete()</b>, <b>next(),</b>&nbsp;
<b>prior()</b> 函数模板，再加上 <b>base-from-member idiom</b>,
来自 Dave Abrahams 和其它人. </li>
<li><a href="utility/value_init.htm">value_initialized</a>
- 统一语法的数值初始化包装，来自 Fernando Cacciola, 基于 David Abrahams 的原作. </li>
<li><a href="uuid/index.html">uuid</a> - 一个通用的唯一标识符，来自 Andy 
Tompkins. </li><li><a href="variant/index.html">variant</a>
- 安全、泛型、基于栈的可识别联合的容器，来自 Eric Friedman 和 Itay Maman. </li>
<li><a href="wave/index.html">wave</a> -
将委托型C99/C++预处理器的功能打包到一个符合标准的实现，有易于使用的迭代器接口，来自 Hartmut&nbsp;Kaiser. </li>
<li><a href="xpressive/index.html">xpressive</a>
- 可以写为字符串或表达式模板的正则表达式，并可以相互引用和递归，提供强有力的上下文无关语法，来自 Eric Niebler.</li>
</ul>
<hr>
<h2>Libraries Listed by <a name="Category">Category
分类的库列表</a></h2>
<h3><a name="String">String</a> and text
processing 字符串和文本处理</h3>
<ul>
<li><a href="conversion/lexical_cast.htm">conversion/lexical_cast</a>
- <tt>lexical_cast</tt> 类模板，来自 Kevlin Henney. </li>
<li><a href="format/index.html">format</a>
-&nbsp;类型安全的 '类printf' 的格式化操作，来自 Samuel Krempp. </li>
<li><a href="iostreams/doc/index.html">iostreams</a>
-&nbsp;一个框架，用于定义流、流缓冲和i/o过滤器，来自 Jonathan Turkanis. </li>
<li><a href="regex/index.html">regex</a>
-&nbsp;正则表达式库，来自 John Maddock </li>
<li><a href="spirit/index.html">spirit</a>
-&nbsp;LL 分析器框架，以内联的C++方式直接从 EBNF 语法实现分析器，来自 Joel de Guzman 及其团队. </li>
<li><a href="algorithm/string/index.html">string_algo</a>
-&nbsp;字符串算法库，来自 Pavol Droba </li>
<li><a href="tokenizer/index.html">tokenizer</a>
-&nbsp;将一个字符串或其它字符序列分解为一系列记号，来自 John Bandela </li>
<li><a href="wave/index.html">wave</a>
-&nbsp;将委托型C99/C++预处理器的功能打包到一个符合标准的实现，有易于使用的迭代器接口，来自
Hartmut&nbsp;Kaiser.</li><li><a href="xpressive/index.html">xpressive</a>
-&nbsp;可以写为字符串或表达式模板的正则表达式，并可以相互引用和递归，提供强有力的上下文无关语法，来自 Eric
Niebler. </li>
</ul>
<h3><a name="Containers">Containers 容器</a></h3>
<ul>
<li><a href="array/index.html">array</a>
-&nbsp;兼容STL的容器，是固定大小的数组的包装，来自 Nicolai Josuttis.</li>
<li><a href="bimap/index.html">bimap</a> -
双向 maps, 来自 Matias Capeletto.</li>
<li><a href="circular_buffer/index.html">circular_buffer</a>
- STL 兼容的环或循环缓冲区容器，来自 Jan Gaspar.</li>
<li><a href="dynamic_bitset/dynamic_bitset.html">dynamic_bitset</a>
-&nbsp;一个在运行期可变大小的 <tt>std::bitset</tt> 版本，来自 Jeremy
Siek 和 Chuck Allison.</li>
<li><a href="gil/doc/index.html">gil</a> -
通用图像库，来自 Lubomir Bourdev 和 Hailin Jin.</li>
<li><a href="graph/doc/table_of_contents.html">graph</a>
-&nbsp;通用的图组件和算法，来自 Jeremy Siek 和一个Notre Dame大学的团队；目前由 Andrew Sutton 和 Jeremiah Willcock 维护。</li>
<li><a href="intrusive/index.html">intrusive </a>-
插入式的容器和算法，来自 Ion Gaztañaga. </li>
<li><a href="multi_array/doc/index.html">multi_array</a>
-&nbsp;多维容器和用于邻接数据数组的适配器，来自 Ron Garcia. </li>
<li><a href="multi_index/doc/index.html">multi_index</a>
-&nbsp;具有多个STL兼容访问接口的容器，来自 Joaquín M López
Muñoz. </li>
<li><a href="ptr_container/index.html">pointer
container</a> -&nbsp;用于存放分配在堆上的多态对象的容器，以便于OO编程，来自 Thorsten
Ottosen. </li>
<li><a href="property_map/doc/property_map.html">property
map</a> -&nbsp;用于定义接口的概念，将键值对象映射到值对象，来自 Jeremy Siek.</li><li><a href="property_tree/index.html">property tree</a> -&nbsp;一个树型数据结构，尤其适合于保存配置数据，来自 Marcin Kalicinski 和 
Sebastian Redl. </li><li><a href="../doc/html/unordered.html">unordered</a> - 无序关联式容器，来自 Daniel James.</li>
<li><a href="variant/index.html">variant</a>
-&nbsp;安全、泛型、基于栈的可识别联合的容器，来自 Eric Friedman 和 Itay Maman.</li>
</ul>
<h3><a name="Iterators">Iterators 迭代器</a></h3>
<ul>
<li><a href="gil/doc/index.html">gil</a> -
通用图像库，来自 Lubomir Bourdev 和 Hailin Jin. </li>
<li><a href="graph/doc/table_of_contents.html">graph</a>
-&nbsp;通用的图组件和算法，来自 Jeremy Siek 和一个Notre Dame大学的团队；目前由 Andrew Sutton 和 Jeremiah Willcock 维护。 </li>
<li><a href="iterator/doc/index.html">iterators</a>
-&nbsp;迭代器构造框架，适配器、概念及其它，来自 Dave Abrahams, Jeremy Siek, 和 Thomas
Witt. </li>
<li><a href="utility/operators.htm">operators</a>
-&nbsp;用模板来简化算术类和迭代器，来自 Dave Abrahams 和 Jeremy Siek. </li>
<li><a href="tokenizer/index.html">tokenizer</a>
-&nbsp;将一个字符串或其它字符序列分解为一系列记号，来自 John Bandela.</li>
</ul>
<h3><a name="Algorithms">Algorithms 算法</a></h3>
<ul>
<li><a href="foreach/index.html">foreach</a>
- BOOST_FOREACH&nbsp;宏可以很容易地遍历一个序列的所有元素，来自 Eric Niebler.</li>
<li><a href="gil/doc/index.html">gil</a> -
通用图像库，来自 Lubomir Bourdev 和 Hailin Jin. </li>
<li><a href="graph/doc/table_of_contents.html">graph</a>
-&nbsp;通用的图组件和算法，来自 Jeremy Siek 和一个Notre Dame大学的团队；目前由 Andrew Sutton 和 Jeremiah Willcock 维护。 </li>
<li><a href="algorithm/minmax/index.html">minmax</a>
-&nbsp;标准库的扩展，同时的 min/max 和 min/max 元素计算，来自 Hervé
Brönnimann. </li>
<li><a href="algorithm/string/index.html">string_algo</a>
-&nbsp;字符串算法库，来自 Pavol Droba </li>
<li><a href="utility/utility.htm">utility</a>
-&nbsp;类&nbsp;<b>next(),</b>&nbsp; <b>prior()</b>
函数模板<span style="font-weight: bold;">等</span>,
来自 Dave Abrahams 和其它人. </li>
<li><a href="range/index.html">range</a>
-&nbsp;一个用于泛型算法的新架构，建基于新的迭代器概念之上，来自 Thorsten Ottosen.</li>
</ul>
<h3><a name="Function-objects">Function objects</a>
and higher-order programming 函数对象和高阶编程</h3>
<ul>
<li><a href="bind/bind.html">bind</a> and <a href="bind/mem_fn.html">mem_fn</a>
-&nbsp;泛型绑定器，用于函数/对象/指针和成员函数，来自 Peter Dimov. </li>
<li><a href="function/index.html">function</a>
-&nbsp;延期调用和回调的函数对象包装，来自 Doug Gregor. </li>
<li><a href="functional/index.html">functional</a>
- 增强的函数对象适配器，来自 Mark Rodgers.</li><li><a href="functional/factory/index.html">functional/factory</a> - 用于动态和静态对象创建的函数对象模板，来自 Tobias Schwinger 
</li><li><a href="functional/forward/index.html">functional/forward</a> - 允许泛型函数对象接受变长参数的适配器，来自 Tobias 
Schwinger</li>
<li><a href="functional/hash/index.html">functional/hash</a>
-&nbsp;一个 TR1 的散列函数对象，可以扩展为对用户定义类型进行散列，来自 Daniel James. </li>
<li><a href="lambda/index.html">lambda</a>
-&nbsp;就地定义小型的无名函数对象，及其它，来自 Jaakko Järvi 和 Gary Powell. </li>
<li><a href="bind/ref.html">ref</a>
-&nbsp;一个工具库，用于将引用传递给泛型函数，来自 Jaako Järvi, Peter Dimov,
Doug Gregor, 和 Dave Abrahams. </li>
<li><a href="signals/index.html">signals</a>
-&nbsp;可管理的信号和插槽回调实现，来自 Doug Gregor. </li>
<li><a href="signals2/index.html">signals2</a> - 可管理的信号和插槽回调实现(线程安全的版本2)，来自 Frank Mori Hess.</li><li><a href="utility/utility.htm#result_of">result_of</a>
- 判断一个函数调用表达式的类型. </li>
</ul>
<h3><a name="Generic">Generic</a> Programming
泛型编程</h3>
<ul>
<li><a href="utility/call_traits.htm">call_traits</a>
-&nbsp;定义用于传递参数的类型，来自 John Maddock, Howard Hinnant 等人. </li>
<li><a href="concept_check/concept_check.htm">concept
check</a> -&nbsp;泛型编程的工具，来自 Jeremy Siek. </li>
<li><a href="utility/enable_if.html">enable_if</a>
-&nbsp;函数模板重载的选择性内含物，来自 Jaakko Järvi, Jeremiah Willcock, 和
Andrew Lumsdaine.</li>
<li><a href="function_types/index.html">function_types</a>
- 用于可调用、内建类型的类型 traits, 来自 Tobias Schwinger.</li>
<li><a href="gil/doc/index.html">gil</a> -
通用图像库，来自 Lubomir Bourdev 和 Hailin Jin.</li>
<li><a href="utility/in_place_factories.html">in_place_factory,
typed_in_place_factory</a> -&nbsp;泛型的用参数列表就地构造所含对象，来自
Fernando Cacciola. </li>
<li><a href="utility/operators.htm">operators</a>
-&nbsp;用模板来简化算术类和迭代器，来自 Dave Abrahams 和 Jeremy Siek. </li>
<li><a href="property_map/doc/property_map.html">property
map</a> -&nbsp;用于定义接口的概念，将键值对象映射到值对象，来自 Jeremy Siek.</li><li><a href="proto/index.html">proto</a> - 表达式模板库以及用于领域专用嵌入式语言的编译器构造工具集，来自 Eric 
Niebler.</li>
<li><a href="static_assert/static_assert.htm">static_assert</a>
-&nbsp;静态断言(编译期断言), 来自 John Maddock. </li>
<li><a href="type_traits/index.html">type_traits</a>
-&nbsp;用于类型的基本特性的模板，来自 John Maddock, Steve Cleary 等人.</li>
</ul>
<h3>Template <a name="Metaprogramming">
Metaprogramming 模板元编程</a></h3>
<ul>
<li><a href="function_types/index.html">function_types</a>
- 用于可调用、内建类型的类型 traits, 来自 Tobias Schwinger.</li>
<li><a href="fusion/index.html">fusion</a> -
与 tuples 一起使用的库，包括多种容器、算法等。来自 Joel de Guzman, Dan Marsden 和 Tobias
Schwinger. </li>
<li><a href="mpl/doc/index.html">mpl</a>
-&nbsp;模板元编程框架，编译期算法、序列和元函数类，来自 Aleksey Gurtovoy. </li>
<li><a href="static_assert/static_assert.htm">static_assert</a>
-&nbsp;静态断言(编译期断言), 来自 John Maddock. </li>
<li><a href="type_traits/index.html">type_traits</a>
-&nbsp;用于类型的基本特性的模板，来自 John Maddock, Steve Cleary 等人.</li>
</ul>
<h3><a name="Preprocessor">Preprocessor</a>
Metaprogramming 预处理元编程</h3>
<ul>
<li><a href="preprocessor/doc/index.html">preprocessor</a>
-&nbsp;预处理器元编程工具，包含循环和递归，来自 Vesa Karvonen 和 Paul Mensonides. </li>
</ul>
<h3><a name="Concurrent">Concurrent</a>
Programming 并行编程</h3>
<ul>
<li><a href="asio/index.html">asio</a> -
可移植的网络和其它底层I/O，包括 sockets, 定时器, 主机名解释，socket 输入输出流，串行端口，文件描述符和 Windows HANDLEs，来自 Chris
Kohlhoff.&nbsp;</li>
<li><a href="interprocess/index.html">interprocess
</a>- 共享内存、内存映射文件、进程共享互斥体、条件变量、容器和分配器，来自 Ion
Gaztañaga.</li>
<li><a href="../doc/html/mpi.html">MPI</a> -
消息传送接口库，用于分布式内存的并行应用编程，来自 Douglas Gregor 和 Matthias Troyer.</li>
<li><a href="thread/doc/index.html">thread</a>
-&nbsp;可移植的C++多线程，来自 William Kempf. </li>
</ul>
<h3><a name="Math">Math</a> and numerics 数学与数字</h3>
<ul>
<li><a href="accumulators/index.html">accumulators</a> - 进行累增计算的框架，以及一组统计学的累加器，来自 Eric 
Niebler.</li><li><a href="integer/index.html">integer</a>
- 头文件，使得处理整型类型更为容易.</li>
<li><a href="numeric/interval/doc/interval.htm">interval
</a>- 将常用的算术函数扩展至数学区间，来自 Guillaume Melquiond, Herv´
Brönnimann 和 Sylvain Pion.</li>
<li><a href="math/doc/index.html">math</a> -
数学领域的几个贡献，来自多个作者. </li>
<li><a href="math/doc/complex/html/index.html">math/complex
number algorithms</a> - 这些复数算法是目前C++标准中的三角函数的反面，来自 John Maddock. </li>
<li><a href="math/doc/common_factor.html">math/common_factor</a>
- 最大公约数和最小公倍数，来自 Daryle Walker. </li>
<li><a href="math/doc/octonion/html/index.html">math/octonion</a>
- 八元数，来自 Hubert Holin. </li>
<li><a href="math/doc/quaternion/html/index.html">math/quaternion</a>
- 四元数，来自 Hubert Holin. </li>
<li><a href="math/doc/sf_and_dist/html/index.html">math/special_functions</a>
- 大量选定的特殊数学函数，来自 John Maddock, Paul Bristow, Hubert Holin 和 Xiaogang
Zhang. </li>
<li><a href="math/doc/sf_and_dist/html/index.html">math/statistical
distributions</a> - 大量选定的单变量统计分布和函数，来自 John Maddock 和 Paul
Bristow.</li>
<li><a href="multi_array/doc/index.html">multi_array</a>
- 多维容器和用于邻接数据数组的适配器，来自 Ron Garcia.</li>
<li><a href="numeric/conversion/doc/html/index.html">numeric/conversion</a>
-&nbsp;优化的基于策略的数字转换，来自 Fernando Cacciola.</li>
<li><a href="utility/operators.htm">operators</a>
-&nbsp;用模板来简化算术类和迭代器，来自 Dave Abrahams 和 Jeremy Siek. </li>
<li><a href="random/index.html">random</a>
-&nbsp;一个完整的随机数生成系统，来自 Jens Maurer. </li>
<li><a href="rational/index.html">rational</a>
-&nbsp;有理数类，来自 Paul Moore. </li>
<li><a href="numeric/ublas/doc/index.htm">uBLAS</a>
-&nbsp;基本的线性代数，用于密集矩阵、压缩矩阵和稀疏矩阵，来自 Joerg Walter 和 Mathias Koch.</li>
</ul>
<h3><a name="Correctness">Correctness</a> and
testing 正确性和测试</h3>
<ul>
<li><a href="concept_check/concept_check.htm">concept
check</a> -&nbsp;泛型编程的工具，来自 Jeremy Siek. </li>
<li><a href="static_assert/static_assert.htm">static_assert</a>
-&nbsp;静态断言(编译期断言), 来自 John Maddock. </li>
<li><a href="test/doc/html/index.html">test</a>
-&nbsp;支持简单的程序测试、全单元测试，以及程序执行监控，来自 Gennadiy Rozental. </li>
</ul>
<h3><a name="Data">Data</a> structures 数据结构</h3>
<ul>
<li><a href="any/index.html">any</a>
-&nbsp;保存具有不同值类型的单个值的一种安全、泛型的容器，来自 Kevlin Henney.</li>
<li><a href="bimap/index.html">bimap</a> -
双向 maps, 来自 Matias Capeletto. </li>
<li><a href="utility/compressed_pair.htm">compressed_pair</a>
-&nbsp;空成员优化，来自 John Maddock, Howard Hinnant 等人.</li>
<li><a href="fusion/index.html">fusion</a> -
与 tuples 一起使用的库，包括多种容器、算法等。来自 Joel de Guzman, Dan Marsden 和 Tobias
Schwinger.</li>
<li><a href="multi_index/doc/index.html">multi_index</a>
- 具有多个STL兼容访问接口的容器，来自 Joaquín M López
Muñoz. </li>
<li><a href="ptr_container/index.html">pointer
container</a> -&nbsp;用于存放分配在堆上的多态对象的容器，以便于OO编程，来自 Thorsten
Ottosen.</li><li><a href="property_tree/index.html">property tree</a> -&nbsp;一个树型数据结构，尤其适合于保存配置数据，来自 Marcin Kalicinski 和 
Sebastian Redl. </li>
<li><a href="tuple/doc/tuple_users_guide.html">tuple</a>
- 更易于定义返回多个数值的函数，及其它，来自 Jaakko Järvi. </li>
<li><a href="uuid/index.html">uuid</a> - 一个通用的唯一标识符，来自 Andy 
Tompkins.</li><li><a href="variant/index.html">variant</a>
-&nbsp;安全、泛型、基于栈的可识别联合的容器，来自 Eric Friedman 和 Itay Maman. </li>
</ul>
<h3><a name="Image-processing">Image processing 图像处理</a></h3>
<ul>
<li><a href="gil/doc/index.html">gil</a> -
通用图像库，来自 Lubomir Bourdev 和 Hailin Jin.&nbsp;</li>
</ul>
<h3><a name="IO">Input/Output 输入/输出</a></h3>
<ul>
<li><a href="asio/index.html">asio</a> -
可移植的网络和其它底层I/O，包括 sockets, 定时器, 主机名解释，socket 输入输出流，串行端口，文件描述符和 Windows HANDLEs，来自 Chris Kohlhoff.</li>
<li><a href="assign/index.html">assign</a>
-&nbsp;以从所未有如此容易的方法将常数或生成的数据填入容器，来自 Thorsten Ottosen.</li>
<li><a href="format/index.html">format</a> -
类型安全的 '类printf' 的格式化操作，来自 Samuel Krempp. </li>
<li><a href="io/doc/ios_state.html">io state savers</a>
-&nbsp;保存 I/O 状态，以防止数据混乱，来自 Daryle Walker. </li>
<li><a href="iostreams/doc/index.html">iostreams</a>
-&nbsp;一个框架，用于定义流、流缓冲和i/o过滤器，来自 Jonathan Turkanis. </li>
<li><a href="../doc/html/program_options.html">program_options</a>
-&nbsp;存取来自命令行、配置文件或其它来源的配置数据，来自 Vladimir Prus. </li>
<li><a href="serialization/doc/index.html">serialization</a>
-&nbsp;数据持久化和整编的串行化，来自 Robert Ramey.</li>
</ul>
<h3><a name="Inter-language">Inter-language</a>
support 交叉语言支持</h3>
<ul>
<li><a href="python/doc/index.html">python</a>
-&nbsp;将C++的类和函数反射到 <a href="http://www.python.org/">Python</a>,
来自 Dave Abrahams. </li>
</ul>
<h3><a name="Memory">Memory 内存</a></h3>
<ul>
<li><a href="pool/doc/index.html">pool</a>
-&nbsp;内存池管理，来自 Steve Cleary. </li>
<li><a href="smart_ptr/index.html">smart_ptr</a>
- 六种智能指针类模板，来自 Greg Colvin, Beman Dawes, Peter Dimov, 和 Darin
Adler. </li>
<li><a href="utility/utility.htm">utility</a>
-&nbsp;类 <b>noncopyable</b> 和 <b>checked_delete()</b>,
<b>checked_array_delete()</b>, <b>next(),</b>&nbsp;
<b>prior()</b> 函数模板，再加上 <b>base-from-member idiom</b>,
来自 Dave Abrahams 和其它人.</li>
</ul>
<h3><a name="Parsing">Parsing 语法分析</a></h3>
<ul>
<li><a href="spirit/index.html">spirit</a> -
LL 分析器框架，以内联的C++方式直接从 EBNF 语法实现分析器，来自 Joel de Guzman 及其团队.&nbsp;</li>
</ul>
<h3><a name="Programming">Programming Interfaces 编程接口</a></h3>
<ul>
<li><a href="function/index.html">function</a>
-&nbsp;延期调用和回调的函数对象包装，来自 Doug Gregor. </li>
<li><span class="library"><a href="parameter/doc/html/index.html">parameter</a></span>
-&nbsp;用于编写以名字来接受参数的函数，来自 David Abrahams 和 Daniel Wallin. </li>
</ul>
<h3><a name="Miscellaneous">Miscellaneous 杂项</a></h3>
<ul>
<li><a href="utility/base_from_member.html">base-from-member</a>
- 用成员来初始基类的惯用法，来自 Daryle Walker. </li>
<li><a href="utility/compressed_pair.htm">compressed_pair</a>
-&nbsp;空成员优化，来自 John Maddock, Howard Hinnant 等人. </li>
<li><a href="conversion/index.html">conversion</a>
-&nbsp;多态和字面转换，来自 Dave Abrahams 和 Kevlin Henney.</li>
<li><a href="crc/index.html">crc</a>
-&nbsp;循环冗余码，来自 Daryle Walker. </li>
<li><a href="date_time/doc/index.html">date_time</a>
-&nbsp;日期-时间库，来自 Jeff Garland.</li><li><a href="exception/doc/boost-exception.html">exception</a> - 用于在异常对象中传送任意数据的库，可以在线程间传送异常(<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2179.html">N2179</a>)，来自 Emil Dotchevski. </li>
<li><a href="filesystem/doc/index.htm">filesystem</a>
-&nbsp;可移植的路径、目录遍历和其它有用的文件系统操作，来自 Beman Dawes.</li><li><a href="flyweight/doc/index.html">flyweight</a> - 管理大量高度冗余的对象的一个设计模式，来自 Joaquín M López Muñoz.</li><li><a href="conversion/lexical_cast.htm">lexical_cast</a> -&nbsp;&nbsp;通用的字面文本转换，如：将 <code>int</code> 表示为字符串，或反之，来自 Kevlin Henney. </li>
<li><a href="numeric/conversion/index.html">numeric/conversion</a>
-&nbsp;优化的基于策略的数字转换，来自 Fernando Cacciola. </li>
<li><a href="optional/doc/html/index.html">optional</a>
-&nbsp;任意值的可区别联合包装，来自 Fernando Cacciola. </li>
<li><a href="../doc/html/program_options.html">program_options</a>
-&nbsp;存取来自命令行、配置文件或其它来源的配置数据，来自 Vladimir Prus.</li><li><a href="scope_exit/doc/html/index.html">scope_exit</a> - 在退出作用域时执行任意代码，来自 Alexander Nasonov.</li>
<li><a href="statechart/doc/index.html">statechart</a>
-&nbsp;任意复杂的有限状态机，可以实现为非常易读和易维护的C++代码，来自 Andreas Huber.</li><li><a href="utility/swap.html">swap</a> - 增强的泛型 swap 函数，来自
Joseph Gauterin. </li>
<li><a href="system/doc/index.html">system</a>
- 操作系统支持，包括即将成为 C++0x 标准库组成部分的诊断支持，来自 Beman Dawes. </li>
<li><a href="timer/index.html">timer</a>
-&nbsp;事件定时器，进度计时器，以及进度显示类，来自 Beman Dawes. </li>
<li><a href="tr1/index.html">TR1</a>
-&nbsp;对C++库扩展技术报告的一个实现，以其它 Boost 库为基础，来自 John Maddock. </li>
<li><a href="../doc/html/tribool.html">tribool</a>
-&nbsp;三态布尔类型库，来自 Doug Gregor. </li>
<li><a href="typeof/index.html">typeof</a>
-&nbsp;模拟 typeof 操作符，来自 Arkadiy Vertleyb 和 Peder Holt.</li><li><a href="units/index.html">units</a> - 零开销的量纲分析和单位/数量操作和转换，来自 Matthias Schabel 和 Steven 
Watanabe.&nbsp; </li>
<li><a href="utility/utility.htm">utility</a>
-&nbsp;类 <b>noncopyable</b> 和 <b>checked_delete()</b>,
<b>checked_array_delete()</b>, <b>next(),</b>&nbsp;
<b>prior()</b> 函数模板，再加上 <b>base-from-member idiom</b>,
来自 Dave Abrahams 和其它人. </li>
<li><a href="utility/value_init.htm">value_initialized</a>
-&nbsp;统一语法的数值初始化包装，来自 Fernando Cacciola, 基于 David Abrahams 的原作. </li>
</ul>
<h3>Broken compiler <a name="workarounds">workarounds
不合标准的编译器支持</a></h3>
<ul>
<li><a href="compatibility/index.html">compatibility</a>
-&nbsp;协助非一致性的标准库，来自 Ralf Grosse-Kunstleve 和 Jens Maurer. </li>
<li><a href="config/config.htm">config</a>
-&nbsp;协助 boost 库开发人员适应编译器的特性，不适用于库用户。 </li>
</ul>
<p>[以上分类建议来自于 Aleksey Gurtovoy 和 Beman Dawes]</p>
<hr>
<h2>Libraries <a name="Removed">Retired</a>
from Boost 从Boost退出的库</h2>
<ul>
<li>compose - 用于STL的函数组合适配器，来自 Nicolai Josuttis. 从 Boost
version 1.32 起删除。请使用 <a href="bind/bind.html">Bind</a>
或 <a href="lambda/index.html">Lambda</a> 来替代。 </li>
</ul>
<hr>
<p>Revised <!--webbot bot="Timestamp" s-type="EDITED"
s-format="%d %b %Y" startspan -->03 Nov 2009</p><p>© Copyright Beman Dawes 2000-2004</p>
<p>Distributed under the Boost Software License, Version 1.0.
(See file <a href="../LICENSE_1_0.txt">LICENSE_1_0.txt</a>
or <a href="http://www.boost.org/LICENSE_1_0.txt">www.boost.org/LICENSE_1_0.txt</a>)</p>
<p>本译文更新于 2010年2月7日，由 alai04, fatalerror99, felurkinda, farproc,
hzjboost, blackjazz07, xuwaters, jinq0123,
totti, jANA_cOVA, pterosaur, xiaq,&nbsp;zhaohongchao, leo, sidle, luckycat06, lixin, evy.wang, 元维，水的影子 等人翻译，各人贡献了以下译文：</p>
<p>alai04：<a href="accumulators/index.html">accumulators</a>, <a href="any/index.html">any</a>, <a href="assign/index.html">assign</a>, <a href="bimap/index.html">bimap</a>,&nbsp;<a href="utility/call_traits.htm">call_traits</a>, <a href="circular_buffer/index.html">circular_buffer</a>,
<a href="compatibility/index.html">compatibility</a>,
<a href="concept_check/concept_check.htm">concept check</a>,
<a href="config/config.htm">config</a>, <a href="conversion/index.html">conversion</a>, <a href="date_time/doc/index.html">date_time</a>, <a href="filesystem/doc/index.htm">filesystem</a>, <a href="foreach/index.html">foreach</a>,&nbsp;<a href="function_types/index.html">function_types</a>, <a href="functional/index.html">functional</a>, <a href="integer/index.html">integer</a>, <a href="intrusive/index.html">intrusive</a>, <a href="io/doc/ios_state.html">io state savers</a>, <a href="iostreams/doc/index.html">iostreams</a>, <a href="iterator/doc/index.html">iterators</a>, <a href="algorithm/minmax/index.html">minmax</a>, <a href="mpl/doc/index.html">mpl</a>, <a href="multi_array/doc/index.html">multi_array</a>, <a href="multi_index/doc/index.html">multi_index</a>, <a href="numeric/conversion/doc/html/index.html">numeric/conversion</a>, <a href="utility/operators.htm">operators</a>, <a href="optional/doc/html/index.html">optional</a>, <a href="ptr_container/index.html">pointer
container</a>, <a href="pool/doc/index.html">pool</a>, <a href="preprocessor/doc/index.html">preprocessor</a>, <a href="../doc/html/program_options.html">program_options</a>,
<a href="property_map/property_map.html">property map</a>, <a href="proto/index.html">proto</a>,
<a href="range/index.html">range</a>, <a href="rational/index.html">rational</a>, <a href="scope_exit/doc/html/index.html">scope_exit</a>, <a href="serialization/doc/index.html">serialization</a>,
<a href="statechart/doc/index.html">statechart</a>, <a href="utility/swap.html">swap</a>, <a href="system/doc/index.html">system</a>, <a href="tokenizer/index.html">tokenizer</a>, <a href="tr1/index.html">TR1</a>, <a href="../doc/html/tribool.html">tribool</a>, <a href="../doc/html/unordered.html">unordered</a>, <a href="utility/utility.htm">utility</a>, <a href="utility/value_init.htm">value_initialized</a>, <a href="variant/index.html">variant</a>,&nbsp;<a href="wave/index.html">wave</a>,&nbsp;<a href="xpressive/index.html">xpressive</a> 以及 <a href="../doc/html/tools.html">Boost Tools</a>&nbsp; </p>
<p>fatalerror99：<a href="array/index.html">array</a>,
<a href="bind/bind.html">bind</a> and <a href="bind/mem_fn.html">mem_fn</a>, <a href="dynamic_bitset/dynamic_bitset.html">dynamic_bitset</a>,
<a href="function/index.html">function</a>, <a href="functional/hash/index.html">functional/hash</a>, <a href="utility/in_place_factories.html">in_place_factory, 
typed_in_place_factory</a>, <a href="lambda/index.html">lambda</a>,
<a href="bind/ref.html">ref</a>, <a href="smart_ptr/index.html">smart_ptr</a>, <a href="static_assert/static_assert.htm">static_assert</a>, <a href="algorithm/string/index.html">string_algo</a>,
<a href="type_traits/index.html">type_traits</a>, <a href="typeof/index.html">typeof</a>&nbsp;</p>
<p>farproc：<a href="utility/compressed_pair.htm">compressed_pair</a>,
<a href="crc/index.html">crc</a>,&nbsp;<a href="utility/enable_if.html">enable_if</a> &nbsp;</p>
<p>blackjazz07：<a href="conversion/lexical_cast.htm">conversion/lexical_cast</a>,&nbsp;<a href="format/index.html">format</a>&nbsp;</p>
<p>hzjboost：<a href="tuple/doc/tuple_users_guide.html">tuple</a>&nbsp;</p>
<p>xuwaters：<span class="library"><a href="parameter/doc/html/index.html">parameter</a></span>,
<a href="timer/index.html">timer</a> &nbsp;</p>
<p>jinq0123：<a href="python/doc/index.html">python</a>, <a href="signals/index.html">signals</a>, <a href="signals2/index.html">signals2</a>&nbsp;</p>
<p>xiaq：<a href="random/index.html">random</a>&nbsp;</p><p>zhaohongchao: <a href="exception/doc/boost-exception.html">exception</a>, <a href="gil/doc/index.html">gil</a>&nbsp;</p><p> luckycat06：<a href="numeric/interval/doc/interval.htm">interval</a>, <a href="math/doc/index.html">math</a>, <a href="math/doc/complex/html/index.html">math/complex
number algorithms</a>, <a href="math/doc/common_factor.html">math/common_factor</a>, <a href="math/doc/octonion/html/index.html">math/octonion</a>, <a href="math/doc/quaternion/html/index.html">math/quaternion</a>, <a href="math/doc/sf_and_dist/html/index.html">math/special_functions</a>, <a href="math/doc/sf_and_dist/html/index.html">math/statistical
distributions</a>, <a href="numeric/ublas/doc/index.htm">uBLAS</a>&nbsp;</p><p>lixin:&nbsp;<a href="regex/index.html">regex</a>, <a href="test/doc/html/index.html">test</a>, <a href="units/index.html">units</a> &nbsp;</p><p>felurkinda: <a href="graph/doc/table_of_contents.html">graph</a>(部分)</p><p>hzjboost:&nbsp;<a href="spirit/index.html">spirit</a>(部分)</p><p>evy.wang：<a href="thread/doc/index.html">thread</a></p><p>水的影子：<a href="flyweight/doc/index.html">flyweight</a>&nbsp;<a href="thread/doc/index.html"></a> </p>
</body></html>