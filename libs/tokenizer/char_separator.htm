<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>



  
  
  
  <meta http-equiv="Content-Language" content="en-us">



  
  
  
  <meta http-equiv="Content-Type" content="text/html; charset=us-ascii">



  
  
  
  <meta name="GENERATOR" content="Microsoft FrontPage 6.0">



  
  
  
  <meta name="ProgId" content="FrontPage.Editor.Document">




  
  
  
  <title>Boost Char Separator</title>
</head>


<body alink="#ff0000" bgcolor="#ffffff" link="#0000ee" text="#000000" vlink="#551a8b">



  
<p><img src="../../boost.png" alt="C++ Boost" height="86" width="277"><br>


</p>




  
<h1>char_separator&lt;Char, Traits&gt;</h1>




  
<p><tt>char_separator</tt> &#31867;&#22522;&#20110;&#23383;&#31526;&#20998;&#38548;&#31526;&#26469;&#20998;&#35299;&#19968;&#20010;&#23383;&#31526;&#24207;&#21015;&#65292;&#23601;&#35937;
  <tt>strtok()</tt> &#25152;&#20570;&#30340;&#37027;&#26679;(&#20294;&#27809;&#26377;&#19981;&#21487;&#37325;&#20837;&#20197;&#21450;&#36755;&#20837;&#24207;&#21015;&#26512;&#26500;&#30340;&#38382;&#39064;)&#12290;</p>




  
<p><tt>char_separator</tt> &#31867;&#19982;
  <a href="token_iterator.htm"><tt>token_iterator</tt></a> &#25110; <a href="tokenizer.htm"><tt>tokenizer</tt></a> &#19968;&#36215;&#20351;&#29992;&#20197;&#25191;&#34892;&#21333;&#35789;&#20998;&#35299;&#12290;</p>




  
<h2>&#23450;&#20041;</h2>




  
<p><tt>strtok()</tt> &#20989;&#25968;&#22312;&#21333;&#35789;&#36755;&#20986;&#24207;&#21015;&#20013;&#19981;&#21253;&#21547;&#29992;&#20110;&#21305;&#37197;&#30340;&#23383;&#31526;&#20998;&#38548;&#31526;&#12290;&#20294;&#26159;&#65292;&#22312;&#36755;&#20986;&#24207;&#21015;&#20013;&#26174;&#31034;&#36825;&#20123;&#20998;&#38548;&#31526;&#26377;&#26102;&#20505;&#26159;&#26377;&#29992;&#30340;&#65292;&#25152;&#20197; <tt>char_separator</tt> &#23558;&#36825;&#20010;&#21151;&#33021;&#20316;&#20026;&#19968;&#20010;&#36873;&#39033;&#25552;&#20379;&#12290;&#25105;&#20204;&#23558;&#22312;&#36755;&#20986;&#21333;&#35789;&#20013;&#21253;&#21547;&#20998;&#38548;&#31526;&#31216;&#20026; <b><i>&#20445;&#30041;&#20998;&#38548;&#31526;</i></b>
 &#65292;&#32780;&#23558;&#22312;&#36755;&#20986;&#21333;&#35789;&#20013;&#19981;&#21253;&#21547;&#20998;&#38548;&#31526;&#31216;&#20026; <b><i>&#34987;&#24323;&#20998;&#38548;&#31526;</i></b>&#12290;</p>




  
<p>&#24403;&#22312;&#36755;&#20837;&#24207;&#21015;&#20013;&#20986;&#29616;&#20004;&#20010;&#36830;&#32493;&#30340;&#20998;&#38548;&#31526;&#26102;&#65292;&#26377;&#19968;&#20010;&#38382;&#39064;&#23601;&#26159;&#26159;&#21542;&#35201;&#36755;&#20986;&#19968;&#20010; <b><i>&#31354;&#30333;&#21333;&#35789;</i></b> &#25110;&#26159;&#30452;&#25509;&#36339;&#36807;&#12290;<tt>strtok()</tt> &#30340;&#34892;&#20026;&#26159;&#36339;&#36807;&#12290;&#32780;
  <tt>char_separator</tt> &#31867;&#21017;&#25552;&#20379;&#20102;&#20004;&#20010;&#36873;&#39033;&#12290;</p>




  
<h2>&#20363;&#23376;</h2>




  
<p>&#31532;&#19968;&#20010;&#20363;&#23376;&#31034;&#33539;&#22914;&#20309;&#23558; <tt>char_separator</tt> &#20316;&#20026; <tt>strtok()</tt> &#20989;&#25968;&#30340;&#26367;&#20195;&#29289;&#26469;&#20351;&#29992;&#12290;&#25105;&#20204;&#25351;&#23450;&#20102;&#19977;&#20010;&#23383;&#31526;&#20998;&#38548;&#31526;&#65292;&#23427;&#20204;&#19981;&#20986;&#29616;&#22312;&#36755;&#20986;&#21333;&#35789;&#20013;&#12290;&#25105;&#20204;&#27809;&#26377;&#25351;&#23450;&#20219;&#20309;&#20445;&#30041;&#20998;&#38548;&#31526;&#65292;&#32780;&#19988;&#32570;&#30465;&#24773;&#20917;&#26159;&#24573;&#30053;&#31354;&#30333;&#21333;&#35789;&#12290;</p>




  
<blockquote>
    
  
  
  <pre>// char_sep_example_1.cpp<br>#include &lt;iostream&gt;<br>#include &lt;boost/tokenizer.hpp&gt;<br>#include &lt;string&gt;<br><br>int main()<br>{<br>  std::string str = ";;Hello|world||-foo--bar;yow;baz|";<br>  typedef boost::tokenizer&lt;boost::char_separator&lt;char&gt; &gt; <br>    tokenizer;<br>  boost::char_separator&lt;char&gt; sep("-;|");<br>  tokenizer tokens(str, sep);<br>  for (tokenizer::iterator tok_iter = tokens.begin();<br>       tok_iter != tokens.end(); ++tok_iter)<br>    std::cout &lt;&lt; "&lt;" &lt;&lt; *tok_iter &lt;&lt; "&gt; ";<br>  std::cout &lt;&lt; "\n";<br>  return EXIT_SUCCESS;<br>}<br></pre>



  </blockquote>

&#36755;&#20986;&#32467;&#26524;&#26159;&#65306;

  
<blockquote>
    
  
  
  <pre>&lt;Hello&gt; &lt;world&gt; &lt;foo&gt; &lt;bar&gt; &lt;yow&gt; &lt;baz&gt; <br></pre>



  </blockquote>




  
<p>&#19979;&#19968;&#20010;&#20363;&#23376;&#31034;&#33539;&#20102;&#29992;&#20004;&#20010;&#34987;&#24323;&#20998;&#38548;&#31526; '-' &#21644;
  ';' &#20197;&#21450;&#19968;&#20010;&#20445;&#30041;&#20998;&#38548;&#31526; '|' &#26469;&#36827;&#34892;&#21333;&#35789;&#20998;&#35299;&#12290;&#25105;&#20204;&#36824;&#25351;&#23450;&#20102;&#24403;&#20986;&#29616;&#20004;&#20010;&#36830;&#32493;&#30340;&#20998;&#38548;&#31526;&#26102;&#65292;&#35201;&#22312;&#36755;&#20986;&#20013;&#21253;&#21547;&#31354;&#30333;&#21333;&#35789;&#12290;</p>




  
<blockquote>
    
  
  
  <pre>// char_sep_example_2.cpp<br>#include &lt;iostream&gt;<br>#include &lt;boost/tokenizer.hpp&gt;<br>#include &lt;string&gt;<br><br>int main()<br>{<br>    std::string str = ";;Hello|world||-foo--bar;yow;baz|";<br>    typedef boost::tokenizer&lt;boost::char_separator&lt;char&gt; &gt; <br>        tokenizer;<br>    boost::char_separator&lt;char&gt; sep("-;", "|", boost::keep_empty_tokens);<br>    tokenizer tokens(str, sep);<br>    for (tokenizer::iterator tok_iter = tokens.begin();<br>         tok_iter != tokens.end(); ++tok_iter)<br>      std::cout &lt;&lt; "&lt;" &lt;&lt; *tok_iter &lt;&lt; "&gt; ";<br>    std::cout &lt;&lt; "\n";<br>    return EXIT_SUCCESS;<br>}<br></pre>



  </blockquote>

&#36755;&#20986;&#32467;&#26524;&#26159;&#65306;

  
<blockquote>
    
  
  
  <pre>&lt;&gt; &lt;&gt; &lt;Hello&gt; &lt;|&gt; &lt;world&gt; &lt;|&gt; &lt;&gt; &lt;|&gt; &lt;&gt; &lt;foo&gt; &lt;&gt; &lt;bar&gt; &lt;yow&gt; &lt;baz&gt; &lt;|&gt; &lt;&gt;<br></pre>



  </blockquote>




  
<p>&#26368;&#21518;&#19968;&#20010;&#20363;&#23376;&#31034;&#33539;&#20102;&#20351;&#29992;
  <tt>char_separator</tt> &#30340;&#32570;&#30465;&#26500;&#36896;&#20989;&#25968;&#65292;&#25353;&#26631;&#28857;&#21644;&#31354;&#26684;&#26469;&#36827;&#34892;&#21333;&#35789;&#20998;&#35299;&#12290;</p>




  
<blockquote>
    
  
  
  <pre>// char_sep_example_3.cpp<br>#include &lt;iostream&gt;<br>#include &lt;boost/tokenizer.hpp&gt;<br>#include &lt;string&gt;<br><br>int main()<br>{<br>   std::string str = "This is,  a test";<br>   typedef boost::tokenizer&lt;boost::char_separator&lt;char&gt; &gt; Tok;<br>   boost::char_separator&lt;char&gt; sep; // &#32570;&#30465;&#26500;&#36896;<br>   Tok tok(str, sep);<br>   for(Tok::iterator tok_iter = tok.begin(); tok_iter != tok.end(); ++tok_iter)<br>     std::cout &lt;&lt; "&lt;" &lt;&lt; *tok_iter &lt;&lt; "&gt; ";<br>   std::cout &lt;&lt; "\n";<br>   return EXIT_SUCCESS;<br>}<br></pre>



  </blockquote>

&#36755;&#20986;&#32467;&#26524;&#26159;&#65306;

  
<blockquote>
    
  
  
  <pre>&lt;This&gt; &lt;is&gt; &lt;,&gt; &lt;a&gt; &lt;test&gt; <br></pre>



  </blockquote>




  
<h2>&#27169;&#26495;&#21442;&#25968;</h2>




  
<table summary="" border="1">



    <tbody>


    <tr>



      <th>&#21442;&#25968;</th>




      <th>&#25551;&#36848;</th>




      <th>&#32570;&#30465;&#20540;</th>



    </tr>




    <tr>



      <td><tt>Char</tt></td>




      <td>&#21333;&#35789;&#20013;&#30340;&#20803;&#32032;&#31867;&#22411;&#65292;&#36890;&#24120;&#20026; <tt>char</tt>.</td>




      <td>&nbsp;</td>



    </tr>




    <tr>



      <td><tt>Traits</tt></td>




      <td>&#23383;&#31526;&#31867;&#22411;&#30340; <tt>char_traits</tt>&nbsp;.</td>




      <td><tt>char_traits&lt;char&gt;</tt></td>



    </tr>



  
  
  
  </tbody>
</table>




  
<h2>Model of</h2>


<a href="tokenizerfunction.htm">Tokenizer Function</a>

  
<h2>&#25104;&#21592;</h2>



  
<hr>
  
<pre>explicit char_separator(const Char* dropped_delims,<br>                        const Char* kept_delims = "",<br>                        empty_token_policy empty_tokens = drop_empty_tokens)<br></pre>




  
<p>&#35813;&#20989;&#25968;&#21019;&#24314;&#19968;&#20010; <tt>char_separator</tt> &#23545;&#35937;&#65292;&#35813;&#23545;&#35937;&#34987;&#29992;&#20110;&#21019;&#24314;&#19968;&#20010; <a href="token_iterator.htm"><tt>token_iterator</tt></a> &#25110;
  <a href="tokenizer.htm"><tt>tokenizer</tt></a> &#20197;&#25191;&#34892;&#21333;&#35789;&#20998;&#35299;&#12290;<tt>dropped_delims</tt> &#21644; <tt>kept_delims</tt> &#37117;&#26159;&#23383;&#31526;&#20018;&#65292;&#20854;&#20013;&#30340;&#27599;&#20010;&#23383;&#31526;&#34987;&#29992;&#20316;&#20998;&#35299;&#26102;&#30340;&#20998;&#38548;&#31526;&#12290;&#24403;&#22312;&#36755;&#20837;&#24207;&#21015;&#20013;&#36935;&#21040;&#19968;&#20010;&#20998;&#38548;&#31526;&#26102;&#65292;&#24403;&#21069;&#21333;&#35789;&#21363;&#23436;&#25104;&#65292;&#24182;&#24320;&#22987;&#19979;&#19968;&#20010;&#26032;&#21333;&#35789;&#12290;<tt>dropped_delims</tt> &#20013;&#30340;&#20998;&#38548;&#31526;&#19981;&#20986;&#29616;&#22312;&#36755;&#20986;&#30340;&#21333;&#35789;&#20013;&#65292;&#32780; <tt>kept_delims</tt>
  &#20013;&#30340;&#20998;&#38548;&#31526;&#21017;&#20250;&#20316;&#20026;&#21333;&#35789;&#36755;&#20986;&#12290;&#22914;&#26524; <tt>empty_tokens</tt> &#20026;
  <tt>drop_empty_tokens</tt>, &#21017;&#31354;&#30333;&#21333;&#35789;&#19981;&#20250;&#20986;&#29616;&#22312;&#36755;&#20986;&#20013;&#12290;&#22914;&#26524; <tt>empty_tokens</tt> &#20026; <tt>keep_empty_tokens</tt> &#21017;&#31354;&#30333;&#21333;&#35789;&#23558;&#20986;&#29616;&#22312;&#36755;&#20986;&#20013;&#12290;</p>



  
<hr>
  
<pre>explicit char_separator()<br></pre>




  
<p>&#20351;&#29992;&#20989;&#25968; <tt>std::isspace()</tt> &#26469;&#35782;&#21035;&#34987;&#24323;&#20998;&#38548;&#31526;&#65292;&#21516;&#26102;&#20351;&#29992; <tt>std::ispunct()</tt> &#26469;&#35782;&#21035;&#20445;&#30041;&#20998;&#38548;&#31526;&#12290;&#21478;&#22806;&#65292;&#25243;&#24323;&#31354;&#30333;&#21333;&#35789;&#12290;</p>



  
<hr>
  
<pre>template &lt;typename InputIterator, typename Token&gt;<br>bool operator()(InputIterator&amp; next, InputIterator end, Token&amp; tok)<br></pre>




  
<p>&#36825;&#20010;&#20989;&#25968;&#20250;&#34987; <a href="token_iterator.htm"><tt>token_iterator</tt></a> &#35843;&#29992;&#20197;&#25191;&#34892;&#21333;&#35789;&#20998;&#35299;&#12290;&#29992;&#25143;&#36890;&#24120;&#19981;&#30452;&#25509;&#35843;&#29992;&#26412;&#20989;&#25968;&#12290;</p>



  
<hr>

  
<p><a href="http://validator.w3.org/check?uri=referer"><img src="http://www.w3.org/Icons/valid-html401" alt="Valid HTML 4.01 Transitional" border="0" height="31" width="88"></a></p>




  
<p>Revised 
  <!--webbot bot="Timestamp" s-type="EDITED" s-format="%d %B, %Y" startspan -->25
  December, 2006<!--webbot bot="Timestamp" endspan i-checksum="38518" --></p>




  
<p><i>Copyright &copy; 2001-2002 Jeremy Siek and John R. Bandela</i></p>




  
<p><i>Distributed under the Boost Software License, Version 1.0. (See
  accompanying file <a href="../../LICENSE_1_0.txt">LICENSE_1_0.txt</a> or
  copy at <a href="http://www.boost.org/LICENSE_1_0.txt">http://www.boost.org/LICENSE_1_0.txt</a>)</i></p>



</body>
</html>
