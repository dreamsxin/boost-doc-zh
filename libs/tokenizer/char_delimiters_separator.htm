<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>

  
  <meta http-equiv="Content-Language" content="en-us">

  
  <meta http-equiv="Content-Type" content="text/html; charset=us-ascii">

  
  <meta name="GENERATOR" content="Microsoft FrontPage 6.0">

  
  <meta name="ProgId" content="FrontPage.Editor.Document">


  
  <title>Boost Char Delimiters Separator</title>
</head>



<body alink="#ff0000" bgcolor="#ffffff" link="#0000ee" text="#000000" vlink="#551a8b">

  
<p><img src="../../boost.png" alt="C++ Boost" height="86" width="277"><br>
</p>
<font color="red">&#27880;&#65306;&#35813;&#31867;&#24050;&#34987;&#21453;&#23545;&#12290;&#35831;&#29992;
  <a href="char_separator.htm"><tt>char_separator</tt></a> &#26367;&#20195;&#12290;</font>

  
<h1 align="center">Char Delimiters Separator</h1>

  
<pre>template &lt;class Char, class Traits = std::char_traits&lt;Char&gt; &gt;<br>class char_delimiters_separator{<br></pre>


  
<p>char_delimiters_separator &#31867;&#26159; <a href="tokenizerfunction.htm">TokenizerFunction</a> &#27010;&#24565;&#30340;&#19968;&#20010;&#23454;&#29616;&#65292;&#21487;&#29992;&#20110;&#21333;&#35789;&#20998;&#35299;&#12290;&#23427;&#26159;&#29992;&#20110;
  tokenizer &#21644; token_iterator_generator &#30340;&#32570;&#30465; TokenizerFunction. &#20197;&#19979;&#26159;&#19968;&#20010;&#20363;&#23376;&#12290;</p>


  
<h2>&#20363;&#23376;</h2>

  
<pre>// simple_example_4.cpp<br>#include&lt;iostream&gt;<br>#include&lt;boost/tokenizer.hpp&gt;<br>#include&lt;string&gt;<br><br>int main(){<br>   using namespace std;<br>   using namespace boost;<br>   string s = "This is,  a test";<br>   tokenizer&lt;char_delimiters_separator&lt;char&gt; &gt; tok(s);<br>   for(tokenizer&lt;char_delimiters_separator&lt;char&gt; &gt;::iterator beg=tok.begin(); beg!=tok.end();++beg){<br>       cout &lt;&lt; *beg &lt;&lt; "\n";<br>   }<br>}<br></pre>


  
<h2>&#26500;&#36896;&#21644;&#20351;&#29992;</h2>


  
<p>&#21482;&#26377;&#19968;&#20010;&#26377;&#29992;&#30340;&#26500;&#36896;&#20989;&#25968;&#65292;&#22914;&#19979;&#65306;</p>

  
<pre>explicit char_delimiters_separator(bool return_delims = false, <br>const Char* returnable = "",const Char* nonreturnable = "" )<br></pre>


  
<table summary="" border="1">

    <tbody>
    <tr>

      <td>
        
      <p align="center"><strong>&#21442;&#25968;</strong></p>

      </td>


      <td>
        
      <p align="center"><strong>&#25551;&#36848;</strong></p>

      </td>

    </tr>


    <tr>

      <td>return_delims</td>


      <td>&#26159;&#21542;&#36820;&#22238;&#21457;&#29616;&#30340;&#20998;&#38548;&#31526;&#12290;&#27880;&#24847;&#19981;&#26159;&#25152;&#26377;&#20998;&#38548;&#31526;&#37117;&#21487;&#36820;&#22238;&#12290;&#26377;&#20851;&#35299;&#37322;&#35831;&#35265;&#20854;&#23427;&#20004;&#20010;&#21442;&#25968;&#12290;</td>

    </tr>


    <tr>

      <td>returnable</td>


      <td>&#25351;&#23450;&#21487;&#36820;&#22238;&#30340;&#20998;&#38548;&#31526;&#12290;&#36825;&#20123;&#20998;&#38548;&#31526;&#24403; return_delims &#20026; true &#26102;&#23558;&#20316;&#20026;&#21333;&#35789;&#36820;&#22238;&#12290;&#30001;&#20110;&#36825;&#36890;&#24120;&#26159;&#26631;&#28857;&#31526;&#21495;&#65292;&#25152;&#20197;&#22914;&#26524;&#20197; 0 &#20316;&#20026;&#35813;&#21442;&#25968;&#25552;&#20379;&#65292;&#21017;&#21487;&#36820;&#22238;&#20998;&#38548;&#31526;&#23558;&#26159;&#25152;&#26377;&#20351; std::ispunct(C)
      &#20026; true &#30340; C. &#22914;&#26524;&#35813;&#21442;&#25968;&#20026; "", &#21017;&#20195;&#34920;&#27809;&#26377;&#21487;&#36820;&#22238;&#20998;&#38548;&#31526;&#12290;</td>

    </tr>


    <tr>

      <td>nonreturnable</td>


      <td>&#25351;&#23450;&#19981;&#21487;&#36820;&#22238;&#30340;&#20998;&#38548;&#31526;&#12290;&#36825;&#20123;&#20998;&#38548;&#31526;&#19981;&#21487;&#20316;&#20026;&#21333;&#35789;&#36820;&#22238;&#12290;&#30001;&#20110;&#36825;&#36890;&#24120;&#26159;&#31354;&#30333;&#23383;&#31526;&#65292;&#25152;&#20197;&#22914;&#26524;&#35813;&#21442;&#25968;&#20026; 0&#65292;&#21017;&#19981;&#21487;&#36820;&#22238;&#20998;&#38548;&#31526;&#23558;&#26159;&#25152;&#26377;&#20351; std::isspace(C) &#20026;
      true &#30340;C. &#22914;&#26524;&#35813;&#21442;&#25968;&#20026; "", &#21017;&#20195;&#34920;&#27809;&#26377;&#19981;&#21487;&#36820;&#22238;&#30340;&#20998;&#38548;&#31526;&#12290;</td>

    </tr>

  
  </tbody>
</table>


  
<p>&#21306;&#21035;&#19981;&#21487;&#36820;&#22238;&#21644;&#21487;&#36820;&#22238;&#20998;&#38548;&#31526;&#30340;&#21407;&#22240;&#26159;&#65292;&#26377;&#20123;&#20998;&#38548;&#31526;&#20165;&#29992;&#20316;&#20998;&#38548;&#21333;&#35789;&#32780;&#27809;&#26377;&#26356;&#22810;&#30340;&#24847;&#20041;&#12290;&#20197;&#23383;&#31526;&#20018; "b c +"
&#20026;&#20363;&#12290;&#20551;&#35774;&#20320;&#22312;&#20889;&#19968;&#20010;&#31616;&#21333;&#30340;&#35745;&#31639;&#22120;&#65292;&#20998;&#26512;&#21518;&#32512;&#24418;&#24335;&#30340;&#34920;&#36798;&#24335;&#12290;&#31354;&#26684;&#21644;&#21152;&#21495;&#37117;&#21487;&#20197;&#29992;&#20316;&#20998;&#38548;&#21333;&#35789;&#65292;&#20320;&#21482;&#23545;&#21152;&#21495;&#24863;&#20852;&#36259;&#32780;&#23545;&#31354;&#26684;&#19981;&#24863;&#20852;&#36259;&#12290;&#23558;&#31354;&#26684;&#20316;&#20026;&#21333;&#35789;&#36820;&#22238;&#21482;&#20250;&#20351;
&#20320;&#30340;&#20195;&#30721;&#22797;&#26434;&#21270;&#12290;&#36825;&#26102;&#20320;&#38656;&#35201;&#25351;&#23450;&#21152;&#21495;&#20026;&#21487;&#36820;&#22238;&#20998;&#38548;&#31526;&#65292;&#32780;&#31354;&#26684;&#20026;&#19981;&#21487;&#36820;&#22238;&#20998;&#38548;&#31526;&#12290;</p>


  
<p>&#20351;&#29992;&#36825;&#20010;&#31867;&#26102;&#65292;&#23558;&#23427;&#30340;&#26576;&#20010;&#23545;&#35937;&#20256;&#32473;&#38656;&#35201; TokenizerFunction
  &#23545;&#35937;&#30340;&#22320;&#26041;&#12290;</p>


  
<h3>&#27169;&#26495;&#21442;&#25968;</h3>


  
<table summary="" border="1">

    <tbody>
    <tr>

      <th>&#21442;&#25968;</th>


      <th>&#25551;&#36848;</th>

    </tr>


    <tr>

      <td><tt>Char</tt></td>


      <td>&#21333;&#35789;&#30340;&#20803;&#32032;&#31867;&#22411;&#65292;&#36890;&#24120;&#20026;
      <tt>char</tt>.</td>

    </tr>


    <tr>

      <td>Traits</td>


      <td>&#23383;&#31526;&#30340; traits &#31867;&#65292;&#36890;&#24120;&#20026;
      std::char_traits&lt;Char&gt;</td>

    </tr>

  
  </tbody>
</table>


  
<h2>Model of</h2>


  
<p><a href="tokenizerfunction.htm">TokenizerFunction</a></p>


  
<p>&nbsp;</p>

  
<hr>

  
<p><a href="http://validator.w3.org/check?uri=referer"><img src="http://www.w3.org/Icons/valid-html401" alt="Valid HTML 4.01 Transitional" border="0" height="31" width="88"></a></p>


  
<p>Revised 
  <!--webbot bot="Timestamp" s-type="EDITED" s-format="%d %B, %Y" startspan -->25
  December, 2006<!--webbot bot="Timestamp" endspan i-checksum="38518" --></p>


  
<p><i>Copyright &copy; 2001 John R. Bandela</i></p>


  
<p><i>Distributed under the Boost Software License, Version 1.0. (See
  accompanying file <a href="../../LICENSE_1_0.txt">LICENSE_1_0.txt</a> or
  copy at <a href="http://www.boost.org/LICENSE_1_0.txt">http://www.boost.org/LICENSE_1_0.txt</a>)</i></p>

</body>
</html>
