[/ Copyright 2006-2008 Daniel James.
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt) ]

[section:comparison Comparison with Associative Containers 与关联式容器的比较]

[table Interface differences. 接口的差异。
    [[Associative Containers 关联式容器] [Unordered Associative Containers 无序关联式容器]]

    [
        [Parameterized by an ordering relation `Compare`\n
        以一个排序关系 `Compare` 来参数化]
        [Parameterized by a function object `Hash` and an equivalence relation
            `Pred`\n
        以一个函数对象 `Hash` 和一个等同性关系 `Pred` 来参数化]
    ]
    [
        [Keys can be compared using `key_compare` which is accessed by member function `key_comp()`,
         values can be compared using `value_compare` which is accessed by member function `value_comp()`.\n
         键值可以使用 `key_compare` 来比较，后者通过成员函数 `key_comp()` 来访问，值可以使用 `value_compare` 
         来比较，后者通过成员函数 `value_comp()` 来访问。]
        [Keys can be hashed using `hasher` which is accessed by member function `hash_function()`,
         and checked for equality using `key_equal` which is accessed by member function `key_eq()`.
         There is no function object for compared or hashing values.\n
         键值可以用 `hasher` 来散列，它通过成员函数 `hash_function()` 访问，并且键值使用 `key_equal` 
         来检查等同性，它通过成员函数 `key_eq()` 访问。没有函数对象用于对值进行比较或散列。]
    ]
    [
        [Constructors have optional extra parameters for the comparison object.\n
        构造函数有可选的额外参数用于比较用的函数对象。]
        [Constructors have optional extra parameters for the initial minimum
            number of buckets, a hash function and an equality object.\n
        构造函数有可选的额外参数，用于初始化最小的桶数量、散列函数和等同性函数对象。]
    ]

    [
        [Keys `k1`, `k2` are considered equivalent if
            `!Compare(k1, k2) && !Compare(k2, k1)`\n
        键值 `k1`, `k2` 被认为是相等的，如果 `!Compare(k1, k2) && !Compare(k2, k1)`]
        [Keys `k1`, `k2` are considered equivalent if `Pred(k1, k2)`\n
        键值 `k1`, `k2` 被认为是相等的，如果 `Pred(k1, k2)`]
    ]
    [
        [Member function `lower_bound(k)` and `upper_bound(k)`\n
        成员函数 `lower_bound(k)` 和 `upper_bound(k)`]
        [No equivalent. Since the elements aren't ordered `lower_bound` and
        `upper_bound` would be meaningless.\n
        没有相应的成员函数。因为元素不是有序的，`lower_bound` 和 `upper_bound` 没有意义。]
    ]
    [
        [`equal_range(k)` returns an empty range at the position that k
            would be inserted if k isn't present in the container.\n
        如果 `k` 不在容器中，`equal_range(k)` 返回一个空区间，位于 `k` 可以被插入的位置。]
        [`equal_range(k)` returns a range at the end of the container if
            k isn't present in the container. It can't return a positioned
            range as k could be inserted into multiple place. To find out the
            bucket that k would be inserted into use `bucket(k)`. But remember
            that an insert can cause the container to rehash - meaning that the
            element can be inserted into a different bucket.\n
        如果 `k` 不在容器中，`equal_range(k)` 返回位于容器末尾的区间。它不能返回一个定位的区间，因为 `k` 可能被插入以多个地方。
        要找出 `k` 将被插入的桶，要用 `bucket(k)`。不过请记住，插入操作可能引起容器的重散列 - 这意味着该元素可能被插入到另一个桶中。]
    ]
    [
        [`iterator`, `const_iterator` are of the bidirectional category.\n
        `iterator`, `const_iterator` 为双向迭代器类别。]
        [`iterator`, `const_iterator` are of at least the forward category.\n
        `iterator`, `const_iterator` 至少为前向迭代器类型。]
    ]
    [
        [Iterators, pointers and references to the container's elements are
            never invalidated.\n
        指向容器元素的迭代器、指针和引用都不会失效。]
        [[link unordered.buckets.iterator_invalidation Iterators can
            be invalidated by calls to insert or rehash]. Pointers and
            references to the container's elements are never invalidated.\n
        [link unordered.buckets.iterator_invalidation 调用 insert 或 rehash 可能引起迭代器失效]。而指向容器元素的指针和引用则不会失效。]
    ]
    [
        [Iterators iterate through the container in the order defined by
            the comparison object.\n
            迭代器按照由比较函数对象所定义的顺序遍历容器。]
        [Iterators iterate through the container in an arbitrary order, that
            can change as elements are inserted. Although, equivalent elements
            are always adjacent.\n
            迭代器按任意顺序遍历容器，由元素被插入时还可能改变。不过，相等的元素总是保持连续的。]
    ]
    [
        [No equivalent\n
        无对应物]
        [Local iterators can be used to iterate through individual buckets.
            (I don't think that the order of local iterators and iterators are
            required to have any correspondence.)\n
            局部迭代器可以用于遍历单个桶。(我不认为局部迭代器和迭代器的顺序有任何对应物)]
    ]
    [
        [Can be compared using the `==`, `!=`, `<`, `<=`, `>`, `>=` operators.\n
        可以用 `==`, `!=`, `<`, `<=`, `>`, `>=` 操作符进行比较。]
        [No comparison operators are defined in the standard, although
            [link unordered.rationale.equality_operators
            implementations might extend the containers to support `==` and
            `!=`].\n
            在标准中没有定义比较操作符，不过 [link unordered.rationale.equality_operators 实现对容器进行扩展以支持 `==` 和 `!=`]。]
    ]
    [
        []
        [When inserting with a hint, implementations are permitted to ignore
            the hint.\n
            在带提示的插入操作时，实现被允许可以忽略提示。]
    ]
    [
        [`erase` never throws an exception\n
        `erase` 不会抛出异常]
        [The containers' hash or predicate function can throw exceptions
            from `erase`\n
            容器的散列函数和谓词函数可以从 `erase` 抛出异常]
    ]
]

[table Complexity Guarantees 复杂度保证
    [[Operation 操作] [Associative Containers 关联式容器] [Unordered Associative Containers 无序关联式容器]]
    [
        [Construction of empty container\n
        空容器的构造]
        [constant\n
        常数]
        [O(/n/) where /n/ is the minimum number of buckets.\n
        O(/n/) 其中 /n/ 为桶的最小数量。]
    ]
    [
        [Construction of container from a range of /N/ elements\n
        从带有 /N/ 个元素的区间构造容器]
        [O(/N/ log /N/), O(/N/) if the range is sorted with `value_comp()`\n
        O(/N/ log /N/), O(/N/) 如果区间已按 `value_comp()` 排序]
        [Average case O(/N/), worst case
            O(/N/'''<superscript>2</superscript>''')\n
            平均情况 O(/N/), 最坏情况 O(/N/'''<superscript>2</superscript>''') ]
    ]
    [
        [Insert a single element\n
        插入单个元素]
        [logarithmic\n
        对数]
        [Average case constant, worst case linear\n
        平均情况为常数时间，最坏情况为线性时间]
    ]
    [
        [Insert a single element with a hint\n
        带提示插入单个元素]
        [Amortized constant if t elements inserted right after hint,
            logarithmic otherwise\n
            如果插入的元素恰好在提示位置之后，则为分期常数时间，否则为对数时间]
        [Average case constant, worst case linear (ie. the same as
            a normal insert).\n
            平均情况为常数时间，最坏情况为线性时间(即与普通插入一样)]
    ]
    [
        [Inserting a range of /N/ elements\n
        插入 /N/ 个元素的区间]
        [ /N/ log(`size()`+/N/) ]
        [Average case O(/N/), worst case O(/N/ * `size()`)\n
        平均情况为 O(/N/)，最坏情况为 O(/N/ * `size()`) ]
    ]
    [
        [Erase by key, `k`\n
        通过键值 `k` 删除元素]
        [O(log(`size()`) + `count(k)`)]
        [Average case: O(`count(k)`), Worst case: O(`size()`)\n
        平均情况：O(`count(k)`)，最坏情况：O(`size()`)]
    ]
    [
        [Erase a single element by iterator\n
        通过迭代器删除单个元素]
        [Amortized constant\n
        分期常数时间]
        [Average case: O(1), Worst case: O(`size()`)\n
        平均情况：O(1)，最坏情况：O(`size()`)]
    ]
    [
        [Erase a range of /N/ elements\n
        删除 /N/ 个元素的区间]
        [O(log(`size()`) + /N/)]
        [Average case: O(/N/), Worst case: O(`size()`)\n
        平均情况：O(/N/)，最坏情况： O(`size()`)]
    ]
    [
        [Clearing the container\n
        清空容器]
        [O(`size()`)]
        [O(`size()`)]
    ]
    [
        [Find\n
        查找]
        [logarithmic\n
        对数时间]
        [Average case: O(1), Worst case: O(`size()`)\n
        平均情况：O(1)，最坏情况： O(`size()`)]
    ]
    [/ TODO: Average case is probably wrong. ]
    [
        [Count\n
        计数]
        [O(log(`size()`) + `count(k)`)]
        [Average case: O(1), Worst case: O(`size()`)\n
        平均情况：O(1)，最坏情况： O(`size()`)]
    ]
    [
        [`equal_range(k)`]
        [logarithmic\n
        对数时间]
        [Average case: O(`count(k)`), Worst case: O(`size()`)\n
        平均情况：O(`count(k)`)，最坏情况：O(`size()`) ]
    ]
    [
        [`lower_bound`,`upper_bound`]
        [logarithmic\n
        对数时间]
        [n/a]
    ]
]

[endsect]
