
[/ Copyright 2005-2008 Daniel James.
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt) ]

[section:disable Disabling The Extensions 使扩展无效]

While [classref boost::hash]'s extensions are generally useful, you might want
to turn them of in order to check that your code will work with other
implementations of TR1. To do this define the macro `BOOST_HASH_NO_EXTENSIONS`.
When this macro is defined, only the specialisations detailed
in TR1 will be declared. But, if you later undefine the macro and include
<[headerref boost/functional/hash.hpp]> then the non-specialised form will be defined
- activating the extensions.\n
虽然 [classref boost::hash] 的扩展通常是有用的，但为了检查你的代码是否可以和 TR1 的其它实现一起工作，
你有可能想将它们关掉。要做到这一点，请定义这个宏 `BOOST_HASH_NO_EXTENSIONS`。当这个宏被定义的时候，
只有在 TR1 中列举的特化才被声明。但是，如果你随后取消这个宏定义并包含 
<[headerref boost/functional/hash.hpp]>，非特化形式就会被定义 —— 激活了扩展。

It is strongly recommended that you never undefine the macro - and only define
it so that it applies to the complete translation unit, either by defining it
at the beginning of the main source file or, preferably, by using a compiler
switch or preference. And you really should never define it in header files.\n
强烈推荐你永远不要取消这个宏定义 —— 仅仅定义它以便它应用于整个编译单元，你可以在主程序文件的开始定义它，
更好的做法时，使用一个编译开关或首选项。还有，你绝对不应该在头文件中定义它。

If you are writing a library which has code in the header which requires the
extensions, then the best action is to tell users not to define the macro.
Their code won't ['require] the macro.\n
如果你编写一个库，有些头文件中的代码需要这些扩展，最好的做法就是告诉用户不要定义这个宏。
它们的代码不会 ['需要] 这个宏。

Translation units that are compiled with the macro defined will link with units
that were compiled without it. This feature has been designed to avoid ODR
violations.\n
带着这个宏定义编译的翻译单元可以和不带它编译的翻译单元连接。设计这个特性是为了避免 ODR 违反。

[endsect]
