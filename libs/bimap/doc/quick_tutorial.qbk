[/license

Boost.Bimap

Copyright (c) 2006-2007 Matias Capeletto

Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt or copy at
http://www.boost.org/LICENSE_1_0.txt)

]

[/ QuickBook Document version 1.4 ]

[section:one_minute_tutorial One minute tutorial 一分钟教程]

[heading What is a bimap? 什么是 bimap？]

A Bimap is a data structure that represents bidirectional relations between
elements of two collections. The container is designed to work as two opposed STL maps. A bimap between a collection `X` and a collection `Y` can be viewed as a map from `X` to `Y` (this view will be called the ['left map view]) or as a map from `Y` to `X` (known as the ['right map view]). Additionally, the bimap can also be viewed as a set of relations between `X` and `Y` (named the ['collection of relations view]).\n
Bimap 是一个数据结构，它表示了两组元素间的双向关系。该容器被设计为象两个相对的 STL map 那样。
一个 `X` 和 `Y` 间的 bimap，可以被视作为从 `X` 到 `Y` 的 map (这种视角称为 ['左映射视图]) 
或者被视作为从 `Y` 到 `X` 的map(被称为 ['右映射视图])。另外，bimap 也可以被视用为 `X` 和 `Y` 之间的一组关系
(称为 ['关系视图组])。 

The following code creates an empty bimap container:\n
以下代码创建一个空的 bimap 容器：

    typedef bimap<X,Y> bm_type;
    bm_type bm;

Given this code, the following is the complete description of the resulting bimap.\n
给定以上代码，以下是对所得 bimap 的完整描述。
[footnote A type is ['signature-compatible] with other type if it has the same
signature for functions and metadata. Preconditions, postconditions and the order
of operations need not be the same.\n
一个类型的 ['签名兼容于] 另一个类型，如果它们具有相同的函数签名和元数据。前提条件、后置条件和操作的顺序则不必相同。
]

* `bm.left` is signature-compatible with `std::map<X,Y>`\n
  `bm.left` 的签名兼容于 `std::map<X,Y>` 
* `bm.right` is signature-compatible with `std::map<Y,X>`
  `bm.right` 的签名兼容于 `std::map<Y,X>` 
* `bm` is signature-compatible with `std::set< relation<X,Y> >`
  `bm` 的签名兼容于 `std::set< relation<X,Y> >` 

__SIMPLE_BIMAP__

You can see how a bimap container offers three views over the same collection of bidirectional relations. \n
你可以看到，一个 bimap 容器是如何在同一组双向关系上提供三种视图的。

If we have any generic function that work with maps\n
如果我们有一个使用 map 的泛型函数：

    template< class MapType >
    void print_map(const MapType & m)
    {
        typedef typename MapType::const_iterator const_iterator;
        for( const_iterator iter = m.begin(), iend = m.end(); iter != iend; ++iter )
        {
            std::cout << iter->first << "-->" << iter->second << std::endl;
        }
    }

We can use the ['left map view] and the ['right map view] with it\n
我们就可以对它使用 ['左映射视图] 或 ['右映射视图]： 

    bimap< int, std::string > bm;
    ...
    print_map( bm.left  );
    print_map( bm.right );

And the output will be\n
输出如下：

[pre
[^1 --> one]
[^2 --> two]
...
[^one --> 1]
[^two --> 2]
...
]

[heading Layout of the relation and the pairs of a bimap  bimap中的关系与元素对的布局]

The `relation` class represents two related elements. The two values are
named left and right to express the symmetry of this type.
The bimap pair classes are signature-compatible with `std::pairs`.\n
`relation` 类表示了两个相关元素。这两个值分别命名为 left 和 right，表示这种类型的对称性。
bimap pair 类的签名兼容于 `std::pairs`.

__RELATION_AND_PAIR__

[heading Step by step 一步步来]

[import ../example/step_by_step.cpp]

A convinience header is avaiable in the boost directory:\n
在 boost 目录下有一个便于使用的头文件：

    #include <boost/bimap.hpp>

Lets define a bidirectional map between integers and strings:\n
我们来定义一个整数与字符串间的双向 map:

[code_step_by_step_definition]

[heading The collection of relations view 关系视图组]

Remember that `bm` alone can be used as a set of relations.
We can insert elements or iterate over them using this view.\n
记住，`bm` 可单独用作关系的 set。我们可以插入元素，或者使用该视图进行遍历。

[code_step_by_step_set_of_relations_view]

[heading The left map view 左映射视图]

`bm.left` works like a `std::map< int, std::string >`. We use it
in the same way we will use a standard map.\n
`bm.left` 的用法和 `std::map< int, std::string >` 一样。我们按照使用标准 map 一样使用它。

[code_step_by_step_left_map_view]

[heading The right map view 右映射视图]

`bm.right` works like a `std::map< std::string, int >`. It is
important to note that the key is the first type and the data
is the second one, exactly as with standard maps.\n
`bm.right` 的用法和 `std::map< std::string, int >` 一样。重要的是，
要注意键值为 first 而数据为 second，其它的和标准 map 一样。 

[code_step_by_step_right_map_view]

[heading Differences with std::map 与std::map的差别]

The main difference between bimap views and their standard containers counterparts
is that, because of the bidirectional nature of a bimap, the values stored in
it can not be modified directly using iterators.
For example, when a `std::map<X,Y>` iterator is dereferenced the return type is
`std::pair<const X, Y>`, so the following code is valid:
`m.begin()->second = new_value;`.
However dereferencing a `bimap<X,Y>::left_iterator` returns a type that is 
['signature-compatible] with a `std::pair<const X, const Y>` \n
bimap 视图与相对应的标准容器之间最主要的差别在于，由于 bimap 本身的双向性，
它所保存的值不可能直接用迭代器去修改。例如，当一个 `std::map<X,Y>` 迭代器被提领时，
返回的类型是 `std::pair<const X, Y>`，所以以下代码是有效的：`m.begin()->second = new_value;`. 
但是提领一个 `bimap<X,Y>::left_iterator` 所返回的类型的签名兼容于 `std::pair<const X, const Y>`

    bm.left.find(1)->second = "1"; // Compilation error 编译错误

If you insert `(1,"one")` and `(1,"1")` in a `std::map<int,std::string>` the second insertion will have no effect. In a `bimap<X,Y>` both keys have to remain unique. The insertion may fail in other situtions too. Lets see an example\n
如果你往一个 `std::map<int,std::string>` 中插入 `(1,"one")` 和 `(1,"1")`，那么第二个插入是无效的。
在一个 `bimap<X,Y>` 中，两个键都必须是唯一的。其它情况的插入都会失败。我们来看一个例子

    bm.clear();

    bm.insert( bm_type::value_type( 1, "one" ) );

    bm.insert( bm_type::value_type( 1, "1"   ) ); // No effect! 没有作用！
    bm.insert( bm_type::value_type( 2, "one" ) ); // No effect! 没有作用！

    assert( bm.size() == 1 );

[heading A simple example 一个简单的例子]

Look how you can reuse code that is intend to be used with std::maps, like the
print_map function in this example.\n
我们来看看你可以如何重用原本要用于 std::maps 的代码，如本例中的 print_map 函数。 

[@../../example/simple_bimap.cpp Go to source code 查看源代码]

[code_simple_bimap]

The output of this program will be the following:\n
这个程序的输出如下：
[pre
[^The number of countries is 4]

[^The winner is Argentina]

[^Countries names ordered by their final position:]
[^1) Argentina]
[^2) Spain]
[^3) Germany]
[^4) France]

[^Countries names ordered alphabetically along with their final position:]
[^Argentina ends in position 1]
[^France ends in position 4]
[^Germany ends in position 3]
[^Spain ends in position 2]
]


[heading Continuing the journey 继续我们的旅程]

For information on function signatures, see any standard library
documentation or read the [link boost_bimap.reference reference] section of
this documentation.\n
有关函数签名的相关信息，请见标准库的文档或阅读本文档的 [link boost_bimap.reference 参考] 一节。

[caution
Be aware that a bidirectional map is only signature-compatible with standard
containers. Some functions may give different results, such as in the case of
inserting a pair into the left map where the second value conflicts with a
stored relation in the container. The functions may be slower in a bimap
because of the duplicated constraints. It is strongly recommended that
you read [link boost_bimap.the_tutorial The full tutorial] if you intend to
use a bimap in a serious project.\n
要知道双向 map 只是签名兼容于标准容器。有些函数可以有不同的结果，如在插入一个值对到左映射时，
第二个值与容器中已有数据发生冲突。bimap 中的函数可能会由于双重约束条件而更慢些。
如果你要在一个重要项目中使用 bimap，强烈建议你先阅读 [link boost_bimap.the_tutorial 完整的指南]。
]

[endsect]
