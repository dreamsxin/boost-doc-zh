[/license

Boost.Bimap

Copyright (c) 2006-2007 Matias Capeletto

Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt or copy at
http://www.boost.org/LICENSE_1_0.txt)

]

[/ QuickBook Document version 1.4 ]

[section Bimap and Boost]

[section Bimap and MultiIndex]

['MISC] - [*M]ulti-[*I]ndex [*S]pecialized [*C]ontainers\n
['MISC] - [*多重索引专用容器] 

[:['
Let's be generic, construct frameworks, describe the world in an
unified way...\n
我们应该进行泛型的设计，构造框架，以统一的方式来描述世界... 
]]
[:['
No!, it is better to be specialized, design easy-to-use components,
offer plug-and-play objects...\n
不！特化是更好的，设计易用的组件，提供即插即用的对象... 
]]
[:[*
Why not take advantage of the best of both worlds?\n
为什么不同时利用两种方式的优势？
]]

__MI_FRAMEWORK__

With Boost.Bimap, you can build associative containers in which both
types can be used as key. There is a library in Boost that already
allows the creation of this kind of container: Boost.MultiIndex. It
offers great flexibility and lets you construct almost any container
that you could dream of. The framework is very clean. You migh want to
read this library's tutorial to learn about the power that has been
achieved.\n
有了 Boost.Bimap，你可以构建两侧类型均可用作键值的关联式容器。Boost 中还有一个库也可以创建此类容器，
它就是：Boost.MultiIndex。它提供了强大的灵活性，几乎可以让你构造任意想要的容器。
该框架非常干净。你也许想看看该库的教程来学习它所具有的能力。


But generality comes at a price: the interface that results might not be
the best for every specialization. People may end up wrapping a B.MI
container in its own class every time they want to use it as a
bidirectional map. Boost.Bimap takes advantage of the narrower scope to
produce a better interface for bidirectional maps
[footnote In the same fashion, Boost.MRU will allow the creation of ['most
recent updated] aware containers, hiding the complexity of Boost.MultiIndex.\n
同样的方式 ，Boost.MRU 可用于创建对['最近更新]感知的容器，将 Boost.MultiIndex 的复杂性隐藏起来。].
There is no learning curve if you know how to use standard containers.
Great effort was put into mapping the naming scheme of the STL to Boost.Bimap.
The library is designed to match the common STL containers.\n
不过通用性是有代价的：其接口对于各种特殊情况来说不一定是最好的。
人们也许不想在每次想使用双向映射时都将一个 B.MI 容器包装到一个自己的类中。
Boost.Bimap 凭借较窄的适用范围定义了一个更好的双向映射的接口。如果你懂得如何使用标准容器，
则不存在任何学习曲线。将 STL 的命名方式置于 Boost.Bimap 也获得了很多好处。
这个库被设计与常用的 STL 容器相匹配。

Boost.MultiIndex is, in fact, the core of the bimap container.\n
事实上，Boost.MultiIndex 是 bimap 容器的核心。

However, Boost.Bimap do not aim to tackle every problem with two indexed
types. There exist some problems that are better modelled with Boost.MultiIndex.\n
不过，Boost.Bimap 并不是解决与两个索引类型相关的任意问题的工具。有一些问题使用 Boost.MultiIndex 会更好。


[blurb

[*Problem I  - An employee register\n
问题 I - 员工记录]

['Store an ID and a name for an employee, with fast search on each member.\n
为每个员工保存一个ID和一个名字，需要快速查找每个成员。]

This type of problem is better modelled as a database table, and
[*Boost.MultiIndex] is the preferred choice. It is possible that other data
will need to be indexed later.\n
这类问题最好是建模为数据库表，而 [*Boost.MultiIndex] 是最好的选择。它可以在以后增加其它索引数据。

]

[blurb

[*Problem II - A partners container\n
问题 II - 伙伴容器]

['Store the names of couples and be able to get the name of a person's
partner.\n
保存多对名字，且能够取出某个人的伙伴的名字。]

This problem is better modelled as a collection of relations, and [*Boost.Bimap]
fits nicely here.\n
该问题最好建模为一组关系的组合，而 [*Boost.Bimap] 非常适用。

]

You can also read 
[link boost_bimap.the_tutorial.additional_information Additional Information] for more
information about the relation of this two libraries.\n
你也可以阅读 [link boost_bimap.the_tutorial.additional_information 更多的信息] 一节，
其中有关于这两个库的关系的更多信息。

[endsect]

[section:boost_libraries_that_work_well_with_boost_bimap Boost Libraries that work well with Boost.Bimap 
可以与Boost.Bimap共同使用的Boost库]

[section:introduction Introduction 简介]

[table
[[Name 名字][Description 说明][author 作者][Purpose 目的]]

[[ __BOOST_SERIALIZATION__ ][
Serialization for persistence and marshalling\n
为持续性和重整进行序列化]
[Robert Ramey]
[Serialization support for bimap containers and iterators\n
支持 bimap 容器及迭代器的序列化]]

[[ __BOOST_ASSIGN__ ][
Filling containers with constant or generated data has never been easier\n
以最易用的方式用常数或生成的数据填充容器]
[Thorsten Ottosen]
[Help to fill a bimap or views of it\n
帮助填充一个 bimap 或其视图]]

[[ __BOOST_HASH__ ][
A TR1 hash function object that can be extended to hash user defined types\n
TR1的散列函数对象，可以扩展至对用户自定义类型进行散列]
[Daniel James]
[Default hashing function\n
缺省的散列函数]]

[[ __BOOST_LAMBDA__ ][
Define small unnamed function objects at the actual call site, and more\n
就地定义小型匿名函数对象，及其它]
[from Jaakko Järvi, Gary Powell]
[Functors for modify, range, lower_bound and upper_bound\n
用于 modify, range, lower_bound 和 upper_bound 的函数对象]]

[[ __BOOST_RANGE__ ][
A new infrastructure for generic algorithms that builds on top of the new
iterator concepts\n
用于泛型算法的新的基础设施，建筑于新的迭代器概念之上]
[Thorsten Ottosen]
[Range based algorithms\n
基于区间范围的算法]]

[[ __BOOST_FOREACH__ ][
BOOST_FOREACH macro for easily iterating over the elements of a sequence\n
BOOST_FOREACH 宏，更容易地遍历一个序列的元素]
[Eric Niebler]
[Iteration\n
迭代]]

[[ __BOOST_TYPEOF__ ][
Typeof operator emulation\n
模仿 typeof 操作符]
[Arkadiy Vertleyb, Peder Holt]
[Using BOOST_AUTO while we wait for C++0x\n
在等待 C++0x 之时使用 BOOST_AUTO]]

[[ __BOOST_XPRESSIVE__ ][
Regular expressions that can be written as strings or as expression templates\n
可以写为字符串或表达式模板的正规表达式]
[Eric Niebler]
[Help to fill a bimap from a string\n
帮助从一个字符串填充 bimap]]

[[ __BOOST_PROPERTY_MAP__ ][
Concepts defining interfaces which map key objects to value objects\n
定义了将键对象映射至值对象的接口的概念]
[Jeremy Siek]
[Integration with BGL\n
与 BGL 集成]]
]

[endsect]

[section Boost.Serialization]

A bimap can be archived and retrieved by means of the Boost.Serialization Library.
Both regular and XML archives are supported. The usage is straightforward and does
not differ from that of any other serializable type. For instance:\n
bimap 可以通过 Boost.Serialization 库进行存档和取回。常规存档和XML存档均可支持。
用法直接，与其它可序列化类型没有区别。例如：

[import ../example/bimap_and_boost/serialization.cpp]

[@../../example/bimap_and_boost/serialization.cpp Go to source code 察看源代码]

[code_bimap_and_boost_serialization]

Serialization capabilities are automatically provided by just linking with the
appropriate Boost.Serialization library module: it is not necessary to explicitly
include any header from Boost.Serialization, apart from those declaring the type
of archive used in the process. If not used, however, serialization support can
be disabled by globally defining the macro BOOST_BIMAP_DISABLE_SERIALIZATION.
Disabling serialization for Boost.MultiIndex can yield a small improvement in
build times, and may be necessary in those defective compilers that fail to
correctly process Boost.Serialization headers.\n
只要与合适的 Boost.Serialization 库链接，就能自动提供序列化的能力：不需要显式包含任何 Boost.Serialization 的头文件，
除了那些声明了要使用的存档类型的头文件以外。不过，如果不使用序列化，也可以通过在全局定义一个宏 
BOOST_BIMAP_DISABLE_SERIALIZATION 来禁止掉序列化的支持。禁止 Boost.MultiIndex 的序列化可以对构建时间有少许的改进，
也可能对于那些有缺陷的不能正确处理 Boost.Serialization 头文件的编译器，这是必须的。

[warning Boost.Bimap and Boost.MultiIndex share a lot of serialization code.
The macro `BOOST_BIMAP_DISABLE_SERIALIZATION` disables serialization in *both*
libraries. The same happens when `BOOST_MULTI_INDEX_DISABLE_SERIALIZATION` is
defined.\n
Boost.Bimap 和 Boost.MultiIndex 共享了大量的序列化代码。宏 `BOOST_BIMAP_DISABLE_SERIALIZATION` 将禁止掉两个库的序列化。
如果定义了 `BOOST_MULTI_INDEX_DISABLE_SERIALIZATION`，结果也一样。
]

Retrieving an archived bimap restores not only the elements, but also the order
they were arranged in the views of the container. There is an exception to this rule,
though: for unordered sets, no guarantee is made about the order in which elements
will be iterated in the restored container; in general, it is unwise to rely on
the ordering of elements of a hashed view, since it can change in arbitrary ways
during insertion or rehashing --this is precisely the reason why hashed indices
and TR1 unordered associative containers do not define an equality operator.\n
取加一个存档的 bimap，不仅恢复了其中的元素，同时它们对于容器各视图的顺序也是排好的。
不过对于这一规则有一个例外：对于 unordered set，被恢复的容器中的元素的遍历顺序没有保证；
通常，依赖于一个散列视图的元素顺序是不明智的，因为在插入和重散列时，元素的顺序会任意改变
-- 这正是为什么散列索引和TR1的无序关联式容器没有定义相等操作符的原因。

Iterators of a bimap can also be serialized. Serialization of an
iterator must be done only after serializing its corresponding container.\n
bimap 的迭代器也可以被序列化。对一个迭代器的序列化必须在其对应容器被序列化之后进行。

[endsect]

[section Boost.Assign]

The purpose of this library is to make it easy to fill containers with data by
overloading operator,() and operator()(). These two operators make it possible
to construct lists of values that are then copied into a container.\n
这个库的目的是可以很容易地向容器中填充数据，它通过重载 operator,() 和 operator()() 来实现。
这两个操作符可以构造一个值列表，然后复制到容器中。

These lists are particularly useful in learning, testing, and prototyping
situations, but can also be handy otherwise. The library comes with predefined
operators for the containers of the standard library, but most functionality will
work with any standard compliant container. The library also makes it possible
to extend user defined types so for example a member function can be called for
a list of values instead of its normal arguments.\n
这些列表尤其适用于学习、测试和原型化，但是在其它情况下也很方便。该库对于标准库的容器预定义了一些操作符，
但多数功能都可以用于与标准兼容的任意容器。该库也可以扩展至用户自定义类型，
例如某个成员函数可以对一个值列表进行调用，替换原有的普通参数。

Boost.Assign can be used with bimap containers.
The views of a bimap are signature-compatible with their standard
counterparts, so we can use other Boost.Assign utilities with them.\n
Boost.Assign 可以用于 bimap 容器。bimap 的视图与标准中的对应物是签名兼容的，
所以我们可以对它们使用其它 Boost.Assign 工具。

[import ../example/bimap_and_boost/assign.cpp]

[@../../example/bimap_and_boost/assign.cpp Go to source code 察看源代码]

[code_bimap_and_boost_assign]

[endsect]

[section Boost.Hash]

The hash function is the very core of the fast lookup capabilities of the
unordered sets: a hasher is just a Unary Function returning an std::size_t value
for any given key. In general, it is impossible that every key map to a
different hash value, for the space of keys can be greater than the number of permissible hash codes: what makes for a good hasher is that the probability of a collision (two different keys with the same hash value) is as close to zero as possible.\n
散列函数是无序集合的快速查找能力的核心：散列器就是一个可以对任意给定的键值返回一个 std::size_t 值的单参函数对象。
通常，它不可能将每一个键值映射到一个不同的散列值，键值的空间可以大于所允许的散列值的数量：
一个好的散列器，要求其发生冲突(两个不同的键值对应同一个散列值)的可能性尽量接近于零。

This is a statistical property depending on the typical distribution of keys in a given application, so it is not feasible to have a general-purpose hash function with excellent results in every possible scenario; the default value for this parameter uses Boost.Hash, which often provides good enough results.\n
这是一种统计特性，它依赖于在给定应用中的键值分布情况，所以不存在一个通用的散列函数，可以在各种情况都得到很好的效果；
这个参数的缺省值将使用 Boost.Hash，它通常能够提供不错的效果。

Boost.Hash can be
[@http://www.boost.org/doc/html/hash/custom.html
extended for custom data types],
enabling to use the default parameter of the unordered set types with any user types.\n
Boost.Hash 可以 [@http://www.boost.org/doc/html/hash/custom.html 针对定制的数据类型进行扩展]，
以对用户类型使用无序集合类型的缺省参数。

[endsect]

[section Boost.Lambda]

The Boost Lambda Library (BLL in the sequel) is a C++ template library, which implements
form of lambda abstractions for C++. The term originates from functional programming and
lambda calculus, where a lambda abstraction defines an unnamed function.
Lambda expressions are very useful to construct the function objects required by some of
the functions in a bimap view.\n
Boost Lambda 库(后称BLL)是一个C++模板库，它为C++实现了 lambda 抽象形式。这一术语来源自函数式编程和 lambda 运算，
lambda 抽象定义了一个匿名函数。Lambda 表达式对于在 bimap 视图的某些函数中构造函数对象非常有用。

Boost.Bimap defines new placeholders in `<boost/bimap/support/lambda.hpp>`
to allow a sounder solution. The placeholders are named _key and _data and both
are equivalent to boost::lambda::_1. There are two reasons to include this placeholders:
the code looks better with them and they avoid the clash problem between lambda::_1 and
boost::_1 from Boost.Bind.\n
Boost.Bimap 在 `<boost/bimap/support/lambda.hpp>` 中定义了新的占位符，以得到更漂亮的解法。
这些占位符名为 _key 和 _data，它们都等价于 boost::lambda::_1. 包含这些占位符有两个原因：
代码更好看一些，而且避免了在 lambda::_1 和 Boost::Bind 的 boost::_1 间的冲突问题。 

[import ../example/bimap_and_boost/lambda.cpp]

[@../../example/bimap_and_boost/lambda.cpp Go to source code 察看源代码]

[code_bimap_and_boost_lambda]

[endsect]

[section Boost.Range]

Boost.Range is a collection of concepts and utilities that are particularly useful
for specifying and implementing generic algorithms.
Generic algorithms have so far been specified in terms of two or more iterators.
Two iterators would together form a range of values that the algorithm could
work on. This leads to a very general interface, but also to a somewhat clumsy
use of the algorithms with redundant specification of container names. Therefore
we would like to raise the abstraction level for algorithms so they specify their
interface in terms of Ranges as much as possible.\n
Boost.Range 包含一组概念和工具，它们特别适用于声明和实现泛型算法。
当前的泛型算法都是以两个或多个迭代器来声明的。这两个迭代器一起表示了该算法要操作的一组值的范围。
这导致了一个非常通用的接口，但是也由于容器名的冗余而使得算法的使用有些笨拙。
因此我们希望提升算法的抽象级别，尽可能按照 Range 来声明。

As Boost.Bimap views are signature-compatible with their standard
container counterparts, they are compatible with the concept of a range.
As an additional feature, ordered bimap views offer a function named
`range` that allows a range of values to be obtained.\n
由于 Boost.Bimap 的视图签名兼容于它们的标准容器对应物，所以它们也兼容于 range 的概念。
作为一个额外的特性，有序的 bimap 视图提供了一个名为 `range` 的函数，以获得值的 range。

[import ../example/bimap_and_boost/range.cpp]

If we have some generic functions that accepts ranges:\n
如果我们有一些接受 range 的泛型函数：

[code_bimap_and_boost_range_functions]

We can use them with Boost.Bimap with the help of the `range` function.\n
我们就可以在 `range` 函数的帮助下将它们用于 Boost.Bimap。

[code_bimap_and_boost_range]

[@../../example/bimap_and_boost/range.cpp Go to source code 察看源代码]

[endsect]

[section Boost.Foreach]

In C++, writing a loop that iterates over a sequence is tedious.
We can either use iterators, which requires a considerable amount of
boiler-plate, or we can use the std::for_each()  algorithm and move our
loop body into a predicate, which requires no less boiler-plate and forces
us to move our logic far from where it will be used. In contrast, some other
languages, like Perl, provide a dedicated "foreach" construct that automates
this process. BOOST_FOREACH is just such a construct for C++. It iterates
over sequences for us, freeing us from having to deal directly with iterators
or write predicates.\n
在C++中，编写一个循环来遍历一个序列是很乏味的。我们可以使用迭代器，它要求相当数量的 boiler-plate，
或者我们可以使用 std::for_each() 算法，这样我们需要将我们的循环体写成一个谓词，它并没有减少 boiler-plate，
还迫使我们将处理逻辑移到了远离使用点的地方。作为比较，有些语言，如 Perl，
提供了一个专门的"foreach"结构来自动处理这一过程。BOOST_FOREACH 就是用于C++的这样一个结构。
它为我们迭代整个序列，不需要我们直接处理迭代器或编写谓词。

You can use BOOST_FOREACH macro with Boost.Bimap views. The generated code will
be as efficient as a std::for_each iteration.
Here are some examples:\n
你可以对 Boost.Bimap 视图使用 BOOST_FOREACH 宏。所生成的代码和 std::for_each 迭代同样高效。以下是一些例子：

[import ../example/bimap_and_boost/foreach.cpp]

[code_bimap_and_boost_foreach]

You can use it directly with ranges too:\n
你也可以直接使用 range：

[code_bimap_and_boost_foreach_using_range]

[@../../example/bimap_and_boost/foreach.cpp Go to source code 察看源代码]

[endsect]

[section Boost.Typeof]

[import ../example/bimap_and_boost/typeof.cpp]

Once C++0x is out we are going to be able to write code like:\n
一旦 C++0x 发布，我们就可以写这样的代码：

    auto iter = bm.by<name>().find("john");

instead of the more verbose\n
替代以下冗长的写法：

    bm_type::map_by<name>::iterator iter = bm.by<name>().find("john");

Boost.Typeof defines a macro BOOST_AUTO that can be used as a library
solution to the auto keyword while we wait for the next standard.\n
Boost.Typeof 定义了一个宏 BOOST_AUTO，在我们等待新标准的期间，它可以用作对 auto 关键字的一个库形式的解决方案。

If we have\n
如果我们有：

[code_bimap_and_boost_typeof_first]

The following code snippet\n
则以下代码片断：

[code_bimap_and_boost_typeof_not_using_auto]

can be rewrited as\n
可以写为：

[code_bimap_and_boost_typeof_using_auto]

[@../../example/bimap_and_boost/typeof.cpp Go to source code 察看源代码]

[endsect]

[section Boost.Xpressive]

[import ../example/bimap_and_boost/xpressive.cpp]

Using Boost.Xpressive we can parse a file and insert the relations in a bimap
in the same step. It is just amazing the power of four lines of code.
Here is an example (it is just beatifull)\n
使用 Boost.Xpressive，我们可以分析一个文件并同时将其中的关系插入到一个 bimap 中。
令人惊讶的是，这只需要四行代码。以下是一个例子(非常漂亮)：

[code_bimap_and_boost_xpressive]

[@../../example/bimap_and_boost/xpressive.cpp Go to source code 察看源代码]

[endsect]

[section Boost.Property_map]

The Boost Property Map Library consists mainly of interface specifications in the form of
concepts (similar to the iterator concepts in the STL). These interface specifications
are intended for use by implementers of generic libraries in communicating requirements on
template parameters to their users. In particular, the Boost Property Map concepts define a
general purpose interface for mapping key objects to corresponding value objects, thereby
hiding the details of how the mapping is implemented from algorithms.\n
Boost Property Map 库主要是以概念(类似于STL中的迭代器概念)的方式包含了一些接口规范。
这些接口规范计划用于实现那些以模板参数与其用户进行要求沟通的泛型库。具体地说，
Boost Property Map 的概念为将键对象映射至相应的值对象定义了一个通用的接口，从而对算法隐藏了如何实现映射的细节。

The need for the property map interface came from the Boost Graph Library (BGL), which
contains many examples of algorithms that use the property map concepts to specify their
interface. For an example, note the ColorMap template parameter of the  breadth_first_search.
In addition, the BGL contains many examples of concrete types that implement the property map
interface. The  adjacency_list class implements property maps for accessing objects
(properties) that are attached to vertices and edges of the graph.\n
对于属性映射接口的需求来自于 Boost Graph 库(BGL)，该库包含了许多算法例子，它们使用属性映射概念来指定其接口。
例如，breadth_first_search 的 ColorMap 模板参数。此外，BGL 还包含了多个实现了属性映射接口的具体类型例子。
adjacency_list 类实现了一些属性映射，用于访问附属于图的顶点和边的对象(属性)。 

The counterparts of two of the views of Boost.Bimap map, the `set` and
`unordered_set`, are read-write property maps. In order to use these, you
need to include one of the following headers:\n
Boost.Bimap 映射视图的两个对应物，`set` 和 `unordered_set`，就是可读写的属性映射。
为了使用它们，你需要包含以下头文件中的某一个：

    #include <boost/bimap/property_map/set_support.hpp>
    #include <boost/bimap/property_map/unordered_set_support.hpp>

The following is adapted from the example in the Boost.PropertyMap
documentation.\n
以下例子是根据 Boost.PropertyMap 文档中的例子改写的。

[import ../example/bimap_and_boost/property_map.cpp]

[@../../example/bimap_and_boost/property_map.cpp Go to source code 察看源代码]

[code_bimap_and_boost_property_map]

[endsect]

[endsect]

[section:dependencies Dependencies 依赖性]

Boost.Bimap is built on top of several Boost libraries. The rationale
behind this decision is keeping the Boost code base small by reusing
existent code. The libraries used are well-established and have been
tested extensively, making this library easy to port since all the hard
work has already been done. The glue that holds everything together is
Boost.MPL. Clearly Boost.MultiIndex is the heart of this library.\n
Boost.Bimap 是构建在几个 Boost 库之上的。这一决定的原理是要通过重用已有代码将 Boost 的代码基保持为最小。
被使用的库都是已确定和广泛测试的，以保证本库可以很容易地被移植，所有艰难的工作已经完成过了。
将所有东西粘合起来的是 Boost.MPL。显然 Boost.MultiIndex 则是本库的核心。

[table Boost Libraries needed by Boost.Bimap  Boost.Bimap所需要的Boost库
[[Name 名字][Description 说明][author 作者]]

[[ __BOOST_MULTI_INDEX__ ][
Containers with multiple STL-compatible access interfaces\n
具有多个STL兼容的访问接口的容器]
[Joaquín M López Muñoz]]

[[ __BOOST_MPL__ ][
Template metaprogramming framework of compile-time algorithms, sequences and metafunction classes\n
编译期算法、序列和元函数类的模板元编程框架]
[Aleksey Gurtovoy]]

[[ __BOOST_TYPE_TRAITS__ ][
Templates for fundamental properties of types.\n
类型基础属性的模板]
[John Maddock, Steve Cleary]]

[[ __BOOST_ENABLE_IF__ ][
Selective inclusion of function template overloads\n
函数模板重载的可选择包含]
[Jaakko Järvi, Jeremiah Willcock, Andrew Lumsdaine]]

[[ __BOOST_ITERATORS__ ][
Iterator construction framework, adaptors, concepts, and more.\n
迭代器构造框架、适配器、概念及其它]
[Dave Abrahams, Jeremy Siek, Thomas Witt]]

[[ __BOOST_CALL_TRAITS__ ][
Defines types for passing parameters.\n
为传递参数定义类型]
[John Maddock, Howard Hinnant]]

[[ __BOOST_STATIC_ASSERT__ ][
Static assertions (compile time assertions).\n
静态断言(编译期断言)]
[John Maddock]]

]

[table Optional Boost Libraries 可选的Boost库
[[Name 名字][Description 说明][author 作者][Purpose 目的]]

[[ __BOOST_SERIALIZATION__ ][
Serialization for persistence and marshalling\n
为持久性和重整进行序列化]
[Robert Ramey]
[Serialization support for bimap containers and iterators\n
支持 bimap 容器和迭代器的序列化]]

[[ __BOOST_ASSIGN__ ][
Filling containers with constant or generated data has never been easier\n
以最方便的方式用常数或生成的数据填充容器]
[Thorsten Ottosen]
[Help to fill a bimap or views of it\n
帮助填充一个 bimap 或其视图]]

[[ __BOOST_HASH__ ][
A TR1 hash function object that can be extended to hash user defined types\n
一个 TR1 散列函数对象，可以扩展至对用户自定义类型进行散列]
[Daniel James]
[Default hashing function\n
缺省的散列函数]]

[[ __BOOST_LAMBDA__ ][
Define small unnamed function objects at the actual call site, and more\n
就地定义小型匿名函数对象，及其它]
[from Jaakko Järvi, Gary Powell]
[Functors for modify, range, lower_bound and upper_bound\n
用于 modify, range, lower_bound 和 upper_bound 的函数对象]]

[[ __BOOST_RANGE__ ][
A new infrastructure for generic algorithms that builds on top of the new
iterator concepts\n
用于泛型算法的新的基础设施，建筑于新的迭代器概念之上]
[Thorsten Ottosen]
[Range based algorithms\n
基于区间范围的算法]]

[[ __BOOST_PROPERTY_MAP__ ][
Concepts defining interfaces which map key objects to value objects\n
定义了将键对象映射至值对象的接口的概念]
[Jeremy Siek]
[Integration with BGL\n
与 BGL 集成]]
]

[table Additional Boost Libraries needed to run the test-suite 运行测试套件所需的其它Boost库
[[Name 名字][Description 说明][author 作者]]

[[ __BOOST_TEST__ ][
Support for simple program testing, full unit testing, and for program execution monitoring.\n
支持简单的程序测试、全单元测试，以及程序运行监控。]
[Gennadiy Rozental]
]
]

[endsect]

[endsect]
