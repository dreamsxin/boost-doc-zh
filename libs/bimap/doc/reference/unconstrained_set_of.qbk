[/license

Boost.Bimap

Copyright (c) 2006-2007 Matias Capeletto

Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt or copy at
http://www.boost.org/LICENSE_1_0.txt)

]

[/ QuickBook Document version 1.4 ]

[section:unconstrained_set_of_reference unconstrained_set_of Reference  unconstrained_set_of参考]

[section Header "boost/bimap/unconstrained_set_of.hpp" synopsis]

    namespace boost {
    namespace bimaps {


    template< class KeyType >
    struct unconstrained_set_of;

    struct unconstrained_set_of_relation;


    } // namespace bimap
    } // namespace boost

[endsect]

[section unconstrained_set_of Views]

An unconstrained_set_of set view is a view with no constraints. The use
of these kind of view boost the bimap performance but the view can not
be accessed. An unconstrained view is an empty class.\n
unconstrained_set_of 视图是一个没有约束的视图。使用这种视图可以提升 bimap 的性能，但是该视图不能被访问。
一个无约束的视图就是一个空类。

    namespace boost {
    namespace bimaps {
    namespace views {

    template< ``['-implementation defined parameter list-]`` >
    class ``['-implementation defined view name-]``
    {
        // Empty view
    };

    } // namespace views
    } // namespace bimap
    } // namespace boost



In the case of a `bimap< unconstrained_set_of<Left>, ... >`\n
对于一个 `bimap< unconstrained_set_of<Left>, ... >`

In the set view:\n
在集合视图中： 

    typedef signature-compatible with relation< Left, ... > key_type;
    typedef signature-compatible with relation< Left, ... > value_type;

In the left map view:\n
在左映射视图中： 

    typedef  Left  key_type;
    typedef  ...   data_type;

    typedef signature-compatible with std::pair< Left, ... > value_type;

In the right map view:\n
在右映射视图中：

    typedef  ...  key_type;
    typedef  Left data_type;

    typedef signature-compatible with std::pair< ... , Left > value_type;



[#unconstrained_set_of_complexity_signature]

[section:complexity_signature Complexity signature 复杂度签名]

We adopt the scheme outlined in the
[link complexity_signature_explanation complexity signature section].
An unconstrained view can not be accessed by the user, but the
formulas to find the order of an operation for a bimap hold with
the following definitions.
The complexity signature of a `unconstrained_set_of` view is:\n
我们采用在 [link complexity_signature_explanation 复杂度签名] 一节 中给出的方式来描述。
一个无约束视图不可以被用户访问，不过以下公式可以看出带有此定义的 bimap 的各操作的开销。
`unconstrained_set_of` 视图的复杂度签名为：

* copying: `c(n) = 0`\n
  复制：`c(n) = 0` 
* insertion: `i(n) = 0`\n
  插入：`i(n) = 0`
* hinted insertion: `h(n) = 0`\n
  提示插入：`h(n) = 0`
* deletion: `d(n) = 0`\n
  删除：`d(n) = 0`
* replacement: `r(n) = 0`\n
  替换：`r(n) = 0`
* modifying: `m(n) = 0`\n
  修改：`m(n) = 0`

[endsect]

[section:serialization Serialization 序列化]

Views cannot be serialized on their own, but only as part of the
`bimap` into which they are embedded. In describing the additional
preconditions and guarantees associated to `list_of` views with respect to
serialization of their embedding containers, we use the concepts defined in the
`bimap` serialization section.\n
视图不能被它们自己序列化，只能作为它们所嵌的 `bimap` 的一部分。在描述与所嵌容器的 `list_of` 视图相关的其它前提条件和保证时，
我们使用在 `bimap` 序列化一节中所定义的概念。

[blurb [*Operation:] saving of a `bimap` b to an output archive
(XML archive) ar.\n
[*操作：]保存一个 `bimap` b 到一个输出存档(XML 存档) ar 中。]

* [*Requires:] No additional requirements to those imposed by the container.\n
  [*要求：]除了对容器的要求以外，没有其它要求。

[blurb [*Operation:] loading of a `bimap` b' from an input archive
(XML archive) ar.\n
[*操作：]从一个输入存档(XML 存档) ar 中导入一个 `bimap` b'。]

* [*Requires:] No additional requirements to those imposed by the container.\n
  [*要求：]除了对容器的要求以外，没有其它要求。


[endsect]
[endsect]

[endsect]


