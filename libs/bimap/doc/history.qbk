[/license

Boost.Bimap

Copyright (c) 2006-2007 Matias Capeletto

Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt or copy at
http://www.boost.org/LICENSE_1_0.txt)

]

[/ QuickBook Document version 1.4 ]

[section:history History 历史]

[section:the_long_path_from_code_project_to_boost The long path from Code Project to Boost 从代码项目到Boost的漫长路程 ]

[variablelist
[[2002 - bimap at Code Project 在代码项目中的bimap]
[
Joaquin Lopez Muñoz posted his first 
[@http://www.codeproject.com/vcpp/stl/bimap.asp#test_suite bimap library]
in 2002. Tons of users have been using it. He then
[@http://aspn.activestate.com/ASPN/Mail/Message/boost/1404881 asked the
list for interest] in his library in 2003. Luckily, there was a lot of
interest and Joaquin started to boostify the code. At some point all the
developers seemed to agree that, rather than a bidirectional map, it would
be better to work on an N-indexed set that contained Joaquin's library as a
particular case.\n
Joaquin Lopez Muñoz 在2002年贴出了他第一个 [@http://www.codeproject.com/vcpp/stl/bimap.asp#test_suite bimap 库]。
大量用户开始使用它。接着他在2003年 [@http://aspn.activestate.com/ASPN/Mail/Message/boost/1404881 出于兴趣询问了列表]。
幸运的是，引趣了很多人的兴趣，Joaquin 开始推进他的代码。在某个时刻，似乎所有用户都同意，
构建一个N个索引的集合而不是一个双向映射是更好的选择，它应该将 Joaquin 的库作为一个特例而包含在内。
]]

[[2003 - multiindex_set]
[
The library grew enormously and was ready for a formal review in
2003. At this point, the container was a lot more powerful, but
everything comes with a price and this new beast lacked the simplicity
of the original bimap.\n
这个库得到了非常大的成长，在2003年准备进行正式审查。这个时候，这个容器非常强大，
但任何事情都是有代价的，其缺点是没有了原来 bimap 的简单性。
]]

[[2004 - indexed_set]
[
In 2004, the formal review ended well for the new multi-indexed
container. This Swiss army knife introduced several new features, such
as non-unique indexes, hashed indices and sequenced indices. In the list
of improvements to the library, it was mentioned that a bidirectional
map should be coded in top of this container.\n
在2004年，对于多索引容器的正式审查结束了。这把瑞士军刀引入了几个新特性，如非唯一索引、散列索引和序列索引。
在这个库的改进列表中，提及了双向映射应该在这个容器的基础之上进行编码。
]]

[[2005 - multi_index_container]
[
Once in Boost, the library switched to the now familiar name
"Boost.MultiIndex". Late in 2004, it formally became a member of Boost.
Joaquin continued to enchance the library and added new features such as
composite keys and random-access indices.\n
进入 Boost 后，这个库换成现在的名字 "Boost.MultiIndex"。在2004年后期，它正式成为了 Boost 的成员。
Joaquin 继续对库进行加强，增加了象组合键、随机访问索引等新特性。
]]

[[2006 - Multi Index Specialized Containers SoC project]
[
In 2006, during the formal review of Boost.Property_tree, the need
for a bidirectional map container built on top of Boost.MultiIndex arose
again. Boost entered the Google SoC 2006 as a mentor organization at the
same time. Joaquin put himself forward as a mentor. He proposed to build
not only a bidirectional map, but a myriad multi-indexed specialized
containers. Matias Capeletto presented an application to code Boost.Misc
for the SoC and was elected, along with nine other students. Matias's and
Joaquin's SoC project ends with a working implementation of the bimap
library that was presented in an informal review. By the end of the year
the library was queued for a formal review.\n
2006 年，在 Boost.Property_tree 的正式审查过程中，基于 Boost.MultiIndex 构建一个双向映射容器的需求被再次提及。
同一时间，Boost 作为一个导师组织进入了 Google SoC 2006。Joaquin 推举自己成为导师。
他提议要构建的不应仅仅是一个双向映射，而且应该是一个多索引的专用容器。
Matias Capeletto 提出为 SoC 引入 Boost.Misc 并被推举，同时还有另个九个学生。
Matias 和 Joaquin 的 SoC 项目以 bimap 库的实现并进入正式审查而结束。到当年年底，该库等待进入正式审查。
]]

[[2007 - Boost.Bimap]
[
The formal review took place at the beggining of the year and Boost.Bimap 
was accepted in Boost.\n
正式审查在年初开始，Boost.Bimap 被接受进入 Boost。
]]
]

[endsect]

[section MultiIndex and Bimap]

This is the conversation thread that began during Boost.PropertyTree formal
review process. The review was very interesting and very deep topics were 
addressed. It is quite interesting and it is now part of this library history.
Enjoy!\n
这是在 Boost.PropertyTree 的正式审查过程中开始的一系列对话。这个审查非常有趣，而且谈及了非常深刻的话题。
它很有趣，而且现在已成为本库历史的一部分。希望你喜欢！


[*Marcin]
[:['
The biggest virtue of property_tree is easy to use interface.
If we try to make generic tree of it, it will be compromised.\n
property_tree 最大的优点是它易于使用的接口。如果我们将它变为泛化的树，它将会受到损害。
]]

[*Gennadiy]
[:['
IMO the same result (as library presents) could be achieved
just by using multi_index.\n
在我看来，只使用 multi_index 也能得到同样的效果(正如现在的库)。
]]

[*Marcin]
[:['
Could you elaborate more on that? I considered use of
multi_index to implement indexing for properties, but it only affected the
implementation part of library, not interface, and because I already had a
working, exception safe solution, I didn't see the reason to dump it and add
another dependency on another library.\n
你能否更详细地说明一下？我考虑过使用 multi_index 来实现属性的索引，但它只对库的实现部分有影响，
对接口是没有影响的，所以我已经开始着手了一个异常安全的方法，我看不到有什么理由放弃它并增加对另一个库的依赖。
]]

[*Gennadiy]
[:['
I mean why do I need this half baked property_tree as another
data structure? Property tree supports nothing in itself. It's just a data
structure. You have parsers that produce property tree out of different sources.
But you mat as well produce maps or something else. Here for example All that
I need to do to "implement" similar functionality as your property tree:\n
我的意思是，为什么我需要这个半成品的 property_tree 作为另一个数据结构？属性树本身并不支持什么。
它只是一个数据结构。你有解析器从不同来源生成属性树。但你倒不如生成映射或其它别的东西。
这有一个例子，我所需要做的就是"实现"和你的属性树所类似的功能：
]]

``
// Data structure itself 数据结构本身
template<typename ValueType,typename KeyType>
struct Node;
template<typename ValueType,typename KeyType>
struct ptree_gen {
    typedef std::pair<KeyType,Node<ValueType,KeyType> > mi_value;
    typedef multi_index_container<mi_value, indexed_by<...> > type;
};
template<typename ValueType,typename KeyType>
struct Node {
    ValueType v;
    ptree_gen<ValueType,KeyType>::type children;
};
// serialization support 序列化支持
template<class Archive,typename ValueType,typename KeyType>
void serialize(Archive & ar, Node<ValueType,KeyType>& n,
               const unsigned int version)
{
    ar & n.v;
    ar & n.children;
}
// some access methods 一些访问方法
template<typename ValueType,typename KeyType>
ValueType const&
get( string const& keys, ptree_gen<ValueType,KeyType>::type const& src )
{
    std::pait<string,string> sk = split( keys, "." );
    Node const& N = src.find( sk.first );
    return sk.second.empty() ? N.v : get( sk.second, N.children );
}
``

[:['
Use it like this:\n
它的用法如下：
]]

``
ptree_gen<string,string>::type PT;
boost::archive::text_iarchive ia( std::ifstream ifs("filename") );
ia >> PT;
string value = get( "a.b.c.d", PT );
``

[:['
Now tell me how property_tree interface is easier? And what is the value in
50k of Code you need to implement this data structure.\n
现在请告诉我，property_tree 的接口如何更易用？你要用50k代码来实现这个数据结构有什么价值。
]]

[*Thorsten]
[:['
Seriously Gennadiy, do you really see newbies writing
the code you just did?\n
认真的 Gennadiy，你真的看不出你刚才所做的是新手写的代码？
]]

[*Marcin]
[:['
What you just implemented is stripped down, bare bones version
of property_tree that, among other things, does not allow you to produce human
editable XML files. Now add more interface (aka get functions), add more
archives to serialization lib, add customization, add transparent
translation from strings to arbitrary types and vice versa. Spend some weeks
trying to get all the corner cases right, and then some more weeks trying to
smooth rough edges in the interface. Then write tests. Write docs. At the
end, I believe you will not get much less code than there is in the library
already. Maybe you get some savings by using multi_index instead of manual
indexing.\n
你刚才所写是剪下来的 property_tree 的骨干版本，不允许你生成用户可编辑的 XML 文件。
现在已增加了更多的接口(如 get 函数)，为序列化库增加了更多存档格式，增加客户化，增加了从字符串的透明转换及相反操作。
你先花了几周来让所有极端的案例正确运行，还有几周用于试图把接口边界变平滑。然后编写测试，编写文档。
最后，我相信你不会得到比本库更少的代码。也许你会用 multi_index 替代手工索引来节省一些代码。
]]
[:['
The reason why ptree does not use multi index is because implementation
existed long before I considered submitting to boost, probably before even I
knew of multi index existence. It was working well. Later, when I was
improving it during pre-review process, I seriously considered using
multi-index. But I decided it is not worth throwing everything out.\n
ptree 不使用 multi index 的原因是，因为在我考虑将它提交到 boost 之前很久该实现就已经存在了，甚至可能是在我知道有 multi index 之前。
它工作得很好。以后当我在预审查过程中对它进行改进时，我会认真考虑使用 multi-index。但我认为不值得抛弃所有一切。
]]
[:['
Although ptree has large interface with many functions modifying state of
the tree, it uses "single point of change" approach. Every insert eventually
goes through one function, which takes care of exception safety and keeping
index in sync with data. The same applies to erase. This function has 9
lines of code in case of insert, and (by coincidence) also 9 in case of
erase. By using multi index these functions would obviously be simplified,
maybe to 4 lines each. Net gain: 10 lines of code (out of several hundred in
ptree_implementation.hpp).\n
虽然 ptree 带有很大的接口，它有很多函数来修改树的状态，它使用了 "单点修改" 方法。
每个插入最终都通过一个函数完成，该函数考虑了异常安全性，并保持数据和索引的同步。
对于删除也一样。这个函数有9行代码用于插入，同样也有9行用于删除。通过使用 multi index，这些函数可以明显简化，也许每个只要4行。
净收益：10行代码(相对于 ptree_implementation.hpp 的几百行代码)。
]]
[:['
I'm aware that there are performance gains to be reaped as well, but at that
time I was rather focusing on getting the interface right.\n
我知道还可以获得性能的提升，但是当时我只关注于接口的正确性。
]]

[*Dave]
[:['
That's perfectly reasonable, but (through no fault of yours) 
it misses the point I was trying to make.  I guess I should have said,
"...that demonstrates it to be the best implementation."\n
这是完全合理的，但是(这不是你的错)它误会了我的观点。我想我应该说, "...这表示它是最好的实现。"
]]
[:['
All I'm saying is that the extent to which a Boost library
implementation should leverage other Boost libraries is not a question
that can always be decided based on following simple guidelines, and
that if this library is accepted, it's worth revisiting your decision.\n
我要说的是，一个 Boost 库的实现的程度应该促进其它的 Boost 库，这不是一个问题，
它应该基于以下的简单指引来决定，如果这个库是被接受的，就值得重新审视你的决定。
]]

[*Thorsten]
[:['
I think it is important to focus on the interface in 
the review, but I also see several benefits of an implementation that builds on
Boost.MultiIndex:'\n
我想在审查中，重要的是关注接口，但是我也看到了用 Boost.MultiIndex 来构建的几个优点：
]]
[:['- fewer bugs like the one Joaquin found\n
- 更少的缺陷，象 Joaquin 发现的那个]]
[:['- better space efficiency\n
- 更好的空间效率]]
[:['- exception-safety guarantees are immediately full-filled (I haven't
looked, but I suspect that there are several bugs in this area)\n
- 异常安全性保证可以立即满足(我还没有看过，但我怀疑在这方面存在一些缺陷)]]

[*Daniel]
[:['
Multi_index supports everything a bimap would, but its
interface is more cumbersome. I for one won't use a W3DOM-like library
if we get one, but I would happily use property_tree. I've also only
used multi_index once, and that was to use it as a bidirectional map.
Property_tree covers other areas as well as being a potential subset of
an XML library, but I still hold there is value in such a subset.\n
Multi_index 支持 bimap 所要的任何东西，但它的接口太过笨重。我不会使用一个象 W3DOM 那样的库，
但是我会很高兴使用 property_tree。我也只用过 multi_index 一次，是把它用作一个双向映射。
Property_tree 涵盖了其它方面，并作为一个 XML 库的潜在子集，但我仍然认为这样的子集是有价值的。
]]

[*Boris]
[:['
I haven't used program_options yet. But if I understand
correctly both libraries seem to support storing and accessing data with
strings that might describe some kind of hierarchy. This seems to be the core
idea of both libraries - is this correct?\n
我还没有用过 program_options。但如果我的理解是正确的，这两个库似乎都支持以可能描述了某种层次的字符串来保存和访问数据。
这似乎是这两个库的核心理念 - 这是正确的吗？
]]
[:['
Then it wouldn't matter much what container is used. However a generic tree
which can store data hierarchically probably makes most sense. If I
understand correctly both libraries could make use of such a class?\n
那么它并不比已经使用的容器多些什么？一般的树都可以按层次存储数据，可能更有意义。如果我理解得正确的话，是否两个库都可以利用这样的类？
]]

[*Marcin]
[:['
I think generic tree container is material for another library.
Whether property_tree should be based on it or not is a matter of internal
implementation, and generally of little interest to users. The biggest value
of property_tree is in its easy to use interface, that should not be
compromised, if at all possible. I have been already reassured in this view
by quite many people who took their time to review the library.\n
我觉得通用的树容器是另一个库的原材料。property_tree 是否应该基于它，是一个内部实现的问题，通常用户不感兴趣。
property_tree 的最大价值是它容易使用的接口，如果可能的话，这不应被损害。我已经从花时间来审查本库的多数人中得到保证。
]]

[*Boris]
[:['
I was trying to see the big picture: I rather prefer a C++
standard based on a few well-known concepts like containers, iterators,
algorithms etc. instead of having a C++ standard with hundreds of components 
which are tailored for specific needs, collaborate with only a handful of other
components and think they provide an easy-to-use interface while all the
easy-to-use interfaces make the whole standard less easy-to-use.\n
我尝试从大的方面来看：我宁愿要一个基于少量著名概念如容器、迭代器、算法等的C++标准，
而不要一个有数百个特定需要的组件、只有少数组件可以合作的C++标准，每个组件应提供易用的接口而所有易用的接口可以使整个标准易于使用。
]]
[:['
That said I have used your property tree library myself to read and write a
configuration file. It was indeed very easy to use. However it would have
been even easier if it was something I had known before like eg. an
iterator. For now I will definitely use your property tree library but would
appreciate if existing concepts were reused many C++ developers are familiar
with. My opinion is that your library should be a part of Boost but should
be more generalized in the future.\n
我用过你的 property tree 库来读写一个配置文件。它确实很容易使用。但是，如果它具有我已知的某些东西，如迭代器，的话，会更易用。
现在，我一定会使用你的 property tree 库，但是如果能够复用已有的、为广大C++开发者所熟悉的概念，就更好了。
我的意见是，你的库应该成为 Boost 的一部分，但是在以后应该更为通用。
]]

[*Thorsten]
[:['
Well, I think we need both. Boost.MultiIndex is a great 
library and can do all kinds of wonderful things. But I would still like to see
a bidirectional map (boost::bimap) written as a wrapper around it to
get an easy and specialized interface.\n
好的，我想我们两个都需要。Boost.MultiIndex 是一个强大的库，可以做各种奇妙的事情。
但是我也想看到一个双向映射(boost::bimap)，作为它的一个包装器，具有易用和特化的接口。
]]

[*Pavel]
[:['
Bimap is available in libs/multi-index/examples/bimap.cpp.\n
Bimap 已在 libs/multi-index/examples/bimap.cpp 下。
]]

[*Thorsten]
[:['
Right, but the real value comes when somebody designs a nice
STL-like interface and write docs etc, at least that was my point.\n
好的，但只有当有人设计了一个类似于STL的接口并且写出文档时，才有真正的价值，至少我是这么认为。
]]

[*Dave]
[:['
IMO Thorsten is exactly right.  This is precisely the sort of 
thing that could be added to the library as part of its ongoing maintenance
and development (without review, of course).\n
在我看来，Thorsten 是对的。正是这些东西可以加入到库中，作为维护和开发的一部分(当然无需审查)。
]]

[*Joaquin]
[:['
Thorsten, we have talked about this privately in the past, 
but I feel like bringing it to the list in the hope of getting the attention 
of potential contributors:\n
Thorsten, 过去我们已经私下讨论这一点，我想把它放到列表中，希望得到潜在的贡献者的关注：
]]
[:['
There are some data structures buildable with B.MI which are regarded as
particularly useful or common, like for instance the bidirectional map or
bimap. A lean and mean implementation is provided in the aforementioned
example, but certainly a much carefully crafted interface can be provided
keeping B.MI as the implementation core: operator\[\], selection of
1-1/1-N/N-1/N-N variants, hashing/ordering, etc.\n
有些可以用 B.MI 构建的数据结构被认为是特别有用或通用的，例如双向映射或 bimap。
在上述例子中提供了一个精简的实现，但是无疑，可以提供一个精心制作的接口并以 B.MI 作为实现核心：
operator\[\], 1-1/1-N/N-1/N-N 多种选择，散列/排序，等等。
]]
[:['
I'm afraid I don't have the time to pursue this, as the current roadmap for
core features of B.MI is taking all the spare time I can dedicate to the
library. For this reason, I would love to see some volunteer jumping in who
can develop this and other singular containers using B.MI (a cache container
comes to mind) and then propose the results here either as a stand alone 
library of as part of B.MI --I'd prefer the former so as to keep the size
of B.MI bounded.\n
我恐怕没有时间去追求这一点，因为当前的 B.MI 核心特性的路线图已经占据了我可以奉献给本库的所有空闲时间。
因此，我希望看到有一些志愿者可以参与开发本库和其它使用 B.MI 的特定容器(正在考虑一个缓冲容器)，然后给出结果，
无论是作为一个独立的库还是 B.MI 的一部分 -- 我宁愿选择前者，以保持 B.MI 的边界大小。
]]
[:['
If there's such a volunteer I can provide her with some help/mentoring. I also
wonder whether this is a task suitable to be proposed for Google Summer of 
Code.\n
如果有这样的志愿者，我可以提供一些帮助/指导。我想知道这个任务是否适合作为 Google Summer of Code 的提议。
]]

[*Thorsten]
[:['
I think it would be good for SOC. All the really hard things
are taken care of by B.MI, and so it seems reasonable for a student to be able
to fill in the details.\n
我想它作为 SOC 不错。所有较困难的事情由 B.MI 负责，所以它看来比较适合让学生来填补细节。
]]

[*Dave]
[:['
Great!\n
不错！
]]

[*Jeff]
[:['
Please write a proposal!\n
请写一个建议书！
]]

[*Joaquin]
[:['
I've just done so:\n
我已经写了一个：
]]

[blurb *Specialized containers with Boost.MultiIndex 由Boost.MultiIndex构建的专用容器*

    *Introduction 简介*

    Boost.MultiIndex allows the construction of complex data structures involving
    two or more indexing mechanisms on the same set of elements. Out of the
    unlimited range of possible data structures specifiable within
    Boost.MultiIndex, some particular configurations arise recurrently:\n
    Boost.MultiIndex 可以构造出复杂的数据结构，在同一组元素中包含两个或以上的索引机制。
    虽然在 Boost.MultiIndex 中可以指定不受限制的各种可能的数据结构，但是有些特定的配置经常反复出现：

    *a.* A bidirectional map or bimap is a container of elements of type pair<T,Q>
    where fast look up is provided both for the T and the Q field,
    in contrast with a regular STL map which only allows for fast look up on T.\n
    *a.* 双向映射或 bimap 是一种元素类型为 pair<T,Q> 的容器，它提供了按 T 和 Q 字段的快速查找，
    而普通的 STL map 只允许按 T 进行快速查找。

    *b.* An MRU (most recently used) list keeps the n last referenced elements:
    when a new item is inserted and the list has reached its maximum length, the
    oldest element is erased, whereas if an insertion is tried of a preexistence
    element, this gets promoted to the first position. MRU lists can be used to
    implement dynamic caches and the kind of behavior exhibited by programs
    featuring a "Recent files" menu command, for instance.\n
    *b.* MRU (最近最常使用)列表可以保持最后引用的 n 个元素：当插入一个新元素而列表已达到最大长度时，
    最旧的元素被删除，但是如果插入的是已存在的元素，则将它提升到第一个位置。
    MRU 列表可用于实现动态缓冲以及象程序中的"最近使用的文件"此类功能。

    Although Boost.MultiIndex provides the mechanisms to build these common structures,
    the resulting interface can be cumbersome and too general in comparison with
    specialized containers focusing on such particular structures.\n
    虽然 Boost.MultiIndex 提供了构建这些常用结构的机制，但是所得到的接口非常笨重，与这些特定容器所关注的这些特定结构相比也过于通用。

    *Goal 目标*

    To write a library of specialized containers like the ones described above, using
    Boost.MultiIndex as the implementation core. Besides bimap and MRU list, the student
    can also propose other specialized containers of interest in the community. It is
    expected that the library meets the standards of quality required by Boost for an
    eventual inclusion in this project, which implies a strong emphasis on interface
    design, documentation and unit testing; the mentor will be guiding the student
    through the complete cycle from specification and requirements gathering to
    documentation and actual coding. The final result of the project must then contain:\n
    编写一个如上所述的专用容器库，用 Boost.MultiIndex 作为实现核心。除了 bimap 和 MRU 列表以外，学生还可以提议其它感兴趣的专用容器。
    我们希望这个库符合 Boost 所要求的质量标准，最后有可能将该库纳入 Boost，这意味着对接口设计、文档和单元测试的特别强调；
    导师将在整个开发周期中指导学生，从规格和需求收集到文档和具体编码。本项目的最终结果必须包含：

    *a.* Source code following
    [@http://boost.org/more/lib_guide.htm#Guidelines Boost programming guidelines].\n
    *a.* 符合 [@http://boost.org/more/lib_guide.htm#Guidelines Boost编程指引] 的源代码。

    *b.* User documentation. Requirements on the format are loose, though the
    [@http://www.boost.org/tools/quickbook/doc/html/index.html QuickBook] format is
    gaining acceptance within Boost.\n
    *b.* 用户文档。对格式的要求较松，不过 [@http://www.boost.org/tools/quickbook/doc/html/index.html QuickBook] 
    格式在 Boost 内部是广为接受的。

    *c.* Complete set of unit tests powered by
    [@http://boost.sourceforge.net/boost-build2/ Boost Build System V2].\n
    *c.* 可用于 [@http://boost.sourceforge.net/boost-build2/ Boost Build System V2] 的完整的单元测试集。

    *Requirements 要求*

    *a.* Intermediate-to-high level in C++, with emphasis in generic programming
    (templates).\n
    *a.* C++水平为中至高级，在泛型编程(模板)方面较强。

    *b.* Knowledge of the STL framework and design principles. Of course, knowledge
    of Boost in general and Boost.MultiIndex in particular is a big plus.\n
    *b.* 熟悉STL框架和设计原理。当然熟悉 Boost 尤其是 Boost.MultiIndex 就更好了。

    *c.* Acquaintance with at least two different C++ programming environments.\n
    *c.* 至少熟悉两个不同的C++编程环境。

    *d.* Some fluency in the English language; subsequent reviews of the documentation
    can help smooth rough edges here, though.\n
    *d.* 流利的英语；不过后续的文档审查可以有所帮助。

    *e.* A mathematical inclination and previous exposure to a formal Algorithms course
    would help very much.\n
    *e.* 爱好数学，以前接触过正式的算法课程会有很大帮助。

    *f.* A craving for extreme quality work.\n
    *f.* 追求高质量的工作。

    *Benefits for the student 对学生的好处*

    The student taking on this project will have the opportunity to learn the complete
    process of software production inside a highly regarded C++ open source institution,
    and even see her work included in Boost eventually. The completion of the project
    involves non-trivial problems in C++ interface design and so-called modern C++
    programming, high quality user documentation and unit testing. The student will
    also learn, perhaps to her surprise, that most of the time will be spent gathering
    and trying ideas and, in general, thinking, rather than writing actual code.\n
    参与这一项目的学生，将有机会学习在一个高度重视C++开源的机构中进行软件生产的完整过程，甚至最终会在 Boost 中见到自己的作品。
    完成这个项目包括在C++接口设计中的一些不简单的问题，以及所谓的现代C++编程，还有高质量的用户文档和单元测试。
    学生可能会惊讶，他还将学到大部分时间将用于收集和尝试各种思路，通常来说是思考而不是实际编写代码。
]

[*Matias]
[:['
I am planning to submit an application to SoC. I will love to make real
the specialized containers you mention and try to include some useful others.\n
我正计划将它提交到 SoC. 我希望你所提到的专用容器成为真实，并尝试加入一些有用的其它东西。
]]

[:[^
And then... after long hours of coding (and fun) this library saw the light.\n
然后... 在长时间的编码(和乐趣)后，这个库看到了光明。
]]

[:__BOOST_BIMAP_LOGO__]

[endsect]

[endsect]
