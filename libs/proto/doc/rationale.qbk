[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:rationale Appendix C: Rationale 附录C：基本原理]

[/==================================================]
[section:static_initialization Static Initialization 静态初始化]
[/==================================================]

Proto expression types are PODs (Plain Old Data), and do not have constructors. They are brace-initialized, as follows:\n
Proto 表达式类型是POD(旧的平面数据)，不带构造函数。它们可以用花括号来初始化，如下：

    terminal<int>::type const _i = {1};

The reason is so that expression objects like `_i` above can be ['statically 
initialized]. Why is static initialization important? The terminals of many domain-
specific embedded languages are likely to be global const objects, like `_1` and 
`_2` from the Boost Lambda Library. Were these object to require run-time 
initialization, it might be possible to use these objects before they are 
initialized. That would be bad. Statically initialized objects cannot be misused 
that way.\n
其原因是，这样象上面的 `_i` 这样的表达式对象就可以['被静态初始化]。为什么静态初始化这么重要？
许多领域专用嵌入式语言的终结符很可能是全局的常量对象，如 Bosot Lambda 库中的 `_1` 和 `_2`。
如果这些对象要在运行期初始化的话，对象就可能会在初始化之前被使用。这是有问题的。
静态初始化的对象不会发生这种问题。

[endsect]

[/=========================================================]
[section:preprocessor Why Not Reuse MPL, Fusion, et cetera? 为何不重用 MPL, Fusion 等？]
[/=========================================================]

Anyone who has peeked at Proto's source code has probably wondered, "Why all the 
dirty preprocessor gunk? Couldn't this have been all implemented cleanly on top of 
libraries like MPL and Fusion?" The answer is that Proto could have been 
implemented this way, and in fact was at one point. The problem is that template 
metaprogramming (TMP) makes for longer compile times. As a foundation upon which 
other TMP-heavy libraries will be built, Proto itself should be as lightweight as 
possible. That is achieved by prefering preprocessor metaprogramming to template 
metaprogramming. Expanding a macro is far more efficient than instantiating a 
template. In some cases, the "clean" version takes 10x longer to compile than the 
"dirty" version.\n
任何一个看过Proto源代码的人都可能会觉得奇怪，"为什么到处是难看的预处理器语句？
不能使用象MPL和Fusion这样的库来实现得更漂亮吗？"答案是，Proto可以用这些方法来实现，
事实上也曾经如此。问题是模板元编程(TMP)需要较长的编译时间。作为其它重度使用TMP的库的构建基础， 
Proto本身应该尽可能轻量。这需要通过预处理器元编程而不是模板元编程来实现。
展开一个宏要比实例化一个模板高效得多。在某些情形下，"漂亮"版要比"难看"版多花10倍以上的编译时间。

The "clean and slow" version of Proto can still be found at 
http://svn.boost.org/svn/boost/branches/proto/v3. Anyone who is interested can 
download it and verify that it is, in fact, unusably slow to compile. Note that 
this branch's development was abandoned, and it does not conform exactly with 
Proto's current interface.\n
"漂亮且慢"的Proto版本仍然可以在 http://svn.boost.org/svn/boost/branches/proto/v3 中找到。
有兴趣的读者可以下载它，并且看看它在编译时是否不一般地慢。注意，这一分支的开发已经不再继续，
它并不完全符合当前的Proto接口。

[endsect]

[endsect]
