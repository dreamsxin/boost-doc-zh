[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:perface Preface 前言]

[:["There are more things in heaven and earth, Horatio, than are dreamt of in your 
    philosophy.]]
[:[*['-- William Shakespeare]]]

[heading Description 概述]

Proto is a framework for building Domain Specific Embedded Languages in C++. It provides tools for constructing, type-checking, transforming and executing ['expression templates][footnote See [@http://www.osl.iu.edu/~tveldhui/papers/Expression-Templates/exprtmpl.html Expression Templates]].
More specifically, Proto provides:\n
Proto 是一个在C++中构建专用领域嵌入式语言的框架。它提供了构造、类型检查、转化和执行 ['表达式模板] 的工具。具体地说，Proto 提供了：

* An expression tree data structure.\n
  一个表达式树的数据结构。
* A mechanism for giving expressions additional behaviors and members.\n
  一个为给定的表达式添加行为和成员的机制。
* Operator overloads for building the tree from an expression.\n
  从一个表达式构建表达式树所需的操作符重载。
* Utilities for defining the grammar to which an expression must conform.\n
  对表达式必须遵守的语法进行定义的工具。
* An extensible mechanism for immediately executing an expression template.\n
  一个可扩展的机制，用于立即执行一个表达式模板。
* An extensible set of tree transformations to apply to expression trees.\n
  一个应用于表达式树的，可扩展的树转化操作集。

[heading Motivation 动机]

Expression Templates are an advanced technique that C++ library developers use to define embedded mini-languages that target specific problem domains. The technique has been used to create efficient and easy-to-use libraries for linear algebra as well as to define C++ parser generators with a readable syntax. But developing such a library involves writing an inordinate amount of unreadable and unmaintainable template mumbo-jumbo. Boost.Proto eases the development of [link boost_proto.users_guide.glossary.dsel domain-specific embedded languages (DSELs)]. Use Proto to define the primitives of your mini-language and let Proto handle the operator overloading and the construction of the expression parse tree. Immediately evaluate the expression tree by passing it a function object. Or transform the expression tree by defining the grammar of your mini-language, decorated with an assortment of tree transforms provided by Proto or defined by you. Then use the grammar to give your users short and readable syntax errors for invalid expressions! No more mumbo-jumbo -- an expression template library developed with Proto is declarative and readable.\n
表达式模板是一种高级技术，C++库开发者所使用它来定义以某个特定问题域为目标的嵌入式小型语言。该技术已被用于创建高效且易用的线性代数库，
还被用于以可读的语法来定义 C++ 分析器的生成器。但是，开发这样一个库需要编写大量难以阅读且难以维护的模板。Boost.Proto 使得 
[link boost_proto.users_guide.glossary.dsel 专用领域嵌入式语言(DSELs)] 的开发变得容易。使用 Proto 来定义你的小型语言的基本组件，
并让 Proto 处理操作符的重载和表达式分析树的构造。通过将表达式树传递给一个函数对象，可以立即对它进行求值。
或者通过定义定义你的小型语言的语法，再以由 Proto 所提供的或由你定义的各种各样的树变换操作来对表达式树进行变换。然后，
使用该语法给你的用户带来对无效表达式的简短易读的语法错误提示！没有更多的繁文缛节了 -- 
用 Proto 开发出来的表达式模板库是具有宣示性和可读性的。

In short, Proto is a DSEL for defining DSELs.\n
简而言之，Proto 是一个用于定义 DSELs 的 DSEL。

[/====================================]
[heading How to Use This Documentation 如何使用本文档]
[/====================================]

This documentation makes use of the following naming and formatting conventions.\n
本文档使用了以下命名约定和格式约定。

* Code is in `fixed width font` and is syntax-highlighted.\n
  代码采用 `fixed width font` 并具有语法高亮。
* Replaceable text that you will need to supply is in [~italics].\n
  要由你提供的可替换文本采用 [~italics]。
* If a name refers to a free function, it is specified like this:
  `free_function()`; that is, it is in code font and its name is followed by `()` 
  to indicate that it is a free function.\n
  如果某个名字代表一个普通函数，则写为：`free_function()`; 即采用代码的字体并在名字后跟 `()` 以表示它是一个普通函数。
* If a name refers to a class template, it is specified like this:
  `class_template<>`; that is, it is in code font and its name is followed by `<>` 
  to indicate that it is a class template.\n
  如果某个名字代表一个类模板，则写为：`class_template<>`; 即采用代码的字体并在名字后跟 `<>` 以表示它是一个类模板。
* If a name refers to a function-like macro, it is specified like this: `MACRO()`;
  that is, it is uppercase in code font and its name is followed by `()` to
  indicate that it is a function-like macro. Object-like macros appear without the 
  trailing `()`.\n
  如果某个名字代表一个类似于函数的宏，则写为：`MACRO()`; 即采用代码字体的大写并在名字后跟 `()` 以表示它是一个类似于函数的宏。
  类似于对象的宏则没有后面的 `()`。 
* Names that refer to /concepts/ in the generic programming sense are
  specified in CamelCase.\n
  代表泛型编程意义上的 /概念/ 的名字则以 CamelCase 表示。

[note In addition, notes such as this one specify non-essential information that
provides additional background or rationale.\n
此外，象这样的备注则用于指定非必要的信息，以提供额外的背景或原理的说明。]

Finally, you can mentally add the following to any code fragments in this document:\n
最后，在本文档中的所有代码片断中，你都可以认为已经增加了以下代码：

    // Include all of Proto  包含Proto的所有
    #include <boost/proto/proto.hpp>

    // Create some namespace aliases  创建一些名字空间别名
    namespace mpl = boost::mpl;
    namespace fusion = boost::fusion;
    namespace proto = boost::proto;

    // Allow unqualified use of Proto's wildcard pattern
    // 允许不加限定词地使用Proto的通配符模式
    using proto::_;

[endsect]
