[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[/================================]
[section:naming Naming Conventions 命名约定]
[/================================]

Proto is a large library and probably quite unlike any library you've used
before. Proto uses some consistent naming conventions to make it easier to
navigate, and they're described below.\n
Proto 是一个大型库，可能与你所使用过的其它库很不一样。Proto 使用了一些一致的命名约定，
使得它更容易操纵，以下对这些命名约定进行说明。

[/================]
[heading Functions 函数]
[/================]

All of Proto's functions are defined in the `boost::proto` namespace. For
example, there is a function called `value()` defined in `boost::proto` that
accepts a terminal expression and returns the terminal's value.\n
所有的 Proto 函数定义在 `boost::proto` 命名空间内。例如，有一个名为 `value()` 
的函数被定义在 `boost::proto` 中，它接受一个终结符表达式并返回该终结符的值。 

[/====================]
[heading Metafunctions 元函数]
[/====================]

Proto defines /metafunctions/ that correspond to each of Proto's free functions.
The metafunctions are used to compute the functions' return types. All of
Proto's metafunctions live in the `boost::proto::result_of` namespace and
have the same name as the functions to which they correspond. For instance,
there is a class template `boost::proto::result_of::value<>` that you can
use to compute the return type of the `boost::proto::value()` function.\n
Proto 为每一个 Proto 普通函数定义了一个相对应的 /元函数/。这些元函数用于计算该函数的返回类型。
所有的 Proto 元函数位于 `boost::proto::result_of` 名字空间内，并具有与相对应的函数相同的名字。
例如，有一个类模板 `boost::proto::result_of::value<>`，你可以用它来计算 `boost::proto::value()` 函数的返回类型。

[/=======================]
[heading Function Objects 函数对象]
[/=======================]

Proto defines /function object/ equivalents of all of its free functions. (A
function object is an instance of a class type that defines an `operator()`
member function.) All of Proto's function object types are defined in the
`boost::proto::functional` namespace and have the same name as their
corresponding free functions. For example, `boost::proto::functional::value`
is a class that defines a function object that does the same thing as the
`boost::proto::value()` free function.\n
Proto 为其每一个普通函数定义了等价的 /函数对象/(函数对象是一个定义了 `operator()` 
成员函数的类类型的一个实例)。所有的 Proto 函数对象类型都定义在 `boost::proto::functional` 
名字空间内，并具有与相对应的普通函数相同的名字。例如，`boost::proto::functional::value` 
是一个类，它定义了一个函数对象，该函数对象与 `boost::proto::value()` 普通函数完成相同的事情。

[/===========================]
[heading Primitive Transforms 基本变换]
[/===========================]

Proto also defines /primitive transforms/ -- class types that can be used
to compose larger transforms for manipulating expression trees. Many of
Proto's free functions have corresponding primitive transforms. These live
in the `boost::proto` namespace and their names have a leading underscore.
For instance, the transform corresponding to the `value()` function is
called `boost::proto::_value`.\n
Proto 还定义了一些 /基本变换/ -- 可用于组成操纵表达式树所用的较大型变换的类类型。
多数的 Proto 普通函数都有相对应的基本变换。这些变换位于 `boost::proto` 名字空间内，
它们的名字以下划线打头。例如，与 `value()` 函数相对应的变换名为 `boost::proto::_value`。

The following table summarizes the discussion above:\n
下表概括了以上的说明：

[table Proto Naming Conventions  Proto命名约定
  [[Entity 实体]           [Example 例子]                            ]
  [[Free Function 普通函数]    [`boost::proto::value()`]            ]
  [[Metafunction 元函数]     [`boost::proto::result_of::value<>`] ]
  [[Function Object 函数对象]  [`boost::proto::functional::value`]  ]
  [[Transform 变换]        [`boost::proto::_value`]             ]
]

[endsect]

