[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[/=========================================]
[section:resources Background and Resources 背景和资源]
[/=========================================]

Proto was initially developed as part of _xpressive_ to simplify the job of 
transforming an expression template into an executable finite state machine capable 
of matching a regular expression. Since then, Proto has found application in the 
redesigned and improved Spirit-2 and the related Karma library. As a result of 
these efforts, Proto evolved into a generic and abstract grammar and tree 
transformation framework applicable in a wide variety of DSEL scenarios.\n
起初，Proto是作为 _xpressive_ 的一部分来开发的，目的是简化把一个表达式模板转换为一个与正则表达式能力相当的、
可执行的有限状态机的工作。此后，我们发现Proto也可以在对 Spirit-2以及相关的Karma库的重新设计和改进中得以应用。
由于这些努力，Proto进化为一个通用且抽象的语法及树变换框架，可以应用于广泛的DSEL设计与开发中。

The grammar and tree transformation framework is modeled on Spirit's grammar and 
semantic action framework. The expression tree data structure is similar to Fusion 
data structures in many respects, and is interoperable with Fusion's iterators and 
algorithms.\n
这个语法和树变换的框架模仿了Spirit的语法和语义动作框架。其中的表达式树结构在许多方面类似于Fusion数据结构，
并且可以与Fusion的迭代器及算法相互操作。

The syntax for the grammar-matching features of `proto::matches<>` is inspired by 
MPL's lambda expressions.\n
用于 `proto::matches<>` 的语法匹配特性的语法，其灵感来自于MPL的lambda表达式。

The idea for using function types for Proto's composite transforms is inspired by Aleksey Gurtovoy's
[@http://lists.boost.org/Archives/boost/2002/11/39718.php "round" lambda] notation.\n
用函数类型来进行Proto的变换组合这一思想，其灵感来自于Aleksey Gurtovoy的 
[@http://lists.boost.org/Archives/boost/2002/11/39718.php "round" lambda] 记号。 

[/=================]
[heading References 参考文献]
[/=================]

[:[#boost_proto.users_guide.resources.SYB]Ren, D. and Erwig, M. 2006. A generic recursion toolbox for Haskell or: scrap your boilerplate systematically. In ['Proceedings of the 2006 ACM SIGPLAN Workshop on Haskell] (Portland, Oregon, USA, September 17 - 17, 2006). Haskell '06. ACM, New York, NY, 13-24. DOI=[@http://doi.acm.org/10.1145/1159842.1159845]]

[/======================]
[heading Further Reading 更进一步的读物]
[/======================]

A technical paper about an earlier version of Proto was accepted into the
[@http://lcsd.cs.tamu.edu/2007/ ACM SIGPLAN Symposium on Library-Centric Software 
Design LCSD'07], and can be found at [@http://lcsd.cs.tamu.edu/2007/final/1/1_Paper.pdf].
The tree transforms described in that paper differ from what exists today.\n
有关Proto早期版本的一篇技术论文被收录在 [@http://lcsd.cs.tamu.edu/2007/ ACM SIGPLAN Symposium on Library-Centric Software 
Design LCSD'07]，可以在 [@http://lcsd.cs.tamu.edu/2007/final/1/1_Paper.pdf] 中找到。在该论文中所描述的树变换与现在的实现有所不同。

[endsect]
