[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[/===============]
[section:glossary Glossary 术语]
[/===============]

[def _T_ [~T]]

[template anchor[x] '''<anchor id="boost_proto.users_guide.glossary.'''[x]'''" />''']

[variablelist
  [ [ [anchor callable_transform] callable transform 可调用变换]
      [A transform of the form `R(A0,A1,...)` (i.e., a function type) where 
       `proto::is_callable<R>::value` is `true`. `R` is treated as a polymorphic 
       function object and the arguments are treated as transforms that yield the 
       arguments to the function object.\n
       一种形如 `R(A0,A1,...)` (即一个函数类型)的变换，其中 `proto::is_callable<R>::value` 为 `true`。
       `R` 被视为一个多态函数对象，其它参数则被视为产生该函数对象各个实参的变换。] ]
  [ [ [anchor context] context 上下文]
      [In Proto, the term /context/ refers to an object that can be passed, along 
       with an expression to evaluate, to the `proto::eval()` function. The context 
       determines how the expression is evaluated. All context structs define a 
       nested `eval<>` template that, when instantiated with a node tag type (e.g., 
       `proto::tag::plus`), is a binary polymorphic function object that accepts an 
       expression of that type and the context object. In this way, contexts
       associate behaviors with expression nodes.\n
       在Proto中，术语/上下文/是指这样一个对象，它可以和一个要求值的表达式一起，被传递给 `proto::eval()` 函数。
       上下文决定了表达式如何被求值。所有上下文结构都定义了一个嵌套的 `eval<>` 模板，当用一个节点标签类型
       (如 `proto::tag::plus`)对该模板进行实例化时，它是一个二元多态函数对象。接受一个相关类型的表达式以及该上下文对象。
       上下文正是以此种方式将行为与表达式节点关联起来。] ]
  [ [ [anchor domain] domain 领域]
      [In Proto, the term /domain/ refers to a type that associates expressions 
       within that domain with a /generator/ for that domain and optionally a 
       /grammar/ for the domain. Domains are used primarily to imbue expressions 
       within that domain with additional members and to restrict Proto's operator 
       overloads such that expressions not conforming to the domain's grammar are 
       never created. Domains are empty structs that inherit from
       `proto::domain<>`.\n
       在Proto中，术语/领域/是指这样一个类型，它以该领域的一个/生成器/以及一个可选的该领域/语法/，将表达式关联至该领域内。
       领域主要用于通过为表达式增加某些成员，以及限制某些Proto的操作符重载以令不符合该领域语法的表达式不可创建，
       来将表达式注入到领域中。领域是继承自 `proto::domain<>` 的空结构。]]
  [ [ [anchor dsel] domain-specific embedded language 领域专用嵌入式语言]
      [A domain-specific language implemented as a library. The language in which 
       the library is written is called the "host" language, and the language 
       implemented by the library is called the "embedded" language.\n
       一种领域专用语言被实现为一个库。编写该库的语言称为"宿主"语言，而该库所实现的语言则称为"嵌入"语言。]]
  [ [ [anchor dsl] domain-specific language 领域专用语言]
      [A programming language that targets a particular problem space by providing 
       programming idioms, abstractions and constructs that match the constructs 
       within that problem space.\n
       针对特定问题空间的一种编程语言，提供编程惯用法、抽象和结构，与问题空间中的结构相匹配。]]
  [ [ [anchor expression] expression 表达式]
      [In Proto, an /expression/ is a heterogeneous tree where each node is either 
       an instantiation of `boost::proto::expr<>` or some type that is an extension 
       (via `boost::proto::extends<>` or `BOOST_PROTO_EXTENDS()`) of such an 
       instantiation.\n
       在Proto中，一个/表达式/是一棵异构树，其中每个节点，要么是 `boost::proto::expr<>` 的一个实例，
       要么是此种实例的一个扩展类型(通过 `boost::proto::extends<>` 或 `BOOST_PROTO_EXTENDS()` 扩展)。]]
  [ [ [anchor expression_template] expression template 表达式模板]
      [A C++ technique using templates and operator overloading to cause 
       expressions to build trees that represent the expression for lazy evaluation 
       later, rather than evaluating the expression eagerly. Some C++ libraries use 
       expression templates to build domain-specific embedded languages.\n
       一种C++技巧，使用模板和操作符重载来使得表达式不会引起立即求值，而是构造出一棵代表了将该表达式延迟求值的树。
       有些C++库使用表达式模板来构建领域专用嵌入式语言。]]
  [ [ [anchor generator] generator 生成器]
      [In Proto, a /generator/ is a unary polymorphic function object that you 
       specify when defining a /domain/. After constructing a new expression, Proto 
       passes the expression to your domain's generator for further processing. 
       Often, the generator wraps the expression in an extension wrapper that adds 
       additional members to it.\n
       在Proto中，/生成器/是一个你在定义/领域/时要指定的单参多态函数对象。在构造出一个新的表达式后，
       Proto将该表达式传递给你的领域的生成器进行下一步处理。通常，生成器将表达式包装进一个扩展包装器，
       为它增加新的成员。]]
  [ [ [anchor grammar] grammar 语法]
      [In Proto, a /grammar/ is a type that describes a subset of Proto expression 
       types. Expressions in a domain must conform to that domain's grammar. The 
       `proto::matches<>` metafunction evaluates whether an expression type matches 
       a grammar. Grammars are either primitives such as `proto::_`, composites 
       such as `proto::plus<>`, control structures such as `proto::or_<>`, or some 
       type derived from a grammar.\n
       在Proto中，/语法/是一个类型，它描述了Proto表达式类型的一个子集。一个领域中的表达式必须符合该领域的语法。
       `proto::matches<>` 元函数用于评估一个表达式类型是否匹配某个语法。语法或者是一个象 `proto::_` 这样的原词，
       或是象 `proto::plus<>` 这样的组合，或是象 `proto::or_<>` 这样的控制结构，或是派生自某个语法的其它类型。]]
  [ [ [anchor object_transform] object transform 对象变换]
      [A transform of the form `R(A0,A1,...)` (i.e., a function type) where 
       `proto::is_callable<R>::value` is `false`. `R` is treated as the type of an 
       object to construct and the arguments are treated as transforms that yield 
       the parameters to the constructor.\n
       一个形如 `R(A0,A1,...)` (即一个函数类型)的变换，其中 `proto::is_callable<R>::value` 为 `false`。
       `R` 被视为一个要构造的对象的类型，其它参数被视为生成该构造函数各个参数的变换。]]
  [ [ [anchor polymorphic_function_object] polymorphic function object 多态函数对象]
      [An instance of a class type with an overloaded function call operator and a 
       nested `result_type` typedef or `result<>` template for calculating the 
       return type of the function call operator.\n
       一个带有重载的函数调用操作符以及内嵌的 `result_type` typedef 或用于计算该函数调用操作符的返回类型的 
       `result<>` 模板的类类型的实例。]]
  [ [ [anchor primitive_transform] primitive transform 基本变换]
      [A type that defines a kind of polymorphic function object that takes three 
       arguments: expression, state, and data. Primitive transforms can be used to 
       compose callable transforms and object transforms.\n
       一个类型，定义了一种多态函数对象，该函数对象接受三个参数：表达式、状态和数据。
       基本变换可以用于组成可调用变换和对象变换。]]
  [ [ [anchor transform] transform 变换]
      [Transforms are used to manipulate expression trees. They come in three 
       flavors: primitive transforms, callable transforms, or object transforms. A 
       transform `_T_` can be made into a ternary polymorphic function object with 
       `proto::when<>`, as in `proto::when<proto::_, _T_>`. Such a function object 
       accepts /expression/, /state/, and /data/ parameters, and computes a result 
       from them.\n
       变换用于操纵表达式树。它们有三种形式：基本变换、可调用变换或对象变换。
       变换 `_T_` 可以用 `proto::when<>` 制成一个三元多态函数对象，如 `proto::when<proto::_, _T_>`。
       这样一个函数对象接受 /expression/, /state/, 和 /data/ 参数，并由它们计算出结果。]]
]

[endsect]
