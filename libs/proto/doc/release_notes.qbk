[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:release_notes Appendix A: Release Notes 附录A：发布备注]

[/=================]
[heading Boost 1.44]
[/=================]

[*Behavior Change 行为变更: proto::and_<>]

In Boost 1.44, the behavior of _and_ as a transform changed. Previously, it only
applied the transform associated with the last grammar in the set. Now, it applies
all the transforms but only returns the result of the last. That makes it behave
like C++'s comma operator. For example, a grammar such as:\n
在 Boost 1.44 中，作为变换的 _and_ 的行为发生了变化。以前，它只应用与语法集中的最后一个语法相关联的变换。
现在，它应用所有的变换，但只返回最后一个的结果。这使得它的行为类似于C++的逗号操作符。例如，以下语法：

  proto::and_< G0, G1, G2 >

when evaluated with an expression `e` now behaves like this:\n
在对表达式 `e` 求值时，现在的行为类似于：

  (G0()(e), G1()(e), G2()(e))

[*Behavior Change 行为变更: proto::as_expr() and proto::as_child()]

The functions _as_expr_ and _as_child_ are used to guarantee that an
object is a Proto expression by turning it into one if it is not already,
using an optionally specified domain. In previous releases, when these
functions were passed a Proto expression in a domain different to the one
specified, they would apply the specified domain's generator, resulting in
a twice-wrapped expression. This behavior was surprising to some users.\n
函数 _as_expr_ 和 _as_child_ 用于确保某个对象是一个 Proto 表达式，如果该对象不是表达式的话，
就使用一个可选的特定域将它变成表达式。在以前的版本中，如果将与指定域不同的其它领域的某个表达式传给这两个函数，
它们会应用指定域的生成器，从而得到一个双层包装的表达式。该行为会令某些用户觉得奇怪。

The new behavior of these two functions is to always leave Proto expressions
alone, regardless of the expressions' domains.\n
这两个函数的新行为变为，保留原 Proto 表达式，不论表达式位于什么域。

[*Behavior Change 行为变更: proto::(pod_)generator<> and proto::basic_expr<>]

Users familiar with Proto's extension mechanism have probably used either
_generator_ or _pod_generator_ with a wrapper template when defining their
domain. In the past, Proto would instantiate your wrapper template with
instances of _expr_. In Boost 1.44, Proto now instantiates your wrapper
template with instances of a new type: _basic_expr_.\n
熟悉 Proto 扩展机制的用户有可能在定义他们的领域时，用到带有包装器模板的 _generator_ 或 _pod_generator_。
以前，Proto 会用 _expr_ 实例来实例化你的包装器模板。在 Boost 1.44，Proto 会以一个新类型 _basic_expr_
的实例来实例化你的包装器模板。

For instance:\n
例如：

  // An expression wrapper 一个表达式包装器
  template<class Expr>
  struct my_expr_wrapper;
  
  // A domain 一个领域
  struct my_domain
    : proto::domain< proto::generator< my_expr_wrapper > >
  {};
  
  template<class Expr>
  struct my_expr_wrapper
    : proto::extends<Expr, my_expr_wrapper<Expr>, my_domain>
  {
    // Before 1.44, Expr was an instance of proto::expr<>
    // In 1.44, Expr is an instance of proto::basic_expr<>
    // 1.44版本以前，Expr 是一个 proto::expr<> 实例
    // 在1.44版本中，Expr 是一个 proto::basic_expr<> 实例
  };

The motivation for this change was to improve compile times. _expr_ is an
expensive type to instantiate because it defines a host of member functions.
When defining your own expression wrapper, the instance of _expr_ sits as a
hidden data member function in your wrapper and the members of _expr_ go
unused. Therefore, the cost of those member functions is wasted. In contrast,
_basic_expr_ is a very lightweight type with no member functions at all.\n
这个变化的原因是为了改进编译时间。_expr_ 是一个实例化代价昂贵的类型，因为它定义了一组成员函数。
在定义你自己的表达式包装器时，_expr_ 的实例化就象是你的包装器中的一个隐藏的数据成员函数，_expr_
的成员是用不到的。因此，这个成员函数的代价是白费的。相比之下，_basic_expr_ 是一个不带成员函数的轻量级类型。

The vast majority of programs should recompile without any source changes.
However, if somewhere you are assuming that you will be given instances
specifically of _expr_, your code will break.\n
绝大多数程序无需修改源代码即可重编译。但是，如果你在某处假设了要给出 _expr_ 的实例，你的代码就会被破坏。

[*New Feature: Sub-domains 新特性：子域]

In Boost 1.44, Proto introduces an important new feature called
"sub-domains". This gives you a way to spcify that one domain is
compatible with another such that expressions in one domain can
be freely mixed with expressions in another. You can define one
domain to be the sub-domain of another by using the third template
parameter of _domain_.\n
在 Boost 1.44 中，Proto 引入了一个名为"子域"的重要新特性。它让你可以指定一个领域兼容于另一个，
这样一个领域中的表达式就可以与另一个领域中的表达式自由混合。你可以通过 _domain_ 
的第三个模板参数来定义一个领域是另一个领域的子域。

For instance:\n
例如：

  // Not shown: define some expression
  // generators genA and genB
  // 未列出：定义表达式生成器 genA 和 genB

  struct A
    : proto::domain< genA, proto::_ >
  {};

  // Define a domain B that is the sub-domain
  // of domain A.
  // 定义一个领域B，作为领域A的子域
  struct B
    : proto::domain< genB, proto::_, A >
  {};

Expressions in domains `A` and `B` can have different wrappers
(hence, different interfaces), but they can be combined into larger
expressions. Without a sub-domain relationship, this would have
been an error. The domain of the resulting expression in this case
would be `A`.\n
领域 `A` 和 `B` 中的表达式可以具有不同的包装器(即不同的接口)，但是它们可以组成一个更大的表达式。
如果没有子域的关系，这会引致一个错误。这种情况下，结果表达式的领域是 `A`。

The complete description of sub-domains can be found in the reference
sections for _domain_ and _deduce_domain_.\n
有关子域的完整描述可以在 _domain_ 和 _deduce_domain_ 的参考章节中找到。

[*New Feature 新特性: Domain-specific as_expr() and as_child()]

Proto has always allowed users to customize expressions post-hoc by
specifying a Generator when defining their domain. But it has never
allowed users to control how Proto assembles sub-expressions in the
first place. As of Boost 1.44, users now have this power.\n
Proto 允许用户去定制表达式，通过在定义其领域时指定一个生成器。但是，从不允许用户去控制 Proto 如何组合子表达式。
在 Boost 1.44 中，用户现在具有了这个能力。

Users defining their own domain can now specify how _as_expr_ and
_as_child_ work in their domain. They can do this easily by defining
nested class templates named `as_expr` and/or `as_child` within their
domain class.\n
用户在定义他们自己的领域时，可以指定 _as_expr 和 _as_child_ 如何在其领域中使用。
他们可以通过在领域类中定义名为 `as_expr` 和/或 `as_child` 的内嵌类模板，很方便地做到这一点。

For example:\n
例如：

  struct my_domain
    : proto::domain< my_generator >
  {
    typedef
        proto::domain< my_generator >
    base_domain;

    // For my_domain, as_child does the same as
    // what as_expr does by default.
    // 对于 my_domian, as_child 所做的与 as_expr 缺省的一样。
    template<class T>
    struct as_child
      : base_domain::as_expr<T>
    {};
  };

In the above example, `my_domain::as_child<>` simply defers to
`proto::domain::as_expr<>`. This has the nice effect of causing
all terminals to be captured by value instead of by reference,
and to likewise store child expressions by value. The result is
that expressions in `my_domain` are safe to store in `auto`
variables because they will not have dangling references to
intermediate temporary expressions. (Naturally, it also means that
expression construction has extra runtime overhead of copying that
the compiler may or may not be able to optimize away.)\n
在以上例子中，`my_domain::as_child<>` 只是引向 `proto::domain::as_expr<>`.
这有一个很好的作用，令所有终结符以值方式而不是引用方式来捕获，同样也以值方式保存子表达式。
结果是，`my_domain` 中的表达式可以安全地保存在 `auto` 变量中，因为它们不会带有引向中间临时表达式的悬空引用。
(当然，这也意味着表达式的构建会有额外的运行期复制开销，编译器可能会也可能不会将它优化掉。)

[/=================]
[heading Boost 1.43]
[/=================]

In Boost 1.43, the recommended usage of _extends_ changed slightly. The new
usage looks like this:\n
在 Boost 1.43 中，对 _extends_ 的推荐用法稍微有些改变。新的用法如下：

  // my_expr is an expression extension of the Expr parameter
  // my_expr 是 Expr 参数的表达式扩展
  template<typename Expr>
  struct my_expr
    : proto::extends<Expr, my_expr<Expr>, my_domain>
  {
      my_expr(Expr const &expr = Expr())
        : proto::extends<Expr, my_expr, my_domain>(expr)
      {}

      // NEW: use the following macro to bring
      // proto::extends::operator= into scope.
      // 新用法：使用以下宏将 proto::extends::operator=　置于当前作用域
      BOOST_PROTO_EXTENDS_USING_ASSIGN(my_expr)
  };

The new thing is the use of the [^[macroref BOOST_PROTO_EXTENDS_USING_ASSIGN]()] macro.
To allow assignment operators to build expression trees, _extends_ overloads the
assignment operator. However, for the `my_expr` template, the compiler generates
a default copy assignment operator that hides the ones in _extends_. This is often
not desired (although it depends on the syntax you want to allow).\n
新的变化是 [^[macroref BOOST_PROTO_EXTENDS_USING_ASSIGN]()] 宏的使用。它使得赋值操作符可用于构建表达式树，
_extends_ 重载了赋值操作符。不过，对于 `my_expr` 模板，编译器会生成一个缺省复制赋值操作符，它会隐藏了 _extends_ 中的那个。
这通常没什么关系(虽然它依赖于你想允许的语法)。

Previously, the recommended usage was to do this:\n
以前，推荐的用法会这样做：

  // my_expr is an expression extension of the Expr parameter
  // my_expr 是 Expr 参数的表达式扩展
  template<typename Expr>
  struct my_expr
    : proto::extends<Expr, my_expr<Expr>, my_domain>
  {
      my_expr(Expr const &expr = Expr())
        : proto::extends<Expr, my_expr, my_domain>(expr)
      {}

      // OLD: don't do it like this anymore.
      // 旧用法：不要再这样做。
      using proto::extends<Expr, my_expr, my_domain>::operator=;
  };

While this works in the majority of cases, it still doesn't suppress the
implicit generation of the default assignment operator. As a result, expressions
of the form `a = b` could either build an expression template or do a copy
assignment depending on whether the types of `a` and `b` happen to be the
same. That can lead to subtle bugs, so the behavior was changed.\n
虽然在多数情况下这是有效的，但是它仍然不能制止缺省赋值操作符的隐式生成。结果，形如
`a = b` 这样的表达式可能会构建一个表达式模板，或是进行一个复制赋值，这取决于 `a` 和 `b`
的类型是否恰好一致。这会导致微妙的错误，所以我们修改了这一行为。

The [^[macroref BOOST_PROTO_EXTENDS_USING_ASSIGN]()] brings into scope the
assignment operators defined in _extends_ as well as suppresses the generation
of the copy assignment operator.\n
[^[macroref BOOST_PROTO_EXTENDS_USING_ASSIGN]()] 将 _extends_ 中定义的赋值操作符引入当前作用域，
并制止复制赋值操作符的生成。

Also note that the _literal_ class template, which uses _extends_, has been chaged
to use [^[macroref BOOST_PROTO_EXTENDS_USING_ASSIGN]()]. The implications are
highlighted in the sample code below:\n
还要留意 _literal_ 类模板，它使用了 _extends_，也被改为使用 [^[macroref BOOST_PROTO_EXTENDS_USING_ASSIGN]()].
这些影响在以下示例代码中被指出：

  proto::literal<int> a(1), b(2); // two non-const proto literals
  proto::literal<int> const c(3); // a const proto literal

  a = b; // No-op. Builds an expression tree and discards it.
         // Same behavior in 1.42 and 1.43.
         // 空操作。构建一个表达式树并忽略它。在 1.42 和 1.43 中有相同的行为。
  
  a = c; // CHANGE! In 1.42, this performed copy assignment, causing
         // a's value to change to 3. In 1.43, the behavior is now
         // the same as above: build and discard an expression tree.
         // 有变化！在 1.42 中，这会执行复制赋值，导致 a 的值变为 3.
         // 在 1.43 中，行为与上一个语句相同：构建并忽略一个表达式树。

[endsect]
