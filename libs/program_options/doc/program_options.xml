<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
     "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<library 
    name="Program_options"
    dirname="program_options" id="program_options" 
    last-revision="$Date: 2007-11-25 13:38:02 -0500 (Sun, 25 Nov 2007) $" 
    xmlns:xi="http://www.w3.org/2001/XInclude">
  <libraryinfo>
    <author>
      <firstname>Vladimir</firstname>
      <surname>Prus</surname>
    </author>
    
    <copyright>
      <year>2002</year>
      <year>2003</year>
      <year>2004</year>
      <holder>Vladimir Prus</holder>
    </copyright>

    <legalnotice>
      <para>Distributed under the Boost Software License, Version 1.0.
      (See accompanying file <filename>LICENSE_1_0.txt</filename> or copy at 
      <ulink
      url="http://www.boost.org/LICENSE_1_0.txt">http://www.boost.org/LICENSE_1_0.txt</ulink>)
      </para>
    </legalnotice>

            
    <librarypurpose>
      Facilities to obtain configuration data from command line, config files
      and other sources</librarypurpose>
    <librarycategory name="category:data-structures"></librarycategory>
  </libraryinfo>
  
  <title>Boost.Program_options</title>
  
  <section>
    <title>Introduction 简介</title>

    <para>The program_options library allows program developers to obtain
    <emphasis>program options</emphasis>, that is (name, value) pairs from the user,
    via conventional methods such as command line and config file.<sbr/>
    program_options 库帮助程序开发者处理 <emphasis>program options</emphasis>，
    即通过传统方法如命令行或配置文件的方式，从用户处获得的 (name, value) 对。</para>

    <para>Why would you use such a library, and why is it better than parsing
    your command line by straightforward hand-written code?<sbr/>
    为什么你要使用这样一个库呢？为什么说它比你手工编写代码来分析命令行更好呢？
      <itemizedlist>
        <listitem>
          <para>It's easier. The syntax for declaring options is simple, and
          the library itself is small. Things like conversion of option values to
          desired type and storing into program variables are handled
          automatically.<sbr/>
          它更容易使用。声明选项的语法很简单，库本身也很小。另外，
          例如把选项值转换为想要的类型并存入程序变量中，这样的事情都可以自动处理。
          </para>
        </listitem>
        <listitem>
          <para>Error reporting is better. All the problems with the command line are
            reported, while hand-written code can just misparse the input. In
            addition, the usage message can be automatically generated, to
            avoid falling out of sync with the real list of options.<sbr/>
            更好的错误报告。命令行中的所有问题都会被报告，而手写代码可能会漏掉处理某些输入；
            可以自动生成有关用法的提示信息，避免了提示信息与实际选项不同步的情况。</para>
        </listitem>
        <listitem>
          <para>Options can be read from anywhere. Sooner or later the command
          line will be not enough for your users, and you'll want config files
          or maybe even environment variables. These can be added without significant 
          effort on your part.<sbr/>
          可以从任何地方读取选项。命令行的方式迟早会不够用，你可能想使用配置文件甚至是环境变量。
          这些都可以加入进来，并且不影响已有的部分。
          </para>
        </listitem>        
      </itemizedlist>
    </para>

    <para>
      Now let's see some examples of the library usage in the <xref
      linkend="program_options.tutorial"/>.<sbr/>
      下面我们进入<xref linkend="program_options.tutorial"/>，来看一些关于如何使用这个库的例子。
    </para>
    
  </section>

  <xi:include href="tutorial.xml"/>  
  <xi:include href="overview.xml"/>  
  
  <xi:include href="howto.xml"/>
  <xi:include href="design.xml"/>
  <xi:include href="acknowledgements.xml"/>    
   
  <xi:include href="autodoc.xml"/> 
</library>
