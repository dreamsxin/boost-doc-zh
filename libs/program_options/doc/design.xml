<?xml version="1.0" standalone="yes"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
     "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd"
[
    <!ENTITY % entities SYSTEM "program_options.ent" >
    %entities;
]>
<section id="program_options.design">
  <title>Design Discussion 设计讨论</title>

  <para>This section focuses on some of the design questions.<sbr/>
  本节关注一些设计的问题。 
  </para>

  <section id="program_options.design.unicode">

    <title>Unicode Support  Unicode支持</title>

    <para>Unicode support was one of the features specifically requested
      during the formal review. Throughout this document "Unicode support" is
      a synonym for "wchar_t" support, assuming that "wchar_t" always uses
      Unicode encoding.  Also, when talking about "ascii" (in lowercase) we'll
      not mean strict 7-bit ASCII encoding, but rather "char" strings in local
      8-bit encoding.<sbr/>
      Unicode 支持是在正式评审时被请求增加的一个特性。在本文档中，"Unicode 支持" 
      就是 "wchar_t" 支持的同义词，"wchar_t" 总是使用 Unicode 编码。同样，
      在谈论 "ascii" (小写)时，我们并不是指7-位 ASCII 编码，而是8位编码的 "char" 字符串。
    </para>
          
    <para>
      Generally, &quot;Unicode support&quot; can mean
      many things, but for the program_options library it means that:<sbr/>
      通常，&quot;Unicode 支持&quot; 可以代表很多事情，但对于 program_options 库而言，它代表：

      <itemizedlist>
        <listitem>
          <para>Each parser should accept either <code>char*</code>
          or <code>wchar_t*</code>, correctly split the input into option
          names and option values and return the data.<sbr/>
          每个分析器接受 <code>char*</code> 或 <code>wchar_t*</code>, 
          正确地将输入分解为选项名和选项值并返回数据。
          </para>
        </listitem>
        <listitem>
          <para>For each option, it should be possible to specify whether the conversion
            from string to value uses ascii or Unicode.<sbr/>
            对于每个选项，可能要指定是否使用 ascii 或 Unicode 从字符串转换为值。
          </para>
        </listitem>
        <listitem>
          <para>The library guarantees that:<sbr/>
          程序库保证：
            <itemizedlist>
              <listitem>
                <para>ascii input is passed to an ascii value without change<sbr/>
                ascii 输入传递给 ascii 值时不会改变 
                </para>
              </listitem>
              <listitem>
                <para>Unicode input is passed to a Unicode value without change<sbr/>
                Unicode 输入传递给 Unicode 值时不会改变</para>
              </listitem>
              <listitem>
                <para>ascii input passed to a Unicode value, and Unicode input
                  passed to an ascii value will be converted using a codecvt
                  facet (which may be specified by the user).<sbr/>
                  ascii 输入传递给 Unicode 值，以及 Unicode 输入传递给 ascii 值时，
                  将使用 codecvt facet (可以由用户指定)来转换。
                </para>
              </listitem>                 
            </itemizedlist>
          </para>
        </listitem>
      </itemizedlist>
    </para>

    <para>The important point is that it's possible to have some "ascii
      options" together with "Unicode options". There are two reasons for
      this. First, for a given type you might not have the code to extract the
      value from Unicode string and it's not good to require that such code be written.
      Second, imagine a reusable library which has some options and exposes
      options description in its interface. If <emphasis>all</emphasis>
      options are either ascii or Unicode, and the library does not use any
      Unicode strings, then the author will likely to use ascii options, which
      would make the library unusable inside Unicode
      applications. Essentially, it would be necessary to provide two versions
      of the library -- ascii and Unicode.<sbr/>
      重点在于存在 "ascii options" 与 "Unicode options" 需要一起处理的可能。
      这有两方面原因。首先，对于一个给定的类型，你可能没有代码来从 Unicode 字符串中取出选项值，
      要求写出这样的代码也不太好。其次，想象一个带有一些选项的可重用程序库，
      它要在接口中提供这些选项描述。如果<emphasis>所有</emphasis>选项要么都是 ascii 要么都是 Unicode, 
      而该库没有使用 Unicode 字符串，那么作者就很可能会使用 ascii 选项，
      这将使得该库不能用于 Unicode 应用。理想的情况是，需要提供两个版本的库 -- ascii 和 Unicode.
    </para>

    <para>Another important point is that ascii strings are passed though
      without modification. In other words, it's not possible to just convert
      ascii to Unicode and process the Unicode further. The problem is that the
      default conversion mechanism -- the <code>codecvt</code> facet -- might
      not work with 8-bit input without additional setup.<sbr/>
      另一个重点是，ascii 串在传递时不会被修改。换句话说，不能将 ascii 转换为 Unicode 以进一步处理 Unicode. 
      问题是缺省的转换机制 -- <code>codecvt</code> facet -- 不能在没有额外设置的情况下用于 8-位的输入。
    </para>

    <para>The Unicode support outlined above is not complete. For example, we
      don't support Unicode option names. Unicode support is hard and
      requires a Boost-wide solution. Even comparing two arbitrary Unicode
      strings is non-trivial. Finally, using Unicode in option names is
      related to internationalization, which has it's own
      complexities. E.g. if option names depend on current locale, then all
      program parts and other parts which use the name must be
      internationalized too.<sbr/>
      以上的 Unicode 支持要点是不完整的。例如，我们不支持 Unicode 选项名。
      Unicode 支持是困难的，需要一个 Boost-范围的解决方案。甚至于比较两个任意的 Unicode 串都不简单。
      最后，在选项名中使用 Unicode 涉及到国际化，它本身就很复杂。即如果选项名依赖于当前的 locale, 
      那么所有的使用该选项名的程序部分都必须被国际化。
    </para>

    <para>The primary question in implementing the Unicode support is whether
      to use templates and <code>std::basic_string</code> or to use some
      internal encoding and convert between internal and external encodings on
      the interface boundaries.            <sbr/>
      实现 Unicode 支持的主要问题是，使用模板和 <code>std::basic_string</code>，
      还是使用一些内部编码以及在接口上对内外部编码间进行转换。
    </para>

    <para>The choice, mostly, is between code size and execution
      speed. A templated solution would either link library code into every
      application that uses the library (thereby making shared library
      impossible), or provide explicit instantiations in the shared library
      (increasing its size). The solution based on internal encoding would
      necessarily make conversions in a number of places and will be somewhat slower.
      Since speed is generally not an issue for this library, the second
      solution looks more attractive, but we'll take a closer look at
      individual components.<sbr/>
      通常，要在代码大小和执行时间上进行选择。模板的解决方案要么将库代码链接入每个应用程序来使用库
      (从而不能共享库), 要么在共享库中提供显式实例化(增加了库的大小)。
      而基于内部编码的解决方案则需要在多处进行转换而稍微慢些。由于在本库中速度不是太大问题，
      因此第二个方案看起来更吸引，但是我们再来仔细看看个别组件。
    </para>

    <para>For the parsers component, we have three choices:<sbr/>
    对于分析器组件，我们有三种选择：
      <itemizedlist>
        <listitem>
          <para>Use a fully templated implementation: given a string of a
            certain type, a parser will return a &parsed_options; instance
            with strings of the same type (i.e. the &parsed_options; class
            will be templated).<sbr/>
            使用完全的模板实现：给定一个指定类型的字符串，分析器返回一个以相同类型的字符串实例化的 
            &parsed_options; (即 &parsed_options; 类要模板化)。</para>
        </listitem>
        <listitem>
          <para>Use internal encoding: same as above, but strings will be converted to and
            from the internal encoding.<sbr/>
            使用内部编码：同上，但字符串需要与内部编码相互转换。</para>
        </listitem>
        <listitem>
          <para>Use and partly expose the internal encoding: same as above,
            but the strings in the &parsed_options; instance will be in the
            internal encoding. This might avoid a conversion if
            &parsed_options; instance is passed directly to other components,
            but can be also dangerous or confusing for a user.<sbr/>
            使用并部分公开内部编码：同上，但 &parsed_options; 实例中的字符串使用内部编码。
            这可以在将 &parsed_options; 实例直接传给其它组件时避免转换，但也可能有风险或误导用户。
          </para>
        </listitem>
      </itemizedlist>
    </para>

    <para>The second solution appears to be the best -- it does not increase
    the code size much and is cleaner than the third. To avoid extra
    conversions, the Unicode version of &parsed_options; can also store
    strings in internal encoding.<sbr/>
    第二种方案看来最好 -- 它没有增加太多的代码大小，也比第三个更清晰。
    为了避免额外的转换，Unicode 版本的 &parsed_options; 也可以保存内部编码的字符串。
    </para>

    <para>For the options descriptions component, we don't have much
      choice. Since it's not desirable to have either all options use ascii or all
      of them use Unicode, but rather have some ascii and some Unicode options, the
      interface of the &value_semantic; must work with both. The only way is
      to pass an additional flag telling if strings use ascii or internal encoding.
      The instance of &value_semantic; can then convert into some
      other encoding if needed.<sbr/>
      对于选项描述组件，我们没有太多的选择。由于要求所有选项要么都使用 ascii 要么都使用 Unicode 不能令人满意，
      更好的办法是可以同时使用 ascii 和 Unicode 选项，这要求 &value_semantic; 的接口必须可以同时对两者使用。
      唯一的方法是，传递一个额外的标志来表明字符串是使用 ascii 还是内部编码。
      &value_semantic; 实例可以在需要时在不同编码间进行转换。
    </para>

    <para>For the storage component, the only affected function is &store;.
      For Unicode input, the &store; function should convert the value to the
      internal encoding.  It should also inform the &value_semantic; class
      about the used encoding.<sbr/>
      对于存储器组件，唯一受影响的函数是 &store;. 对于 Unicode 输入，&store; 函数将选项值转换为内部编码。
      它也会将所使用的编码通知 &value_semantic; 类。
    </para>

    <para>Finally, what internal encoding should we use? The
    alternatives are:
    <code>std::wstring</code> (using UCS-4 encoding) and
    <code>std::string</code> (using UTF-8 encoding). The difference between
    alternatives is:<sbr/>
    最后，我们应该使用什么内部编码呢？选择有两个：<code>std::wstring</code> (使用 UCS-4 编码)
    和 <code>std::string</code> (使用 UTF-8 编码)。两者的不同在于：
      <itemizedlist>
        <listitem>
          <para>Speed: UTF-8 is a bit slower<sbr/>
          速度: UTF-8 稍慢一些</para>
        </listitem>
        <listitem>
          <para>Space: UTF-8 takes less space when input is ascii<sbr/>
          空间: 在输入为 ascii 时，UTF-8 占的空间更少</para>
        </listitem>
        <listitem>
          <para>Code size: UTF-8 requires additional conversion code. However,
            it allows one to use existing parsers without converting them to
            <code>std::wstring</code> and such conversion is likely to create a
            number of new instantiations.<sbr/>
            代码大小 : UTF-8 需要额外的转换代码。但是，它允许使用已有的分析器而无须转换为 
            <code>std::wstring</code>，而这种转换需要创建大量新实例。
          </para>
        </listitem>
          
      </itemizedlist>
      There's no clear leader, but the last point seems important, so UTF-8
      will be used.      <sbr/>
      没有谁明显胜出，但最后一点看起来更重要，因此我们使用了 UTF-8 . 
    </para>

    <para>Choosing the UTF-8 encoding allows the use of existing parsers, 
      because 7-bit ascii characters retain their values in UTF-8, 
      so searching for 7-bit strings is simple. However, there are
      two subtle issues:<sbr/>
      选择 UTF-8 编码允许使用已有的分析器，因为 7-位 ascii 字符在 UTF-8 中保持原值，
      因此查找 7-位 字符串非常简单。但是，还是有两个敏感的问题：
      <itemizedlist>
        <listitem>
          <para>We need to assume the character literals use ascii encoding
          and that inputs use Unicode encoding.<sbr/>
          我们需要假定字符集使用 ascii 编码而输入使用 Unicode 编码</para>
        </listitem>
        <listitem>
          <para>A Unicode character (say '=') can be followed by 'composing
          character' and the combination is not the same as just '=', so a
          simple search for '=' might find the wrong character.<sbr/>
          一个 Unicode 字符 (如 '=') 可以后跟 'composing character' 且该组合与单个 '=' 是不同的，
          因此简单地查找 '=' 会找到错误的字符
          </para>
        </listitem>
      </itemizedlist>
      Neither of these issues appear to be critical in practice, since ascii is
      almost universal encoding and since composing characters following '=' (and
      other characters with special meaning to the library) are not likely to appear.<sbr/>
      不过在实践中，这些问题都不重要，由于 ascii 几乎是通用的编码，而且 composing characters 跟在 '=' 
      (或其它对于本库而言有特殊意义的字符) 后面这种情况非常罕见。
    </para>
                   
  </section>

  
</section>

<!--
     Local Variables:
     mode: xml
     sgml-indent-data: t     
     sgml-parent-document: ("program_options.xml" "section")
     sgml-set-face: t
     End:
-->