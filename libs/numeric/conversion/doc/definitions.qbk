[/
    Boost.Optional

    Copyright (c) 2003-2007 Fernando Luis Cacciola Carballal

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
]


[section:definitions Definitions 定义]

[section:introduction Introduction 简介]

This section provides definitions of terms used in the Numeric Conversion library.\n
本节提供了在 Numeric Conversion 库中所使用的术语的定义。

[blurb [*Notation]
[_underlined text] denotes terms defined in the C++ standard.\n
[*记号] [_带下划线的文字] 表示在C++标准中定义的术语。

[*bold face] denotes terms defined here but not in the standard.\n
[*黒体字] 表示在本文中定义而标准中没有的术语。
]

[endsect]

[section:types_and_values Types and Values 类型与值]

As defined by the [_C++ Object Model] (§1.7) the [_storage] or memory on which a
C++ program runs is a contiguous sequence of [_bytes] where each byte is a
contiguous sequence of bits.\n
如 [_C++对象模型] (§1.7) 中所定义的，一个C++程序运行于其上的 [_存储] 或内存是指一段连续的 [_字节]，其中每个字节都是一段连续的二进制位。

An [_object] is a region of storage (§1.8) and has a type (§3.9).\n
一个 [_对象] 是指一块存储(§1.8)，它具有某种类型(§3.9)。 

A [_type] is a discrete set of values.\n
一个 [_类型] 是指多个值的一个离散集。

An object of type `T` has an [_object representation] which is the sequence of
bytes stored in the object (§3.9/4)\n
类型 `T` 的一个对象有一个 [_对象表示法]，即保存在该对象中的一段字节(§3.9/4) 

An object of type `T` has a [_value representation] which is the set of
bits that determine the ['value] of an object of that type (§3.9/4).
For [_POD] types (§3.9/10), this bitset is given by the object representation,
but not all the bits in the storage need to participate in the value
representation (except for character types): for example, some bits might
be used for padding or there may be trap-bits.\n
类型 `T` 的一个对象有一个 [_值表示法]，即一组二进制位的集合，它决定了该类型的一个对象的['值](§3.9/4)。
对于 [_POD] 类型(§3.9/10)，这个位集合就是由对象表示法所给定的，但不是在存储中的每个二进制位都需要用于值表示法(除了字符类型以外)：
例如，有些二进制位可能被用于填充或者是 trap-bits。

__SPACE__

The [*typed value] that is held by an object is the value which is determined
by its value representation.\n
由一个对象所持有的 [*有类型值] 即是由它的值表示法所确定的值。

An [*abstract value] (untyped) is the conceptual information that is
represented in a type (i.e. the number π).\n
[*抽象值] (无类型的) 是指在类型中所表示的概念上的信息(如数字 π)。 

The [*intrinsic value] of an object is the binary value of the sequence of
unsigned characters which form its object representation.\n
一个对象的 [*固有值] 是指形成其对象表示法的一串无符号字符的二进制值。

__SPACE__

['Abstract] values can be [*represented] in a given type.\n
['抽象值] 可以在一个给定类型中进行 [*表示]。

To [*represent] an abstract value `V` in a type `T` is to obtain a typed value
`v` which corresponds to the abstract value `V`.\n
在类型 `T` 中 [*表示] 抽象值 `V` 是指，获得一个有类型值 `v`，它对应于抽象值 `V`. 

The operation is denoted using the `rep()` operator, as in: `v=rep(V)`.
`v` is the [*representation] of `V` in the type `T`.\n
这一操作用 `rep()` 操作符来表示，如：`v=rep(V)`. `v` 是在类型 `T` 中的 `V` 的 [*表示法]。

For example, the abstract value π can be represented in the type
`double` as the `double value M_PI` and in the type `int` as the
`int value 3`\n
例如，抽象值 π 可以在类型 `double` 中表示为 `double value M_PI`，而在类型 `int` 中表示为 `int value 3`

__SPACE__

Conversely, ['typed values] can be [*abstracted].\n
反之，['有类型值] 也可以被 [*抽象]。

To [*abstract] a typed value `v` of type `T` is to obtain the abstract value `V`
whose representation in `T` is `v`.\n
要 [*抽象] 类型 `T` 的一个有类型值 `v`，就是得到一个在 `T` 中表示 `v` 的抽象值 `V`。

The operation is denoted using the `abt()` operator, as in: `V=abt(v)`.\n
这一操作用 `abt()` 操作符来表示，如：`V=abt(v)`. 

`V` is the [*abstraction] of `v` of type `T`.\n
`V` 是类型 `T` 的 `v` 值的 [*抽象]。

Abstraction is just an abstract operation (you can't do it); but it is
defined nevertheless because it will be used to give the definitions in the
rest of this document.\n
抽象只是一个抽象的操作(你不能执行它)；但是我们仍然对它进行定义，因为它可以用于为本文档的其余部分给出定义。

[endsect]

[section:c___arithmetic_types C++ Arithmetic Types  C++算术类型]

The C++ language defines [_fundamental types] (§3.9.1). The following subsets of
the fundamental types are intended to represent ['numbers]:\n
C++ 语言定义了一些 [_基本类型] (§3.9.1)。以下是基本类型的一个子集，它们用于表示 ['数字]：

[variablelist
[[[_signed integer types 有符号整数类型] (§3.9.1/2):][
`{signed char, signed short int, signed int, signed long int}`
Can be used to represent general integer numbers (both negative and positive).\n
`{signed char, signed short int, signed int, signed long int}` 可用于表示普通的整数(包括负数和正数)。
]]
[[[_unsigned integer types 无符号整数类型] (§3.9.1/3):][
`{unsigned char, unsigned short int, unsigned int, unsigned long int}`
Can be used to represent positive integer numbers with modulo-arithmetic.\n
`{unsigned char, unsigned short int, unsigned int, unsigned long int}` 可用于表示模算术中的正整数。
]]
[[[_floating-point types 浮点类型] (§3.9.1/8):][
`{float,double,long double}`
Can be used to represent real numbers.\n
`{float,double,long double}` 可用于表示实数。
]]
[[[_integral or integer types 整型或整数类型] (§3.9.1/7):][
`{{signed integers},{unsigned integers}, bool, char and wchar_t}`
]]
[[[_arithmetic types 算术类型] (§3.9.1/8):][
`{{integer types},{floating types}}`
]]
]

The integer types are required to have a ['binary] value representation.\n
整数类型要求具有一个 ['二进制] 的值表示法。

Additionally, the signed/unsigned integer types of the same base type
(`short`, `int` or `long`) are required to have the same value representation,
that is:\n
另外，相同基本类型(`short`, `int` 或 `long`) 的有符号/无符号整数类型要求具有相同的值表示法，即：

             int i = -3 ; // suppose value representation is: 10011 (sign bit + 4 magnitude bits)
             // 假设值表示法为：10011 (符号位 + 4 数量位) 
    unsigned int u =  i ; // u is required to have the same 10011 as its value representation.
    // u 被要求具有与 10011 相同的值表示法

In other words, the integer types signed/unsigned X use the same value
representation but a different ['interpretation] of it; that is, their
['typed values] might differ.\n
换言之，整数类型 signed/unsigned X 使用相同的值表示法，但有不同的 ['解释]；即它们的 ['有类型值] 可能不同。

Another consequence of this is that the range for signed X is always a smaller
subset of the range of unsigned X, as required by §3.9.1/3.\n
这一要求的另一个推论是，signed X 的范围总是 unsigned X 的范围的一个小子集，正如 §3.9.1/3 所要求的。

[note
Always remember that unsigned types, unlike signed types, have modulo-arithmetic;
that is, they do not overflow.
This means that:\n
请一定记住，无符号类型不象有符号类型，它具有模算术；即它们不会溢出。这意味着：

[*-] Always be extra careful when mixing signed/unsigned types\n
[*-] 在混合使用有符号/无符号类型时，一定要额外小心

[*-] Use unsigned types only when you need modulo arithmetic or very very large
numbers. Don't use unsigned types just because you intend to deal with
positive values only (you can do this with signed types as well).\n
[*-] 仅在你需要模算术或需要很大很大的数字时，才使用无符号类型。不要只是因为你想处理正整数而使用无符号类型(你可以用有符号类型来处理)。
]


[endsect]

[section:numeric_types Numeric Types 数字类型]

This section introduces the following definitions intended to integrate
arithmetic types with user-defined types which behave like numbers.
Some definitions are purposely broad in order to include a vast variety of
user-defined number types.\n
本节介绍以下定义，目的是将算术类型与行为与数字一样的用户自定义类型相集成。有些定义被故意放宽，以包容大量的用户自定义数字类型。

Within this library, the term ['number] refers to an abstract numeric value.\n
在本库中，术语 ['数字] 是指一个抽象的数字值。

A type is [*numeric] if:\n
一个类型是 ['数字类型]，如果：

* It is an arithmetic type, or,\n
  它是一个算术类型，或者，
* It is a user-defined type which\n
  它是一个用户自定义类型，满足
    * Represents numeric abstract values (i.e. numbers).\n
      它表示了数字抽象值(如多位数字)。 
    * Can be converted (either implicitly or explicitly) to/from at least one arithmetic type.\n
      它可以与至少一种算术类型相互转换(隐式或显式)。 
    * Has [link boost_numericconversion.definitions.range_and_precision range] (possibly unbounded) 
      and [link boost_numericconversion.definitions.range_and_precision precision] (possibly dynamic or
      unlimited).\n
      它具有 [link boost_numericconversion.definitions.range_and_precision 范围] (可能是无界的)和 
      [link boost_numericconversion.definitions.range_and_precision 精度] (可能是动态或无限的)。 
    * Provides an specialization of `std::numeric_limits`.\n
      它提供了对 `std::numeric_limits` 的特化。

A numeric type is [*signed] if the abstract values it represent include negative numbers.\n
一个数字类型是 [*有符号的]，如果它所表示的抽象值包括负数。

A numeric type is [*unsigned] if the abstract values it represent exclude negative numbers.\n
一个数字类型是 [*无符号的]，如果它所表示的抽象值不包括负数。

A numeric type is [*modulo] if it has modulo-arithmetic (does not overflow).\n
一个数字类型是 [*带模的]，如果它具有模算术(不会溢出)。 

A numeric type is [*integer] if the abstract values it represent are whole numbers.\n
一个数字类型是 [*整型的]，如果它所表示的抽象值是整数。

A numeric type is [*floating] if the abstract values it represent are real numbers.\n
一个数字类型是 [*浮点型的]，如果它所表示的抽象值是实数。

An [*arithmetic value] is the typed value of an arithmetic type\n
[*算术值] 是指算术类型的有类型值。

A [*numeric value] is the typed value of a numeric type\n
[*数字值] 是指数字类型的有类型值。

These definitions simply generalize the standard notions of arithmetic types and
values by introducing a superset called [_numeric]. All arithmetic types and values are
numeric types and values, but not vice versa, since user-defined numeric types are not
arithmetic types.\n
这些定义只是通过引用一个名为 [_数字] 的超集，对标准中的算术类型和算术值进行了泛化。
所有算术类型和算术值都是数字类型和数字值，但反之不然，因为用户自定义的数字类型不是算术类型。

The following examples clarify the differences between arithmetic and numeric
types (and values):\n
以下例子说明了算术类型(和算术值)和数字类型(和数字值)间的差异：


    // A numeric type which is not an arithmetic type (is user-defined)
    // and which is intended to represent integer numbers (i.e., an 'integer' numeric type)
    // 一个不是算术类型的数字类型(用户自定义的)，它用于表示整数(即一个'整型'的数字类型)
    class MyInt
    {
        MyInt ( long long v ) ;
        long long to_builtin();
    } ;
    namespace std {
    template<> numeric_limits<MyInt> { ... } ;
    }

    // A 'floating' numeric type (double) which is also an arithmetic type (built-in),
    // with a float numeric value.
    // 一个'浮点'的数字类型(double)，同时也是算术类型(内建的)，具有浮点数值。
    double pi = M_PI ;

    // A 'floating' numeric type with a whole numeric value.
    // NOTE: numeric values are typed valued, hence, they are, for instance,
    // integer or floating, despite the value itself being whole or including
    // a fractional part.
    // 一个具有整数值的'浮点'数字类型。注：数字值是有类型值，因此它们是整型的或浮点型的，
    // 无论它的值本身是整数的还是带有小数的。
    double two = 2.0 ;

    // An integer numeric type with an integer numeric value.
    // 一个具有整型数字值的整型数字类型。
    MyInt i(1234);


[endsect]

[section:range_and_precision Range and Precision 范围与精度]

Given a number set `N`, some of its elements are representable in a numeric type `T`.\n
给定一个数字集合 `N`，它的一些元素可以在数字类型 `T` 中表示。

The set of representable values of type `T`, or numeric set of `T`, is a set of numeric
values whose elements are the representation of some subset of `N`.\n
类型 `T` 可表示的值的集合，或者说 `T` 的数字集合，是指一个数字值的集合，其中的元素是 `N` 的某个子集的表示法。

For example, the interval of `int` values `[INT_MIN,INT_MAX]` is the set of representable
values of type `int`, i.e. the `int` numeric set, and corresponds to the representation
of the elements of the interval of abstract values `[abt(INT_MIN),abt(INT_MAX)]` from
the integer numbers.\n
例如，`int` 值区间 `[INT_MIN,INT_MAX]` 就是类型 `int` 的可表示值的集合，也就是 `int` 数字集合，
它对应于来自于整数抽象值区间 `[abt(INT_MIN),abt(INT_MAX)]` 的各元素的表示法。

Similarly, the interval of `double` values `[-DBL_MAX,DBL_MAX]` is the `double`
numeric set, which corresponds to the subset of the real numbers from `abt(-DBL_MAX)` to
`abt(DBL_MAX)`.\n
类似地，`double` 值区间 `[-DBL_MAX,DBL_MAX]` 是 `double` 数字集合，它对应于从 `abt(-DBL_MAX)` 到 `abt(DBL_MAX)` 的实数的一个子集。

__SPACE__

Let [*`next(x)`] denote the lowest numeric value greater than x.\n
用 [*`next(x)`] 表示大于 x 的最小数字值。

Let [*`prev(x)`] denote the highest numeric value lower then x.\n
用 [*`prev(x)`] 表示小于 x 的最大数字值。

Let [*`v=prev(next(V))`] and [*`v=next(prev(V))`] be identities that relate a numeric
typed value `v` with a number `V`.\n
令 [*`v=prev(next(V))`] 和 [*`v=next(prev(V))`] 是相同的，将一个数字类型值 `v` 与一个数字 `V` 关联起来。

An ordered pair of numeric values `x`,`y` s.t. `x<y` are [*consecutive] iff `next(x)==y`.\n
一个有序的数字值对 `x`,`y` s.t. `x<y` 是 [*连续的] 当且仅当 `next(x)==y`. 

The abstract distance between consecutive numeric values is usually referred to as a
[_Unit in the Last Place], or [*ulp] for short. A ulp is a quantity whose abstract
magnitude is relative to the numeric values it corresponds to: If the numeric set
is not evenly distributed, that is, if the abstract distance between consecutive
numeric values varies along the set -as is the case with the floating-point types-,
the magnitude of 1ulp after the numeric value `x` might be (usually is) different
from the magnitude of a 1ulp after the numeric value y for `x!=y`.\n
两个连续数字值之间的抽象距离通常被称为 [_最小单元]，或简称 [*ulp]。ulp 是一个与相应数字值相关的抽象量：
如果这个数字集合不是均匀分布的，即在集合中的两个连续数字值之间的抽象距离是变化的 -就象浮点类型那样-，
那么在数字值 `x` 之后的1个ulp可能会(通常都会)不同于另一个数字值 `y` 之后的1个ulp，如果 `x!=y`。

Since numbers are inherently ordered, a [*numeric set] of type `T` is an ordered sequence
of numeric values (of type `T`) of the form:\n
因为数字是有序的，所以类型 `T` 的 [*数字集合] 就是一组数字值(类型为 `T`)的有序排列，形如：

    REP(T)={l,next(l),next(next(l)),...,prev(prev(h)),prev(h),h}

where `l` and `h` are respectively the lowest and highest values of type `T`, called
the boundary values of type `T`.\n
其中 `l` 和 `h` 分别为类型 `T` 的最小值和最大值，称为类型 `T` 的边界值。

__SPACE__

A numeric set is discrete. It has a [*size] which is the number of numeric values in the set,
a [*width] which is the abstract difference between the highest and lowest boundary values:
`[abt(h)-abt(l)]`, and a [*density] which is the relation between its size and width:
`density=size/width`.\n
数字集合是离散的。它具有一定的 [*大小] 即该集合中的数字值的数量，还有一定的 [*广度] 即最大值和最小值之间的抽象距离：
`[abt(h)-abt(l)]`，还有一定的 [*密度] 即它的大小与广度之比：`density=size/width`. 

The integer types have density 1, which means that there are no unrepresentable integer
numbers between `abt(l)` and `abt(h)` (i.e. there are no gaps). On the other hand,
floating types have density much smaller than 1, which means that there are real numbers
unrepresented between consecutive floating values (i.e. there are gaps).\n
整数类型的密度为1，这意味着在 `abt(l)` 和 `abt(h)` 之间没有不可表示的整数(即没有间隙)。
另一方面，浮点类型的密度远小于1，这意味着在相邻的浮点值之间存在无法表示的实数(即有一定间隙)。 

__SPACE__

The interval of [_abstract values] `[abt(l),abt(h)]` is the range of the type `T`,
denoted `R(T)`.\n
[_抽象值] `[abt(l),abt(h)]` 的区间称为类型 `T` 的范围，记为 `R(T)`. 

A range is a set of abstract values and not a set of numeric values. In other
documents, such as the C++ standard, the word `range` is ['sometimes] used as synonym
for `numeric set`, that is, as the ordered sequence of numeric values from `l` to `h`.
In this document, however, a range is an abstract interval which subtends the
numeric set.\n
范围是指一组抽象值的集合而不是一组数字值的集合。在其它文档中，如C++标准，单词 `range` ['有时]被用作 `numeric set` 的同义词，
即从 `l` 到 `h` 的数字值的有序排列。不过在这个文档中，范围指的是一个抽象区间，它包含了数字集合。

For example, the sequence `[-DBL_MAX,DBL_MAX]` is the numeric set of the type
`double`, and the real interval `[abt(-DBL_MAX),abt(DBL_MAX)]` is its range.\n
例如，序列 `[-DBL_MAX,DBL_MAX]` 是类型 `double` 的数字集合，而实数区间 `[abt(-DBL_MAX),abt(DBL_MAX)]` 则是它的范围。

Notice, for instance, that the range of a floating-point type is ['continuous]
unlike its numeric set.\n
注意，浮点类型的范围是 ['连续的]，与它的数字集合不同。

This definition was chosen because:\n
之所以选择这种定义，是因为：

* [*(a)] The discrete set of numeric values is already given by the numeric set.\n
  [*(a)] 数字值的离散集已经由数字集合给出。
* [*(b)] Abstract intervals are easier to compare and overlap since only boundary
values need to be considered.\n
  [*(b)] 抽象区间更易于比较和取交集，因为只需要考虑其边界值即可。

This definition allows for a concise definition of `subranged` as given in the last section.\n
这种定义可以很简明地定义下一节所给出的 `subranged`。

The width of a numeric set, as defined, is exactly equivalent to the width of a range.\n
按定义，数字集合的广度与范围的广度精确相等。

__SPACE__

The [*precision] of a type is given by the width or density of the numeric set.\n
一个类型的 [*精度] 由数字集合的广度或密度给定。

For integer types, which have density 1, the precision is conceptually equivalent
to the range and is determined by the number of bits used in the value representation:
The higher the number of bits the bigger the size of the numeric set, the wider the
range, and the higher the precision.\n
对于密度为1的整数类型，精度在概念上相当于范围，它由值表示法所用的二进制位数量所决定：
二进制位数量越多则数字集合的大小越大，范围的广度越广，精度也越高。

For floating types, which have density <<1, the precision is given not by the width
of the range but by the density. In a typical implementation, the range is determined
by the number of bits used in the exponent, and the precision by the number of bits
used in the mantissa (giving the maximum number of significant digits that can be
exactly represented). The higher the number of exponent bits the wider the range,
while the higher the number of mantissa bits, the higher the precision.\n
对于密度<<1的浮点类型，精度不是由范围的广度给定，而是由密度给定。在一个典型的实现中，
范围是由用于表示指数的二进制位数量所决定，而精度是由用于表示尾数(给出了可以精确表示的有效数字的最大位数)的二进制位数量所决定。
表示指数的二进制位数量越多则范围越广，而尾数的二进制位数量越多则精度越高。

[endsect]

[section:exact__correctly_rounded_and_out_of_range_representations Exact, Correctly Rounded and Out-Of-Range Representations 
精确的、适当舍入的和超出范围的表示法]

Given an abstract value `V` and a type `T` with its corresponding range `[abt(l),abt(h)]`:\n
给定一个抽象角 `V` 和一个范围为 `[abt(l),abt(h)]` 的类型 `T`：

If `V < abt(l)` or `V > abt(h)`, `V` is [*not representable] (cannot be represented) in
the type `T`, or, equivalently, it's representation in the type `T` is [*out of range],
or [*overflows].\n
如果 `V < abt(l)` 或 `V > abt(h)`，则 `V` 在类型 `T` 中是 [*不可表示的](不能被表示出来)，或者说，
它在类型 `T` 中的表示是 [*超出范围的]，或是 [*溢出的]。

* If `V < abt(l)`, the [*overflow is negative].\n
  如果 `V < abt(l)`，则 [*溢出为负]。
* If `V > abt(h)`, the [*overflow is positive].\n
  如果 `V > abt(h)`，则 [*溢出为正]。

If `V >= abt(l)` and `V <= abt(h)`, `V` is [*representable] (can be represented) in the
type `T`, or, equivalently, its representation in the type `T` is [*in range], or
[*does not overflow].\n
如果 `V >= abt(l)` 且 `V <= abt(h)`，则 `V` 在类型 `T` 中是 [*可表示的](可以被表示出来)，
或者说它在类型 `T` 中的表示是 [*在范围内的]，或是 [*未溢出的]。

Notice that a numeric type, such as a C++ unsigned type, can define that any `V` does
not overflow by always representing not `V` itself but the abstract value
`U = [ V % (abt(h)+1) ]`, which is always in range.\n
注意，一个数字类型，如C++中的无符号类型，可以定义为任意 `V` 都不会溢出，
它的表示不是 `V` 本身而是抽象值 `U = [ V % (abt(h)+1) ]`，这个值总是在范围内的。

Given an abstract value `V` represented in the type `T` as `v`, the [*roundoff] error
of the representation is the abstract difference: `(abt(v)-V)`.\n
给定一个在类型 `T` 中表示为 `v` 的抽象值 `V`，该表示法的 [*舍入] 误差是指抽象距离：`(abt(v)-V)`. 

Notice that a representation is an ['operation], hence, the roundoff error corresponds
to the representation operation and not to the numeric value itself
(i.e. numeric values do not have any error themselves)\n
注意，一个表示法是一个 ['操作]，因此舍入误差是对应于该表示法操作而不是对应于数字值本身(即数字值本身不存在误差)。 

* If the roundoff is 0, the representation is [*exact], and `V` is exactly representable
in the type `T`.\n
  如果舍入为0，则表示是 [*精确的]，`V` 在类型 `T` 中可以精确表示。
* If the roundoff is not 0, the representation is [*inexact], and `V` is inexactly
representable in the type `T`.\n
  如果舍入不是0，则表示是 [*不精确的]，`V` 在类型 `T` 中不能精确表示。

If a representation `v` in a type `T` -either exact or inexact-, is any of the adjacents
of `V` in that type, that is, if `v==prev` or `v==next`, the representation is
faithfully rounded. If the choice between `prev` and `next` matches a given
[*rounding direction], it is [*correctly rounded].\n
如果在类型 `T` 中的一个表示 `v` -精确或不精确的-，是该类型中的 `V` 的某个邻值，即如果 `v==prev` 或 `v==next`，
则称该表示法是如实舍入的。如果 `prev` 和 `next` 间的选择符合一个给定的 [*舍入方向]，它就是 [*适当舍入的]。

All exact representations are correctly rounded, but not all inexact representations are.
In particular, C++ requires numeric conversions (described below) and the result of
arithmetic operations (not covered by this document) to be correctly rounded, but
batch operations propagate roundoff, thus final results are usually incorrectly
rounded, that is, the numeric value `r` which is the computed result is neither of
the adjacents of the abstract value `R` which is the theoretical result.\n
所有精确的表示都是适当舍入的，但不精确表示则不都是。特别地，C++要求数字转换(后文描述)和算术操作的结果
(不在本文讨论范围之内)都是适当舍入的，但批量操作会传播舍入，因此最终结果通常都不是适当舍入的，
即计算结果数字值 `r` 不是理论结果抽象值 `R` 的邻值。

Because a correctly rounded representation is always one of adjacents of the abstract
value being represented, the roundoff is guaranteed to be at most 1ulp.\n
因为一个适当舍入的表示总是被表示的抽象值的某个邻值，所以舍入值可以保证最多为1个ulp。

The following examples summarize the given definitions. Consider:\n
以下例子总结了所给出的下定义。考虑以下类型：

* A numeric type `Int` representing integer numbers with a
['numeric set]: `{-2,-1,0,1,2}` and
['range]: `[-2,2]`\n
数字类型 `Int` 表示 ['数字集合]: `{-2,-1,0,1,2}` 和 ['范围]: `[-2,2]` 的整数
* A numeric type `Cardinal` representing integer numbers with a
['numeric set]: `{0,1,2,3,4,5,6,7,8,9}` and
['range]: `[0,9]` (no modulo-arithmetic here)\n
数字类型 `Cardinal` 表示 ['数字集合]: {0,1,2,3,4,5,6,7,8,9} 和 ['范围]: [0,9] (不带模算术) 的整数
* A numeric type `Real` representing real numbers with a
['numeric set]: `{-2.0,-1.5,-1.0,-0.5,-0.0,+0.0,+0.5,+1.0,+1.5,+2.0}` and
['range]: `[-2.0,+2.0]`\n
数字类型 `Real` 表示 ['数字集合]: {-2.0,-1.5,-1.0,-0.5,-0.0,+0.0,+0.5,+1.0,+1.5,+2.0} 和 ['范围]: [-2.0,+2.0] 的实数
* A numeric type `Whole` representing real numbers with a
['numeric set]: `{-2.0,-1.0,0.0,+1.0,+2.0}` and
['range]: `[-2.0,+2.0]`\n
如数字类型 `Whole` 表示 ['数字集合]: {-2.0,-1.0,0.0,+1.0,+2.0} 和 ['范围]: [-2.0,+2.0] 的实数

First, notice that the types `Real` and `Whole` both represent real numbers,
have the same range, but different precision.\n
首先，请留意类型 `Real` 和 `Whole`，它们都表示实数，具有相同的范围，但精度不同。

* The integer number `1` (an abstract value) can be exactly represented
in any of these types.\n
整数 `1` (抽象值)可以在以上任一个类型中被精确表示。
* The integer number `-1` can be exactly represented in `Int`, `Real` and `Whole`,
but cannot be represented in `Cardinal`, yielding negative overflow.\n
整数 `-1` 可以在 `Int`, `Real` 和 `Whole` 中被精确表示，但不能在 `Cardinal` 中表示，会产生负溢出。
* The real number `1.5` can be exactly represented in `Real`, and inexactly
represented in the other types.\n
实数 `1.5` 可以在 `Real` 中精确表示，并在其它类型中不精确地表示。
* If `1.5` is represented as either `1` or `2` in any of the types (except `Real`),
the representation is correctly rounded.\n
如果 `1.5` 在任一类型(除了 `Real`)中被表示为 `1` 或 `2`，该表示是适当舍入的。
* If `0.5` is represented as `+1.5` in the type `Real`, it is incorrectly rounded.\n
如果 `0.5` 在类型 `Real` 中被表示为 `+1.5`，则是不正确舍入的。
* `(-2.0,-1.5)` are the `Real` adjacents of any real number in the interval
`[-2.0,-1.5]`, yet there are no `Real` adjacents for `x < -2.0`, nor for `x > +2.0`.\n
`(-2.0,-1.5)` 是区间 `[-2.0,-1.5]` 中任一实数的 `Real` 邻值，但是对于 `x < -2.0`, 和 `x > +2.0` 则没有 `Real` 邻值。

[endsect]

[section:standard__numeric__conversions Standard (numeric) Conversions 标准的(数字)转换]

The C++ language defines [_Standard Conversions] (§4) some of which are conversions
between arithmetic types.\n
C++语言定义了 [_标准转换] (§4)，其中包括算术类型间的转换。

These are [_Integral promotions] (§4.5), [_Integral conversions] (§4.7),
[_Floating point promotions] (§4.6), [_Floating point conversions] (§4.8) and
[_Floating-integral conversions] (§4.9).\n
包括有 [_整型提升] (§4.5)，[_整型转换] (§4.7)，[_浮点提升] (§4.6)，[_浮点转换] (§4.8) 和 [_浮点-整型转换] (§4.9)。

In the sequel, integral and floating point promotions are called [*arithmetic promotions],
and these plus integral, floating-point and floating-integral conversions are called
[*arithmetic conversions] (i.e, promotions are conversions).\n
概括来说，整型和浮点提升被称为 [*算术提升]，它们再加上整型、浮点和浮点-整型转换，被称为 [*算术转换] (即提升也是一种转换)。 

Promotions, both Integral and Floating point, are ['value-preserving], which means that
the typed value is not changed with the conversion.\n
整型和浮点型的提升都是 ['保留原值的]，即在转换后有类型值不会被更改。

In the sequel, consider a source typed value `s` of type `S`, the source abstract
value `N=abt(s)`, a destination type `T`; and whenever possible, a result typed value
`t` of type `T`.\n
概括来说，考虑一个源类型 `S` 的有类型值 `s`，源抽象值 `N=abt(s)`，目标类型为 `T`；如果能够转换，则结果是类型为 `T` 的有类型值 `t`。


Integer to integer conversions are always defined:\n
整数到整数的转换总是有定义的：

* If `T` is unsigned, the abstract value which is effectively represented is not
`N` but `M=[ N % ( abt(h) + 1 ) ]`, where `h` is the highest unsigned typed
value of type `T`.\n
如果 `T` 是无符号的，则有效表示的抽象值不是 `N` 而是 `M=[ N % ( abt(h) + 1 ) ]`，其中 `h` 是类型 `T` 的最大无符号有类型值。
* If `T` is signed and `N` is not directly representable, the result `t` is
[_implementation-defined], which means that the C++ implementation is required to
produce a value `t` even if it is totally unrelated to `s`.\n
如果 `T` 是有符号的且 `N` 不是可直接表示的，则结果 `t` 是 [_依实现定义的]，即C++实现被要求产生一个值 `t` 即使它与 `s` 完全无关。


Floating to Floating conversions are defined only if `N` is representable;
if it is not, the conversion has [_undefined behavior].\n
浮点数到浮点数的转换仅当 `N` 是可表示时有定义；否则转换就是 [_未定义行为]。

* If `N` is exactly representable, `t` is required to be the exact representation.\n
  如果 `N` 是可以精确表示的，则要求 `t` 是精确表示。
* If `N` is inexactly representable, `t` is required to be one of the two
adjacents, with an implementation-defined choice of rounding direction;
that is, the conversion is required to be correctly rounded.\n
  如果 `N` 是不可精确表示的，则要求 `t` 是两个邻值之一，舍入的方向由实现定义来选择；即要求转换是适当舍入的。


Floating to Integer conversions represent not `N` but `M=trunc(N)`, were
`trunc()` is to truncate: i.e. to remove the fractional part, if any.\n
浮点数到整数的转换不是 `N` 而是 `M=trunc(N)`，其中 `trunc()` 表示截断：即去掉小数部分，如果有的话。

* If `M` is not representable in `T`, the conversion has [_undefined behavior]
(unless `T` is `bool`, see §4.12).\n
  如果 `M` 在 `T` 中不可表示，则转换是 [_未定义行为] (除非 `T` 为 `bool`，请见 §4.12)。 


Integer to Floating conversions are always defined.\n
整数到浮点数的转换总是有定义的。

* If `N` is exactly representable, `t` is required to be the exact representation.\n
  如果 `N` 是可精确表示的，则要求 `t` 是精确表示。
* If `N` is inexactly representable, `t` is required to be one of the
two adjacents, with an implementation-defined choice of rounding direction;
that is, the conversion is required to be correctly rounded.\n
  如果 `N` 是不可精确表示的，则要求 `t` 是两个邻值之一，舍入的方向由实现定义来选择；即要求转换是适当舍入的。

[endsect]

[section:subranged_conversion_direction__subtype_and_supertype Subranged Conversion Direction, Subtype and Supertype 
子范围转换方向、子类型和父类型]

Given a source type `S` and a destination type `T`, there is a
[*conversion direction] denoted: `S->T`.\n
给定一个源类型 `S` 和一个目标类型 `T`，[*转换方向] 记为：`S->T`.

For any two ranges the following ['range relation] can be defined:
A range `X` can be ['entirely contained] in a range `Y`, in which case
it is said that `X` is enclosed by `Y`.\n
对于任意两个范围，可以定义 ['范围关系] 如下：范围 `X` ['完全包含在] 范围 `Y` 中，则称 `X` 被 `Y` 包含。

[: [*Formally:] `R(S)` is enclosed by `R(T)` iif `(R(S) intersection R(T)) == R(S)`.\n
[*正式定义]：`R(S)` 被 `R(T)` 所包含当且仅当 `(R(S) intersection R(T)) == R(S)`.]

If the source type range, `R(S)`, is not enclosed in the target type range,
`R(T)`; that is, if `(R(S) & R(T)) != R(S)`, the conversion direction is said
to be [*subranged], which means that `R(S)` is not entirely contained in `R(T)`
and therefore there is some portion of the source range which falls outside
the target range. In other words, if a conversion direction `S->T` is subranged,
there are values in `S` which cannot be represented in `T` because they are
out of range.
Notice that for `S->T`, the adjective subranged applies to `T`.\n
如果源类型范围 `R(S)`，不是被目标类型范围 `R(T)` 所包含；即如果 `(R(S) & R(T)) != R(S)`，
则转换方向被称为 [*子范围的]，即 `R(S)` 不完全包含在 `R(T)` 之中，因此源范围中有一部分落在了目标范围以外。
换句话说，如果转换方向 `S->T` 是子范围的，则 `S` 中有些值不能在 `T` 中表示，因为它们超出了范围。
注意，对于 `S->T`，形容词"子范围的"是对 `T` 而言的。

Examples:\n
例子：

Given the following numeric types all representing real numbers:\n
给定以下表示实数的数字类型：

* `X` with numeric set `{-2.0,-1.0,0.0,+1.0,+2.0}` and range `[-2.0,+2.0]`\n
  `X` 的数字集合为 `{-2.0,-1.0,0.0,+1.0,+2.0}` 范围为 `[-2.0,+2.0]`
* `Y` with numeric set `{-2.0,-1.5,-1.0,-0.5,0.0,+0.5,+1.0,+1.5,+2.0}` and range `[-2.0,+2.0]`\n
  `Y` 的数字集合为 `{-2.0,-1.5,-1.0,-0.5,0.0,+0.5,+1.0,+1.5,+2.0}` 范围为 `[-2.0,+2.0]`
* `Z` with numeric set `{-1.0,0.0,+1.0}` and range `[-1.0,+1.0]`\n
  `Z` 的数字集合为 `{-1.0,0.0,+1.0}` 范围为 `[-1.0,+1.0]`

For:\n
对于：

[variablelist
[[(a) X->Y:][
`R(X) & R(Y) == R(X)`, then `X->Y` is not subranged.
Thus, all values of type `X` are representable in the type `Y`.\n
`R(X) & R(Y) == R(X)`，则 `X->Y` 不是子范围的。因此，类型 `X` 的所有值在类型 `Y` 中都可以表示。
]]
[[(b) Y->X:][
`R(Y) & R(X) == R(Y)`, then `Y->X` is not subranged.
Thus, all values of type `Y` are representable in the type `X`, but in this case,
some values are ['inexactly] representable (all the halves).
(note: it is to permit this case that a range is an interval of abstract values and
not an interval of typed values)\n
`R(Y) & R(X) == R(Y)`，则 `Y->X` 不是子范围的。因此，类型 `Y` 的所有值在类型 `X` 中都可以表示，
但是有些值是 ['非精确] 表示的(所有带0.5的)。(注：可以允许这种情形，即范围是一个抽象值的区间而不是一个有类型值的区间) 
]]
[[(b) X->Z:][
`R(X) & R(Z) != R(X)`, then `X->Z` is subranged.
Thus, some values of type `X` are not representable in the type `Z`, they fall
out of range `(-2.0 and +2.0)`.\n
`R(X) & R(Z) != R(X)`, 则 `X->Z` 是子范围的。因此，类型 `X` 有些值在类型 `Z` 中不能表示，它们超出了 `(-2.0 and +2.0)` 的范围。
]]
]

It is possible that `R(S)` is not enclosed by `R(T)`, while neither is `R(T)` enclosed
by `R(S)`; for example, `UNSIG=[0,255]` is not enclosed by `SIG=[-128,127]`;
neither is `SIG` enclosed by `UNSIG`.
This implies that is possible that a conversion direction is subranged both ways.
This occurs when a mixture of signed/unsigned types are involved and indicates that
in both directions there are values which can fall out of range.\n
有可能 `R(S)` 不被 `R(T)` 所包含，而 `R(T)` 也不被 `R(S)` 所包含；例如，`UNSIG=[0,255]` 就不被 `SIG=[-128,127]` 所包含；
同样 `SIG` 也不被 `UNSIG` 所包含。这意味着有可能转换在两个方向上都是子范围的。
在混合使用有符号/无符号类型时就会发生这种情况，它表示在两个方向上都有一些值超出范围。

Given the range relation (subranged or not) of a conversion direction `S->T`, it
is possible to classify `S` and `T` as [*supertype] and [*subtype]:
If the conversion is subranged, which means that `T` cannot represent all possible
values of type `S`, `S` is the supertype and `T` the subtype; otherwise, `T` is the
supertype and `S` the subtype.\n
给定一个转换方向 `S->T` 的范围关系(子范围的或不是)，可以将 `S` 和 `T` 分为 [*父类型] 和 [*子类型]：
如果转换是子范围的，即 `T` 不能表示类型 `S` 的所有可能值，则 `S` 为父类型而 `T` 为子类型；否则，`T` 为父类型而 `S` 为子类型。

For example:\n
例如：

[: `R(float)=[-FLT_MAX,FLT_MAX]` and `R(double)=[-DBL_MAX,DBL_MAX]` ]

If `FLT_MAX < DBL_MAX`:\n
如果 `FLT_MAX < DBL_MAX`:

* `double->float` is subranged and `supertype=double`, `subtype=float`.\n
  `double->float` 是子范围的且 `supertype=double`, `subtype=float`. 
* `float->double` is not subranged and `supertype=double`, `subtype=float`.\n
  `float->double` 不是子范围的且 `supertype=double`, `subtype=float`.

Notice that while `double->float` is subranged, `float->double` is not,
which yields the same supertype,subtype for both directions.\n
注意，由于 `double->float` 是子范围的，而 `float->double` 不是，所以两个方向均得到相同的父类型和子类型。

Now consider:\n
现在考虑：

[: `R(int)=[INT_MIN,INT_MAX]` and `R(unsigned int)=[0,UINT_MAX]` ]

A C++ implementation is required to have `UINT_MAX > INT_MAX` (§3.9/3), so:\n
C++ 实现要求具有 `UINT_MAX > INT_MAX` (§3.9/3)，所以：

* 'int->unsigned' is subranged (negative values fall out of range)
and `supertype=int`, `subtype=unsigned`.\n
  'int->unsigned' 是子范围的(负值超出了范围)且 `supertype=int`, `subtype=unsigned`. 
* 'unsigned->int' is ['also] subranged (high positive values fall out of range)
and `supertype=unsigned`, `subtype=int`.\n
  'unsigned->int' 也是子范围的(高位值超出了范围)且 `supertype=unsigned`, `subtype=int`.

In this case, the conversion is subranged in both directions and the
supertype,subtype pairs are not invariant (under inversion of direction).
This indicates that none of the types can represent all the values of the other.\n
这种情况下，两个方向的转换都是子范围的，父类型、子类型对就不相同了(在相反的方向)。
这表示没有一个类型可以表示另一个类型的所有值。

When the supertype is the same for both `S->T` and `T->S`, it is effectively
indicating a type which can represent all the values of the subtype.
Consequently, if a conversion `X->Y` is not subranged, but the opposite `(Y->X)` is,
so that the supertype is always `Y`, it is said that the direction `X->Y` is [*correctly
rounded value preserving], meaning that all such conversions are guaranteed to
produce results in range and correctly rounded (even if inexact).
For example, all integer to floating conversions are correctly rounded value preserving.\n
如果对于 `S->T` 和 `T->S` 都有相同的父类型，则表明父类型可以表示子类型的所有值。
因此，如果转换 `X->Y` 不是子范围的，而相反的 `(Y->X)` 是子范围的，则父类型总是 `Y`，我们称方向 `X->Y` 是 [*保留适当舍入值的]，
意思是所有此种转换都保证产生一个在范围之内的结果且适当舍入(虽然可能不精确)。例如，所有整数到浮点数的转换都是保留适当舍入值的。

[endsect]

[endsect]


