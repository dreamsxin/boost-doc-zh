[/
    Boost.Optional

    Copyright (c) 2003-2007 Fernando Luis Cacciola Carballal

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
]

[section conversion_traits<> traits class]

[section:types Types 类型]

[section enumeration int_float_mixture_enum]

    namespace boost { namespace numeric {

        enum int_float_mixture_enum
        {
           integral_to_integral
          ,integral_to_float
          ,float_to_integral
          ,float_to_float
        } ;

    } } // namespace boost::numeric

[endsect]

[section enumeration sign_mixture_enum]

    namespace boost { namespace numeric {

    enum sign_mixture_enum
    {
       unsigned_to_unsigned
      ,signed_to_signed
      ,signed_to_unsigned
      ,unsigned_to_signed
    } ;

    } } // namespace boost::numeric

[endsect]

[section enumeration udt_builtin_mixture_enum]

    namespace boost { namespace numeric {

        enum udt_builtin_mixture_enum
        {
           builtin_to_builtin
          ,builtin_to_udt
          ,udt_to_builtin
          ,udt_to_udt
        } ;

    } } // namespace boost::numeric

[endsect]

[section template class int_float_mixture<>]

    namespace boost { namespace numeric {

        template <class T, class S>
        struct int_float_mixture : mpl::integral_c<int_float_mixture_enum, impl-def-value> {} ;

    } } // namespace boost::numeric

Classifying `S` and `T` as either integral or float, this __MPL_INTEGRAL_CONSTANT__
indicates the combination of these attributes.\n
将 `S` 和 `T` 分类为整型的或浮点的，这个 __MPL_INTEGRAL_CONSTANT__ 表示了这些属性的组合。

Its `::value` is of enumeration type
[link boost_numericconversion.conversion_traits___traits_class.types.enumeration_int_float_mixture_enum `boost::numeric::int_float_mixture_enum`]\n
其 `::value` 为枚举类型 [link boost_numericconversion.conversion_traits___traits_class.types.enumeration_int_float_mixture_enum 
`boost::numeric::int_float_mixture_enum`] 

[endsect]

[section template class sign_mixture<>]

    namespace boost { namespace numeric {

        template <class T, class S>
        struct sign_mixture : mpl::integral_c<sign_mixture_enum, impl-def-value> {} ;

    } } // namespace boost::numeric

Classifying `S` and `T` as either signed or unsigned, this __MPL_INTEGRAL_CONSTANT__
indicates the combination of these attributes.\n
将 `S` 和 `T` 分类为有符号的或无符号的，这个 __MPL_INTEGRAL_CONSTANT__ 表示了这些属性的组合。

Its `::value` is of enumeration type
[link boost_numericconversion.conversion_traits___traits_class.types.enumeration_sign_mixture_enum `boost::numeric::sign_mixture_enum`]\n
其 `::value` 为枚举类型 
[link boost_numericconversion.conversion_traits___traits_class.types.enumeration_sign_mixture_enum `boost::numeric::sign_mixture_enum`]

[endsect]

[section template class udt_builtin_mixture<>]

    namespace boost { namespace numeric {

        template <class T, class S>
        struct udt_builtin_mixture : mpl::integral_c<udt_builtin__mixture_enum, impl-def-value> {} ;

    } } // namespace boost::numeric

Classifying `S` and `T` as either user-defined or builtin, this __MPL_INTEGRAL_CONSTANT__
indicates the combination of these attributes.\n
将 `S` 和 `T` 分类为用户自定义的或内建的，这个 __MPL_INTEGRAL_CONSTANT__ 表示了这些属性的组合。

Its `::value` is of enumeration type
[link boost_numericconversion.conversion_traits___traits_class.types.enumeration_udt_builtin_mixture_enum `boost::numeric::udt_builtin_mixture_enum`]\n
其 `::value` 为枚举类型 [link boost_numericconversion.conversion_traits___traits_class.types.enumeration_udt_builtin_mixture_enum 
`boost::numeric::udt_builtin_mixture_enum`]

[endsect]

[section template class is_subranged<>]

    namespace boost { namespace numeric {

        template <class T, class S>
        struct is_subranged : mpl::bool_<impl-def-value> {} ;

    } } // namespace boost::numeric

Indicates if the range of the target type `T` is a subset of the range of the source
type `S`. That is: if there are some source values which fall out of the
Target type's range.\n
指明目标类型 `T` 的范围是否为源类型 `S` 的范围的子集。即：是否有一些源类型的值在目标类型范围以外。

It is a boolean __MPL_INTEGRAL_CONSTANT__.\n
它是一个布尔 __MPL_INTEGRAL_CONSTANT__。

It does not indicate if a particular conversion is effectively out of range;
it indicates that some conversion might be out of range because not all the
source values are representable as Target type.\n
它并不能指明某个特定的转换是否超出范围；它只是指明有些转换可能会超出范围，因为不是所有源类型的值都可以表示为目标类型。

[endsect]

[section template class conversion_traits<>]

    namespace boost { namespace numeric {

        template <class T, class S>
        struct conversion_traits
        {
            mpl::integral_c<int_float_mixture_enum  , ...> int_float_mixture ;
            mpl::integral_c<sign_mixture_enum       , ...> sign_mixture;
            mpl::integral_c<udt_builtin_mixture_enum, ...> udt_builtin_mixture ;

            mpl::bool_<...> subranged ;
            mpl::bool_<...> trivial ;

            typedef T target_type   ;
            typedef S source_type   ;
            typedef ... argument_type ;
            typedef ... result_type   ;
            typedef ... supertype     ;
            typedef ... subtype       ;
        } ;

    } } // namespace numeric, namespace boost


This traits class indicates some properties of a ['numeric conversion] direction:
from a source type `S` to a target type `T`. It does not indicate the properties
of a ['specific] conversion, but of the conversion direction. See
[link boost_numericconversion.definitions.subranged_conversion_direction__subtype_and_supertype Definitions] for details.\n
这个 traits 类表示一个 ['数字转换] 方向：从源类型 `S` 到目标类型 `T` 的一些属性。
它不表示某个['特定]转换的属性，而是表示转换方向的属性。详情请见 
[link boost_numericconversion.definitions.subranged_conversion_direction__subtype_and_supertype 定义]。

The traits class provides the following __MPL_INTEGRAL_CONSTANT__\s of enumeration
type. They express the combination of certain attributes of the Source and
Target types (thus they are call mixture):\n
这个 traits 类提供以下枚举类型的 __MPL_INTEGRAL_CONSTANT__。它们表示了源类型和目标类型的特定属性的组合(因此称为混合的)：

[table
[[       ][        ]]
[[[*int_float_mixture   ]][
Same as given by the traits class
[link boost_numericconversion.conversion_traits___traits_class.types.template_class_int_float_mixture__ int_float_mixture]\n
与 traits 类 [link boost_numericconversion.conversion_traits___traits_class.types.template_class_int_float_mixture__ int_float_mixture] 
所给出的相同
]]
[[[*sign_mixture        ]][
Same as given by the traits class
[link boost_numericconversion.conversion_traits___traits_class.types.template_class_sign_mixture__ sign_mixture]\n
与 traits 类 [link boost_numericconversion.conversion_traits___traits_class.types.template_class_sign_mixture__ sign_mixture] 所给出的相同
]]
[[[*udt_builtin_mixture ]]
[Same as given by the traits class
[link boost_numericconversion.conversion_traits___traits_class.types.template_class_udt_builtin_mixture__ udt_builtin_mixture]\n
与 traits 类 [link boost_numericconversion.conversion_traits___traits_class.types.template_class_udt_builtin_mixture__ 
udt_builtin_mixture] 所给出的相同
]]
]

The traits class provides the following __MPL_INTEGRAL_CONSTANT__\s of boolean type
which indicates indirectly the relation between the Source and Target ranges
(see [link boost_numericconversion.definitions.range_and_precision Definitions] for details).\n
这个 traits 类提供以下布尔类型的 __MPL_INTEGRAL_CONSTANT__，间接地表示源类型范围和目标类型范围间的关系(详见 
[link boost_numericconversion.definitions.range_and_precision 定义])。

[table
[[       ][        ]]
[[subranged ][
Same as given by [link boost_numericconversion.conversion_traits___traits_class.types.template_class_is_subranged__ is_subranged]\n
与 [link boost_numericconversion.conversion_traits___traits_class.types.template_class_is_subranged__ is_subranged] 所给出的相同 
]]
[[trivial][
Indicates if both Source and Target, [_without cv-qualifications], are the same type.\n
表明源类型和目标类型 [_在不考虑cv-限定符下] 是否为相同类型。

Its `::value` is of boolean type.\n
其 ::value 为布尔类型。
]]
]

The traits class provides the following types. They are the Source and Target types classified
and qualified for different purposes.\n
这个 traits 类提供以下类型。它们根据不同目的对源类型和目标类型进行分类和限定。


[table
[[            ][         ]]
[[[*target_type]][
The template parameter `T` without cv-qualifications\n
不带cv-限定符的模板参数 `T` 
]]
[[[*source_type]][
The template parameter `S` without cv-qualifications\n
不带cv-限定符的模板参数 `S`
]]
[[[*argument_type]][
This type is either source_type or `source_type const&`.\n
该类型为 `source_type` 或 `source_type const&`。

It represents the optimal argument type for the
[link boost_numericconversion.converter___function_object converter] member functions.\n
它表示了用于 [link boost_numericconversion.converter___function_object converter] 成员函数的优化参数类型。

If S is a built-in type, this is `source_type`, otherwise, this is `source_type const&`.\n
如果 `S` 是内建类型，则它为 `source_type`，否则为 `source_type const&`。 
]]
[[[*result_type]][
This type is either target_type or target_type const&\n
该类型为 `target_type` 或 `target_type const&`。

It represents the return type of the 
[link boost_numericconversion.converter___function_object converter] member functions.\n
它表示了用于 [link boost_numericconversion.converter___function_object converter] 成员函数的返回类型。

If `T==S`, it is `target_type const&`, otherwise, it is `target_type`.\n
如果 `T==S`，则它为 `target_type const&`，否则为 `target_type`。
]]
[[[*supertype]][
If the conversion is subranged, it is `source_type`, otherwise, it is `target_type`\n
如果转换是子范围的，它为 `source_type`，否则为 `target_type`。
]]
[[[*subtype]][
If the conversion is subranged, it is `target_type`, otherwise, it is `source_type`\n
如果转换是子范围的，它为 `target_type`，否则为 `source_type`。
]]
]

[endsect]

[endsect]

[section:examples Examples 例子]

    #include <cassert>
    #include <typeinfo>
    #include <boost/numeric/conversion/conversion_traits.hpp>

    int main()
    {

        // A trivial conversion. 简单转换
        typedef boost::numeric::conversion_traits<short,short> Short2Short_Traits ;
        assert ( Short2Short_Traits::trivial::value ) ;

        // A subranged conversion. 子范围转换
        typedef boost::numeric::conversion_traits<double,unsigned int> UInt2Double_Traits ;
        assert (  UInt2Double_Traits::int_float_mixture::value == boost::numeric::integral_to_float ) ;
        assert (  UInt2Double_Traits::sign_mixture::value == boost::numeric::unsigned_to_signed ) ;
        assert ( !UInt2Double_Traits::subranged::value ) ;
        assert ( typeid(UInt2Double_Traits::supertype) == typeid(double) ) ;
        assert ( typeid(UInt2Double_Traits::subtype) == typeid(unsigned int) ) ;

        // A doubly subranged conversion. 双子范围转换
        assert ( (boost::numeric::conversion_traits<short, unsigned short>::subranged::value) );
        assert ( (boost::numeric::conversion_traits<unsigned short, short>::subranged::value) );

        return 0;
    }

[endsect]

[endsect]

