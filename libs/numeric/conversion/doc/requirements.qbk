[/
    Boost.Optional

    Copyright (c) 2003-2007 Fernando Luis Cacciola Carballal

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
]

[section:type_requirements_and_user_defined_types_support Type Requirements and User-defined-types support 类型要求和用户自定义类型支持]

[section:type_requirements Type Requirements 类型要求]

Both arithmetic (built-in) and user-defined numeric types require proper
specialization of `std::numeric_limits<>` (that is, with (in-class) integral
constants).\n
算术类型(内建的)和用户自定义的数字类型都要求对 `std::numeric_limits<>` (以(类中)的整型常量)进行正确的特化。

The library uses `std::numeric_limits<T>::is_specialized` to detect whether
the type is builtin or user defined, and `std::numeric_limits<T>::is_integer`,
`std::numeric_limits<T>::is_signed` to detect whether the type is integer
or floating point; and whether it is signed/unsigned.\n
本库用 `std::numeric_limits<T>::is_specialized` 来检测某个类型是否内建的或用户定义的，
用 `std::numeric_limits<T>::is_integer`, `std::numeric_limits<T>::is_signed` 来检测某个类型为整数或浮点数；以及是否有符号/无符号。

The default `Float2IntRounder` policies uses unqualified calls to functions
`floor()` and `ceil()`; but the standard functions are introduced in scope
by a using directive:\n
缺省的 `Float2IntRounder` 策略以非受限方式调用函数 `floor()` 和 `ceil()`；而标准函数是通过一个 using 指令引入到作用域中：

    using std::floor ; return floor(s);

Therefore, for builtin arithmetic types, the std functions will be used.
User defined types should provide overloaded versions of these functions in
order to use the default rounder policies. If these overloads are defined
within a user namespace argument dependent lookup (ADL) should find them,
but if your compiler has a weak ADL you might need to put these functions
some place else or write your own rounder policy.\n
因此，对于内建的算术类型，将使用标准函数。为了使用缺省的舍入策略，用户自定义类型应该提供这些函数的重载版本。
如果这些重载是在一个用户名字空间内定义的，参数依赖查找(ADL)会找到它们，但是如果你的编译器的ADL较弱，
那么你可能需要将这些函数放在其它地方，或者编写你自己的舍入策略。

The default `Trunc<>` rounder policy needs to determine if the source value
is positive or not, and for this it evaluates the expression
`s < static_cast<S>(0)`. Therefore, user defined types require a visible
`operator<` in order to use the `Trunc<>` policy (the default).\n
缺省的 `Trunc<>` 舍入策略需要判断源数值是否为正，为此它要对表达式 `s < static_cast<S>(0)` 进行求值。
因此，为了使用 `Trunc<>` 策略(缺省情况)，用户自定义类型需要一个可见的 `operator<` 。


[endsect]

[section:udt_s_special_semantics UDT's special semantics 用户自定义类型的特殊语义]

[heading Conversion Traits 转换Traits]

If a User Defined Type is involved in a conversion, it is ['assumed] that
the UDT has [link boost_numericconversion.definitions.range_and_precision wider range] 
than any built-in type, and consequently the values
of some `converter_traits<>` members are hardwired regardless of the reality.
The following table summarizes this:\n
在转换中，如果涉及到用户自定义类型，将 ['假定] UDT 具有比任意内建类型 
[link boost_numericconversion.definitions.range_and_precision 更广的范围]，因此不管事实如何，
有些 `converter_traits<>` 成员就是硬性规定的。总结如下表：

* `Target=`['UDT] and `Source=`['built-in]
    * `subranged=false`
    * `supertype=Target`
    * `subtype=Source`
* `Target=`['built-in] and `Source=`['UDT]
    * `subranged=true`
    * `supertype=Source`
    * `subtype=Target`

* `Target=`['UDT] and `Source=`['UDT]
    * `subranged=false`
    * `supertype=Target`
    * `subtype=Source`


The `Traits` member `udt_mixture` can be used to detect whether a UDT is involved
and to infer the validity of the other members as shown above.\n
`Traits` 成员 `udt_mixture` 可用于检测是否涉及某个 UDT 并如上所示推断其它成员的有效性。

[heading Range Checking 范围检查]

Because User Defined Numeric Types might have peculiar ranges (such as an
unbounded range), this library does not attempt to supply a meaningful range
checking logic when UDTs are involved in a conversion. Therefore, if either
Target or Source are not built-in types, the bundled range checking of the
`converter<>` function object is automatically disabled. However, it is possible
to supply a user-defined range-checker. See 
[link boost_numericconversion.type_requirements_and_user_defined_types_support.special_policies Special Policies]\n
因为用户自定义数字类型可能具有特殊的范围(如一个无界的范围)，因此本库在转换涉及某个UDT时不提供一个有意义的范围检查逻辑。
因此，如果目标类型或源类型之一不是内建类型，则 `converter<>` 函数对象所绑定的范围检查就会自动禁用。
不过，你可以提供一个用户自定义的范围检查器。请见 
[link boost_numericconversion.type_requirements_and_user_defined_types_support.special_policies 特殊策略]。

[endsect]

[section:special_policies Special Policies 特殊策略]

There are two components of the `converter<>` class that might require special
behavior if User Defined Numeric Types are involved: the Range Checking and the
Raw Conversion.\n
如果涉及到用户自定义类型，`converter<>` 类中有两个组件可能需要特殊的行为：范围检查和原始转换。

When both Target and Source are built-in types, the converter class uses an internal
range checking logic which is optimized and customized for the combined properties
of the types.\n
当目标类型和源类型都是内建类型时，转换器类使用一个内部的范围检查逻辑，该逻辑针对类型的组合特性进行了优化和定制。

However, this internal logic is disabled when either type is User Defined.
In this case, the user can specify an ['external] range checking policy which will be
used in place of the internal code. See 
[link boost_numericconversion.numeric_converter_policy_classes.policy_userrangechecker UserRangeChecker] policy for details.\n
但是，当有其中一个类型是用户自定义类型时，该内部逻辑就会被禁用。这种情况下，用户可以指定一个 ['外部] 的范围检查策略，用于替换内部代码。
具体请见 [link boost_numericconversion.numeric_converter_policy_classes.policy_userrangechecker UserRangeChecker] 策略。

The converter class performs the actual conversion using a Raw Converter policy.
The default raw converter simply performs a `static_cast<Target>(source)`.\n
转换器类使用一个原始转换器策略执行实际的转换。缺省的原始转换器只是执行一个 `static_cast<Target>(source)`. 

However, if the a UDT is involved, the `static_cast` might not work. In this case,
the user can implement and pass a different raw converter policy.
See [link boost_numericconversion.numeric_converter_policy_classes.policy_rawconverter RawConverter] policy for details\n
但是，如果涉及到 UDT，`static_cast` 也许就不能奏效了。这种情况下，用户可以实现一个不同的原始转换器策略并传入它。具体请见 
[link boost_numericconversion.numeric_converter_policy_classes.policy_rawconverter RawConverter] 策略。

[endsect]

[endsect]

