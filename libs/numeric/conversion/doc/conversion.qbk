[library Boost.NumericConversion
    [quickbook 1.4]
    [authors [Cacciola Carballal, Fernando Luis]]
    [copyright 2004-2007 Fernando Luis Cacciola Carballal]
    [category numerics]
    [id numeric_conversion]
    [dirname numeric_conversion]
    [purpose
        Optimized Policy-based Numeric Conversions
    ]
    [source-mode c++]
    [license
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt or copy at
[@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[/ Macros will be used for links so we have a central place to change them ]


[/ Cited Boost resources ]

[def __MPL_INTEGRAL_CONSTANT__ [@../../../../mpl/doc/refmanual/integral-constant.html MPL's Integral Constant] ]



[/ Other web resources ]

[def __SGI_UNARY_FUNCTION__ [@http://www.sgi.com/tech/stl/UnaryFunction.html Unary Function Object]]

[/ Icons ]

[def __NOTE__ [$images/note.png]]
[def __ALERT__ [$images/caution.png]]
[def __DETAIL__ [$images/note.png]]
[def __TIP__ [$images/tip.png]]
[def __QUESTION_MARK__ [$images/question.png]]
[def __SPACE__ [$images/space.png]]
[def __GO_TO__ [$images/callouts/R.png]]




[section:overview Overview 概览]

The Boost Numeric Conversion library is a collection of tools to describe and
perform conversions between values of different 
[link boost_numericconversion.definitions.numeric_types numeric types].\n
Boost Numeric Conversion 库是一组用于描述和执行不同 [link boost_numericconversion.definitions.numeric_types 数字类型] 间的转换的工具。

The library includes a special alternative for a subset of `std::numeric_limits<>`,
the [link boost_numericconversion.bounds___traits_class bounds<>] traits class, which provides 
a consistent way to obtain the [link boost_numericconversion.definitions.range_and_precision boundary] 
values for the [link boost_numericconversion.definitions.range_and_precision range] of a numeric type.\n
本库包含了 `std::numeric_limits<>` 的一个子集的特殊替代物，[link boost_numericconversion.bounds___traits_class bounds<>] traits 类，
它提供了一致的方式来获得一个数字类型的 [link boost_numericconversion.definitions.range_and_precision 范围] 的 
[link boost_numericconversion.definitions.range_and_precision 边界] 值。

It also includes a set of [link boost_numericconversion.conversion_traits___traits_class trait classes] 
which describes the compile-time
properties of a conversion from a source to a target numeric type.
Both [link boost_numericconversion.definitions.c___arithmetic_types arithmetic] and 
[link boost_numericconversion.definitions.numeric_types user-defined numeric types] can be used.\n
它还包括了一组 [link boost_numericconversion.conversion_traits___traits_class trait 类]，
用于描述一个从源数字类型到目标数字类型的转换的一些编译期属性。[link boost_numericconversion.definitions.c___arithmetic_types 算术类型] 
和 [link boost_numericconversion.definitions.numeric_types 用户自定义的数字类型] 均可使用。

A policy-based [link boost_numericconversion.converter___function_object converter] object which 
uses `conversion_traits` to select
an optimized implementation is supplied. Such implementation uses an optimal
range checking code suitable for the source/target combination.\n
一个基于策略的 [link boost_numericconversion.converter___function_object 转换器] 对象，提供了使用 `conversion_traits` 来选择优化的实现。
该实现使用一个优化的适用于源/目标组合的范围检查代码。

* The converter's out-of-range behavior can be customized via an
[link boost_numericconversion.numeric_converter_policy_classes.policy_overflowhandler OverflowHandler] policy.\n
转换器的溢出行为可以通过 [link boost_numericconversion.numeric_converter_policy_classes.policy_overflowhandler OverflowHandler] 
策略来定制。
* For floating-point to integral conversions, the rounding mode can be selected via the
[link boost_numericconversion.numeric_converter_policy_classes.policy_float2introunder Float2IntRounder] policy.\n
对于浮点数到整数的转换，舍入的模式可以通过 [link boost_numericconversion.numeric_converter_policy_classes.policy_float2introunder 
Float2IntRounder] 策略来选择。
* A custom low-level conversion routine (for UDTs for instance) can be passed via a
[link boost_numericconversion.numeric_converter_policy_classes.policy_rawconverter RawConverter] policy.\n
定制的低级转换程序(如用于UDT)可通过 [link boost_numericconversion.numeric_converter_policy_classes.policy_rawconverter RawConverter] 
策略传入。
* The optimized automatic range-checking logic can be overridden via a
[link boost_numericconversion.numeric_converter_policy_classes.policy_userrangechecker UserRangeChecker] policy.\n
优化的自动范围检查逻辑可通过 [link boost_numericconversion.numeric_converter_policy_classes.policy_userrangechecker UserRangeChecker] 
策略进行重载。

[endsect]



[include definitions.qbk]
[include converter.qbk]
[include requirements.qbk]
[include bounds.qbk]
[include conversion_traits.qbk]
[include converter_policies.qbk]
[include numeric_cast.qbk]



[section:history_and_acknowledgments History and Acknowledgments 历史和鸣谢]


[heading Pre-formal review 正式审查之前]

* Kevlin Henney, with help from David Abrahams and Beman Dawes, originally contributed
the previous version of `numeric_cast<>` which already presented the idea of a runtime
range check.\n
Kevlin Henney，在 David Abrahams 和 Beman Dawes 的帮助下，贡献了 `numeric_cast<>` 的早期版本，其中已经出现了运行期范围检查的想法。

* Later, Eric Ford, Kevin Lynch and the author spotted some genericity problems with
that `numeric_cast<>` which prevented it from being used in a generic layer of math
functions.\n
后来，Eric Ford, Kevin Lynch 和作者发现了 `numeric_cast<>` 的一些泛型的问题，这妨碍了它被用于数学函数的泛化层。

* An improved `numeric_cast<>` which properly handled all combinations of arithmetic
types was presented.\n
一个改进后的 `numeric_cast<>`，可以正确处理算术类型的所有组合。

* David Abrahams and Beman Dawes acknowledged the need of an improved version of
`numeric_cast<>` and supported the submission as originally laid out. Daryl Walker and
Darin Adler made some important comments and proposed fixes to the original submission.\n
David Abrahams 和 Beman Dawes 认识到需要一个改进版本的 `numeric_cast<>` 并支持原先提交的规定。
Daryl Walker 和 Darin Adler 作了一些重要的说明并对原先的规定建议了一些修正。

* Special thanks go to Björn Karlsoon who helped the author considerably. Having found the
problems with `numeric_cast<>` himself, he revised very carefully the original submission
and spot a subtle bug in the range checking implementation. He also wrote part of
this documentation and proof-read and corrected other parts. And most importantly:
the features now presented here in this library evolved from the original submission as
a result of the useful private communications between Björn and the author.\n
特别感谢给予了作者相当多帮助的 Björn Karlsoon。他发出了 `numeric_cast<>` 的一些问题，
非常仔细地修正了原先的规定并在范围检查实现中发现了一个微妙的缺陷。他还编写了部分文档和校对并修正了其它部分。
最重要的是：本库中目前的特性是由原先的规定经由 Björn 和作者的私下沟通而进化而来的。

[heading Post-formal review 正式审查之后]

* Guillaume Melquiond spoted some documentation and code issues, particularly about
rounding conversions.\n
Guillaume Melquiond 指出一些文档和代码的问题，特别是与舍入转换有关的。

* The following people contributed an important review of the design, documentation and c
ode: Kevin Lynch, Thorsten Ottosen, Paul Bristow, Daryle Walker, Jhon Torjo, Eric Ford,
Gennadiy Rozental.\n
以下人员对于设计、文档和代码的审查作出重要贡献：Kevin Lynch, Thorsten Ottosen, Paul Bristow, 
Daryle Walker, Jhon Torjo, Eric Ford, Gennadiy Rozental.


[endsect]

[section:bibliography Bibliography 参考书目]

* Standard Documents:  标准文档:
    # ISO/IEC 14882:98 (C++98 Standard)
    # ISO/IEC 9899:1999 (C99 Standard)
    # ISO/IEC 10967-1 (Language Independent Arithmetic (LIA), Part I, 1994)
    # ISO/IEC 2382-1:1993 (Information Technology - Vocabulary - Part I: Fundamental Terms)
    # ANSI/IEEE 754-1985 [and IEC 60559:1989] (Binary floating-point)
    # ANSI/IEEE 854-1988 (Radix Independent floating-point)
    # ANSI X3/TR-1-82 (Dictionary for Information Processing Systems)
    # ISO/IEC JTC1/SC22/WG14/N753 C9X Revision Proposal: LIA-1 Binding: Rationale
* Papers: 论文：
    # David Goldberg  What Every Computer Scientist Should Know About Floating-Point Arithmetic
    # Prof. William Kahan papers on floating-point.

[endsect]

















