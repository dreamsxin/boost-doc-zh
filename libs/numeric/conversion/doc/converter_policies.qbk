[/
    Boost.Optional

    Copyright (c) 2003-2007 Fernando Luis Cacciola Carballal

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
]

[section:numeric_converter_policy_classes Numeric Converter Policy Classes 数字转换器策略类]


[section enum range_check_result]

    namespace boost { namespace numeric {

        enum range_check_result
        {
            cInRange     ,
            cNegOverflow ,
            cPosOverflow
        } ;

    } }

Defines the values returned by `boost::numeric::converter<>::out_of_range()`\n
定义由 `boost::numeric::converter<>::out_of_range()` 返回的值。

[endsect]

[section:policy_overflowhandler Policy OverflowHandler 策略OverflowHandler]

This ['stateless] non-template policy class must be a ['function object] and is
called to administrate the result of the range checking. It can throw an exception
if overflow has been detected by the range checking as indicated by its argument.
If it throws, is is recommended that it be `std::bad_cast` or derived.\n
这个['无状态]非模板策略类必须是一个['函数对象]，它被调用来对范围检查的结果进行处理。
如果范围检查已检测出溢出并通过调用实参来表示，则它可以抛出一个异常。如果要抛出异常，建议使用 `std::bad_cast` 或其派生类。

It must have the following interface (it does not has to be a template class):\n
它必须具有以下接口(不必是模板类)： 

    struct YourOverflowHandlerPolicy
    {
        void operator() ( boost::range_check_result ) ; // throw bad_cast or derived
    } ;

It is called with the result of the converter's `out_of_range()` inside `validate_range()`.\n
该函数函数被以 `validate_range()` 内的转换器的 `out_of_range()` 为参数调用。

These are the two overflow handler classes provided by the library:\n
本库提供了两个重载的处理类：

    namespace boost { namespace numeric {

        struct def_overflow_handler
        {
            void operator() ( range_check_result r ) // throw bad_numeric_conversion derived
                                                     // 抛出 bad_numeric_conversion 的派生类
            {
                if ( r == cNegOverflow )
                    throw negative_overflow() ;
                else if ( r == cPosOverflow )
                    throw positive_overflow() ;
            }
        } ;

        struct silent_overflow_handler
        {
            void operator() ( range_check_result ) // no-throw 无抛出
            {}
        } ;

    } }

And these are the Exception Classes thrown by the default overflow handler
[link numeric_conversion_policy_overflow_handler_important_note (see IMPORTANT note)]\n
以下是被缺省的溢出处理器所抛出的异常类[link numeric_conversion_policy_overflow_handler_important_note (请见重要说明)] 

    namespace boost { namespace numeric {

        ``[#numeric_conversion_bad_numeric_cast]``
        class bad_numeric_cast : public std::bad_cast
        {
            public:
            virtual const char *what() const // throw()
            {
                return "bad numeric conversion: overflow";
            }

        };

        ``[#numeric_conversion_negative_overflow]``
        class negative_overflow : public bad_numeric_cast
        {
            public:
            virtual const char *what() const // throw()
            {
                return "bad numeric conversion: negative overflow";
            }
        };

        ``[#numeric_conversion_possitive_overflow]``
        class positive_overflow : public bad_numeric_cast
        {
            public:
            virtual const char *what() const // throw()
            {
                return "bad numeric conversion: positive overflow";
            }
        };


    } }

[#numeric_conversion_policy_overflow_handler_important_note]

[important [*RELEASE NOTE for 1.33]
Previous to boost version 1.33, the exception class `bad_numeric_cast` was
named `bad_numeric_conversion`. However, in 1.33, the old function
`numeric_cast<>` from `boost/cast.hpp` was completly replaced by the
new `numeric_cast<>` in `boost/numeric/conversion/cast.hpp`
(and `boost/cast.hpp` is including `boost/numeric/conversion/cast.hpp` now).
That old function which existed in boost for quite some time used the
`bad_numeric_cast` as its exception type so I decided to avoid backward
compatibility problems by adopting it (guessing that the user base for
the old code is wider than for the new code).\n
[*对1.33版本的说明] 在 boost 版本 1.33 之前，异常类 `bad_numeric_cast` 命名为 `bad_numeric_conversion`。
但是，在 1.33 中，来自 `boost/cast.hpp` 的旧函数 `numeric_cast<>` 已完全被 `boost/numeric/conversion/cast.hpp` 
中的新 `numeric_cast<>` 所替代(而且现在 `boost/cast.hpp` 被包含在 `boost/numeric/conversion/cast.hpp` 中)。
那些在 boost 中已经存在了一段时间的旧函数是把 `bad_numeric_cast` 用作其异常类型的，
所以我决定通过采用这个异常类以避免后向兼容性的问题(我猜测基于旧代码的用户经多于基于新代码的)。
]

[endsect]

[section:policy_float2introunder Policy Float2IntRounder 策略Float2IntRounder ]

This ['stateless] template policy class specifies the rounding mode used
for [_float to integral] conversions. It supplies the `nearbyint()`
static member function exposed by the converter, which means that it
[_publicly inherits from this policy].\n
这个['无状态]模板策略类指定用于 [_浮点至整型] 转换的舍入方式。它提供了由转换器暴露出来的 `nearbyint()` 静态成员函数，
即转换器要 [_公有地继承自这个策略]。

The policy must have the following interface:\n
该策略必须具有以下接口：

    template<class S>
    struct YourFloat2IntRounderPolicy
    {
        typedef S               source_type ;
        typedef {S or S const&} argument_type ;

        static source_type nearbyint ( argument_type s ) { ... }

        typedef mpl::integral_c<std::float_round_style,std::round_...> round_style ;

    } ;

These are the rounder classes provided by the library (only the specific parts are shown,
see the general policy form above)\n
本库提供了几个舍入器类(以下仅展示规格部分，参见上面的通用策略形式) 

[note
These classes are not intended to be general purpose rounding functions
but specific policies for `converter<>`. This is why they are not function objects.\n
这些类并不是通用的舍入函数，而是专门用于 `converter<>` 的策略。这正是为什么它们不是函数对象的原因。
]

    namespace boost { namespace numeric {


        template<class S>
        struct Trunc
        {
            static source_type nearbyint ( argument_type s )
            {
                using std::floor ;
                using std::ceil  ;

                return s >= static_cast<S>(0) ? floor(s) : ceil(s) ;
            }

            typedef mpl::integral_c<std::float_round_style,std::round_toward_zero> round_style ;
        } ;


        template<class S>
        struct RoundEven
        {
            static source_type nearbyint ( argument_type s )
            {
                return impl-defined-value ;
            }

            typedef mpl::integral_c<std::float_round_style,std::round_to_nearest> round_style ;
        } ;


        template<class S>
        struct Ceil
        {
            static source_type nearbyint ( argument_type s )
            {
                using std::ceil ;
                return ceil(s) ;
            }

            typedef mpl::integral_c<std::float_round_style,std::round_toward_infinity> round_style ;
        } ;


        template<class S>
        struct Floor
        {
            static source_type nearbyint ( argument_type s )
            {
                using std::floor ;
                return floor(s) ;
            }
            typedef mpl::integral_c<std::float_round_style,std::round_toward_neg_infinity> round_style ;
        } ;

    } } // namespace numeric, namespace boost

[heading Math Functions used by the rounder policies 舍入器策略所使用的数学函数]

The rounder policies supplied by this header use math functions `floor()` and `ceil()`.
The standard versions of these functions are introduced in context by a using directive,
so in normal conditions, the standard functions will be used.\n
这个头文件所提供的舍入器策略使用了数学函数 `floor()` 和 `ceil()`。
这些函数的标准版本是通过一个 using 指令引入到上下文中的，所以在正常情况下，将使用标准函数。

However, if there are other visible corresponding overloads an ambiguity could arise.
In this case, the user can supply her own rounder policy which could, for instance,
use a fully qualified call.\n
但是，如果存在其它可见的重载函数，将发生歧义。这种情况下，用户可以提供自己的舍入器策略，例如使用一个全限定调用。

This technique allows the default rounder policies to be used directly with
user defined types. The user only requires that suitable overloads of `floor()` and `ceil()`
be visible. See also [link boost_numericconversion.type_requirements_and_user_defined_types_support User Defined Numeric Types]
support.\n
这一技术允许缺省的舍入器策略直接用于用户自定义类型。用户只要求适当的 `floor()` 和 `ceil()` 重载是可见的。
请参见 [link boost_numericconversion.type_requirements_and_user_defined_types_support 用户自定义数字类型的支持]。

[endsect]

[section:policy_rawconverter Policy RawConverter 策略RawConverter]

This ['stateless] template policy class is used to perform the 
actual conversion from Source to Target. It supplies the 
`low_level_convert()` static member function exposed by the 
converter, which means that it publicly inherits from this policy.\n
这个['无状态]模板策略类用于执行从源类型到目标类型的实际转换。它提供了由转换器所暴露的 `low_level_convert()` 静态成员函数，
即转换器是公有地继承自该策略的。

The policy must have the following interface:\n
该策略必须具有以下接口：

    template<class Traits>
    struct YourRawConverterPolicy
    {
        typedef typename Traits::result_type   result_type   ;
        typedef typename Traits::argument_type argument_type ;

        static result_type low_level_convert ( argument_type s ) { return <impl defined> ; }
    } ;


This policy is mostly provided as a hook for user defined types which don't support `static_cast<>` conversions to some types\n
对于不支持 `static_cast<>` 转换为某些类型的用户自定义类型，通常将这一策略作为一个吊钩提供。

This is the only raw converter policy class provided by the library:\n
以下是本库提供的唯一一个原始转换器策略类：

    namespace boost { namespace numeric {

        template<class Traits>
        struct raw_numeric_converter
        {
            typedef typename Traits::result_type   result_type   ;
            typedef typename Traits::argument_type argument_type ;

            static result_type low_level_convert ( argument_type s )
            {
                return static_cast<result_type>(s) ; 
            }
        } ;

    } }

[endsect]

[section:policy_userrangechecker Policy UserRangeChecker 策略UserRangeChecker ]

This ['stateless] template policy class is used [_only if supplied] 
to [*override] the internal range checking logic.\n
这个['无状态]模板策略类[_仅当]要[*重载]内部的范围检查逻辑时使用。

It supplies the `validate_range()` static member function 
exposed by the converter, which means that it publicly inherits 
from this policy.\n
它提供了由转换器所暴露的 `validate_range()` 静态成员函数，即转换器是公有地继承自该策略的。

The policy must have the following interface:\n
该策略必须具有以下接口：

    template<class Traits>
    struct YourRangeCheckerPolicy
    {
        typedef typename Traits::argument_type argument_type ;

        // Determines if the value 's' fits in the range of the Target type.
        // 判断值 's' 是否适合目标类型的范围
        static range_check_result out_of_range ( argument_type s ) ;

        // Checks whether the value 's' is out_of_range()
        // and passes the result of the check to the OverflowHandler policy.
        // 检查值 's' 是否为 out_of_range()，并将检查结果传递给 OverflowHandler 策略。
        static void validate_range ( argument_type s )
        {
            OverflowHandler()( out_of_range(s) ) ;
        }
    } ;


This policy is [*only] provided as a hook for user defined types which require
range checking (which is disabled by default when a UDT is involved).
The library provides a class: `UseInternalRangeChecker{}`; which is a ['fake]
`RangeChecker` policy used to signal the converter to use its internal
range checking implementation.\n
该策略[*仅]对需要范围检查(当涉及UDT时，缺省是禁用范围检查的)的用户自定义类型作为一个吊钩提供。
本库提供了一个类：`UseInternalRangeChecker{}`; 它是一个['假的] `RangeChecker` 策略，用于通知转换器使用内部的范围检查实现。

[endsect]

[endsect]







