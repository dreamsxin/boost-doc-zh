<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head>
<meta name="generator" content="HTML Tidy for Linux/x86 (vers 1st March 2004), see www.w3.org" />
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<link href="ublas.css" type="text/css" />
<title>Boost Basic Linear Algebra</title></head>

<body>
<h1><img src="../../../../boost.png" align="middle" />
基本线性代数(Basic Linear Algebra)</h1>
<p>uBLAS 是一个提供针对于密集矩阵，压缩矩阵，稀疏矩阵提供 <a href="http://www.netlib.org/blas">BLAS</a>  1级, 2级, 3级运算功能的C++模板类库。通过运算符重载和高效的基于表达式模板(expression template)技术来实现数学记法(mathematical notation)。</p>
<h2>功能</h2>
<p>uBLAS
是一个提供密集向量，单位向量，稀疏向量以及密集矩阵，方形矩阵(identity)，三角矩阵，带状矩阵，对称矩阵，埃尔米特矩阵和稀疏矩阵。向量和矩
阵可以使用范围(range)或切分(slice)和适配器类(adaptor class)来构造。这个库覆盖了通常的向量和矩阵的线性代数运算：
类似于不同范数的简化， 向量和矩阵的加法与减法，与标量的乘法，向量的内积，外积，矩阵与向量的积，矩阵与矩阵的积以及triangular
solver。 容器，视图(view)和表达式模板(expression templated)运算之间的联系主要是<a href="http://www.sgi.com/tech/stl">STL</a> 风格的迭代器接口。</p>
<p>有关最后变更的细节请参考 <a href="release_notes.htm">发布备注</a>。</p>
<h2>文档</h2>
<ul>
<li><big><a href="overview.htm">概览</a></big>
  <ul>
<li><a href="overview.htm#rationale">原理</a>
</li><li><a href="overview.htm#functionality">功能</a>
</li><li><a href="types_overview.htm">矩阵和向量类型概览</a></li>
<li><a href="operations_overview.htm">矩阵和向量运算概览</a></li>
<li><a href="#further_information">有效的 uBLAS 和 进一步的信息</a></li><li><a href="options.htm">宏与预处理选项</a> </li>
</ul>
</li>
<li><a href="vector.htm">向量(Vector)</a>
  <ul>
<li><a href="vector.htm#vector">向量(Vector)</a></li>
<li><a href="vector.htm#unit_vector">单位向量(Unit Vector)</a></li>
<li><a href="vector.htm#zero_vector">零向量(Zero Vector)</a></li>
<li><a href="vector.htm#scalar_vector">标量向量(Scalar Vector)</a></li>
</ul>
</li>
<li><a href="vector_sparse.htm">稀疏向量(Sparse Vector)</a>
  <ul>
<li><a href="vector_sparse.htm#mapped_vector">映射向量(Mapped
Vector)</a></li>
<li><a href="vector_sparse.htm#compressed_vector">压缩向量(Compressed
Vector)</a></li>
<li><a href="vector_sparse.htm#coordinate_vector">(Coordinate
Vector)</a></li>
</ul>
</li>
<li><a href="vector_proxy.htm">向量代理(Vector Proxies)</a>
  <ul>
<li><a href="vector_proxy.htm#vector_range">向量范围(Vector Range)</a></li>
<li><a href="vector_proxy.htm#vector_slice">向量切分(Vector Slice)</a></li>
</ul>
</li>
<li><a href="vector_expression.htm">向量表达式(Vector Expressions)</a>
  <ul>
<li><a href="vector_expression.htm#vector_expression">向量表达式(Vector
Expression)</a></li>
<li><a href="vector_expression.htm#vector_references">向量引用(Vector
References)</a></li>
<li><a href="vector_expression.htm#vector_operations">向量运算(Vector
Operations)</a></li>
<li><a href="vector_expression.htm#vector_reductions">向量简化(Vector
Reductions)</a></li>
</ul>
</li>
<li><a href="matrix.htm">矩阵(Matrix)</a>
  <ul>
<li><a href="matrix.htm#matrix">矩阵(Matrix)</a></li>
<li><a href="matrix.htm#identity_matrix">方形矩阵(Identity Matrix)</a></li>
<li><a href="matrix.htm#zero_matrix">零矩阵(Zero Matrix)</a></li>
<li><a href="matrix.htm#scalar_matrix">标量矩阵(Scalar Matrix)</a></li>
</ul>
</li>
<li><a href="triangular.htm">三角矩阵(Triangular Matrix)</a>
  <ul>
<li><a href="triangular.htm#triangular_matrix">三角矩阵(Triangular
Matrix)</a></li>
<li><a href="triangular.htm#triangular_adaptor">三角矩阵适配器(Triangular
Adaptor)</a></li>
</ul>
</li>
<li><a href="symmetric.htm">对称矩阵(Symmetric Matrix)</a>
  <ul>
<li><a href="symmetric.htm#symmetric_matrix">对称矩阵(Symmetric
Matrix)</a></li>
<li><a href="symmetric.htm#symmetric_adaptor">对称矩阵适配器(Symmetric
Adaptor)</a></li>
</ul>
</li>
<li><a href="hermitian.htm">埃尔米特矩阵(Hermitian Matrix)</a>
  <ul>
<li><a href="hermitian.htm#hermitian_matrix">埃尔米特矩阵(Hermitian
Matrix)</a></li>
<li><a href="hermitian.htm#hermitian_adaptor">埃尔米特矩阵(Hermitian
Adaptor)</a></li>
</ul>
</li>
<li><a href="banded.htm">带状矩阵(Banded Matrix)</a>
  <ul>
<li><a href="banded.htm#banded_matrix">带状矩阵(Banded Matrix)</a></li>
<li><a href="banded.htm#banded_adaptor">带状矩阵(Banded Adaptor)</a></li>
</ul>
</li>
<li><a href="matrix_sparse.htm">稀疏矩阵(Sparse Matrix)</a>
  <ul>
<li><a href="matrix_sparse.htm#mapped_matrix">映射矩阵(Mapped
Matrix)</a></li>
<li><a href="matrix_sparse.htm#compressed_matrix">压缩矩阵(Compressed
Matrix)</a></li>
<li><a href="matrix_sparse.htm#coordinate_matrix">(Coordinate
Matrix)</a></li>
</ul>
</li>
<li><a href="matrix_proxy.htm">矩阵策略(Matrix Proxies)</a>
  <ul>
<li><a href="matrix_proxy.htm#matrix_row">矩阵行(Matrix Row)</a></li>
<li><a href="matrix_proxy.htm#matrix_column">矩阵列(Matrix Column)</a></li>
<li><a href="matrix_proxy.htm#vector_range">向量范围(Vector Range)</a></li>
<li><a href="matrix_proxy.htm#vector_slice">向量切分(Vector Slice)</a></li>
<li><a href="matrix_proxy.htm#matrix_range">矩阵范围(Matrix Range)</a></li>
<li><a href="matrix_proxy.htm#matrix_slice">矩阵切分(Matrix Slice)</a></li>
</ul>
</li>
<li><a href="matrix_expression.htm">矩阵表达式(Matrix Expressions)</a>
  <ul>
<li><a href="matrix_expression.htm#matrix_expression">矩阵表达式(Matrix
Expression)</a></li>
<li><a href="matrix_expression.htm#matrix_references">矩阵引用(Matrix
References)</a></li>
<li><a href="matrix_expression.htm#matrix_operations">矩阵运算(Matrix
Operations)</a></li>
<li><a href="matrix_expression.htm#matrix_vector_operations">矩阵与向量运算(Matrix
Vector Operations)</a></li>
<li><a href="matrix_expression.htm#matrix_matrix_operations">(矩阵与矩阵的运算Matrix
Matrix Operations)</a></li>
</ul>
</li>
<li>存储和特殊容器
  <ul>
<li><a href="unbounded_array.htm">无限数组(Unbounded Array)</a></li>
<li><a href="bounded_array.htm">有限数组(Bounded Array)</a></li>
<li><a href="range.htm#range">(范围Range)</a></li>
<li><a href="range.htm#slice">切分(Slice)</a></li>
</ul>
</li>
<li><a href="storage_sparse.htm">稀疏存储(Sparse Storage)</a>
  <ul>
<li><a href="storage_sparse.htm#map_std">缺省标准映射(Default Standard
Map)</a></li>
<li><a href="storage_sparse.htm#map_array">映射数组(Map Array)</a></li>
</ul>
</li>
<li>运算和函数
  <ul>
<li><a href="products.htm">特殊乘积(Special Products)</a></li>
<li><a href="blas.htm">BLAS</a></li>
</ul>
</li><li>uBLAS 概念定义
  <ul>
<li><a href="container_concept.htm">容器概念(Container Concepts)</a>
  <ul>
<li><a href="container_concept.htm#vector">向量(Vector)</a></li>
<li><a href="container_concept.htm#matrix">矩阵(Matrix)</a></li>
</ul>
</li><li><a href="expression_concept.htm">表达式概念(Expression Concepts)</a>
  <ul>
<li><a href="expression_concept.htm#scalar_expression">标量表达式(Scalar
Expression)</a></li>
<li><a href="expression_concept.htm#vector_expression">向量表达式(Vector
Expression)</a></li>
<li><a href="expression_concept.htm#matrix_expression">矩阵表达式(Matrix
Expression)</a></li>
</ul>
</li><li><a href="storage_concept.htm">存储概念(Storage Concept)</a>
</li><li><a href="iterator_concept.htm">迭代器概念(Iterator Concepts)</a>
  <ul>
<li><a href="iterator_concept.htm#indexed_bidirectional_iterator">(索引双向迭代器Indexed
Bidirectional Iterator)</a></li>
<li><a href="iterator_concept.htm#indexed_random_access_iterator">索引随机访问迭代器(Indexed
Random Access Iterator)</a></li>
<li><a href="iterator_concept.htm#indexed_bidirectional_cr_iterator">索引双向列/行迭代器(Indexed
Bidirectional Column/Row Iterator)</a></li>
<li><a href="iterator_concept.htm#indexed_random_access_cr_iterator">索引随机访问列/行迭代器(Indexed Random
Access Column/Row Iterator)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2>支持的平台(Supported Platforms)</h2>
<p>当前版本的 uBLAS库需要一个现代的编译器(遵循ISO标准) 。这个发行版本的目标编译器和测试所基于的编译器如下：</p>
<ul>
<li>GCC 3.2.3, 3.3.x, 3.4.x, 4.0.x</li>
<li>MSVC 7.1, 8.0</li>
<li>ICC 8.0, 8.1</li>
<li>Visual age 6</li>
<li>Codewarrior 9.4, 9.5</li>
</ul>
<p>Boost 1.32.0 (以及更早版本)的 uBLAS库支持许多较老的编译器。如果你使用这样一个编译器，请使用这一个版本的 uBLAS 库。可以编译运行这个库较早版本的编译器如下：</p>
<ul>
<li>MSVC 6.0(使用 STLPort-4.5.3), 7.0, 7.1</li>
<li>GCC 2.95.x, 3.0.x, 3.1.x, 3.2.x, 3.3.x, 3.4.x</li>
<li>ICC 7.0, 7.1 8.0</li>
<li>Comeau 4.2.x</li>
<li>Codewarrior 8.3</li>
</ul>
<p>对于可能的问题请参考 Boost
回归测试(regression tests)。</p>
<a name="further_information"></a>
<h2>已知的限制(Known limitations):</h2>
<ul type="disc">
<li>库的实现假定线性内存地址模型(linear memory address model)。</li>
<li>调整(Tuning)集中于密集矩阵。</li>
</ul>
<h2>其它信息(Further Information)</h2>
<h3>库的位置和下载</h3>
<p>最新的稳定发行版本的 uBLAS 库是<a href="http://www.boost.org">Boost</a> 库的一部分。</p>
<h3>文档和讨论</h3>
<p>参考<a href="http://www.crystalclearsoftware.com/cgi-bin/boost_wiki/wiki.pl?Effective_UBLAS">
Effective uBLAS</a> wiki 来了解最新信息和贡献(contributions)。</p>
<p>同样也有一个活跃的 uBLAS <a href="http://lists.boost.org/">邮件列表</a> 来讨论和回答uBLAS特定的用户以及开发的问题。</p>
<h3>uBLAS 和 Boost 项目</h3>
<p>同样也有一个uBLAS库与uBLAS项目代码的差别的 <a href="http://lists.boost.org/">邮件列表</a> 。 你可以直接 <a href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/boost">浏览</a> 
Boost CVS 。 你可以在<a href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/boost/boost/boost/numeric/ublas/">
这里</a>找到这个库。文档和测试程序在<a href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/boost/boost/libs/numeric/ublas/">
这里</a>。</p>
<h2>作者与致谢</h2>
<p>uBLAS库由 Joerg Walter 和 Mathias Koch编写。我们要感谢所有的支持和对这个库的开发作出贡献的朋友： David Abrahams, Ed Brey, Fernando
Cacciola, Juan Jose Gomez Cadenas, Beman Dawes, Matt Davies, Bob
Fletcher, Kresimir Fresl, Joachim Kessel, Patrick Kowalzick, Toon
Knapen, Hendrik Kueck, John Maddock, Jens Maurer, Alexei Novakov,
Gary Powell, Joachim Pyras, Peter Schmitteckert, Jeremy Siek,
Markus Steffl, Michael Stevens, Benedikt Weber, Martin Weiser,
Gunter Winkler, Marc Zimmermann 以及<a href="http://www.boost.org">Boost</a>成员。</p>
<h2>常被问到的问题</h2>
<p>问题： 我运行 uBLAS 密集向量和密集矩阵性能测试程序( matrix benchmarks )。为什么我在纯C实现与这个库的实现中发现了一个明显的性能差距？<br />
回答： uBLAS 分为调试模式(进行大小和类型一致性检查，禁用表达式模板)以及发行模式(禁用大小和类型一致性检查，并使用表达式模板)。请检查，是否定义了<code>cassert</code> 的预处理符号<code>NDEBUG</code> 。<code>NDEBUG</code> 用于执行发行模式(release mode)，这种模式使用表达式模板。你可以定义<code>BOOST_UBLAS_NDEBUG</code> 来禁用所有的uBLAS库的限制(bounds)，结构和类型的检查。</p>
<p>问题： 我编写了一些 uBLAS 测试代码，试图在不同的矩阵类型之间进行赋值或者超出(overrun)向量和矩阵的维数。为什么我没有获得一个编译时或运行时的诊断信息(diagnostic)？<br />
回答：uBLAS 分为调试模式(进行大小和类型一致性检查，禁用表达式模板)以及发行模式(禁用大小和类型一致性检查，并使用表达式模板)。请检查，是否定义了<code>cassert</code> 的预处理符号<code>NDEBUG</code> 。<code></code><code>NDEBUG</code> 禁止调试模型( debug
mode )，调用模式进行大小和类型一致性检查。</p>
<p>问题：我编写了一些 uBLAS 性能测试程序(benchmarks)来测量矩阵链式乘法(chain multiplication)，类似于<code>prod (A, prod (B,
C))</code> 并看到了由于使用表达式模板而产生的一个明显的性能差别。我如何禁用表达式模板？<br />
回答：你不需要禁用表达式模板。请尝试使用<code>prod (A,</code>
<code><em>matrix_type</em></code> <code>(prod (B, C)))</code> 或 <code>prod (A, prod&lt;</code><code><em>matrix_type</em></code>
<code>&gt; (B, C))</code>来重新引入临时变量。</p>
<hr />
<p>Copyright (©) 2000-2009 Joerg Walter, Mathias Koch, Gunter Winkler<br />Use, 
modification and distribution are subject to the Boost Software License, Version 
1.0. (See accompanying file LICENSE_1_0.txt or copy at <a href="http://www.boost.org/LICENSE_1_0.txt">http://www.boost.org/LICENSE_1_0.txt</a> 
).</p>
<script type="text/javascript">
(function($) {
    $('#toc').toc();
})(jQuery);
</script><p>
</p>
</body></html>