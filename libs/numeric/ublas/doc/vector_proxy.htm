<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="generator" content=
"HTML Tidy for Linux/x86 (vers 1st March 2004), see www.w3.org" />
<meta http-equiv="Content-Type" content=
"text/html; charset=UTF-8" />
<link href="ublas.css" type="text/css" />
<title>Vector Proxies</title>
</head>
<body>
<h1><img src="../../../../boost.png" align="middle" />
向量代理(Vector Proxies)</h1>
<h2><a name="vector_range" id="vector_range"></a>向量范围(Vector Range)</h2>
<h4>说明</h4>
<p>模板类<code>vector_range&lt;V&gt;</code> 允许定位(addressing)向量元素的一个子范围(sub-range)。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/vector.hpp&gt;
#include &lt;boost/numeric/ublas/vector_proxy.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    vector&lt;double&gt; v (3);
    vector_range&lt;vector&lt;double&gt; &gt; vr (v, range (0, 3));
    for (unsigned i = 0; i &lt; vr.size (); ++ i)
        vr (i) = i;
    std::cout &lt;&lt; vr &lt;&lt; std::endl;
}
</pre>
<h4>定义</h4>
<p>定义在头文件 vector_proxy.hpp 中。 </p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>V</code></td>
<td>被引用的向量的类型。</td>
<td></td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 。
</p>
<p>如果指定的切分(slice)落在向量的索引(index)范围之外，那么<code>vector_range</code> 就不是一个良构的(well formed)向量表达式。也就是说，访问向量的索引范围之外的元素是<i>未定义的(undefined)</i>。</p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href=
"expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 所施加的类型要求。 </p>
<h4>公有基类(Public base classes)</h4>
<p><code>vector_expression&lt;vector_range&lt;V&gt; &gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>vector_range (vector_type &amp;data, const range
&amp;r)</code></td>
<td>构造一个子向量(sub vector)。</td>
</tr>
<tr>
<td><code>size_type start () const</code></td>
<td>返回子向量的开始位置。</td>
</tr>
<tr>
<td><code>size_type size () const</code></td>
<td>返回子向量的大小。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i)
const</code></td>
<td>返回第<code>i</code>个元素的常引用。</td>
</tr>
<tr>
<td><code>reference operator () (size_type i)</code></td>
<td>返回第<code>i</code>个元素的引用。</td>
</tr>
<tr>
<td><code>const_reference operator [] (size_type i)
const</code></td>
<td>返回第<code>i</code>个元素的常引用。</td>
</tr>
<tr>
<td><code>reference operator [] (size_type i)</code></td>
<td>返回第<code>i</code>个元素的引用。</td>
</tr>
<tr>
<td><code>vector_range &amp;operator = (const vector_range
&amp;vr)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>vector_range &amp;assign_temporary (vector_range
&amp;vr)</code></td>
<td>赋值给一个临时变量。可能会改变向量范围(vector range)
<code>vr</code> 。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
vector_range &amp;operator = (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>扩展赋值运算符。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
vector_range &amp;assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个向量表达式赋给一个子向量(sub vector)。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
vector_range &amp;operator += (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个向量表达式加到一个子向量中。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
vector_range &amp;plus_assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个向量表达式加到一个子向量中。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
vector_range &amp;operator -= (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。从一个子向量中减去一个向量表达式。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
vector_range &amp;minus_assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>从一个子向量中减去一个向量表达式。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
vector_range &amp;operator *= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。 将一个子向量乘以一个标量。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
vector_range &amp;operator /= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个子向量除以一个标量。</td>
</tr>
<tr>
<td><code>void swap (vector_range &amp;vr)</code></td>
<td>交换子向量的内容。</td>
</tr>
<tr>
<td><code>const_iterator begin () const</code></td>
<td>返回指向<code>vector_range</code>开始处的<code>const_iterator</code>。</td>
</tr>
<tr>
<td><code>const_iterator end () const</code></td>
<td>返回指向<code>vector_range</code>终止处的<code>const_iterator</code>。</td>
</tr>
<tr>
<td><code>iterator begin ()</code></td>
<td>返回指向<code>vector_range</code>开始处的<code>iterator</code>。</td>
</tr>
<tr>
<td><code>iterator end ()</code></td>
<td>返回指向<code>vector_range</code>终止处的<code>iterator</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rbegin () const</code></td>
<td>返回指向反转的(reversed)<code>vector_range</code>开始处的<code>const_reverse_iterator</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rend () const</code></td>
<td>返回指向反转的(reversed)<code>vector_range</code>终止处的<code>const_reverse_iterator</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator rbegin ()</code></td>
<td>返回指向反转的(reversed)<code>vector_range</code>开始处的<code>reverse_iterator</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator rend ()</code></td>
<td>返回指向反转的(reversed)<code>vector_range</code>终止处的<code>reverse_iterator</code>。</td>
</tr>
</tbody>
</table>
<h3>Simple Projections</h3>
<h4>说明</h4>
<p>自由函数<code>subrange</code> 支持构造向量的范围(vector ranges)。</p>
<h4>原型</h4>
<pre><code>
    template&lt;class V&gt;
    vector_range&lt;V&gt; subrange (V &amp;data,
       V::size_type start, V::size_type stop);
    template&lt;class V&gt;
    const vector_range&lt;const V&gt; subrange (const V &amp;data,
       V::size_type start, V::size_type stop);
</code></pre>
<h3>Generic Projections</h3>
<h4>说明</h4>
<p>自由函数<code>project</code> 支持构造向量范围( vector ranges )。已经存在的<code>matrix_range</code> 可以使用其它的范围来组合。结果范围使用已经存在的范围的范围的<code>compose</code> 函数来计算。</p>
<h4>原型</h4>
<pre><code>
    template&lt;class V&gt;
    vector_range&lt;V&gt; project (V &amp;data, const range &amp;r);
    template&lt;class V&gt;
    const vector_range&lt;const V&gt; project (const V &amp;data, const range &amp;r);
    template&lt;class V&gt;
    vector_range&lt;V&gt; project (vector_range&lt;V&gt; &amp;data, const range &amp;r);
    template&lt;class V&gt;
    const vector_range&lt;V&gt; project (const vector_range&lt;V&gt; &amp;data, const range &amp;r);
</code></pre>
<h4>定义</h4>
<p>定义在头文件 vector_proxy.hpp 中。</p>
<h4>类型要求(Type requirements)</h4>
<ul>
<li><code>V</code>  是一个 <a href=
"expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 模型。</li>
</ul>
<h4>复杂度(Complexity)</h4>
<p>依赖于范围大小的线性复杂度。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/vector.hpp&gt;
#include &lt;boost/numeric/ublas/vector_proxy.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    vector&lt;double&gt; v (3);
    for (int i = 0; i &lt; 3; ++ i)
        project (v, range (0, 3)) (i) = i;
    std::cout &lt;&lt; project (v, range (0, 3)) &lt;&lt; std::endl;
}
</pre>
<h2><a name="vector_slice" id="vector_slice"></a>向量切分(Vector Slice)</h2>
<h4>说明</h4>
<p>模板类<code>vector_slice&lt;V&gt;</code> 允许定位(addressing)向量的切分( slice )。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/vector.hpp&gt;
#include &lt;boost/numeric/ublas/vector_proxy.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    vector&lt;double&gt; v (3);
    vector_slice&lt;vector&lt;double&gt; &gt; vs (v, slice (0, 1, 3));
    for (unsigned i = 0; i &lt; vs.size (); ++ i)
        vs (i) = i;
    std::cout &lt;&lt; vs &lt;&lt; std::endl;
}
</pre>
<h4>定义</h4>
<p>定义在头文件 vector_proxy.hpp 中。 </p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>V</code></td>
<td>被引用的向量的类型。</td>
<td></td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 。 </p>
<p>如果指定的切分(slice)落在向量的索引(index)范围之外，那么<code>vector_slice</code> 就不是一个良构的(well formed)向量表达式。也就是说，访问向量的索引范围之外的元素是<i>未定义的(undefined)</i>。</p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href=
"expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 所施加的类型要求。</p>
<h4>公有基类(Public base classes)</h4>
<p><code>vector_expression&lt;vector_slice&lt;V&gt; &gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>vector_slice (vector_type &amp;data, const slice
&amp;s)</code></td>
<td>构造一个子向量。</td>
</tr>
<tr>
<td><code>size_type size () const</code></td>
<td>返回子向量的大小。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i)
const</code></td>
<td>返回第<code>i</code>个元素的常引用。</td>
</tr>
<tr>
<td><code>reference operator () (size_type i)</code></td>
<td>返回第<code>i</code>个元素的引用。</td>
</tr>
<tr>
<td><code>const_reference operator [] (size_type i)
const</code></td>
<td>返回第<code>i</code>个元素的常引用。</td>
</tr>
<tr>
<td><code>reference operator [] (size_type i)</code></td>
<td>返回第<code>i</code>个元素的引用。</td>
</tr>
<tr>
<td><code>vector_slice &amp;operator = (const vector_slice
&amp;vs)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>vector_slice &amp;assign_temporary (vector_slice
&amp;vs)</code></td>
<td>赋值给一个临时变量。可能会改变向量切分(vector slice)
<code>vs</code> 。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
vector_slice &amp;operator = (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>扩展赋值运算符。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
vector_slice &amp;assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个向量表达式赋给一个子向量。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
vector_slice &amp;operator += (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个向量表达式加到一个子向量中。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
vector_slice &amp;plus_assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个向量表达式加到一个子向量中。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
vector_slice &amp;operator -= (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。从一个子向量中减去一个向量表达式。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
vector_slice &amp;minus_assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>从一个子向量中减去一个向量表达式。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
vector_slice &amp;operator *= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个子向量乘以一个标量。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
vector_slice &amp;operator /= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个子向量除以一个标量。</td>
</tr>
<tr>
<td><code>void swap (vector_slice &amp;vs)</code></td>
<td>交换子向量有内容。</td>
</tr>
<tr>
<td><code>const_iterator begin () const</code></td>
<td>返回指向<code>vector_slice</code>开始处的<code>const_iterator</code>。</td>
</tr>
<tr>
<td><code>const_iterator end () const</code></td>
<td>返回指向<code>vector_slice</code>终止处的<code>const_iterator</code>。</td>
</tr>
<tr>
<td><code>iterator begin ()</code></td>
<td>返回指向<code>vector_slice</code>开始处的<code>iterator</code>。</td>
</tr>
<tr>
<td><code>iterator end ()</code></td>
<td>返回指向<code>vector_slice</code>终止处的<code>iterator</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rbegin () const</code></td>
<td>返回指向反转的(reversed)<code>vector_slice</code>开始处的<code>const_reverse_iterator</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rend () const</code></td>
<td>返回指向反转的(reversed)<code>vector_slice</code>终止处的<code>const_reverse_iterator</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator rbegin ()</code></td>
<td>返回指向反转的(reversed)<code>vector_slice</code>开始处的<code>reverse_iterator</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator rend ()</code></td>
<td>返回指向反转的(reversed)<code>vector_slice</code>终止处的<code>reverse_iterator</code>。</td>
</tr>
</tbody>
</table>
<h3>Simple Projections</h3>
<h4>说明</h4>
<p>自由函数<code>subslice</code> 支持构造向量切分(vector slices)。</p>
<h4>原型</h4>
<pre><code>
    template&lt;class V&gt;
    vector_slice&lt;V&gt; subslice (V &amp;data,
       V::size_type start, V::difference_type stride, V::size_type size);
    template&lt;class V&gt;
    const vector_slice&lt;const V&gt; subslice (const V &amp;data,
       V::size_type start, V::difference_type stride, V::size_type size);
</code></pre>
<h3>Generic Projections</h3>
<h4>说明</h4>
<p>自由函数<code>project</code> 支持构造向量切分( vector slices )。已经存在的函数<code>vector_slice</code> 可以用其它的范围和切分(slice)来组合。切分(slice)结果使用已经存在的切分( slices )的 <code>compose</code> 函数来计算。</p>
<h4>原型</h4>
<pre><code>
    template&lt;class V&gt;
    vector_slice&lt;V&gt; project (V &amp;data, const slice &amp;s);
    template&lt;class V&gt;
    const vector_slice&lt;const V&gt; project (const V &amp;data, const slice &amp;s);
    template&lt;class V&gt;
    vector_slice&lt;V&gt; project (vector_slice&lt;V&gt; &amp;data, const range &amp;r);
    template&lt;class V&gt;
    const vector_slice&lt;V&gt; project (const vector_slice&lt;V&gt; &amp;data, const range &amp;r);
    template&lt;class V&gt;
    vector_slice&lt;V&gt; project (vector_slice&lt;V&gt; &amp;data, const slice &amp;s);
    template&lt;class V&gt;
    const vector_slice&lt;V&gt; project (const vector_slice&lt;V&gt; &amp;data, const slice &amp;s);
</code></pre>
<h4>定义</h4>
<p>定义在头文件 vector_proxy.hpp 中。</p>
<h4>类型要求(Type requirements)</h4>
<ul>
<li><code>V</code> 是一个 <a href=
"expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 模型。</li>
</ul>
<h4>复杂度(Complexity)</h4>
<p>依赖于slice大小的线性复杂度。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/vector.hpp&gt;
#include &lt;boost/numeric/ublas/vector_proxy.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    vector&lt;double&gt; v (3);
    for (int i = 0; i &lt; 3; ++ i)
        project (v, slice (0, 1, 3)) (i) = i;
    std::cout &lt;&lt; project (v, slice (0, 1, 3)) &lt;&lt; std::endl;
}
</pre>
<hr />
<p>Copyright (&copy;) 2000-2002 Joerg Walter, Mathias Koch<br />
   Use, modification and distribution are subject to the
   Boost Software License, Version 1.0.
   (See accompanying file LICENSE_1_0.txt
   or copy at <a href="http://www.boost.org/LICENSE_1_0.txt">
      http://www.boost.org/LICENSE_1_0.txt
   </a>).
</p>
</body>
</html>
