<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="generator" content=
"HTML Tidy for Linux/x86 (vers 1st March 2004), see www.w3.org" />
<meta http-equiv="Content-Type" content=
"text/html; charset=UTF-8" />
<link href="ublas.css" type="text/css" />
<title>Container Concepts</title>
</head>
<body>
<h1><img src="../../../../boost.png" align="middle" />
容器概念(Container Concepts)</h1>
<h2><a name="vector" id="vector"></a>向量(Vector)</h2>
<h4>说明</h4>
<p>一个向量(Vector)描述密集向量(dense)，压缩向量( packed)和稀疏向量(sparse)的共通方面(common aspects)。</p>
<h4>优化(Refinement of)</h4>
<p><a href="http://www.sgi.com/tech/stl/DefaultConstructible.html">缺省构造(DefaultConstructible)</a>,
<a href="expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a>
<a href="#vector_expression_note">[1]</a>。</p>
<h4>相关类型</h4>
<p>作为对于<a href="expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a>所定义类型的补充。</p>
<table border="1" summary="types">
<tbody>
<tr>
<td>公有(Public base)</td>
<td>vector_container&lt;V&gt;</td>
<td>V 必须派生自这个公有基类。</td>
</tr>
<tr>
<td>Storage array</td>
<td>V::array_type</td>
<td>
仅针对于密集向量(Dense Vector)。内部的存储数组(storage array)类型用于存储元素。array_type必须是
<a href="storage_concept.htm"><b>存储(Storage)</b></a> 概念模型(concept model)。</td>
</tr>
</tbody>
</table>
<h4>记法(Notation)</h4>
<table border="0" summary="notation">
<tbody>
<tr>
<td><code>V</code></td>
<td>一个向量模型的类型。</td>
</tr>
<tr>
<td><code>v</code></td>
<td><code>V</code>类型的对象。</td>
</tr>
<tr>
<td><code>n, i</code></td>
<td>可以转化为<code>size_type</code>类型的对象。</td>
</tr>
<tr>
<td><code>t</code></td>
<td>可以转化为<code>value_type</code>类型的对象。</td>
</tr>
<tr>
<td><code>p</code></td>
<td>可以转化为<code>bool</code>类型的对象。</td>
</tr>
</tbody>
</table>
<h4>定义</h4>
<h4>合法表达式</h4>
<p>除了在<a href="http://www.sgi.com/tech/stl/DefaultConstructible.html">缺省构造(DefaultConstructible)</a>,
<a href="expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 中定义的表达式，下面的表达式应当是合法的。</p>
<table border="1" summary="expressions">
<tbody>
<tr>
<th>名称</th>
<th>表达式</th>
<th>类型要求</th>
<th>返回值类型</th>
</tr>
<tr>
<td>带有向量大小参数的构造函数(Sizing constructor)</td>
<td><code>V v (n)</code></td>
<td>&nbsp;</td>
<td><code>V</code></td>
</tr>
<tr>
<td>插入</td>
<td><code>v.insert_element (i, t)</code></td>
<td><code>v</code> 是可变化的(mutable)。</td>
<td><code>void</code></td>
</tr>
<tr>
<td>删除</td>
<td><code>v.erase_element (i)</code></td>
<td><code>v</code> 是可变化的(mutable)。</td>
<td><code>void</code></td>
</tr>
<tr>
<td>清除</td>
<td><code>v.clear ()</code></td>
<td><code>v</code> 是可变化的(mutable)。</td>
<td><code>void</code></td>
</tr>
<tr>
<td>改变大小</td>
<td><code>v.resize (n)</code><br />
<code>v.resize (n, p)</code></td>
<td><code>v</code> is mutable.</td>
<td><code>void</code></td>
</tr>
<tr>
<td>存储(Storage)</td>
<td><code>v.data()</code></td>
<td><code>v</code> is mutable and Dense.</td>
<td><code>array_type&amp;</code> if a is mutable, <code>const array_type&amp;</code> otherwise</td>
</tr>
</tbody>
</table>
<h4>表达式语义(Expression semantics)</h4>
<p>仅当一个表达式的语义不同于或没有在<a href=
"expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 中定义时才得以定义。 </p>
<table border="1" summary="semantics">
<tr>
<th>名称</th>
<th>表达式</th>
<th>先决条件(Precondition)</th>
<th>语义</th>
<th>后置条件(Postcondition)</th>
</tr>
<tr>
<td>带有向量大小参数的构造函数(Sizing constructor)</td>
<td><code>V v (n)</code></td>
<td><code>n &gt;= 0</code></td>
<td>构造一个<code>n</code>个元素的向量。</td>
<td><code>v.size () == n</code>.</td>
</tr>
<tr>
<td>元素访问 <a href="#element_access_note">[2]</a></td>
<td><code>v[n]</code></td>
<td><code>0&lt;n&gt;v.size()</code></td>
<td>返回 v 中的第 n 个元素</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>插入</td>
<td><code>v.insert_element (i, t)</code></td>
<td><code>0 &lt;= i &lt; v.size ()</code>.</td>
<td>将<code>t</code>插入到<code>v (i)</code>。
向量的存储空间可能需要增加。</td>
<td><code>v (i)</code> 等于 <code>t</code>。</td>
</tr>
<tr>
<td>删除</td>
<td><code>v.erase_element (i)</code></td>
<td><code>0 &lt;= i &lt; v.size ()</code></td>
<td>销毁(Destroys)元素<code>v (i)</code> 并使用缺省值
<code>value_type ()</code>代替。
向量的存储空间可能会减少。</td>
<td><code>v (i)</code> 等于 <code>value_type ()</code>。</td>
</tr>
<tr>
<td>清除</td>
<td><code>v.clear ()</code></td>
<td>&nbsp;</td>
<td>等价于<br />
<code>for (i = 0; i &lt; v.size (); ++ i)</code><br />
&nbsp; <code>v.erase_element (i);</code></td>
<td>&nbsp;</td>
</tr>
<tr>
<td>改变大小</td>
<td><code>v.resize (n)
<br />v.resize (n, p)</code></td>
<td>&nbsp;</td>
<td>重新分配一个包含<code>n</code>
个元素的向量。<br />
删除或附加元素，使得向量的大小为要求的大小。附加的元素为<code>value_type()</code>的拷贝。
<br />
当 <code>p == false</code> 时，那么，已经存在的元素将不会保留并且元素不会像通常情况那样被附加(appended)。 
反之，向量的状态与使用等价的带有向量大小的参数的构造函数之后的状态一样。</td>
<td><code>v.size () == n</code>.</td>
</tr>
<tr>
<td>Storage</td>
<td><code>v.data()</code></td>
<td></td>
<td>返回内部的密集存储(dense storage)的引用。</td>
<td>&nbsp;</td>
</tr>
</table>
<h4>复杂度保证(Complexity guarantees)</h4>
<p>  带有向量大小参数的构造函数的运行时复杂度(run-time complexity)是依赖于向量大小的线性复杂度。</p>
<p> insert_element 和 erase_element 对于特定于向量模型(
Vector model )且运行时复杂度(run-time complexity)依赖于存储空间的增加/减少。</p>
<p>改变大小( resize )的运行时复杂度(run-time complexity)是依赖于向量大小的线性复杂度。</p>
<h4>不变量(Invariants)</h4>
<h4>模型(Models)</h4>
<ul>
<li><code>vector</code>, <code>bounded_vector</code>, <code>c_vector</code></li>
<li><code>unit_vector</code>, <code>zero_vector</code>, <code>scalar_vector</code></li>
<li><code>mapped_vector;</code>, <code>compressed_vector</code>, <code>coordinate_vector</code></li>
</ul>
<h4>注意</h4>
<p><a name="vector_expression_note">[1]</a>
作为一个用户，你不需要关心<tt>Vector</tt> 是VectorExpression的一个优化。<tt>Vector</tt>是VectorExpression 的优化只是对于模板表达式引擎(template-expression engine)而不是对用户很重要。</p>
<p><a name="element_access_note">[2]</a>
添加运算<code>operator[]</code> 纯粹是为了方便和与<code>std::vector</code>的兼容。在 uBLAS 库中，通常使用<code>operator()</code> ，因为这个运算符可以用于向量和矩阵。</p>
<h2><a name="matrix" id="matrix"></a>矩阵(Matrix)</h2>
<h4>说明</h4>
<p>一个矩阵定义了密集矩阵(dense)，压缩矩阵(packed)，和稀疏矩阵(sparse)的共通方面( common aspects )。</p>
<h4>优化(Refinement of)</h4>
<p><a href="http://www.sgi.com/tech/stl/DefaultConstructible.html">缺省构造(DefaultConstructible)</a>,
<a href="expression_concept.htm#matrix_expression">矩阵表达式(Matrix Expression)</a>
<a href="#matrix_expression_note">[1]</a> 。
</p>
<h4>相关类型</h4>
<p>作为对<a href="expression_concept.htm#matrix_expression">矩阵表达式(Matrix Expression)</a>所定义类型的补充。</p>
<table border="1" summary="types">
<tbody>
<tr>
<td>公有基类</td>
<td>matrix_container&lt;M&gt;</td>
<td>M 必须从这个公有基类派生。</td>
</tr>
<tr>
<td>存储数组(Storage array)</td>
<td>M::array_type</td>
<td>仅针对于密集矩阵(Dense Matrix)。内部的存储数组用于存储元素。array_type必须是
<a href="storage_concept.htm"><b>存储(Storage)</b></a>概念模型(concept model)。</td>
</tr>
</tbody>
</table>
<h4>记法(Notation)</h4>
<table border="0" summary="notation">
<tbody>
<tr>
<td><code>M</code></td>
<td>矩阵模型的类型。</td>
</tr>
<tr>
<td><code>m</code></td>
<td><code>M</code>类型的对象。</td>
</tr>
<tr>
<td><code>n1, n2, i, j</code></td>
<td>可以转化为<code>size_type</code>类型的对象。</td>
</tr>
<tr>
<td><code>t</code></td>
<td>可以转化为<code>value_type</code>类型的对象。</td>
</tr>
<tr>
<td><code>p</code></td>
<td>可以转化为<code>bool</code>类型的对象。</td>
</tr>
</tbody>
</table>
<h4>定义</h4>
<h4>合法表达式</h4>
<p>除了在<a href=
"expression_concept.htm#matrix_expression">矩阵表达式(Matrix Expression)</a> 中定义的表达式，下面的表达式应当是合法的。</p>
<table border="1" summary="expressions">
<tbody>
<tr>
<th>名称</th>
<th>表达式</th>
<th>类型要求</th>
<th>返回值类型</th>
</tr>
<tr>
<td>带有矩阵大小参数的构造函数(Sizing constructor)</td>
<td><code>M m (n1, n2)</code></td>
<td>&nbsp;</td>
<td><code>M</code></td>
</tr>
<tr>
<td>插入</td>
<td><code>m.insert_element (i, j, t)</code></td>
<td><code>m</code> 是可变的(mutable)。</td>
<td><code>void</code></td>
</tr>
<tr>
<td>删除</td>
<td><code>m.erase_element (i, j)</code></td>
<td><code>m</code> 是可变的(mutable)。</td>
<td><code>void</code></td>
</tr>
<tr>
<td>清除</td>
<td><code>m.clear ()</code></td>
<td><code>m</code> 是可变的(mutable)。</td>
<td><code>void</code></td>
</tr>
<tr>
<td>改变大小</td>
<td><code>m.resize (n1, n2)</code><br />
<code>m.resize (n1, n2, p)</code></td>
<td><code>m</code> 是可变的(mutable)。</td>
<td><code>void</code></td>
</tr>
<tr>
<td>存储(Storage)</td>
<td><code>m.data()</code></td>
<td><code>m</code> 是可变的(mutable)且是密集的(Dense)。</td>
<td>如果是可变的，就是<code>array_type&amp;</code>， 否则是<code>const array_type&amp;</code>。</td>
</tr>
</tbody>
</table>
<h4>表达式语义(Expression semantics)</h4>
<p>仅当一个表达式的语义不同于或没有在 <a href=
"expression_concept.htm#matrix_expression">矩阵表达式(Matrix Expression)</a> 中定义时才得以定义。</p>
<table border="1" summary="semantics">
<tbody>
<tr>
<th>名称</th>
<th>表达式</th>
<th>先决条件(Precondition)</th>
<th>语义</th>
<th>后置条件(Postcondition)</th>
</tr>
<tr>
<td>带有矩阵大小参数的构造函数(Sizing constructor)</td>
<td><code>M m (n1, n2)</code></td>
<td><code>n1 &gt;= 0</code> and <code>n2 &gt;= 0</code></td>
<td>构造一个<code>n1</code>行<code>n2</code>列的矩阵。
</td>
<td><code>m.size1 () == n1</code> and <code>m.size2 () ==
n2</code>。</td>
</tr>
<tr>
<td>插入</td>
<td><code>m.insert_element (i, j, t)</code></td>
<td><code>0 &lt;= i &lt; m.size1 ()</code>,<br />
<code>0 &lt;= j &lt; m.size2 ()</code>.</td>
<td>将一个元素<code>t</code>插入到<code>m (i, j)</code>。
矩阵的存储空间可能会增长。</td>
<td><code>m (i, j)</code> 等于 <code>t</code>。</td>
</tr>
<tr>
<td>删除</td>
<td><code>m.erase_element (i, j)</code></td>
<td><code>0 &lt;= i &lt; m.size1 ()</code>and <code><br />
0 &lt;= j &lt; m.size2</code></td>
<td>销毁元素<code>m (i, j)</code>并使用缺省值
<code>value_type ()</code>取代。
矩阵的存储空间可能会减少。</td>
<td><code>m (i, j)</code> 等于 <code>value_type ()</code>。</td>
</tr>
<tr>
<td>清除</td>
<td><code>m.clear ()</code></td>
<td>&nbsp;</td>
<td>等价于<br />
<code>for (i = 0; i &lt; m.size1 (); ++ i)</code><br />
&nbsp; <code>for (j = 0; j &lt; m.size2 (); ++ j)</code><br />
&nbsp; &nbsp; <code>m.erase_element (i, j);</code></td>
<td>&nbsp;</td>
</tr>
<tr>
<td>改变大小</td>
<td><code>m.resize (n1, n2)
<br />
m.resize (n1, n2, p)
</code></td>
<td>&nbsp;</td>
<td>重新分配一个<code>n1</code> 行
<code>n2</code>列的矩阵。<br />
删除或附加元素，使得矩阵的大小为要求的大小。附加的元素是<code>value_type()</code>
的拷贝。<br />
当<code>p == false</code>时，那么已经存在的元素将不被保留且元素不会被附加。
反之，这个矩阵的状态与使用一个相同的大小参数来构造的矩阵状态是一样的。</td>
<td><code>m.size1 () == n1</code> and <code>m.size2 () == n2</code>。</td>
</tr>
<tr>
<td>存储(Storage)</td>
<td><code>m.data()</code></td>
<td></td>
<td>返回内部的密集存储(dense storage)的引用。</td>
<td>&nbsp;</td>
</tbody>
</table>
<h4>复杂度保证(Complexity guarantees)</h4>
<p>带有向量大小参数的构造函数的运行时复杂度(run-time complexity)是依赖于矩阵大小的二次方复杂度。</p>
<p>insert_element 和 erase_element 对于特定于矩阵模型( Matrix model )且运行时复杂度(run-time complexity)依赖于存储空间的增加/减少。</p>
<p>改变大小( resize )的运行时复杂度(run-time complexity)是依赖于矩阵大小的二次方复杂度。</p>
<h4>不变量(Invariants)</h4>
<h4>模型(Models)</h4>
<ul>
<li><code>matrix</code>, <code>bounded_matrix</code>, <code>c_matrix</code></li>
<li><code>identity_matrix</code> , <code>zero_matrix</code> , <code>scalar_matrix</code></li>
<li><code>triangular_matrix</code> , <code>symmetric_matrix</code> , <code>banded_matrix</code></li>
<li><code>mapped_matrix</code> , <code>compressed_matrix</code> , <code>coordinate_matrix</code></li>
</ul>
<h4>注意</h4>
<p><a name="matrix_expression_note">[1]</a>
作为一个用户，你不需要关心<tt>Matrix</tt> 是MatrixExpression的一个优化。<tt>Matrix</tt>是MatrixExpression 的优化只是对于模板表达式引擎(template-expression engine)而不是对用户很重要。</p>
<hr />
<p>Copyright (&copy;) 2000-2002 Joerg Walter, Mathias Koch<br />
   Use, modification and distribution are subject to the
   Boost Software License, Version 1.0.
   (See accompanying file LICENSE_1_0.txt
   or copy at <a href="http://www.boost.org/LICENSE_1_0.txt">
      http://www.boost.org/LICENSE_1_0.txt
   </a>).
</p>
</body>
</html>
