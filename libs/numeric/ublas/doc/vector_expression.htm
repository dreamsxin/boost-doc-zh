<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="generator" content=
"HTML Tidy for Linux/x86 (vers 1st March 2004), see www.w3.org" />
<meta http-equiv="Content-Type" content=
"text/html; charset=UTF-8" />
<link href="ublas.css" type="text/css" />
<title>Vector Expressions</title>
</head>
<body>
<h1><img src="../../../../boost.png" align="middle" />
向量表达式(Vector Expressions)</h1>
<h2><a name="vector_expression" id="vector_expression"></a>向量表达式(Vector Expression)</h2>
<h4>说明</h4>
<p>要求模板类<code>vector_expression&lt;E&gt;</code>
是所有的对向量表达式概念(Vector Expression concept)建模的类的公有基类。</p>
<h4>定义</h4>
<p>定义在头文件 expression_types.hpp 中。 </p>
<h4>模板参数(模板参数)</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>E</code></td>
<td>向量表达式的类型</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<h4>模型(模型(Model of))</h4>
<p>没有。<u>不是一个向量表达式(Not a Vector Expression)</u>!
</p>
<h4>类型要求(类型要求)</h4>
<p>没有。</p>
<h4>公有基类(公有基类)</h4>
<p>没有。</p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>const expression_type &amp;operator () ()
const</code></td>
<td>返回表达式的一个常引用。</td>
</tr>
<tr>
<td><code>expression_type &amp;operator () ()</code></td>
<td>返回表达式的一个引用。</td>
</tr>
</tbody>
</table>
<h4>注意</h4>
<p>函数<code>range</code>, <code>slice</code> 和 <code>project</code> 被删除了。使用定义在<a href="vector_proxy.htm">向量策略(vector proxy)</a> 中的自由函数代替。</p>

<h2><a name="vector_container" id="vector_container"></a>向量容器(Vector Container)</h2>
<h4>说明</h4>
<p>要求模板类<code>vector_container&lt;C&gt;</code>
是所以的对向量概念建模的类的公有包含类<code>vector</code>本身。</p>
<h4>定义</h4>
<p>定义在头文件 expression_types.hpp 中。</p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>C</code></td>
<td>向量容器的类型</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><u>不是一个向量表达式(Not a Vector Expression)或向量</u>! </p>
<h4>类型要求</h4>
<p>没有。</p>
<h4>公有基类</h4>
<p><code>vector_expression&lt;C&gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>const container_type &amp;operator () ()
const</code></td>
<td>返回常量的一个常引用。</td>
</tr>
<tr>
<td><code>container_type &amp;operator () ()</code></td>
<td>返回容器的一个引用。</td>
</tr>
</tbody>
</table>

<h2><a name="vector_references" id="vector_references"></a>向量表达式参考</h2>
<h3>参考</h3>
<h4>说明</h4>
<p>模板类<code>vector_reference&lt;E&gt;</code>
向量表达式的引用。</p>
<h4>定义</h4>
<p>定义在头文件 expression_types.hpp 中。</p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>E</code></td>
<td>向量表达式的类型</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 。
</p>
<h4>类型要求</h4>
<p>没有，除了由<a href=
"expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 所施加的类型要求。</p>
<h4>公有基类</h4>
<p><code>vector_expression&lt;vector_reference&lt;E&gt;
&gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>vector_reference (expression_type &amp;e)</code></td>
<td>构造表达式的一个引用。</td>
</tr>
<tr>
<td><code>void resize (size_type size)</code></td>
<td>重置表达式的大小来获取至多<code>size</code>个元素。
</td>
</tr>
<tr>
<td><code>size_type size () const</code></td>
<td>返回表达式的大小。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i)
const</code></td>
<td>返回第<code>i</code>-th个元素的值。</td>
</tr>
<tr>
<td><code>reference operator () (size_type i)</code></td>
<td>返回一个指向第<code>i</code>-th个元素的引用。</td>
</tr>
<tr>
<td><code>const_iterator begin () const</code></td>
<td>返回指向表达式开始处的<code>const_iterator</code>
。</td>
</tr>
<tr>
<td><code>const_iterator end () const</code></td>
<td>返回一个指向表达式终止处的<code>const_iterator</code>。
</td>
</tr>
<tr>
<td><code>iterator begin ()</code></td>
<td>返回一个指向表达式开始处的<code>iterator</code>。
</td>
</tr>
<tr>
<td><code>iterator end ()</code></td>
<td>返回一个指向表达式终止处的<code>iterator</code></td>
</tr>
<tr>
<td><code>const_reverse_iterator rbegin () const</code></td>
<td>返回一个指向反转(reversed)表达式开始处的<code>const_reverse_iterator</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rend () const</code></td>
<td>返回一个指向反转(reversed)表达式终止处的<code>const_reverse_iterator</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator rbegin ()</code></td>
<td>返回一个指向反转(reversed)表达式开始处的<code>reverse_iterator</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator rend ()</code></td>
<td>返回一个指向反转(reversed)表达式终止处的<code>reverse_iterator</code>。</td>
</tr>
</tbody>
</table>
<h2><a name="vector_operations" id="vector_operations"></a>向量运算(Vector Operations)</h2>
<h3>一元运算说明</h3>
<h4>说明</h4>
<p>模板类<code>vector_unary&lt;E, F&gt;</code>
描述一元向量运算。</p>
<h4>定义</h4>
<p>定义在头文件 expression_types.hpp 中。</p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>E</code></td>
<td>向量表达式的类型</td>
<td>&nbsp;</td>
</tr>
<tr>
<td><code>F</code></td>
<td>操作的类型</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 。
</p>
<h4>类型要求</h4>
<p>没有，除了由<a href=
"expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 所施加的类型要求。 </p>
<h4>公有基类</h4>
<p><code>vector_expression&lt;vector_unary&lt;E, F&gt;
&gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>vector_unary (const expression_type &amp;e)</code></td>
<td>构造一个表达式的描述。</td>
</tr>
<tr>
<td><code>size_type size () const</code></td>
<td>返回表达式的大小。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i)
const</code></td>
<td>返回第<code>i</code>-th个元素的值。</td>
</tr>
<tr>
<td><code>const_iterator begin () const</code></td>
<td>返回指向表达式开始处的<code>const_iterator</code>。
</td>
</tr>
<tr>
<td><code>const_iterator end () const</code></td>
<td>返回指向表达式终止处的<code>const_iterator</code>
。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rbegin () const</code></td>
<td>返回一个指向反转(reversed)表达式的开始处的<code>const_reverse_iterator</code>。
</td>
</tr>
<tr>
<td><code>const_reverse_iterator rend () const</code></td>
<td>返回一个指向反转(reversed)表达式终止处的<code>const_reverse_iterator</code>。
</td>
</tr>
</tbody>
</table>
<h3>一元运算</h3>
<h4>原型(Prototype)</h4>
<pre>
<code>template&lt;class E, class F&gt;
    struct vector_unary_traits {
        typedef vector_unary&lt;typename E::const_closure_type, F&gt; expression_type;
        typedef expression_type result_type;
     };

    // (- v) [i] = - v [i]
    template&lt;class E&gt;
     typename vector_unary_traits&lt;E, scalar_negate&lt;typename E::value_type&gt; &gt;::result_type
    operator - (const vector_expression&lt;E&gt; &amp;e);

    // (conj v) [i] = conj (v [i])
    template&lt;class E&gt;
     typename vector_unary_traits&lt;E, scalar_conj&lt;typename E::value_type&gt; &gt;::result_type
    conj (const vector_expression&lt;E&gt; &amp;e);

    // (real v) [i] = real (v [i])
    template&lt;class E&gt;
     typename vector_unary_traits&lt;E, scalar_real&lt;typename E::value_type&gt; &gt;::result_type
    real (const vector_expression&lt;E&gt; &amp;e);

    // (imag v) [i] = imag (v [i])
    template&lt;class E&gt;
     typename vector_unary_traits&lt;E, scalar_imag&lt;typename E::value_type&gt; &gt;::result_type
    imag (const vector_expression&lt;E&gt; &amp;e);

    // (trans v) [i] = v [i]
    template&lt;class E&gt;
     typename vector_unary_traits&lt;E, scalar_identity&lt;typename E::value_type&gt; &gt;::result_type
    trans (const vector_expression&lt;E&gt; &amp;e);

    // (herm v) [i] = conj (v [i])
    template&lt;class E&gt;
     typename vector_unary_traits&lt;E, scalar_conj&lt;typename E::value_type&gt; &gt;::result_type
    herm (const vector_expression&lt;E&gt; &amp;e);</code>
</pre>
<h4>说明</h4>
<p><code>operator -</code> 计算 additive inverse of a
vector expression。函数<code>conj</code> 计算这个向量表达式的复数共轭。函数<code>real</code> 和 <code>imag</code>
计算这个向量表达式的实部和虚部。函数<code>trans</code> 计算这个向量表达式的转置。函数<code>herm</code> 计算埃尔米特值(hermitian)，例如，一个向量表达式的转置的复数共轭。</p>
<h4>定义</h4>
<p>定义在头文件 expression_types.hpp 中。</p>
<h4>类型要求</h4>
<ul>
<li><code>E</code>是一个<a href=
"#vector_expression">向量表达式(Vector Expression)</a>模型。</li>
</ul>
<h4>先决条件(Precondition)</h4>
<p>没有。</p>
<h4>复杂度(Complexity)</h4>
<p>依赖于向量表达式大小的线性复杂度。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/vector.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    vector&lt;std::complex&lt;double&gt; &gt; v (3);
    for (unsigned i = 0; i &lt; v.size (); ++ i)
        v (i) = std::complex&lt;double&gt; (i, i);

    std::cout &lt;&lt; - v &lt;&lt; std::endl;
    std::cout &lt;&lt; conj (v) &lt;&lt; std::endl;
    std::cout &lt;&lt; real (v) &lt;&lt; std::endl;
    std::cout &lt;&lt; imag (v) &lt;&lt; std::endl;
    std::cout &lt;&lt; trans (v) &lt;&lt; std::endl;
    std::cout &lt;&lt; herm (v) &lt;&lt; std::endl;
}
</pre>
<h3>二元运算说明</h3>
<h4>说明</h4>
<p>模板类<code>vector_binary&lt;E1, E2, F&gt;</code>描述二元向量运算。</p>
<h4>定义</h4>
<p>定义在头文件 expression_types.hpp 中。</p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>E1</code></td>
<td>第一个向量表达式的类型</td>
<td></td>
</tr>
<tr>
<td><code>E2</code></td>
<td>第二个向量表达式的类型</td>
<td></td>
</tr>
<tr>
<td><code>F</code></td>
<td>操作的类型</td>
<td></td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 。
</p>
<h4>类型要求</h4>
<p>没有， 除了由<a href=
"expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 所施加的类型要求。 </p>
<h4>公有基类</h4>
<p><code>vector_expression&lt;vector_binary&lt;E1, E2, F&gt;
&gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>vector_binary (const expression1_type &amp;e1, const
expression2_type &amp;e2)</code></td>
<td>构造一个表达式的描述。</td>
</tr>
<tr>
<td><code>size_type size () const</code></td>
<td>返回表达式的大小。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i)
const</code></td>
<td>返回第<code>i</code>-th 个元素的值。</td>
</tr>
<tr>
<td><code>const_iterator begin () const</code></td>
<td>返回指向表达式开始处的<code>const_iterator</code>。
</td>
</tr>
<tr>
<td><code>const_iterator end () const</code></td>
<td>返回指向表达式终止处的<code>const_iterator</code>。
</td>
</tr>
<tr>
<td><code>const_reverse_iterator rbegin () const</code></td>
<td>返回指向反转(reversed)表达式开始处的<code>const_reverse_iterator</code>。
</td>
</tr>
<tr>
<td><code>const_reverse_iterator rend () const</code></td>
<td>返回指向反转(reversed)表达式终止处的<code>const_reverse_iterator</code>。</td>
</tr>
</tbody>
</table>
<h3>二元运算</h3>
<h4>原型(Prototype)</h4>
<pre>
<code>template&lt;class E1, class E2, class F&gt;
    struct vector_binary_traits {
        typedef vector_binary&lt;typename E1::const_closure_type,
                               typename E2::const_closure_type, F&gt; expression_type;
        typedef expression_type result_type;
     };

    // (v1 + v2) [i] = v1 [i] + v2 [i]
    template&lt;class E1, class E2&gt;
    typename vector_binary_traits&lt;E1, E2, scalar_plus&lt;typename E1::value_type,
                                                       typename E2::value_type&gt; &gt;::result_type
    operator + (const vector_expression&lt;E1&gt; &amp;e1,
                 const vector_expression&lt;E2&gt; &amp;e2);

    // (v1 - v2) [i] = v1 [i] - v2 [i]
    template&lt;class E1, class E2&gt;
    typename vector_binary_traits&lt;E1, E2, scalar_minus&lt;typename E1::value_type,
                                                        typename E2::value_type&gt; &gt;::result_type
    operator - (const vector_expression&lt;E1&gt; &amp;e1,
                 const vector_expression&lt;E2&gt; &amp;e2);</code>
</pre>
<h4>说明</h4>
<p><code>operator +</code> 计算两个向量的和。<code>operator -</code> 计算两个向量表达式的差。</p>
<h4>定义</h4>
<p>定义在头文件 expression_types.hpp 中。</p>
<h4>类型要求</h4>
<ul>
<li><code>E1</code>是一个<a href=
"#vector_expression">向量表达式(Vector Expression)</a>模型。</li>
<li><code>E2</code>是一个<a href=
"#vector_expression">向量表达式(Vector Expression)</a>模型。</li>
</ul>
<h4>先决条件(Precondition)</h4>
<ul>
<li><code>e1 ().size () == e2 ().size ()</code></li>
</ul>
<h4>复杂度(Complexity)</h4>
<p>依赖于向量表达式大小的线性复杂度。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/vector.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    vector&lt;double&gt; v1 (3), v2 (3);
    for (unsigned i = 0; i &lt; std::min (v1.size (), v2.size ()); ++ i)
        v1 (i) = v2 (i) = i;

    std::cout &lt;&lt; v1 + v2 &lt;&lt; std::endl;
    std::cout &lt;&lt; v1 - v2 &lt;&lt; std::endl;
}
</pre>
<h3>Binary Outer Operation 说明</h3>
<h4>说明</h4>
<p>模板类<code>vector_matrix_binary&lt;E1, E2,
F&gt;</code> 描述二元向量运算。</p>
<h4>定义</h4>
<p>定义在头文件 expression_types.hpp 中。</p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>E1</code></td>
<td>第一个向量表达式的类型</td>
<td></td>
</tr>
<tr>
<td><code>E2</code></td>
<td>第一个向量表达式的类型</td>
<td></td>
</tr>
<tr>
<td><code>F</code></td>
<td>操作的类型</td>
<td></td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="expression_concept.htm#matrix_expression">矩阵表达式(Matrix Expression)</a> 。
</p>
<h4>类型要求</h4>
<p>没有，除了由<a href=
"expression_concept.htm#matrix_expression">矩阵表达式(Matrix Expression)</a> 所施加的类型要求。 </p>
<h4>公有基类</h4>
<p><code>matrix_expression&lt;vector_matrix_binary&lt;E1, E2, F&gt;
&gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>vector_matrix_binary (const expression1_type &amp;e1,
const expression2_type &amp;e2)</code></td>
<td>构造表达式的一个描述。</td>
</tr>
<tr>
<td><code>size_type size1 () const</code></td>
<td>描述行数。</td>
</tr>
<tr>
<td><code>size_type size2 () const</code></td>
<td>返回列数。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i, size_type j)
const</code></td>
<td>返回第<code>i</code>-th行第<code>j</code>-th列的元素的常引用。
<code>i</code>-th row.</td>
</tr>
<tr>
<td><code>const_iterator1 begin1 () const</code></td>
<td>返回指向表达式开始处的<code>const_iterator1</code>。
</td>
</tr>
<tr>
<td><code>const_iterator1 end1 () const</code></td>
<td>返回指向表达式终止处的<code>const_iterator1</code>
。</td>
</tr>
<tr>
<td><code>const_iterator2 begin2 () const</code></td>
<td>返回指向表达式开始处的<code>const_iterator2</code>。
</td>
</tr>
<tr>
<td><code>const_iterator2 end2 () const</code></td>
<td>返回指向表达式终止处的<code>const_iterator2</code>。
。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rbegin1 () const</code></td>
<td>返回指向反转(reversed)表达式开始处的<code>const_reverse_iterator1</code></td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rend1 () const</code></td>
<td>返回指向反转(reversed)表达式终止处的<code>const_reverse_iterator1</code></td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rbegin2 () const</code></td>
<td>返回指向反转(reversed)表达式开始处的<code>const_reverse_iterator2</code></td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rend2 () const</code></td>
<td>返回指向反转(reversed)表达式终止处的<code>const_reverse_iterator2</code></td>
</tr>
</tbody>
</table>
<h3>二元外积运算</h3>
<h4>原型(Prototype)</h4>
<pre>
<code>template&lt;class E1, class E2, class F&gt;
    struct vector_matrix_binary_traits {
        typedef vector_matrix_binary&lt;typename E1::const_closure_type,
                                      typename E2::const_closure_type, F&gt; expression_type;
        typedef expression_type result_type;
     };

    // (outer_prod (v1, v2)) [i] [j] = v1 [i] * v2 [j]
    template&lt;class E1, class E2&gt;
    typename vector_matrix_binary_traits&lt;E1, E2, scalar_multiplies&lt;typename E1::value_type, typename E2::value_type&gt; &gt;::result_type
    outer_prod (const vector_expression&lt;E1&gt; &amp;e1,
                 const vector_expression&lt;E2&gt; &amp;e2);</code>
</pre>
<h4>说明</h4>
<p><code>outer_prod</code> 计算两个向量表达式的外积。</p>
<h4>定义</h4>
<p>定义在头文件 expression_types.hpp 中。</p>
<h4>类型要求</h4>
<ul>
<li><code>E1</code>是一个<a href=
"#vector_expression">向量表达式(Vector Expression)</a>模型。</li>
<li><code>E2</code>是一个<a href=
"#vector_expression">向量表达式(Vector Expression)</a>模型。</li>
</ul>
<h4>先决条件(Precondition)</h4>
<p>没有。</p>
<h4>复杂度(Complexity)</h4>
<p>依赖于向量表达式大小的二次方复杂度。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/matrix.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    vector&lt;double&gt; v1 (3), v2 (3);
    for (unsigned i = 0; i &lt; std::min (v1.size (), v2.size ()); ++ i)
        v1 (i) = v2 (i) = i;

    std::cout &lt;&lt; outer_prod (v1, v2) &lt;&lt; std::endl;
}
</pre>
<h3>标量-向量运算说明</h3>
<h4>说明</h4>
<p>模板类<code>vector_binary_scalar1&lt;E1, E2,
F&gt;</code> 和模板类 <code>vector_binary_scalar2&lt;E1, E2,
F&gt;</code> 描述一个标量和一个向量之间的二元运算。</p>
<h4>定义</h4>
<p>定义在头文件 expression_types.hpp 中。</p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>E1/E2</code></td>
<td>标量表达式的类型</td>
<td></td>
</tr>
<tr>
<td><code>E2/E1</code></td>
<td>向量表达式的类型</td>
<td></td>
</tr>
<tr>
<td><code>F</code></td>
<td>操作的类型</td>
<td></td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 。
</p>
<h4>类型要求</h4>
<p>没有， 除了由<a href=
"expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 所施加的类型要求。 </p>
<h4>公有基类</h4>
<p><code>vector_expression&lt;vector_binary_scalar1&lt;E1, E2,
F&gt; &gt;</code> 和 <code>vector_expression&lt;vector_binary_scalar2&lt;E1, E2, F&gt;
&gt;</code> resp.</p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>vector_binary_scalar1 (const expression1_type &amp;e1,
const expression2_type &amp;e2)</code></td>
<td>构造一个表达多的描述。</td>
</tr>
<tr>
<td><code>vector_binary_scalar2 (const expression1_type &amp;e1,
const expression2_type &amp;e2)</code></td>
<td>构造表达式的一个描述。</td>
</tr>
<tr>
<td><code>size_type size () const</code></td>
<td>返回表达式的大小。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i)
const</code></td>
<td>返回第<code>i</code>-th 个元素的值。</td>
</tr>
<tr>
<td><code>const_iterator begin () const</code></td>
<td>返回指向表达式开始处的<code>const_iterator</code>
。</td>
</tr>
<tr>
<td><code>const_iterator end () const</code></td>
<td>返回指向表达式的终止处的<code>const_iterator</code>
。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rbegin () const</code></td>
<td>返回指向reversed expression开始处的<code>const_reverse_iterator</code>
。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rend () const</code></td>
<td>返回指向reversed expression终止处的<code>const_reverse_iterator</code>
。</td>
</tr>
</tbody>
</table>
<h3>标量-向量运算(Scalar Vector Operations)</h3>
<h4>原型(Prototype)</h4>
<pre>
<code>template&lt;class T1, class E2, class F&gt;
    struct vector_binary_scalar1_traits {
        typedef vector_binary_scalar1&lt;scalar_const_reference&lt;T1&gt;,
                                      typename E2::const_closure_type, F&gt; expression_type;
        typedef expression_type result_type;
    };

    // (t * v) [i] = t * v [i]
    template&lt;class T1, class E2&gt;
    typename vector_binary_scalar1_traits&lt;T1, E2, scalar_multiplies&lt;T1, typename E2::value_type&gt; &gt;::result_type
    operator * (const T1 &amp;e1,
                const vector_expression&lt;E2&gt; &amp;e2);

    template&lt;class E1, class T2, class F&gt;
    struct vector_binary_scalar2_traits {
        typedef vector_binary_scalar2&lt;typename E1::const_closure_type,
                                      scalar_const_reference&lt;T2&gt;, F&gt; expression_type;
        typedef expression_type result_type;
    };

    // (v * t) [i] = v [i] * t
    template&lt;class E1, class T2&gt;
    typename vector_binary_scalar2_traits&lt;E1, T2, scalar_multiplies&lt;typename E1::value_type, T2&gt; &gt;::result_type
    operator * (const vector_expression&lt;E1&gt; &amp;e1,
                const T2 &amp;e2);

    // (v / t) [i] = v [i] / t
    template&lt;class E1, class T2&gt;
    typename vector_binary_scalar2_traits&lt;E1, T2, scalar_divides&lt;typename E1::value_type, T2&gt; &gt;::result_type
    operator / (const vector_expression&lt;E1&gt; &amp;e1,
                const T2 &amp;e2);</code>
</pre>
<h4>说明</h4>
<p><code>operator *</code> 计算一个标量和一个向量的积。<code>operator /</code> 用这个向量乘以这个标量的倒数。</p>
<h4>定义</h4>
<p>定义在头文件 expression_types.hpp 中。</p>
<h4>类型要求</h4>
<ul>
<li><code>T1/T2</code>是一个<a href=
"expression_concept.htm#scalar_expression">标量表达式(Scalar Expression)</a> 模型。</li>
<li>E2/E1是一个<a href=
"#vector_expression">向量表达式(Vector Expression)</a>模型。</li>
</ul>
<h4>先决条件(Precondition)</h4>
<p>没有。</p>
<h4>复杂度(Complexity)</h4>
<p>赖于向量表达式大小的线性复杂度。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/vector.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    vector&lt;double&gt; v (3);
    for (unsigned i = 0; i &lt; v.size (); ++ i)
        v (i) = i;

    std::cout &lt;&lt; 2.0 * v &lt;&lt; std::endl;
    std::cout &lt;&lt; v * 2.0 &lt;&lt; std::endl;
}
</pre>
<h2><a name="vector_reductions" id="vector_reductions"></a>Vector Reductions</h2>
<h3>Unary Reductions</h3>
<h4>原型(Prototype)</h4>
<pre>
<code>template&lt;class E, class F&gt;
    struct vector_scalar_unary_traits {
         typedef typename F::result_type result_type;
    };

    // sum v = sum (v [i])
    template&lt;class E&gt;
    typename vector_scalar_unary_traits&lt;E, vector_sum&lt;typename E::value_type&gt; &gt;::result_type
    sum (const vector_expression&lt;E&gt; &amp;e);

    // norm_1 v = sum (abs (v [i]))
    template&lt;class E&gt;
    typename vector_scalar_unary_traits&lt;E, vector_norm_1&lt;typename E::value_type&gt; &gt;::result_type
    norm_1 (const vector_expression&lt;E&gt; &amp;e);

    // norm_2 v = sqrt (sum (v [i] * v [i]))
    template&lt;class E&gt;
    typename vector_scalar_unary_traits&lt;E, vector_norm_2&lt;typename E::value_type&gt; &gt;::result_type
    norm_2 (const vector_expression&lt;E&gt; &amp;e);

    // norm_inf v = max (abs (v [i]))
    template&lt;class E&gt;
    typename vector_scalar_unary_traits&lt;E, vector_norm_inf&lt;typename E::value_type&gt; &gt;::result_type
    norm_inf (const vector_expression&lt;E&gt; &amp;e);

    // index_norm_inf v = min (i: abs (v [i]) == max (abs (v [i])))
    template&lt;class E&gt;
    typename vector_scalar_unary_traits&lt;E, vector_index_norm_inf&lt;typename E::value_type&gt; &gt;::result_type
    index_norm_inf (const vector_expression&lt;E&gt; &amp;e);</code>
</pre>
<h4>说明</h4>
<p><code>sum</code> 计算向量表达式的元素的和。<code>norm_1</code>, <code>norm_2</code> 和 <code>norm_inf</code> 计算对应的<em>||.||</em><sub><em>1</em></sub>,
<em>||.||</em><sub><em>2</em></sub> and
<em>||.||</em><sub><em>inf</em></sub> 向量基(vector norms)。<code>index_norm_1</code> 计算向量表达式中绝对值最大的第一个元素的索引。</p>
<h4>定义</h4>
<p>定义在头文件 expression_types.hpp 中。</p>
<h4>类型要求</h4>
<ul>
<li><code>E</code>是一个<a href=
"#vector_expression">向量表达式(Vector Expression)</a>模型。</li>
</ul>
<h4>先决条件(Precondition)</h4>
<p>没有。</p>
<h4>复杂度(Complexity)</h4>
<p>依赖于向量表达式大小的线性复杂度。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/vector.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    vector&lt;double&gt; v (3);
    for (unsigned i = 0; i &lt; v.size (); ++ i)
        v (i) = i;

    std::cout &lt;&lt; sum (v) &lt;&lt; std::endl;
    std::cout &lt;&lt; norm_1 (v) &lt;&lt; std::endl;
    std::cout &lt;&lt; norm_2 (v) &lt;&lt; std::endl;
    std::cout &lt;&lt; norm_inf (v) &lt;&lt; std::endl;
    std::cout &lt;&lt; index_norm_inf (v) &lt;&lt; std::endl;
}
</pre>
<h3>Binary Reductions</h3>
<h4>原型(Prototype)</h4>
<pre>
<code>template&lt;class E1, class E2, class F&gt;
    struct vector_scalar_binary_traits {
        typedef typename F::result_type result_type;
    };

    // inner_prod (v1, v2) = sum (v1 [i] * v2 [i])
    template&lt;class E1, class E2&gt;
    typename vector_scalar_binary_traits&lt;E1, E2, vector_inner_prod&lt;typename E1::value_type,
                                                                   typename E2::value_type,
                                                                   typename promote_traits&lt;typename E1::value_type,
                                                                                           typename E2::value_type&gt;::promote_type&gt; &gt;::result_type
    inner_prod (const vector_expression&lt;E1&gt; &amp;e1,
                const vector_expression&lt;E2&gt; &amp;e2);

    template&lt;class E1, class E2&gt;
    typename vector_scalar_binary_traits&lt;E1, E2, vector_inner_prod&lt;typename E1::value_type,
                                                                   typename E2::value_type,
                                                                   typename type_traits&lt;typename promote_traits&lt;typename E1::value_type,
                                                                                                                typename E2::value_type&gt;::promote_type&gt;::precision_type&gt; &gt;::result_type
    prec_inner_prod (const vector_expression&lt;E1&gt; &amp;e1,
                     const vector_expression&lt;E2&gt; &amp;e2);</code>
</pre>
<h4>说明</h4>
<p><code>inner_prod</code>计算向量表达式的内积。<code>prec_inner_prod</code> 以double精确度计算向量表达式的内积。</p>
<h4>定义</h4>
<p>定义在头文件 expression_types.hpp 中。</p>
<h4>类型要求</h4>
<ul>
<li><code>E1</code>是一个<a href=
"#vector_expression">向量表达式(Vector Expression)</a>模型。</li>
<li><code>E2</code>是一个<a href=
"#vector_expression">向量表达式(Vector Expression)</a>模型。</li>
</ul>
<h4>先决条件(Precondition)</h4>
<ul>
<li><code>e1 ().size () == e2 ().size ()</code></li>
</ul>
<h4>复杂度(Complexity)</h4>
<p>依赖于向量表达式大小的线性复杂度。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/vector.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    vector&lt;double&gt; v1 (3), v2 (3);
    for (unsigned i = 0; i &lt; std::min (v1.size (), v2.size ()); ++ i)
        v1 (i) = v2 (i) = i;

    std::cout &lt;&lt; inner_prod (v1, v2) &lt;&lt; std::endl;
}
</pre>
<hr />
<p>Copyright (&copy;) 2000-2002 Joerg Walter, Mathias Koch<br />
   Use, modification and distribution are subject to the
   Boost Software License, Version 1.0.
   (See accompanying file LICENSE_1_0.txt
   or copy at <a href="http://www.boost.org/LICENSE_1_0.txt">
      http://www.boost.org/LICENSE_1_0.txt
   </a>).
</p>
</body>
</html>
