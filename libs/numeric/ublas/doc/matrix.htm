<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="generator" content=
"HTML Tidy for Linux/x86 (vers 1st March 2004), see www.w3.org" />
<meta http-equiv="Content-Type" content=
"text/html; charset=UTF-8" />
<link href="ublas.css" type="text/css" />
<title>Matrix</title>
</head>
<body>
<h1><img src="../../../../boost.png" align="middle" />
矩阵(Matrix)</h1>
<h2><a name="matrix" id="matrix"></a>矩阵</h2>
<h4>说明</h4>
<p>模板类<code>matrix&lt;T, F, A&gt;</code> 是密集矩阵(dense matrices)的基容器适配器(base container adaptor)。对于一个<em>(m x
n</em>)-维矩阵且<em>0 &lt;= i &lt; m</em>, <em>0
&lt;= j &lt; n</em> ，对于行优先(row major
orientation)的容器，每个元素<em>m</em><sub><em>i,
j</em></sub> 被映射到容器中的第<em>(i x n + j)-</em>th 个元素，或者对于列优先(column major
orientation)的容器，每个元素被映射到容器中的第<em>(i + j x
m)-</em>th 个元素。element of the container for column major
orientation.</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/matrix.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    matrix&lt;double&gt; m (3, 3);
    for (unsigned i = 0; i &lt; m.size1 (); ++ i)
        for (unsigned j = 0; j &lt; m.size2 (); ++ j)
            m (i, j) = 3 * i + j;
    std::cout &lt;&lt; m &lt;&lt; std::endl;
}
</pre>
<h4>定义</h4>
<p>定义在头文件 matrix.hpp 中。 </p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>T</code></td>
<td>存储在矩阵中的对象的类型。</td>
<td></td>
</tr>
<tr>
<td><code>F</code></td>
<td>描述存储组织的函数对象。 <a href=
"#matrix_1">[1]</a></td>
<td><code>row_major</code></td>
</tr>
<tr>
<td><code>A</code></td>
<td><a href="storage_concept.htm">存储(Storage)</a>数组。 <a href="#matrix_2">[2]</a></td>
<td><code>unbounded_array&lt;T&gt;</code></td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="container_concept.htm#matrix">矩阵(Matrix)</a> 。 </p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href="container_concept.htm#matrix">矩阵(Matrix)</a> 所施加的类型要求。</p>
<h4>公有基类(Public base classes)</h4>
<p><code>matrix_container&lt;matrix&lt;T, F, A&gt; &gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>matrix ()</code></td>
<td>分配一个包含0个元素且没有初始化的(uninitialized)<code>matrix</code>。</td>
</tr>
<tr>
<td><code>matrix (size_type size1, size_type size2)</code></td>
<td>返回一个包含<code>size1</code>行<code>size2</code>个元素的未初始化的(uninitialized)<code>matrix</code>。</td>
</tr>
<tr>
<td><code>matrix (const matrix &amp;m)</code></td>
<td>拷贝构造函数。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix (const matrix_expression&lt;AE&gt; &amp;ae)</code></td>
<td>扩展拷贝构造函数。</td>
</tr>
<tr>
<td><code>void resize (size_type size1, size_type size2, bool
preserve = true)</code></td>
<td>重新分配一个包含<code>size1</code>行<code>size2</code>个元素的<code>matrix</code>。 
如果指定，<code>matrix</code>中已经存在的元素将会被保留。 </td>
</tr>
<tr>
<td><code>size_type size1 () const</code></td>
<td>返回行数。</td>
</tr>
<tr>
<td><code>size_type size2 () const</code></td>
<td>返回行数</td>
</tr>
<tr>
<td><code>const array_type&amp; data () const</code></td>
<td></td>
</tr>
<tr>
<td><code>array_type&amp; data ()</code></td>
<td></td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i, size_type j)
const</code></td>
<td>返回第<code>i</code>-th行第<code>j</code>-th列的元素的<code>const</code> 引用。</td>
</tr>
<tr>
<td><code>reference operator () (size_type i, size_type
j)</code></td>
<td>返回第<code>i</code>-th行第<code>j</code>-th列的元素的引用。</td>
</tr>
<tr>
<td><code>matrix &amp;operator = (const matrix &amp;m)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>matrix &amp;assign_temporary (matrix &amp;m)</code></td>
<td>赋值给一个临时变量。可能会改变矩阵<code>m</code>。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix &amp;operator = (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>扩展的赋值运算符。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix &amp;assign (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个矩阵表达式赋给一个矩阵。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix &amp;operator += (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>一个运算赋值运算符。将一个矩阵表达式加到一个矩阵中。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix &amp;plus_assign (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个矩阵表达式加到一个矩阵中。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix &amp;operator -= (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。从一个矩阵中减去一个矩阵表达式。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix &amp;minus_assign (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>从一个矩阵中减去一个矩阵表达式。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
matrix &amp;operator *= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符。将一个矩阵乘以一个标量。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
matrix &amp;operator /= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符。将一个矩阵除以一个标量。</td>
</tr>
<tr>
<td><code>void swap (matrix &amp;m)</code></td>
<td>交换矩阵的内容。</td>
</tr>
<tr>
<td><code>void insert_element (size_type i, size_type j, const_reference
t)</code></td>
<td>将<code>t</code>插入到第<code>i</code>-th行第<code>j</code>-th列
。</td>
</tr>
<tr>
<td><code>void erase_element (size_type i, size_type j)</code></td>
<td>删除第<code>i</code>-th行第<code>j</code>-th个元素。</td>
</tr>
<tr>
<td><code>void clear ()</code></td>
<td>清除矩阵。</td>
</tr>
<tr>
<td><code>const_iterator1 begin1 () const</code></td>
<td>返回指向<code>matrix</code>开始处的<code>const_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_iterator1 end1 () const</code></td>
<td>返回指向<code>matrix</code>终止处的<code>const_iterator1</code>。</td>
</tr>
<tr>
<td><code>iterator1 begin1 ()</code></td>
<td>返回指向<code>matrix</code>开始处的<code>iterator1</code>。</td>
</tr>
<tr>
<td><code>iterator1 end1 ()</code></td>
<td>返回指向<code>matrix</code>终止处的<code>iterator1</code>。</td>
</tr>
<tr>
<td><code>const_iterator2 begin2 () const</code></td>
<td>返回指向<code>matrix</code>开始处的<code>const_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_iterator2 end2 () const</code></td>
<td>返回指向<code>matrix</code>终止处的<code>const_iterator2</code>。</td>
</tr>
<tr>
<td><code>iterator2 begin2 ()</code></td>
<td>返回指向<code>matrix</code>开始处的<code>iterator2</code>。
</td>
</tr>
<tr>
<td><code>iterator2 end2 ()</code></td>
<td>返回指向<code>matrix</code>终止处的<code>iterator2</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rbegin1 () const</code></td>
<td>返回指向反转的(reversed)<code>matrix</code>开始处的<code>const_reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rend1 () const</code></td>
<td>返回指向反转的(reversed)<code>matrix</code>终止处的<code>const_reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator1 rbegin1 ()</code></td>
<td>返回指向反转的(reverse)<code>matrix</code>开始处的<code>reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator1 rend1 ()</code></td>
<td>返回指向反转的(reverse)<code>matrix</code>终止处的<code>reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rbegin2 () const</code></td>
<td>返回指向反转的(reversed)<code>matrix</code>开始处的<code>const_reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rend2 () const</code></td>
<td>返回指向反转的(reverse)<code>matrix</code>开始处的<code>const_reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator2 rbegin2 ()</code></td>
<td>返回指向反转的(reversed)<code>matrix</code>开始处的<code>reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator2 rend2 ()</code></td>
<td>返回指向反转的(reverse)<code>matrix</code>开始处的<code>reverse_iterator2</code>。</td>
</tr>
</tbody>
</table>
<h4>Notes</h4>
<p><a name="matrix_1" id="matrix_1">[1]</a> 对于存储组织(storage organization)所支持的参数是<code>row_major</code> 和 <code>column_major</code>。</p>
<p><a name="matrix_2" id="matrix_2">[2]</a> 对于存储数组( storage array )的一般参数是<code>unbounded_array&lt;T&gt;</code> ,
<code>bounded_array&lt;T&gt;</code> 和 <code>std::vector&lt;T&gt;</code> 。 </p>
<h2><a name="identity_matrix" id="identity_matrix"></a>Identity Matrix</h2>
<h4>说明</h4>
<p>模板类<code>identity_matrix&lt;T, ALLOC&gt;</code>
表示 identity matrices。对于一个<em>(m x n</em>)-维
identity matrix 且<em>0 &lt;= i &lt; m</em>, <em>0 &lt;= j &lt;
n</em> 满足<em>id</em><sub><em>i, j</em></sub> <em>= 0</em>，如果<em>i &lt;&gt; j</em>, 且 <em>id</em><sub><em>i, i</em></sub><em>=
1</em>。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/matrix.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    identity_matrix&lt;double&gt; m (3);
    std::cout &lt;&lt; m &lt;&lt; std::endl;
}
</pre>
<h4>定义</h4>
<p>定义在头文件 matrix.hpp 中。</p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>T</code></td>
<td>存储在矩阵中的对象的类型。</td>
<td><code>int</code></td>
</tr>
<tr>
<td><code>ALLOC</code></td>
<td>针对于 size_type 和 difference_type的STL分配器(Allocator).</td>
<td>std::allocator</td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="container_concept.htm#matrix">矩阵(Matrix)</a> 。</p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href="container_concept.htm#matrix">矩阵(Matrix)</a> 所施加的类型要求。</p>
<h4>公有基类(Public base classes)</h4>
<p><code>matrix_container&lt;identity_matrix&lt;T&gt;
&gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>identity_matrix ()</code></td>
<td>构造一个包含0行0个元素的<code>identity_matrix</code>。</td>
</tr>
<tr>
<td><code>identity_matrix (size_type size)</code></td>
<td>构造一个包含<code>size</code>行<code>size</code>个元素的<code>identity_matrix</code>。</td>
</tr>
<tr>
<td><code>identity_matrix (const identity_matrix
&amp;m)</code></td>
<td>拷贝构造函数。</td>
</tr>
<tr>
<td><code>void resize (size_type size, bool preserve =
true)</code></td>
<td>重设<code>identity_matrix</code>大小来包含
<code>size</code>行<code>size</code>个元素。
因此<code>itendity_matrix</code>中已经存在的元素将会一直保留。</td>
</tr>
<tr>
<td><code>size_type size1 () const</code></td>
<td>返回行数。</td>
</tr>
<tr>
<td><code>size_type size2 () const</code></td>
<td>返回列数。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i, size_type j)
const</code></td>
<td>返回第<code>i</code>-th行第<code>j</code>-th列的元素的常引用。</td>
</tr>
<tr>
<td><code>identity_matrix &amp;operator = (const identity_matrix
&amp;m)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>identity_matrix &amp;assign_temporary (identity_matrix
&amp;m)</code></td>
<td>赋值给一个临时变量。可能会改变identity matrix
<code>m</code> 。</td>
</tr>
<tr>
<td><code>void swap (identity_matrix &amp;m)</code></td>
<td>交换identity matrices的内容。</td>
</tr>
<tr>
<td><code>const_iterator1 begin1 () const</code></td>
<td>返回指向<code>identity_matrix</code>开始处的<code>const_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_iterator1 end1 () const</code></td>
<td>返回指向<code>identity_matrix</code>终止处的<code>const_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_iterator2 begin2 () const</code></td>
<td>返回指向<code>identity_matrix</code>开始处的<code>const_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_iterator2 end2 () const</code></td>
<td>返回指向<code>identity_matrix</code>终止处的<code>const_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rbegin1 () const</code></td>
<td>返回指向反转的(reversed)<code>identity_matrix</code>开始处的<code>const_reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rend1 () const</code></td>
<td>返回指向反转的(reversed)<code>identity_matrix</code>终止处的<code>const_reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rbegin2 () const</code></td>
<td>返回指向反转的(reversed)<code>identity_matrix</code>开始处的<code>const_reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rend2 () const</code></td>
<td>返回指向反转的(reversed)<code>identity_matrix</code>终止处的<code>const_reverse_iterator2</code></td>
</tr>
</tbody>
</table>
<h2><a name="zero_matrix" id="zero_matrix"></a>Zero Matrix</h2>
<h4>说明</h4>
<p>模板类<code>zero_matrix&lt;T, ALLOC&gt;</code> 表示零矩阵(zero matrices)。对于一个<em>(m x n</em>)-维零矩阵且<em>0 &lt;= i &lt; m</em>, <em>0 &lt;= j &lt; n</em> 满足<em>z</em><sub><em>i, j</em></sub> <em>= 0</em>。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/matrix.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    zero_matrix&lt;double&gt; m (3, 3);
    std::cout &lt;&lt; m &lt;&lt; std::endl;
}
</pre>
<h4>定义</h4>
<p>定义在头文件 matrix.hpp 中。</p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>T</code></td>
<td>存储在矩阵中的对象的类型。</td>
<td><code>int</code></td>
</tr>
<tr>
<td><code>ALLOC</code></td>
<td>针对于size_type 和 difference_type的STL分配器(Allocator).</td>
<td>std::allocator</td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="container_concept.htm#matrix">矩阵(Matrix)</a> 。</p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href="container_concept.htm#matrix">矩阵(Matrix)</a> 所施加的类型要求。</p>
<h4>公有基类(Public base classes)</h4>
<p><code>matrix_container&lt;zero_matrix&lt;T&gt; &gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>zero_matrix ()</code></td>
<td>构造一个包含0行0个元素的<code>zero_matrix</code>。</td>
</tr>
<tr>
<td><code>zero_matrix (size_type size1, size_type
size2)</code></td>
<td>构造一个包含<code>size1</code>行<code>size2</code>个元素的<code>zero_matrix</code>。</td>
</tr>
<tr>
<td><code>zero_matrix (const zero_matrix &amp;m)</code></td>
<td>拷贝构造函数。</td>
</tr>
<tr>
<td><code>void resize (size_type size1, size_type size2, bool
preserve = true)</code></td>
<td>重设<code>zero_matrix</code>大小来包含<code>size1</code>行<code>size2</code>个元素。
因此，<code>zero_matrix</code>中的元素将会一直保留。</td>
</tr>
<tr>
<td><code>size_type size1 () const</code></td>
<td>返回行数。</td>
</tr>
<tr>
<td><code>size_type size2 () const</code></td>
<td>返回列数。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i, size_type j)
const</code></td>
<td>返回第<code>i</code>-th行第
<code>j</code>-th列的元素的常引用。</td>
</tr>
<tr>
<td><code>zero_matrix &amp;operator = (const zero_matrix
&amp;m)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>zero_matrix &amp;assign_temporary (zero_matrix
&amp;m)</code></td>
<td>赋值给一个临时变量。可能会改变零矩阵<code>m</code>
。</td>
</tr>
<tr>
<td><code>void swap (zero_matrix &amp;m)</code></td>
<td>交换零矩阵的内容。</td>
</tr>
<tr>
<td><code>const_iterator1 begin1 () const</code></td>
<td>返回指向<code>zero_matrix</code>开始处的<code>const_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_iterator1 end1 () const</code></td>
<td>返回指向<code>zero_matrix</code>终止处的<code>const_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_iterator2 begin2 () const</code></td>
<td>返回指向<code>zero_matrix</code>开始处的 <code>const_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_iterator2 end2 () const</code></td>
<td>返回指向<code>zero_matrix</code>终止处的<code>const_iterator2</code>。
</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rbegin1 () const</code></td>
<td>返回指向反转的(reversed)<code>zero_matrix</code>开始处的<code>const_reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rend1 () const</code></td>
<td>返回指向反转的(reversed)<code>zero_matrix</code>终止处的<code>const_reverse_iterator1</code>。
</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rbegin2 () const</code></td>
<td>返回指向反转的(reversed)<code>zero_matrix</code>开始处的<code>const_reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rend2 () const</code></td>
<td>返回指向反转的(reversed)<code>zero_matrix</code>终止处的<code>const_reverse_iterator2</code>。</td>
</tr>
</tbody>
</table>
<h2><a name="scalar_matrix" id="scalar_matrix"></a>Scalar Matrix</h2>
<h4>说明</h4>
<p>模板类<code>scalar_matrix&lt;T, ALLOC&gt;</code>
表示标量矩阵(scalar matrices)。对于一个<em>(m x n</em>)-维标量矩阵且<em>0 &lt;= i &lt; m</em>, <em>0 &lt;= j &lt;
n</em> 满足<em>z</em><sub><em>i, j</em></sub> <em>= s</em>。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/matrix.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    scalar_matrix&lt;double&gt; m (3, 3);
    std::cout &lt;&lt; m &lt;&lt; std::endl;
}
</pre>
<h4>定义</h4>
<p>定义在头文件 matrix.hpp 中。</p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>T</code></td>
<td>The type of object stored in the matrix.</td>
<td><code>int</code></td>
</tr>
<tr>
<td><code>ALLOC</code></td>
<td>An STL Allocator for size_type and difference_type.</td>
<td>std::allocator</td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="container_concept.htm#matrix">矩阵(Matrix)</a> 。</p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href="container_concept.htm#matrix">矩阵(Matrix)</a> 所施加的类型要求。</p>
<h4>公有基类(Public base classes)</h4>
<p><code>matrix_container&lt;scalar_matrix&lt;T&gt;
&gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>scalar_matrix ()</code></td>
<td>构造一个标量行(scalar row)0个元素的<code>scalar_matrix</code>。</td>
</tr>
<tr>
<td><code>scalar_matrix (size_type size1, size_type size2, const
value_type &amp;value)</code></td>
<td>构造一个包含<code>size1</code>行<code>size2</code>个元素的<code>scalar_matrix</code>，每个元素都是一个指定的值。</td>
</tr>
<tr>
<td><code>scalar_matrix (const scalar_matrix &amp;m)</code></td>
<td>拷贝构造函数。</td>
</tr>
<tr>
<td><code>void resize (size_type size1, size_type size2, bool
preserve = true)</code></td>
<td>重设<code>scalar_matrix</code>大小来包含<code>size1</code>行
<code>size2</code>个元素。因此，<code>scalar_matrix</code> 中已经存在的元素将被保留。</td>
</tr>
<tr>
<td><code>size_type size1 () const</code></td>
<td>返回行数。</td>
</tr>
<tr>
<td><code>size_type size2 () const</code></td>
<td>返回列数。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i, size_type j)
const</code></td>
<td>返回第<code>i</code>-th行第<code>j</code>-th列的元素。</td>
</tr>
<tr>
<td><code>scalar_matrix &amp;operator = (const scalar_matrix
&amp;m)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>scalar_matrix &amp;assign_temporary (scalar_matrix
&amp;m)</code></td>
<td>赋值给一个临时变量。可能会改变标量矩阵
<code>m</code> 。</td>
</tr>
<tr>
<td><code>void swap (scalar_matrix &amp;m)</code></td>
<td>交换标量矩阵的内容。</td>
</tr>
<tr>
<td><code>const_iterator1 begin1 () const</code></td>
<td>返回指向<code>scalar_matrix</code>开始处的<code>const_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_iterator1 end1 () const</code></td>
<td>返回指向<code>scalar_matrix</code>终止处的<code>const_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_iterator2 begin2 () const</code></td>
<td>返回指向<code>scalar_matrix</code>开始处的<code>const_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_iterator2 end2 () const</code></td>
<td>返回指向<code>scalar_matrix</code>终止处的<code>const_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rbegin1 () const</code></td>
<td>返回指向反转的(reversed)<code>scalar_matrix</code>开始处的<code>const_reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rend1 () const</code></td>
<td>返回指向反转的(reversed)<code>scalar_matrix</code>终止处的<code>const_reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rbegin2 () const</code></td>
<td>返回指向反转的(reversed)<code>scalar_matrix</code>开始处的<code>const_reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rend2 () const</code></td>
<td>返回指向反转的(reversed)<code>scalar_matrix</code>终止处的<code>const_reverse_iterator2</code>。</td>
</tr>
</tbody>
</table>
<hr />
<p>Copyright (&copy;) 2000-2002 Joerg Walter, Mathias Koch<br />
   Use, modification and distribution are subject to the
   Boost Software License, Version 1.0.
   (See accompanying file LICENSE_1_0.txt
   or copy at <a href="http://www.boost.org/LICENSE_1_0.txt">
      http://www.boost.org/LICENSE_1_0.txt
   </a>).
</p>
</body>
</html>
