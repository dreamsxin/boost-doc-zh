<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="generator" content=
"HTML Tidy for Linux/x86 (vers 1st March 2004), see www.w3.org" />
<meta http-equiv="Content-Type" content=
"text/html; charset=UTF-8" />
<link href="ublas.css" type="text/css" />
<title>Storage concept</title>
</head>
<body>
<h1><img src="../../../../boost.png" align="middle" />
存储概念(Storage concept)</h1>
<h2><a name="range" id="range"></a>存储概念(Storage concept)</h2>
<h4>说明</h4>
<p>存储(Storage)是一个可变大小( variable-size )的容器，元素是以严格的线性顺序组织。
<p>存储(Storage)使用一些STL的类似于序列的功能来扩展STL容器概念。对于序列概念的主要的区别在于存储概念(Storage concept)没有要求元素的缺省初始化(default-initialisation)。
<h4>优化(Refinement of)</h4>
<a href="http://www.sgi.com/tech/stl/RandomAccessContainer.html">随机访问容器(Random Access Container)</a>
和<a href="http://www.sgi.com/tech/stl/DefaultConstructible.html">缺省构造(Default Constructible)</a>
<h4>相关类型</h4>
除了由<a href="http://www.sgi.com/tech/stl/RandomAccessContainer.html">随机访问容器(Random Access Container)</a> 所定义的类型没有其它的类型。
<h4>记法(Notation)</h4>
<table summary="storage types">
<tr><td><tt>X</tt></td><td>一个存储(storage)模型的类型</td></tr>
<tr><td><tt>T</tt></td><td><tt>X</tt>的value_type</td></tr>
<tr><td><tt>t</tt></td><td>一个<tt>T</tt>类型的对象</td></tr>
<tr><td><tt>n</tt></td><td>可以转化为<tt>X::size_type</tt>类型的对象</td></tr>
</table>
<h4>定义</h4>
<h4>合法表达式(Valid expressions)</h4>
除了在<a href="http://www.sgi.com/tech/stl/RandomAccessContainer.html">随机访问容器(Random Access Container)</a>, 和 <a href="http://www.sgi.com/tech/stl/DefaultConstructible.html">缺省构造(Default Constructible)</a>
所定义的表达式，下面的表达式应当是合法的：
<table border="1" summary="type requirements">
<TR><TH>名称</TH><TH>表达式</TH><TH>类型要求(Type requirements)</TH><TH>返回值类型</TH></TR>
<TR>
<td>带有大小的构造函数(Size constructor)</td>
<td><tt>X(n)</tt></td>
<td>T 是 <a href="http://www.sgi.com/tech/stl/DefaultConstructible.html">可缺省构造的(DefaultConstructible)</a></td>
<td><tt>X</tt></td>
</TR>
<TR>
<td>填充构造(Fill constructor)</td>
<td><tt>X(n,t)</tt></td>
<td></td>
<td><tt>X</tt></td>
</TR>
<TR>
<TD>范围构造(Range constructor)</TD>
<TD><tt>X(i, j)</tt></TD>
<TD><tt>i</tt> 和 <tt>j</tt> 是 <A href="http://www.sgi.com/tech/stl/InputIterator.html">输入迭代器(Input Iterators)</A>,值类型可以转化为<tt>T</tt>类型 </TD>
<TD><tt>X</tt> </TD>
</TR>
<TR>
<TD>改变大小</TD>
<TD><tt>a.resize(n, t)</tt></TD>
<TD><tt>a</tt> 是可变化的(mutable)</TD>
<TD><tt>void</tt></TD>
</TR>
<TR>
<TD>Resize</TD>
<TD><tt>a.resize(n)</tt></TD>
<TD><tt>a</tt>  是可变化的(mutable)</TD>
<TD><tt>void</tt></TD>
</tr>
</table>
<h3>表达式语义</h3>
<table border="1" summary="expresisons">
<tr><th>名称<th>表达式<th>先决条件(Precondition)<th>语义<th>所置条件(Postcondition)
<tr>
<td>缺省构造函数</td>
<td><tt>X()</tt>
<td></td>
<td>生成 0 个元素。 
</td>
<td><tt>size()==0</tt></td>
</tr>
<tr>
<td>带有大小参数的构造函数(Size-constructor)</td>
<td><tt>X(n)</tt>
<td><tt>n>=0</tt></td>
<td>生成 n 个元素。元素没有使用一个初始化器(initializer)来构造。那就是说，如果T
是一个(可能有const/volatile修饰) non-POD 类型(或者数组)，对象是缺省构造的。否则，
被生成的对象具有不定的值(indeterminate)。
参考ISO C++标准中的 5.3.4 节第 15 段的句子"如果忽略 new 的初始化器(initializer)" 。
</td>
<td><tt>size()==n</tt></td>
</tr>
<tr>
<td>填充构造(Fill-constructor)</td>
<td><tt>X(n,t)</tt>
<td><tt>n>=0</tt></td>
<td>生成 n 个使用<code>t</code>初始化的元素。</td>
<td><tt>size()==n</tt></td>
</tr>
<TR>
<TD>范围构造函数(Range constructor)</TD>
<TD><tt>X(i, j)</tt></TD>
<TD><tt>[i,j)</tt> 是一个合法范围。</TD>
<TD>将范围 <tt>[i,j) 拷贝到存储空间(storage)中</tt></TD>
<TD><tt>size()</tt> 等于从<tt>i</tt> 到 <tt>j</tt>的距离。每个元素是范围<tt>[i,j)</tt>中对应元素的拷贝。</TD>
</TR>
<TR>
<TD>改变大小</TD>
<TD><tt>a.resize(n, t)</tt></TD>
<TD><tt>n &lt;= a.max_size()</tt></TD>
<td>修改容器使得它刚好有 <tt>n</tt> 个元素。<br />
如果大小改变，这个容器可能会被重新分配。
已经存在的元素被保留，额外的元素是 <code>t</code> 的拷贝。</td>
<TD><tt>a.size() == n</tt></TD>
</TR>
<TR>
<TD>改变大小</TD>
<TD><tt>a.resize(n)</tt></TD>
<TD><tt>n &lt;= a.max_size()</tt></TD>
<TD>修改容器使得它刚好有 <tt>n</tt> 个元素。<br />
如果大小改变，这个容器可能会被重新分配。元素值是未初始化的。也就是说，
每个元素的值可能是先前的值或是针对于<code>T</code>类型的缺省构造的值。</TD>
<TD><tt>a.size() == n</tt></TD>
</tr>
</table>
<h4>复杂度保证(Complexity guarantees)</h4>
<h4>不变量(Invariants)</h4>
<h4>模型(Models)</h4>
<ul>
<li><a href="unbounded_array.htm">无限数组(unbounded_array)</a>
<li><a href="bounded_array.htm">有限数组(bounded_array)</a>
</ul>
<h4>注意</h4>
<hr />
<p>Copyright (&copy;) 2000-2002 Joerg Walter, Mathias Koch<br />
   Use, modification and distribution are subject to the
   Boost Software License, Version 1.0.
   (See accompanying file LICENSE_1_0.txt
   or copy at <a href="http://www.boost.org/LICENSE_1_0.txt">
      http://www.boost.org/LICENSE_1_0.txt
   </a>).
</p>

</body>
</html>