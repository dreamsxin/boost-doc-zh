<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="generator" content=
"HTML Tidy for Linux/x86 (vers 1st March 2004), see www.w3.org" />
<meta http-equiv="Content-Type" content=
"text/html; charset=UTF-8" />
<link href="ublas.css" type="text/css" />
<title>Vector</title>
</head>
<body>
<h1><img src="../../../../boost.png" align="middle" />
向量(Vector)</h1>
<h2><a name="vector" id="vector"></a>向量</h2>
<h4>说明</h4>
<p>模板类<code>vector&lt;T, A&gt;</code> 是密集向量(dense vectors)的基容器适配器(base
container adaptor)。对于一个<em>n</em>-维向量且<em>0 &lt;= i &lt; n</em> ，每一个元素<em>v</em><sub><em>i</em></sub> 被映射到容器中的第<em>i-</em>th个元素。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/vector.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    vector&lt;double&gt; v (3);
    for (unsigned i = 0; i &lt; v.size (); ++ i)
        v (i) = i;
    std::cout &lt;&lt; v &lt;&lt; std::endl;
}
</pre>
<h4>定义</h4>
<p>定义在头文件 vector.hpp 中。 </p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>T</code></td>
<td>存储在向量中的对象的类型。</td>
<td></td>
</tr>
<tr>
<td><code>A</code></td>
<td><a href="storage_concept.htm">存储(Storage)</a>数组的类型。<a href="#vector_1">[1]</a></td>
<td><code>unbounded_array&lt;T&gt;</code></td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="container_concept.htm#vector">向量(Vector)</a> ,
<a href="http://www.sgi.com/tech/stl/RandomAccessContainer.html">随机访问容器(RandomAccessContainer)</a>。</p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href=
"container_concept.htm#vector">向量(Vector)</a> 和 <a href="http://www.sgi.com/tech/stl/RandomAccessContainer.html">随机访问容器(RandomAccessContainer)</a>所施加的类型要求。</p>
<h4>公有基类(Public base classes)</h4>
<p><code>vector_container&lt;vector&lt;T, A&gt; &gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>Where defined</th>
<th>说明</th>
</tr>
<tr>
<td><code>value_type</code>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td></td>
</tr>
<tr>
<td><code>reference</code>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td></td>
</tr>
<tr>
<td><code>const_reference</code>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td></td>
</tr>
<tr>
<td><code>size_type</code>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td></td>
</tr>
<tr>
<td><code>difference_type</code>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td></td>
</tr>
<tr>
<td><code>const_iterator</code>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td></td>
</tr>
<tr>
<td><code>iterator</code>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td></td>
</tr>
<tr>
<td><code>const_reverse_iterator</code>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td></td>
</tr>
<tr>
<td><code>reverse_iterator</code>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td></td>
</tr>
<tr>
<td><code>array_type</code>
<td><a href="container_concept.htm#vector">Vector</a></td>
<td></td>
</tr>
<tr>
<td><code>vector ()</code></td>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td>Allocates an uninitialized <code>vector</code> that holds zero
elements.</td>
</tr>
<tr>
<td><code>vector (size_type size)</code></td>
<td><a href="container_concept.htm#vector">Vector</a></td>
<td>分配一个包含<code>size</code>个元素的未初始化的<code>vector</code>。
</td>
</tr>
<tr>
<td><code>vector (const vector &amp;v)</code></td>
<td></td>
<td>拷贝构造函数。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
vector (const vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td></td>
<td>扩展拷贝构造函数。</td>
</tr>
<tr>
<td><code>void resize (size_type size, bool preserve =
true)</code></td>
<td><a href="container_concept.htm#vector">Vector</a></td>
<td>重新分配一个包含<code>size</code>个元素的<code>vector</code>。
如果指定，<code>vector</code>中已经存在的元素将被保留。
</td>
</tr>
<tr>
<td><code>size_type size () const</code></td>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td>返回<code>vector</code>的大小。</td>
</tr>
<tr>
<td><code>size_type max_size () const</code></td>
<td><a href="http://www.sgi.com/tech/stl/RandomAccessContainer.html">RandomAccessContainer</a></td>
<td>返回<code>vector</code>大小的上边界。</td>
</tr>
<tr>
<td><code>bool empty () const</code></td>
<td><a href="http://www.sgi.com/tech/stl/RandomAccessContainer.html">RandomAccessContainer</a></td>
<td>等价于 <code>size () == 0</code>。</td>
</tr>
<tr>
<td><code>const array_type&amp; data () const</code></td>
<td><a href="container_concept.htm#vector">Vector</a></td>
<td></td>
</tr>
<tr>
<td><code>array_type&amp; data ()</code></td>
<td><a href="container_concept.htm#vector">Vector</a></td>
<td></td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i)
const</code></td>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td>返回第<code>i</code>个元素的常引用。</td>
</tr>
<tr>
<td><code>reference operator () (size_type i)</code></td>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td>返回第<code>i</code>-th个元素的引用。</td>
</tr>
<tr>
<td><code>const_reference operator [] (size_type i) const</code></td>
<td><a href="container_concept.htm#vector">Vector</a></td>
<td>返回第<code>i</code>个元素的<code>常量(const)</code>引用
。</td>
</tr>
<tr>
<td><code>reference operator [] (size_type i)</code></td>
<td><a href="container_concept.htm#vector">Vector</a></td>
<td>返回第<code>i</code>-th个元素的引用。</td>
</tr>
<tr>
<td><code>vector &amp;operator = (const vector &amp;v)</code></td>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>vector &amp;assign_temporary (vector &amp;v)</code></td>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td>赋值给一个临时变量。可能会改变向量<code>v</code>。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
vector &amp;operator = (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td>扩展赋值运算符。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
vector &amp;assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td>将一个向量表达式表达一个向量。赋值的左边和右边应当是相互独立的。
</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
vector &amp;operator += (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个向量表达式加到一个向量中。
</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
vector &amp;plus_assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td>将一个向量表达式加到一个向量中。赋值的左边和右边应当是相互独立的。
</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
vector &amp;operator -= (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td>一个运算赋值运算符(computed assignment operator)。从一个向量中减去一个向量表达式。
</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
vector &amp;minus_assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td>从一个向量中减去一个向量式。赋值的左边和右边应当是相互独立的。
</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
vector &amp;operator *= (const AT &amp;at)</code></td>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td>一个运算赋值运算符(computed assignment operator)。将向量乘以一个标量。
</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
vector &amp;operator /= (const AT &amp;at)</code></td>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个向量除以一个标量。
</td>
</tr>
<tr>
<td><code>void swap (vector &amp;v)</code></td>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td>交换向量的内容。</td>
</tr>
<tr>
<td><code>void insert_element (size_type i, const_reference t)</code></td>
<td><a href="container_concept.htm#vector">Vector</a></td>
<td>将<code>t</code>插入到第<code>i</code>-th个元素
。</td>
</tr>
<tr>
<td><code>void erase_element (size_type i)</code></td>
<td><a href="container_concept.htm#vector">Vector</a></td>
<td>将第<code>i</code>-th个元素删除。</td>
</tr>
<tr>
<td><code>void clear ()</code></td>
<td><a href="container_concept.htm#vector">Vector</a></td>
<td>清除容器。</td>
</tr>
<tr>
<td><code>const_iterator begin () const</code></td>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td>返回指向<code>vector</code>开始处的 <code>const_iterator</code> 。</td>
</tr>
<tr>
<td><code>const_iterator end () const</code></td>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td>返回指向<code>vector</code>终止处的 <code>const_iterator</code> 。</td>
</tr>
<tr>
<td><code>iterator begin ()</code></td>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td>返回指向<code>vector</code>开始处的 <code>iterator</code> 。</td>
</tr>
<tr>
<td><code>iterator end ()</code></td>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td>返回指向<code>vector</code>终止处的<code>iterator</code> 。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rbegin () const</code></td>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td>返回指向反转的(reversed)<code>vector</code>开始处的 <code>const_reverse_iterator</code> 。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rend () const</code></td>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td>返回指向反转的(reversed)<code>vector</code>终止处的 <code>const_reverse_iterator</code> 。</td>
</tr>
<tr>
<td><code>reverse_iterator rbegin ()</code></td>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td>返回指向反转的(reversed)<code>vector</code>开始处的 <code>reverse_iterator</code> 。</td>
</tr>
<tr>
<td><code>reverse_iterator rend ()</code></td>
<td><a href="expression_concept.htm#vector_expression">VectorExpression</a></td>
<td>返回指向反转的(reversed)<code>vector</code>终止处的 <code>reverse_iterator</code> 。</td>
</tr>
</tbody>
</table>
<h4>注意</h4>
<p><a name="vector_1" id="vector_1">[1]</a> 对于存储数组(Storage array)的常见参数是<code>unbounded_array&lt;T&gt;</code> ,
<code>bounded_array&lt;T&gt;</code> 和 <code>std::vector&lt;T&gt;</code> 。 </p>
<h2><a name="unit_vector" id="unit_vector"></a>单位向量(Unit Vector)</h2>
<h4>说明</h4>
<p>模板类<code>unit_vector&lt;T, ALLOC&gt;</code> represents
canonical unit vectors. 对于第<em>k</em>-th个
<em>n</em>-维标准单位向量(canonical unit vector)且<em>0 &lt;= i &lt;
n</em> ，如果 <em>i &lt;&gt; k</em>, and <em>u</em><sup><em>k</em></sup><sub><em>i</em></sub> <em>= 1</em>，那么满足<em>u</em><sup><em>k</em></sup><sub><em>i</em></sub>
<em>= 0</em>。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/vector.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    for (int i = 0; i &lt; 3; ++ i) {
        unit_vector&lt;double&gt; v (3, i);
        std::cout &lt;&lt; v &lt;&lt; std::endl;
    }
}
</pre>
<h4>定义</h4>
<p>定义在头文件 vector.hpp 中。 </p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>T</code></td>
<td>The type of object stored in the vector.</td>
<td><code>int</code></td>
</tr>
<tr>
<td><code>ALLOC</code></td>
<td>An STL Allocator for size_type and difference_type.</td>
<td>std::allocator</td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="container_concept.htm#vector">向量(Vector)</a> 。</p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href=
"container_concept.htm#vector">向量(Vector)</a>所施加的类型要求。</p>
<h4>公有基类(Public base classes)</h4>
<p><code>vector_container&lt;unit_vector&lt;T&gt; &gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>unit_vector ()</code></td>
<td>构造一个包含0个元素的 <code>unit_vector</code> 。</td>
</tr>
<tr>
<td><code>unit_vector (size_type size, size_type index)</code></td>
<td>构造包含<code>size</code>个元素的第<code>index</code>-th个<code>unit_vector</code>。
</td>
</tr>
<tr>
<td><code>unit_vector (const unit_vector &amp;v)</code></td>
<td>拷贝构造函数。</td>
</tr>
<tr>
<td><code>void resize (size_type size, bool preserve =
true)</code></td>
<td>重设<code>unit_vector</code>大小来包含 <code>size</code>
个元素。因此
<code>unit_vector</code>中已经存在的元素将会一直保存。</td>
</tr>
<tr>
<td><code>size_type size () const</code></td>
<td>返回<code>unit_vector</code>的大小。</td>
</tr>
<tr>
<td><code>size_type index () const</code></td>
<td>返回<code>unit_vector</code>的索引(index)。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i)
const</code></td>
<td>返回第 <code>i</code>-th 个元素的常引用。</td>
</tr>
<tr>
<td><code>const_reference operator [] (size_type i)
const</code></td>
<td>返回第 <code>i</code>-th 个元素的常引用。</td>
</tr>
<tr>
<td><code>unit_vector &amp;operator = (const unit_vector
&amp;v)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>unit_vector &amp;assign_temporary (unit_vector
&amp;v)</code></td>
<td>赋值给一个临时变量。可能会改变单位向量<code>v</code>
。</td>
</tr>
<tr>
<td><code>void swap (unit_vector &amp;v)</code></td>
<td>交换单位向量的内容。</td>
</tr>
<tr>
<td><code>const_iterator begin () const</code></td>
<td>返回指向<code>unit_vector</code>开始处的<code>const_iterator</code>。
</td>
</tr>
<tr>
<td><code>const_iterator end () const</code></td>
<td>返回指向<code>unit_vector</code>终止处的<code>const_iterator</code>。
</td>
</tr>
<tr>
<td><code>const_reverse_iterator rbegin () const</code></td>
<td>返回指向反转的(reversed)<code>unit_vector</code>开始处的<code>const_reverse_iterator</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rend () const</code></td>
<td>返回指向反转的(reversed)<code>unit_vector</code>终止处的<code>const_reverse_iterator</code>。</td>
</tr>
</tbody>
</table>
<h2><a name="zero_vector" id="zero_vector"></a>Zero Vector</h2>
<h4>说明</h4>
<p>模板类<code>zero_vector&lt;T, ALLOC&gt;</code> 表示零向量(zero vectors)。对于一个<em>n</em>-维零向量( zero vector )且<em>0
&lt;= i &lt; n</em> ，满足<em>z</em><sub><em>i</em></sub> <em>=
0</em>。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/vector.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    zero_vector&lt;double&gt; v (3);
    std::cout &lt;&lt; v &lt;&lt; std::endl;
}
</pre>
<h4>定义</h4>
<p>定义在头文件 vector.hpp 中。 </p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>T</code></td>
<td>The type of object stored in the vector.</td>
<td><code>int</code></td>
</tr>
<tr>
<td><code>ALLOC</code></td>
<td>An STL Allocator for size_type and difference_type.</td>
<td>std::allocator</td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="container_concept.htm#vector">向量(Vector)</a> 。</p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href=
"container_concept.htm#vector">向量(Vector)</a>所施加的类型要求。</p>
<h4>公有基类(Public base classes)</h4>
<p><code>vector_container&lt;zero_vector&lt;T&gt; &gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>zero_vector ()</code></td>
<td>构造一个包含0个元素的<code>zero_vector</code>。</td>
</tr>
<tr>
<td><code>zero_vector (size_type size)</code></td>
<td>构造一个包含<code>size</code>个元素的<code>zero_vector</code>。</td>
</tr>
<tr>
<td><code>zero_vector (const zero_vector &amp;v)</code></td>
<td>拷贝构造函数。</td>
</tr>
<tr>
<td><code>void resize (size_type size, bool preserve =
true)</code></td>
<td>重设<code>zero_vector</code>的大小来包含<code>size</code>个元素。
因此，
<code>zero_vector</code>中已经存在的元素将会一直保留。</td>
</tr>
<tr>
<td><code>size_type size () const</code></td>
<td>返回 <code>zero_vector</code>的大小。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i)
const</code></td>
<td>返回第 <code>i</code>-th 个元素的常引用。</td>
</tr>
<tr>
<td><code>const_reference operator [] (size_type i)
const</code></td>
<td>返回第 <code>i</code>-th 个元素的常引用。</td>
</tr>
<tr>
<td><code>zero_vector &amp;operator = (const zero_vector
&amp;v)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>zero_vector &amp;assign_temporary (zero_vector
&amp;v)</code></td>
<td>赋值给一个临时变量。可能会改变零向量<code>v</code>
。</td>
</tr>
<tr>
<td><code>void swap (zero_vector &amp;v)</code></td>
<td>交换零向量的内容。</td>
</tr>
<tr>
<td><code>const_iterator begin () const</code></td>
<td>返回一个指向<code>zero_vector</code>开始处的<code>const_iterator</code>。</td>
</tr>
<tr>
<td><code>const_iterator end () const</code></td>
<td>返回一个指向<code>zero_vector</code>终止处的<code>const_iterator</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rbegin () const</code></td>
<td>Returns a <code>const_reverse_iterator</code> pointing to the
beginning of the reversed <code>zero_vector</code>.</td>
</tr>
<tr>
<td><code>const_reverse_iterator rend () const</code></td>
<td>返回一个指向返回的(reversed) <code>zero_vector</code>开始处的<code>const_reverse_iterator</code>。</td>
</tr>
</tbody>
</table>
<h2><a name="scalar_vector" id="scalar_vector"></a>标量 向量(Scalar Vector)</h2>
<h4>说明</h4>
<p>模板类<code>scalar_vector&lt;T, ALLOC&gt;</code> 表示标量向量(scalar vectors)。对于一个<em>n</em>-维标量向量( scalar
vector ) 且<em>0 &lt;= i &lt; n</em> 满足<em>z</em><sub><em>i</em></sub> <em>= s</em>。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/vector.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    scalar_vector&lt;double&gt; v (3);
    std::cout &lt;&lt; v &lt;&lt; std::endl;
}
</pre>
<h4>定义</h4>
<p>定义在头文件 vector.hpp 中。 </p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>T</code></td>
<td>存储在向量中的对象的类型。</td>
<td><code>int</code></td>
</tr>
<tr>
<td><code>ALLOC</code></td>
<td>针对于size_type 和 difference_type的STL分配器(Allocator)。</td>
<td>std::allocator</td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="container_concept.htm#vector">向量(Vector)</a> 。 </p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href=
"container_concept.htm#vector">向量(Vector)</a>所施加的类型要求。</p>
<h4>公有基类(Public base classes)</h4>
<p><code>vector_container&lt;scalar_vector&lt;T&gt;
&gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>scalar_vector ()</code></td>
<td>构造一个包含0个元素的 <code>scalar_vector</code>。</td>
</tr>
<tr>
<td><code>scalar_vector (size_type size, const value_type
&amp;value)</code></td>
<td>构造一个包含<code>size</code>个元素的<code>scalar_vector</code>，每个元素都是一个指定值。</td>
</tr>
<tr>
<td><code>scalar_vector (const scalar_vector &amp;v)</code></td>
<td>拷贝构造函数。</td>
</tr>
<tr>
<td><code>void resize (size_type size, bool preserve =
true)</code></td>
<td>重高 <code>scalar_vector</code> 的大小来包含 <code>size</code>
个元素。因此，
<code>scalar_vector</code> 中已经存在的元素将会被保留。</td>
</tr>
<tr>
<td><code>size_type size () const</code></td>
<td>返回 <code>scalar_vector</code>的大小。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i)
const</code></td>
<td>返回第 <code>i</code>-th 个元素的常引用。</td>
</tr>
<tr>
<td><code>const_reference operator [] (size_type i)
const</code></td>
<td>返回第 <code>i</code>-th 个元素的常引用。</td>
</tr>
<tr>
<td><code>scalar_vector &amp;operator = (const scalar_vector
&amp;v)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>scalar_vector &amp;assign_temporary (scalar_vector
&amp;v)</code></td>
<td>赋值给一个临时变量。可能会改变标量向量
<code>v</code> 。</td>
</tr>
<tr>
<td><code>void swap (scalar_vector &amp;v)</code></td>
<td>交换标量向量的内容。</td>
</tr>
<tr>
<td><code>const_iterator begin () const</code></td>
<td>返回指向<code>scalar_vector</code>开始处的<code>const_iterator</code>。</td>
</tr>
<tr>
<td><code>const_iterator end () const</code></td>
<td>返回指向<code>scalar_vector</code>终止处的<code>const_iterator</code></td>
</tr>
<tr>
<td><code>const_reverse_iterator rbegin () const</code></td>
<td>返回指向反转的(reversed)<code>scalar_vector</code>开始处的<code>const_reverse_iterator</code>
。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rend () const</code></td>
<td>返回指向反转的(reversed)<code>scalar_vector</code>终止处的<code>const_reverse_iterator</code>
。</td>
</tr>
</tbody>
</table>
<hr />
<p>Copyright (&copy;) 2000-2002 Joerg Walter, Mathias Koch<br />
   Use, modification and distribution are subject to the
   Boost Software License, Version 1.0.
   (See accompanying file LICENSE_1_0.txt
   or copy at <a href="http://www.boost.org/LICENSE_1_0.txt">
      http://www.boost.org/LICENSE_1_0.txt
   </a>).
</p>
</body>
</html>
