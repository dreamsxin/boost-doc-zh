<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="generator" content=
"HTML Tidy for Linux/x86 (vers 1st March 2004), see www.w3.org" />
<meta http-equiv="Content-Type" content=
"text/html; charset=UTF-8" />
<link href="ublas.css" type="text/css" />
<title>Sparse Matrix</title>
</head>
<body>
<h1><img src="../../../../boost.png" align="middle" />
稀疏矩阵(Sparse Matricies)</h1>
<h2><a name="mapped_matrix" id="mapped_matrix"></a>映射矩阵(Mapped Matrix)</h2>
<h4>说明</h4>
<p>模板类<code>mapped_matrix&lt;T, F, A&gt;</code> 是使用元素映射(element maps)的稀疏矩阵的基础容器适配器(base container adaptor)。对于 a <em>(m xn</em>)-维 稀疏矩阵且<em>0 &lt;= i &lt; m</em>,
<em>0 &lt;= j &lt; n</em> ，那么对于行优先定向(row major orientation)的非零元素<em>m</em><sub><em>i, j</em></sub> 通过<em>(i x n +
j)</em> 来映射，或者对于列优先定向(column major orientation)的非零元素<em>m</em><sub><em>i, j</em></sub> 通过<em>(i + j x m)</em> 来映射到相关容器中的连续元素中，也就是说，对于行优先定向(row major orientation)的容器中的元素<em>k</em> =
<em>m</em><sub><em>i</em></sub><sub><sub><em>1</em></sub></sub><sub>
<em>,j</em></sub><sub><sub><em>1</em></sub></sub>且<em>k + 1 =
m</em><sub><em>i</em></sub><sub><sub><em>2</em></sub></sub><sub><em>
,j</em></sub><sub><sub><em>2</em></sub></sub>满足<em>i</em><sub><em>1</em></sub> <em>&lt;
i</em><sub><em>2</em></sub> 或者<em>(i</em><sub><em>1</em></sub>
<em>= i</em><sub><em>2</em></sub> 且 <em>j</em><sub><em>1</em></sub> <em>&lt;
j</em><sub><em>2</em></sub><em>)</em> ，对于列优先定向(column major orientation)的容器中的元素<em>k</em> = <em>m</em><sub><em>i</em></sub><sub><sub><em>1</em></sub></sub><sub> <em>,j</em></sub><sub><sub><em>1</em></sub></sub>且<em>k + 1 = m</em><sub><em>i</em></sub><sub><sub><em>2</em></sub></sub><sub><em> ,j</em></sub><sub><sub><em>2</em></sub></sub>满足<em>j</em><sub><em>1</em></sub> <em>&lt;
j</em><sub><em>2</em></sub> 或 <em>(j</em><sub><em>1</em></sub>
<em>= j</em><sub><em>2</em></sub> 且 <em>i</em><sub><em>1</em></sub> <em>&lt;
i</em><sub><em>2</em></sub><em>)</em> 。 </p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/matrix_sparse.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    mapped_matrix&lt;double&gt; m (3, 3, 3 * 3);
    for (unsigned i = 0; i &lt; m.size1 (); ++ i)
        for (unsigned j = 0; j &lt; m.size2 (); ++ j)
            m (i, j) = 3 * i + j;
    std::cout &lt;&lt; m &lt;&lt; std::endl;
}
</pre>
<h4>定义</h4>
<p>定义在头文件 matrix_sparse.hpp 中。 </p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>T</code></td>
<td>存放在映射矩阵中的对象的类型。</td>
<td></td>
</tr>
<tr>
<td><code>F</code></td>
<td>描述存储组织的函数对象。 <a href=
"#mapped_matrix_1">[1]</a></td>
<td><code>row_major</code></td>
</tr>
<tr>
<td><code>A</code></td>
<td>适配数组的类型。 <a href=
"#mapped_matrix_2">[2]</a></td>
<td><code>map_std&lt;std::size_t, T&gt;</code></td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="container_concept.htm#matrix">矩阵(Matrix</a>) 。 </p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href=
"container_concept.htm#matrix">矩阵(Matrix)</a> 所施加的类型要求。</p>
<h4>公有基类(Public base classes)</h4>
<p><code>matrix_container&lt;mapped_matrix&lt;T, F, A&gt;
&gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>mapped_matrix ()</code></td>
<td>分配一个至多只包含0行0个元素的<code>mapped_matrix</code>。</td>
</tr>
<tr>
<td><code>mapped_matrix (size_type size1, size_type2, size_type non_zeros = 0)</code></td>
<td>分配一个至多只包含<code>size1</code>行<code>size2</code>个元素的<code>mapped_matrix</code>。</td>
</tr>
<tr>
<td><code>mapped_matrix (const mapped_matrix &amp;m)</code></td>
<td>拷贝构造函数。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
mapped_matrix (size_type non_zeros, const
matrix_expression&lt;AE&gt; &amp;ae)</code></td>
<td>扩展的拷贝构造函数。</td>
</tr>
<tr>
<td><code>void resize (size_type size1, size_type size2, bool preserve = true)</code></td>
<td>重新分配一个<code>mapped_matrix</code>来存储最多
<code>size1</code>行且第行最多<code>size2</code>个元素的 <code>mapped_matrix</code>。如果指定了，
那么这些已经存在的元素将会保留。
</td>
</tr>
<tr>
<td><code>size_type size1 () const</code></td>
<td>返回行数。</td>
</tr>
<tr>
<td><code>size_type size2 () const</code></td>
<td>返回列数。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i, size_type j)
const</code></td>
<td>返回第 <code>i</code>-th行第
<code></code>-th个元素值。</td>
</tr>
<tr>
<td><code>reference operator () (size_type i, size_type
j)</code></td>
<td>返回第 <code>i</code>-th行第
<code></code>-th个元素的引用。</td>
</tr>
<tr>
<td><code>mapped_matrix &amp;operator = (const mapped_matrix
&amp;m)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>mapped_matrix &amp;assign_temporary (mapped_matrix
&amp;m)</code></td>
<td>赋值给一个临时变量，有可能会改变映射矩阵
<code>m</code> 。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
mapped_matrix &amp;operator = (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>扩展的赋值运算符。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
mapped_matrix &amp;assign (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个矩阵赋值给一个映射矩阵。赋值的左边和右边应当是相互独立的。
</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
mapped_matrix &amp;operator += (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>一个运算赋值运算符。将一个矩阵加到一个映射矩阵中。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
mapped_matrix &amp;plus_assign (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个矩阵加到一个映射矩阵中。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
mapped_matrix &amp;operator -= (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>一个运算赋值运算符。从一个映射矩阵中减去一个矩阵。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
mapped_matrix &amp;minus_assign (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>从一个映射矩阵中减去一个矩阵。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
mapped_matrix &amp;operator *= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符。将一个映射矩阵乘以一个标量。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
mapped_matrix &amp;operator /= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符。将一个映射矩阵除以一个标量。</td>
</tr>
<tr>
<td><code>void swap (mapped_matrix &amp;m)</code></td>
<td>交换映射矩阵的内容。</td>
</tr>
<tr>
<td><code>true_refrence insert_element (size_type i, size_type j, const_reference
t)</code></td>
<td>将元素 <code>t</code> 插入到第<code>i</code>-th行
第<code>j</code>-th列。不允许有重复的元素。</td>
</tr>
<tr>
<td><code>void erase_element (size_type i, size_type j)</code></td>
<td>删除在第<code>i</code>-th行
第<code>j</code>-th列的元素。</td>
</tr>
<tr>
<td><code>void clear ()</code></td>
<td>清除映射矩阵。</td>
</tr>
<tr>
<td><code>const_iterator1 begin1 () const</code></td>
<td>返回指向<code>mapped_matrix</code>开始处的<code>const_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_iterator1 end1 () const</code></td>
<td>返回指向<code>mapped_matrix</code>终止处的<code>const_iterator1</code>。</td>
</tr>
<tr>
<td><code>iterator1 begin1 ()</code></td>
<td>返回指向<code>mapped_matrix</code>开始处的<code>iterator1</code>。</td>
</tr>
<tr>
<td><code>iterator1 end1 ()</code></td>
<td>返回指向<code>mapped_matrix</code>终止处的<code>iterator1</code>。</td>
</tr>
<tr>
<td><code>const_iterator2 begin2 () const</code></td>
<td>返回指向<code>mapped_matrix</code>开始处的<code>const_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_iterator2 end2 () const</code></td>
<td>返回指向<code>mapped_matrix</code><code>终止处的<code></code>const_iterator2</code>。</td>
</tr>
<tr>
<td><code>iterator2 begin2 ()</code></td>
<td>返回指向<code>mapped_matrix</code>开始处的<code>iterator2</code>。</td>
</tr>
<tr>
<td><code>iterator2 end2 ()</code></td>
<td>返回指向<code>mapped_matrix</code><code>终止处的<code></code>iterator2</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rbegin1 () const</code></td>
<td>返回指向反转(reversed)的<code>mapped_matrix</code>开始处的<code>const_reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rend1 () const</code></td>
<td>返回指向反转(reversed)的<code>mapped_matrix</code><code>终止处的<code></code>const_reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator1 rbegin1 ()</code></td>
<td>返回指向反转(reversed)的<code>mapped_matrix</code>开始处的<code>reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator1 rend1 ()</code></td>
<td>返回指向反转(reversed)的<code>mapped_matrix</code><code>终止处的<code></code>reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rbegin2 () const</code></td>
<td>返回指向反转(reversed)的<code>mapped_matrix</code>开始处的<code>const_reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rend2 () const</code></td>
<td>返回指向反转(reversed)的<code>mapped_matrix</code><code>终止处的<code></code>const_reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator2 rbegin2 ()</code></td>
<td>返回指向反转(reversed)的<code>mapped_matrix</code>开始处的<code>reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator2 rend2 ()</code></td>
<td>返回指向反转(reversed)的<code>mapped_matrix</code><code>终止处的<code></code>reverse_iterator2</code>。</td>
</tr>
</tbody>
</table>
<h4>注意</h4>
<p><a name="mapped_matrix_1" id="mapped_matrix_1">[1]</a>对于存储组织( storage organization)所支持的参数是<code>row_major</code> 和 <code>column_major</code>。</p>
<p><a name="mapped_matrix_2" id="mapped_matrix_2">[2]</a> 对于适配数组所支持的参数是<code>map_array&lt;std::size_t, T&gt;</code> 和 <code>map_std&lt;std::size_t, T&gt;</code>。后者与<code>std::map&lt;std::size_t, T&gt;</code>等价。</p>
<h2><a name="compressed_matrix" id="compressed_matrix"></a>压缩矩阵(Compressed Matrix)</h2>
<h4>说明</h4>
<p>模板类<code>compressed_matrix&lt;T, F, IB, IA, TA&gt;</code> 是压缩矩阵的基础容器适配器(base container adaptor)。 对于 a <em>(m xn</em>)-维 压缩矩阵且<em>0 &lt;= i &lt; m</em>, <em>0 &lt;= j &lt; n</em> ，那么对于行优先定向(row major orientation)的非零元素<em>m</em><sub><em>i, j</em></sub> 通过<em>(i x n + j)</em> 来映射，或者对于列优先定向(column major orientation)的非零元素<em>m</em><sub><em>i, j</em></sub> 通过<em>(i + j x m)</em> 来映射到相关容器中的连续元素中，也就是说，对于行优先定向(row major orientation)的容器中的元素<em>k</em> = <em>m</em><sub><em>i</em></sub><sub><sub><em>1</em></sub></sub><sub> <em>,j</em></sub><sub><sub><em>1</em></sub></sub>且<em>k + 1 = m</em><sub><em>i</em></sub><sub><sub><em>2</em></sub></sub><sub><em> ,j</em></sub><sub><sub><em>2</em></sub></sub>满足<em>i</em><sub><em>1</em></sub> <em>&lt; i</em><sub><em>2</em></sub> 或者<em>(i</em><sub><em>1</em></sub> <em>= i</em><sub><em>2</em></sub> 且 <em>j</em><sub><em>1</em></sub> <em>&lt; j</em><sub><em>2</em></sub><em>)</em> ，对于列优先定向(column major orientation)的容器中的元素<em>k</em> = <em>m</em><sub><em>i</em></sub><sub><sub><em>1</em></sub></sub><sub> <em>,j</em></sub><sub><sub><em>1</em></sub></sub>且<em>k + 1 = m</em><sub><em>i</em></sub><sub><sub><em>2</em></sub></sub><sub><em> ,j</em></sub><sub><sub><em>2</em></sub></sub>满足<em>j</em><sub><em>1</em></sub> <em>&lt; j</em><sub><em>2</em></sub> 或 <em>(j</em><sub><em>1</em></sub> <em>= j</em><sub><em>2</em></sub> 且 <em>i</em><sub><em>1</em></sub> <em>&lt; i</em><sub><em>2</em></sub><em>)</em> 。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/matrix_sparse.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    compressed_matrix&lt;double&gt; m (3, 3, 3 * 3);
    for (unsigned i = 0; i &lt; m.size1 (); ++ i)
        for (unsigned j = 0; j &lt; m.size2 (); ++ j)
            m (i, j) = 3 * i + j;
    std::cout &lt;&lt; m &lt;&lt; std::endl;
}
</pre>
<h4>定义</h4>
<p>定义在头文件 matrix_sparse.hpp 中。</p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>T</code></td>
<td>存储在压缩矩阵中的元素的类型。</td>
<td></td>
</tr>
<tr>
<td><code>F</code></td>
<td>描述存储组织的函数对象。<a href=
"#compressed_matrix_1">[1]</a></td>
<td><code>row_major</code></td>
</tr>
<tr>
<td><code>IB</code></td>
<td>压缩向量(compressed vector)的下标起始值(index base)。 <a href=
"#compressed_matrix_2">[2]</a></td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>IA</code></td>
<td>用于索引的适配数组的类型。 <a href=
"#compressed_matrix_3">[3]</a></td>
<td><code>unbounded_array&lt;std::size_t&gt;</code></td>
</tr>
<tr>
<td><code>TA</code></td>
<td>用于存储值的适配数组的类型。<a href=
"#compressed_matrix_3">[3]</a></td>
<td><code>unbounded_array&lt;T&gt;</code></td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="container_concept.htm#matrix">矩阵(Matrix</a>) 。</p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href=
"container_concept.htm#matrix">矩阵(Matrix)</a> 所施加的类型要求。</p>
<h4>公有基类(Public base classes)</h4>
<p><code>matrix_container&lt;compressed_matrix&lt;T, F, IB, IA,
TA&gt; &gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>compressed_matrix ()</code></td>
<td>分配一个至多只包含0行0个元素的<code>compressed_matrix</code>。</td>
</tr>
<tr>
<td><code>compressed_matrix (size_type size1, size_type2, size_type non_zeros = 0)</code></td>
<td>分配一个至多只包含<code>size1</code>行<code>size2</code>个元素的<code>compressed_matrix</code>。</td>
</tr>
<tr>
<td><code>compressed_matrix (const compressed_matrix
&amp;m)</code></td>
<td>拷贝构造函数。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
compressed_matrix (size_type non_zeros, const
matrix_expression&lt;AE&gt; &amp;ae)</code></td>
<td>扩展的拷贝构造函数。</td>
</tr>
<tr>
<td><code>void resize (size_type size1, size_type size2, bool preserve = true)</code></td>
<td>重新分配一个<code>compressed_matrix</code>来存储最多 <code>size1</code>行且第行最多<code>size2</code>个元素的 <code>compressed_matrix</code>。如果指定了， 那么这些已经存在的元素将会保留。</td>
</tr>
<tr>
<td><code>size_type size1 () const</code></td>
<td>返回行数。</td>
</tr>
<tr>
<td><code>size_type size2 () const</code></td>
<td>返回列数。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i, size_type j)
const</code></td>
<td>返回第 <code>i</code>-th行第 <code></code>j-th个元素值。</td>
</tr>
<tr>
<td><code>reference operator () (size_type i, size_type
j)</code></td>
<td>返回第 <code>i</code>-th行第 <code></code>j-th个元素的引用。</td>
</tr>
<tr>
<td><code>compressed_matrix &amp;operator = (const
compressed_matrix &amp;m)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>compressed_matrix &amp;assign_temporary
(compressed_matrix &amp;m)</code></td>
<td>赋值给一个临时变量，有可能会改变压缩矩阵<code>m</code>。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
compressed_matrix &amp;operator = (const
matrix_expression&lt;AE&gt; &amp;ae)</code></td>
<td>扩展的赋值运算符。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
compressed_matrix &amp;assign (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个矩阵赋值给一个压缩矩阵。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
compressed_matrix &amp;operator += (const
matrix_expression&lt;AE&gt; &amp;ae)</code></td>
<td>一个运算赋值运算符。将一个矩阵加到一个压缩矩阵中。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
compressed_matrix &amp;plus_assign (const
matrix_expression&lt;AE&gt; &amp;ae)</code></td>
<td>将一个矩阵加到一个压缩矩阵中。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
compressed_matrix &amp;operator -= (const
matrix_expression&lt;AE&gt; &amp;ae)</code></td>
<td>一个运算赋值运算符。从一个压缩矩阵中减去一个矩阵。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
compressed_matrix &amp;minus_assign (const
matrix_expression&lt;AE&gt; &amp;ae)</code></td>
<td>从一个压缩矩阵中减去一个矩阵。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
compressed_matrix &amp;operator *= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符。将一个压缩矩阵乘以一个标量。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
compressed_matrix &amp;operator /= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符。将一个压缩矩阵除以一个标量。</td>
</tr>
<tr>
<td><code>void swap (compressed_matrix &amp;m)</code></td>
<td>交换压缩矩阵的内容。</td>
</tr>
<tr>
<td><code>true_reference insert_element (size_type i, size_type j, const_reference
t)</code></td>
<td>将元素<code>t</code>插入到第<code>i</code>-th行第
<code>j</code>-th列。不允许有重复的元素。</td>
</tr>
<tr>
<td><code>void erase_element (size_type i, size_type j)</code></td>
<td>删除第<code>i</code>-th行第
<code>j</code>-th列的元素。</td>
</tr>
<tr>
<td><code>void clear ()</code></td>
<td>清除压缩矩阵。</td>
</tr>
<tr>
<td><code>const_iterator1 begin1 () const</code></td>
<td>返回指向<code>compressed_matrix</code>开始处的<code>const_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_iterator1 end1 () const</code></td>
<td>返回指向<code>compressed_matrix</code>终止处的<code>const_iterator1</code>。</td>
</tr>
<tr>
<td><code>iterator1 begin1 ()</code></td>
<td>返回指向<code>compressed_matrix</code>开始处的<code>iterator1</code>。</td>
</tr>
<tr>
<td><code>iterator1 end1 ()</code></td>
<td>返回指向<code>compressed_matrix</code><code>终止处的<code></code><code></code>iterator1</code>。</td>
</tr>
<tr>
<td><code>const_iterator2 begin2 () const</code></td>
<td>返回指向<code>compressed_matrix</code>开始处的<code>const_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_iterator2 end2 () const</code></td>
<td>返回指向<code>compressed_matrix</code><code>终止处的<code></code>const_iterator2</code>。</td>
</tr>
<tr>
<td><code>iterator2 begin2 ()</code></td>
<td>返回指向<code>compressed_matrix</code>开始处的<code>iterator2</code>。</td>
</tr>
<tr>
<td><code>iterator2 end2 ()</code></td>
<td>返回指向<code>compressed_matrix</code><code>终止处的<code></code>iterator2</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rbegin1 () const</code></td>
<td>返回指向反转(reversed)的<code>compressed_matrix</code>开始处的<code>const_reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rend1 () const</code></td>
<td>返回指向反转(reversed)的<code>compressed_matrix</code><code>终止处的<code></code>const_reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator1 rbegin1 ()</code></td>
<td>返回指向反转(reversed)的<code>compressed_matrix</code>开始处的<code>reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator1 rend1 ()</code></td>
<td>返回指向反转(reversed)的<code>compressed_matrix</code><code>终止处的<code></code>reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rbegin2 () const</code></td>
<td>返回指向反转(reversed)的<code>compressed_matrix</code>开始处的<code>const_reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rend2 () const</code></td>
<td>返回指向反转(reversed)的<code>compressed_matrix</code><code>终止处的<code></code>const_reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator2 rbegin2 ()</code></td>
<td>返回指向反转(reversed)的<code>compressed_matrix</code>开始处的<code>reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator2 rend2 ()</code></td>
<td>返回指向反转(reversed)的<code>compressed_matrix</code><code>终止处的<code></code>reverse_iterator2</code>。</td>
</tr>
</tbody>
</table>
<h4>注意</h4>
<p><a name="compressed_matrix_1" id="compressed_matrix_1">[1]</a>
对于存储组织( storage organization)所支持的参数是<code>row_major</code> 和 <code>column_major</code>。</p>
<p><a name="compressed_matrix_2" id="compressed_matrix_2">[2]</a>
对于下标起始值(index base)所支持的至少是0和1。</p>
<p><a name="compressed_matrix_3" id="compressed_matrix_3">[3]</a>
对于适配数组(adapted array)所支持的参数是<code>unbounded_array&lt;&gt;</code> ,
<code>bounded_array&lt;&gt;</code> 和 <code>std::vector&lt;&gt;</code> 。 </p>
<h2><a name="coordinate_matrix" id="coordinate_matrix"></a>Coordinate Matrix</h2>
<h4>说明</h4>
<p>模板类<code>coordinate_matrix&lt;T, F, IB, IA,
TA&gt;</code> 是压缩矩阵的基础容器适配器( base container adaptor )。对于 a <em>(m x n</em> )-维 coordinate
matrix 且 <em>0 &lt;= i &lt; m</em>, <em>0 &lt;= j &lt; n</em> 那么对于行优先定向(row major orientation)的非零元素<em>m</em><sub><em>i, j</em></sub> 通过<em>(i x n + j)</em> 来映射，或者对于列优先定向(column major orientation)的非零元素<em>m</em><sub><em>i, j</em></sub> 通过<em>(i + j x m)</em> 来映射到相关容器中的连续元素中，也就是说，对于行优先定向(row major orientation)的容器中的元素<em>k</em> = <em>m</em><sub><em>i</em></sub><sub><sub><em>1</em></sub></sub><sub> <em>,j</em></sub><sub><sub><em>1</em></sub></sub>且<em>k + 1 = m</em><sub><em>i</em></sub><sub><sub><em>2</em></sub></sub><sub><em> ,j</em></sub><sub><sub><em>2</em></sub></sub>满足<em>i</em><sub><em>1</em></sub> <em>&lt; i</em><sub><em>2</em></sub> 或者<em>(i</em><sub><em>1</em></sub> <em>= i</em><sub><em>2</em></sub> 且 <em>j</em><sub><em>1</em></sub> <em>&lt; j</em><sub><em>2</em></sub><em>)</em> ，对于列优先定向(column major orientation)的容器中的元素<em>k</em> = <em>m</em><sub><em>i</em></sub><sub><sub><em>1</em></sub></sub><sub> <em>,j</em></sub><sub><sub><em>1</em></sub></sub>且<em>k + 1 = m</em><sub><em>i</em></sub><sub><sub><em>2</em></sub></sub><sub><em> ,j</em></sub><sub><sub><em>2</em></sub></sub>满足<em>j</em><sub><em>1</em></sub> <em>&lt; j</em><sub><em>2</em></sub> 或 <em>(j</em><sub><em>1</em></sub> <em>= j</em><sub><em>2</em></sub> 且 <em>i</em><sub><em>1</em></sub> <em>&lt; i</em><sub><em>2</em></sub><em>)</em> 。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/matrix_sparse.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    coordinate_matrix&lt;double&gt; m (3, 3, 3 * 3);
    for (unsigned i = 0; i &lt; m.size1 (); ++ i)
        for (unsigned j = 0; j &lt; m.size2 (); ++ j)
            m (i, j) = 3 * i + j;
    std::cout &lt;&lt; m &lt;&lt; std::endl;
}
</pre>
<h4>定义</h4>
<p>定义在头文件 matrix_sparse.hpp 中。</p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>T</code></td>
<td>存放在coordinate matrix中的元素的类型。</td>
<td></td>
</tr>
<tr>
<td><code>F</code></td>
<td>描述存储组织的函数对象。<a href=
"#coordinate_matrix_1">[1]</a></td>
<td><code>row_major</code></td>
</tr>
<tr>
<td><code>IB</code></td>
<td>coordinate vector的下标起始值(base index)。<a href=
"#coordinate_matrix_2">[2]</a></td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>IA</code></td>
<td>用于存储索引的适配数组的类型。 <a href=
"#coordinate_matrix_3">[3]</a></td>
<td><code>unbounded_array&lt;std::size_t&gt;</code></td>
</tr>
<tr>
<td><code>TA</code></td>
<td>用于存储值的适配数组的类型。 <a href=
"#coordinate_matrix_3">[3]</a></td>
<td><code>unbounded_array&lt;T&gt;</code></td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="container_concept.htm#matrix">矩阵(Matrix</a>) 。</p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href=
"container_concept.htm#matrix">矩阵(Matrix)</a> 所施加的类型要求。 </p>
<h4>公有基类(Public base classes)</h4>
<p><code>matrix_container&lt;coordinate_matrix&lt;T, F, IB, IA,
TA&gt; &gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>coordinate_matrix ()</code></td>
<td>分配一个至多只包含0行0个元素的<code>coordinate_matrix</code>。</td>
</tr>
<tr>
<td><code>coordinate_matrix (size_type size1, size_type2, size_type non_zeros = 0)</code></td>
<td>分配一个至多只包含<code>size1</code>行<code>size2</code>个元素的<code>coordinate_matrix</code>。</td>
</tr>
<tr>
<td><code>coordinate_matrix (const coordinate_matrix
&amp;m)</code></td>
<td>拷贝构造函数。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
coordinate_matrix (size_type non_zeros, const
matrix_expression&lt;AE&gt; &amp;ae)</code></td>
<td>扩展的拷贝构造函数。</td>
</tr>
<tr>
<td><code>void resize (size_type size1, size_type size2, bool preserve = true)</code></td>
<td>重新分配一个<code>coordinate_matrix</code>来存储最多 <code>size1</code>行且第行最多<code>size2</code>个元素的 <code>coordinate_matrix</code>。如果指定了， 那么这些已经存在的元素将会保留。</td>
</tr>
<tr>
<td><code>size_type size1 () const</code></td>
<td>返回行数。</td>
</tr>
<tr>
<td><code>size_type size2 () const</code></td>
<td>返回列数。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i, size_type j)
const</code></td>
<td>返回第 <code>i</code>-th行第 <code></code>j-th个元素。</td>
</tr>
<tr>
<td><code>reference operator () (size_type i, size_type
j)</code></td>
<td>返回第 <code>i</code>-th行第 <code></code>j-th个元素的引用。</td>
</tr>
<tr>
<td><code>coordinate_matrix &amp;operator = (const
coordinate_matrix &amp;m)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>coordinate_matrix &amp;assign_temporary
(coordinate_matrix &amp;m)</code></td>
<td>赋值给一个临时变量，有可能会改变 coordinate matrix
<code>m</code>.</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
coordinate_matrix &amp;operator = (const
matrix_expression&lt;AE&gt; &amp;ae)</code></td>
<td>扩展的赋值运算符。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
coordinate_matrix &amp;assign (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个矩阵赋值给一个<code>coordinate_matrix</code>。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
coordinate_matrix &amp;operator += (const
matrix_expression&lt;AE&gt; &amp;ae)</code></td>
<td>一个运算赋值运算符。将一个矩阵加到一个<code>coordinate_matrix</code>中。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
coordinate_matrix &amp;plus_assign (const
matrix_expression&lt;AE&gt; &amp;ae)</code></td>
<td>将一个矩阵加到一个<code>coordinate_matrix</code>中。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
coordinate_matrix &amp;operator -= (const
matrix_expression&lt;AE&gt; &amp;ae)</code></td>
<td>一个运算赋值运算符。从一个<code>coordinate_matrix</code>中减去一个矩阵。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
coordinate_matrix &amp;minus_assign (const
matrix_expression&lt;AE&gt; &amp;ae)</code></td>
<td>从一个<code>coordinate_matrix</code>中减去一个矩阵。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
coordinate_matrix &amp;operator *= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符。将一个压缩矩阵乘以一个标量。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
coordinate_matrix &amp;operator /= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符。将一个压缩矩阵除以一个标量。</td>
</tr>
<tr>
<td><code>void swap (coordinate_matrix &amp;m)</code></td>
<td>交换<code>coordinate_matrix</code>的内容。</td>
</tr>
<tr>
<td><code>true_reference insert_element (size_type i, size_type j, const_reference
t)</code></td>
<td>将元素<code>t</code>插入到第<code>i</code>-th行第 <code>j</code>-th列。不允许有重复的元素。</td>
</tr>
<tr>
<td><code>void append_element (size_type i, size_type j, const_reference t)</code></td>
<td>将元素 <code>t</code> 附加到第<code>i</code>-th行第<code>j</code>-th个元素。
重复的元素可以添加到一个<code>coordinate_matrix</code>中。 它们通过函数<code>sort</code>合并为一个单独的算术和元素(arithmetically summed element)。</td>
</tr>
<tr>
<td><code>void erase_element (size_type i, size_type j)</code></td>
<td>删除第<code>i</code>-th行第 <code>j</code>-th列的元素。</td>
</tr>
<tr>
<td><code>void clear ()</code></td>
<td>交换压缩矩阵的内容</td>
</tr>
<tr>
<td><code>const_iterator1 begin1 () const</code></td>
<td>返回指向<code>coordinate_matrix</code>开始处的<code>const_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_iterator1 end1 () const</code></td>
<td>返回指向<code>coordinate_matrix</code>终止处的<code>const_iterator1</code>。</td>
</tr>
<tr>
<td><code>iterator1 begin1 ()</code></td>
<td>返回指向<code>coordinate_matrix</code>开始处的<code>iterator1</code>。</td>
</tr>
<tr>
<td><code>iterator1 end1 ()</code></td>
<td>返回指向<code>coordinate_matrix</code>终止处的<code></code><code>iterator1</code>。.</td>
</tr>
<tr>
<td><code>const_iterator2 begin2 () const</code></td>
<td>返回指向<code>coordinate_matrix</code>开始处的<code>const_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_iterator2 end2 () const</code></td>
<td>返回指向<code>coordinate_matrix</code>终止处的<code></code><code>const_iterator2</code>。</td>
</tr>
<tr>
<td><code>iterator2 begin2 ()</code></td>
<td>返回指向<code>coordinate_matrix</code>开始处的<code>iterator2</code>。</td>
</tr>
<tr>
<td><code>iterator2 end2 ()</code></td>
<td>返回指向<code>coordinate_matrix</code>终止处的<code></code><code>iterator2</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rbegin1 () const</code></td>
<td>返回指向反转(reversed)的<code>coordinate_matrix</code>开始处的<code>const_reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rend1 () const</code></td>
<td>返回指向反转(reversed)的<code>coordinate_matrix</code>终止处的<code></code><code>const_reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator1 rbegin1 ()</code></td>
<td>返回指向反转(reversed)的<code>coordinate_matrix</code>开始处的<code>reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator1 rend1 ()</code></td>
<td>返回指向反转(reversed)的<code>coordinate_matrix</code>终止处的<code></code><code>reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rbegin2 () const</code></td>
<td>返回指向反转(reversed)的<code>coordinate_matrix</code>开始处的<code>const_reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rend2 () const</code></td>
<td>返回指向反转(reversed)的<code>coordinate_matrix</code>终止处的<code></code><code>const_reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator2 rbegin2 ()</code></td>
<td>返回指向反转(reversed)的<code>coordinate_matrix</code>开始处的<code>reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator2 rend2 ()</code></td>
<td>返回指向反转(reversed)的<code>coordinate_matrix</code>终止处的<code></code><code>reverse_iterator2</code>。</td>
</tr>
</tbody>
</table>
<h4>注意</h4>
<p><a name="coordinate_matrix_1" id="coordinate_matrix_1">[1]</a>
对于存储组织( storage organization)所支持的参数是<code>row_major</code> 和 <code>column_major</code>。</p>
<p><a name="coordinate_matrix_2" id="coordinate_matrix_2">[2]</a>
对于下标起始值(index base)所支持的至少是0和1。</p>
<p><a name="coordinate_matrix_3" id="coordinate_matrix_3">[3]</a>
对于适配数组(adapted array)所支持的参数是<code>unbounded_array&lt;&gt;</code> , <code>bounded_array&lt;&gt;</code> 和 <code>std::vector&lt;&gt;</code> 。 </p>
<hr />
<p>Copyright (&copy;) 2000-2002 Joerg Walter, Mathias Koch<br />
   Use, modification and distribution are subject to the
   Boost Software License, Version 1.0.
   (See accompanying file LICENSE_1_0.txt
   or copy at <a href="http://www.boost.org/LICENSE_1_0.txt">
      http://www.boost.org/LICENSE_1_0.txt
   </a>).
</p>
</body>
</html>
