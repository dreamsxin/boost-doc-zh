[/ 
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:locale Localization 本地化]

Boost.Regex provides extensive support for run-time localization, the 
localization model used can be split into two parts: front-end and back-end.\n
Boost.Regex 对运行时本地化提供扩展支持，本地化模型分为两部分：前端和后端。

Front-end localization deals with everything which the user sees - 
error messages, and the regular expression syntax itself. For example a 
French application could change \[\[:word:\]\] to \[\[:mot:\]\] and \\w to \\m. 
Modifying the front end locale requires active support from the developer, 
by providing the library with a message catalogue to load, containing the 
localized strings. Front-end locale is affected by the LC_MESSAGES category only.\n
前端本地化处理所有用户要见的东西 - 错误信息，以及自己的正则表达式语法。例如，法语程序可以将 
\[\[:word:\]\] 替换为 \[\[:mot:\]\]，\w 替换为 \m。修改前端区域需要开发者的主动支持，为库提供包含本地化字符串的信息目录。 
前端区域只被 LC_MESSAGES 种类影响。

Back-end localization deals with everything that occurs after the expression 
has been parsed - in other words everything that the user does not see or 
interact with directly. It deals with case conversion, collation, and character 
class membership. The back-end locale does not require any intervention from 
the developer - the library will acquire all the information it requires for 
the current locale from the underlying operating system / run time library. 
This means that if the program user does not interact with regular 
expressions directly - for example if the expressions are embedded in your 
C++ code - then no explicit localization is required, as the library will 
take care of everything for you. For example embedding the expression 
\[\[:word:\]\]+ in your code will always match a whole word, if the 
program is run on a machine with, for example, a Greek locale, then it 
will still match a whole word, but in Greek characters rather than Latin ones. 
The back-end locale is affected by the LC_TYPE and LC_COLLATE categories.\n
后端本地化处理表达式被分析后出现的所有事物 - 换句话说，所有用户看不到或不直接交互的东西。 
它处理大小写转换，对照和字符分类成员。后端区域不需要程序员的干涉 - 库通过从操作系统 / 运行时库的当前区域取得所有信息。 
这意味着如果程序用户并不直接与正则表达式交互 - 例如正则表达式嵌入在 C++ 代码中 - 就不需要显式的本地化，库本身会处理所有的事情。 
例如在表达式中嵌入 \[\[:word:\]\]+ 总会匹配整个单词，如果程序运行在，例如 Greek 区域，仍会匹配整个单词，只是使用 Greek 
字符而不是 Latin 字符。后端区域被 LC_TYPE 和 LC_COLLATE 种类影响。

There are three separate localization mechanisms supported by Boost.Regex:\n
Boost.Regex 支持三种独立的本地化机制：

[h4 Win32 localization model  Win32的本地化模式]

This is the default model when the library is compiled under Win32, and is 
encapsulated by the traits class `w32_regex_traits`. When this model is in 
effect each [basic_regex] object gets it's own LCID, by default this is 
the users default setting as returned by GetUserDefaultLCID, but you can 
call imbue on the `basic_regex` object to set it's locale to some other 
LCID if you wish. All the settings used by Boost.Regex are acquired directly 
from the operating system bypassing the C run time library. Front-end 
localization requires a resource dll, containing a string table with the 
user-defined strings. The traits class exports the function:\n
这是库在 Win32 下编译的默认模型，并由特性类 `w32_regex_traits` 封装。使用这个模型，每个 [basic_regex] 都有自己的 LCID，默认为 
GetUserDefaultLCID 返回的用户默认设置，但也可以调用 `basic_regex` 的 imbue 设置为其它的 LCID。Boost.Regex 
使用的所有设置都绕过 C 运行时库直接从操作系统取得。前端本地化需要资源 dll，包含一个用户自定义字符串的字符串表格。 
特性类导出如下函数：

   static std::string set_message_catalogue(const std::string& s);

which needs to be called with a string identifying the name of the resource 
dll, before your code compiles any regular expressions (but not necessarily 
before you construct any `basic_regex` instances):\n
需要在你的代码编译任何正则表达式之前(但不必在构造任意 `basic_regex` 实例之前)调用，通过字符串确定资源 dll 的名称。

   boost::w32_regex_traits<char>::set_message_catalogue("mydll.dll");

The library provides full Unicode support under NT, under Windows 9x 
the library degrades gracefully - characters 0 to 255 are supported, the 
remainder are treated as "unknown" graphic characters.\n
库在 NT 下提供完全的 Unicode 支持，在 Windows 9x 下，库适度地退化 - 0 到 255 之间的字符被支持，其余的被认为是 "未知的" 图形字符。

[h4 C localization model  C的本地化模式]

This model has been deprecated in favor of the C++ locale for all non-Windows 
compilers that support it.  This locale is encapsulated by the traits class 
`c_regex_traits`, Win32 users can force this model to take effect by 
defining the pre-processor symbol BOOST_REGEX_USE_C_LOCALE. When this model is 
in effect there is a single global locale, as set by `setlocale`. All settings 
are acquired from your run time library, consequently Unicode support is 
dependent upon your run time library implementation.\n
这个模型被废弃了，在所有非 Windows 编译器下用 C++ 区域代替。这个区域用特性类 `c_regex_traits` 封装，Win32 用户可以通过定义预处理符号 
BOOST_REGEX_USE_C_LOCALE 来强迫使用这个模型。使用这个模型时只有一个全局的区域，通过 `setlocale` 设置。 
所有的设置都从运行时库取得，所以 Unicode 支持也取决于运行时库的实现。 

Front end localization is not supported.\n
不支持前端本地化。

Note that calling setlocale invalidates all compiled regular expressions, 
calling `setlocale(LC_ALL, "C")` will make this library behave equivalent to 
most traditional regular expression libraries including version 1 of this library.\n
注意调用 `setlocale` 会使所有已编译的正则表达式无效，调用 `setlocale(LC_ALL, "C")` 会使本库行为和大多数传统的正则表达式库 
(本库的版本1包含)一致。

[h4 C++ localization model  C++本地化模式]

This model is the default for non-Windows compilers.\n
这是非 Windows 编译器的默认模型。

When this model is in effect each instance of [basic_regex] has its own 
instance of `std::locale`, class [basic_regex] also has a member function 
`imbue` which allows the locale for the expression to be set on a 
per-instance basis. Front end localization requires a POSIX message catalogue, 
which will be loaded via the `std::messages` facet of the expression's locale, 
the traits class exports the symbol:\n
使用这个模型时，[basic_regex] 的每个实例都有自己的 `std::locale` 实例，类 [basic_regex] 也有成员函数 `imbue` 
用来为表达式的每个实例设置区域。前端本地化需要 POSIX 信息目录，通过表达式区域的 `std::messages` facet 调入，特性类导出如下符号：

   static std::string set_message_catalogue(const std::string& s);

which needs to be called with a string identifying the name of the 
message catalogue, before your code compiles any regular expressions 
(but not necessarily before you construct any basic_regex instances):\n
需要在你的代码编译任何正则表达式之前 (但不必在构造任意 basic_regex 实例之前) 调用，通过字符串确定信息目录的名称。

   boost::cpp_regex_traits<char>::set_message_catalogue("mycatalogue");

Note that calling `basic_regex<>::imbue` will invalidate any expression 
currently compiled in that instance of [basic_regex].\n
注意，调用 `basic_regex<>::imbue` 会使当前 [basic_regex] 实例内已编译的表达式失效。

Finally note that if you build the library with a non-default localization model, 
then the appropriate pre-processor symbol (BOOST_REGEX_USE_C_LOCALE or 
BOOST_REGEX_USE_CPP_LOCALE) must be defined both when you build the support 
library, and when you include `<boost/regex.hpp>` or `<boost/cregex.hpp>` 
in your code. The best way to ensure this is to add the #define to 
`<boost/regex/user.hpp>`.\n
最后注意如果你使用非默认的本地化模型生成库，那么合适的预编译符号 (BOOST_REGEX_USE_C_LOCALE 或 BOOST_REGEX_USE_CPP_LOCALE) 
必须同时在生成支持库，和包含 `<boost/regex.hpp>` 或 `<boost/cregex.hpp>` 的代码中定义。 
保证这点的最好方式可能是将 #define 加入到 `<boost/regex/user.hpp>` 中。

[h4 Providing a message catalogue 提供一个信息目录]

In order to localize the front end of the library, you need to provide the 
library with the appropriate message strings contained either in a resource 
dll's string table (Win32 model), or a POSIX message catalogue (C++ models). 
In the latter case the messages must appear in message set zero of the 
catalogue. The messages and their id's are as follows:\n
为了提供库前端的本地化，你需要提供合适的信息字符串，包含在资源 dll 的字符串表格(Win32 模型) 或 POSIX 信息目录 (C++ 模型)中。 
下面的信息必须出现在目录中的信息集合 0 中。信息和 id 如下：
 
[table
  	[[Message 信息][id][Meaning 含义][Default value 缺省值]] 	 
  	[[101][The character used to start a sub-expression.\n
    用于开始一个子表达式的字符。]["(" 	 ]]
  	[[102][The character used to end a sub-expression declaration.\n
    用于结束一个子表达式声明的字符。][")" 	 ]]
  	[[103][The character used to denote an end of line assertion.\n
    用于判断行结束的字符。]["$" 	 ]]
  	[[104][The character used to denote the start of line assertion.\n
    用于判断行开始的字符。]["^" 	 ]]
  	[[105][The character used to denote the "match any character expression".\n
    用于 "匹配任意字符表达式" 的字符。]["." 	 ]]
  	[[106][The match zero or more times repetition operator.\n
    用于匹配零或多次重复的操作符。]["*" 	 ]]
  	[[107][The match one or more repetition operator.\n
    用于匹配一次或多次重复的操作符。]["+" 	 ]]
  	[[108][The match zero or one repetition operator.\n
    用于匹配零次或一次重复的操作符。]["?" 	 ]]
  	[[109][The character set opening character.\n
    字符集开始字符。]["\[" 	 ]]
  	[[110][The character set closing character.\n
    字符集结束字符。]["\]" 	 ]]
  	[[111][The alternation operator.\n
    选择操作符。]["|" 	 ]]
  	[[112][The escape character.\n
    转义字符。]["\\" 	 ]]
  	[[113][The hash character (not currently used).\n
    散列字符 (目前未使用)。]["#" 	 ]]
  	[[114][The range operator.\n
    范围操作符。]["-" 	 ]]
  	[[115][The repetition operator opening character.\n
    重复操作符开始字符。]["{" 	 ]]
  	[[116][The repetition operator closing character.\n
    重复操作符结束字符。]["}" 	 ]]
  	[[117][The digit characters.\n
    数字字符。]["0123456789" 	 ]]
  	[[118][The character which when preceded by an escape character represents the word boundary assertion.\n
    前跟转义字符用于判断单词边界的字符。]["b" 	 ]]
  	[[119][The character which when preceded by an escape character represents the non-word boundary assertion.\n
    前跟转义字符用于判断非单词边界的字符。]["B" 	 ]]
  	[[120][The character which when preceded by an escape character represents the word-start boundary assertion.\n
    前跟转义字符用于判断单词开始边界的字符。]["<" 	 ]]
  	[[121][The character which when preceded by an escape character represents the word-end boundary assertion.\n
    前跟转义字符用于判断单词结束边界的字符。][">" 	 ]]
  	[[122][The character which when preceded by an escape character represents any word character.\n
    前跟转义字符用于表示任意单词字符的字符。]["w" 	 ]]
  	[[123][The character which when preceded by an escape character represents a non-word character.\n
    前跟转义字符用于表示任意非单词字符的字符。]["W" 	 ]]
  	[[124][The character which when preceded by an escape character represents a start of buffer assertion.\n
    前跟转义字符用于判断缓冲区开始的字符。]["`A" 	 ]]
  	[[125][The character which when preceded by an escape character represents an end of buffer assertion.\n
    前跟转义字符用于判断缓冲区结束的字符。]["'z" 	 ]]
  	[[126][The newline character. \n
    换行符。]["\\n" 	 ]]
  	[[127][The comma separator.\n
    逗号操作符。]["," 	 ]]
  	[[128][The character which when preceded by an escape character represents the bell character.\n
    前跟转义字符用于表示响铃字符的字符。]["a" 	 ]]
  	[[129][The character which when preceded by an escape character represents the form feed character.\n
    前跟转义字符用于表示换页字符的字符。]["f" 	 ]]
  	[[130][The character which when preceded by an escape character represents the newline character.\n
    前跟转义字符用于表示换行符的字符。]["n" 	 ]]
  	[[131][The character which when preceded by an escape character represents the carriage return character.\n
    前跟转义字符用于表示回车字符的字符。]["r" 	 ]]
  	[[132][The character which when preceded by an escape character represents the tab character.\n
    前跟转义字符用于表示制表符的字符。]["t" 	 ]]
  	[[133][The character which when preceded by an escape character represents the vertical tab character.\n
    前跟转义字符用于表示垂直制表符的字符。]["v" 	 ]]
  	[[134][The character which when preceded by an escape character represents the start of a hexadecimal character constant.\n
    前跟转义字符用于标识十六进制字符常量开始的字符。]["x" 	 ]]
  	[[135][The character which when preceded by an escape character represents the start of an ASCII escape character.\n
    前跟转义字符用于标识 ASCII 转义字符开始的字符。]["c" 	 ]]
  	[[136][The colon character.\n
    冒号字符。][":" 	 ]]
  	[[137][The equals character.\n
    等号字符。]["=" 	 ]]
  	[[138][The character which when preceded by an escape character represents the ASCII escape character.\n
    前跟转义字符用于表示 ASCII 转义字符的字符。]["e" 	 ]]
  	[[139][The character which when preceded by an escape character represents any lower case character.\n
    前跟转义字符用于表示任意小写字母的字符。]["l" 	 ]]
  	[[140][The character which when preceded by an escape character represents any non-lower case character.\n
    前跟转义字符用于表示任意非小写字母的字符。]["L" 	 ]]
  	[[141][The character which when preceded by an escape character represents any upper case character.\n
    前跟转义字符用于表示任意大写字母的字符。]["u" 	 ]]
  	[[142][The character which when preceded by an escape character represents any non-upper case character.\n
    前跟转义字符用于表示任意非大写字母的字符。]["U" 	 ]]
  	[[143][The character which when preceded by an escape character represents any space character.\n
    前跟转义字符用于表示任意空白字符的字符。]["s" 	 ]]
  	[[144][The character which when preceded by an escape character represents any non-space character.\n
    前跟转义字符用于表示任意非空白字符的字符。]["S" 	 ]]
  	[[145][The character which when preceded by an escape character represents any digit character.\n
    前跟转义字符用于表示任意数字字符的字符。]["d" 	 ]]
  	[[146][The character which when preceded by an escape character represents any non-digit character.\n
    前跟转义字符用于表示任意非数字字符的字符。]["D" 	 ]]
  	[[147][The character which when preceded by an escape character represents the end quote operator.\n
    前跟转义字符用于标识引用操作符结束的字符。]["E" 	 ]]
  	[[148][The character which when preceded by an escape character represents the start quote operator.\n
    前跟转义字符用于标识引用操作符开始的字符。]["Q" 	 ]]
  	[[149][The character which when preceded by an escape character represents a Unicode combining character sequence.\n
    前跟转义字符用于表示 Unicode 组合字符序列的字符。]["X" 	 ]]
  	[[150][The character which when preceded by an escape character represents any single character.\n
    前跟转义字符用于表示任意单个字符的字符。]["C" 	 ]]
  	[[151][The character which when preceded by an escape character represents end of buffer operator.\n
    前跟转义字符用于标识缓冲区操作符结束的字符。]["Z" 	 ]]
  	[[152][The character which when preceded by an escape character represents the continuation assertion.\n
    前跟转义字符用于判断继续的字符。]["G" 	 ]]
  	[[153][The character which when preceeded by (? indicates a zero width negated forward lookahead assert.\n
    前跟 (? 用于判断前向匹配长度是否不为 0 的字符。][! 	 ]]
]

Custom error messages are loaded as follows: \n
自定义错误信息如下调入：

[table
  	[[Message ID 信息ID][Error message ID 错误信息ID][Default string 缺省字符串	 ]]
  	[[201][REG_NOMATCH]["No match" 	 ]]
  	[[202][REG_BADPAT]["Invalid regular expression" 	 ]]
  	[[203][REG_ECOLLATE]["Invalid collation character" 	 ]]
  	[[204][REG_ECTYPE]["Invalid character class name" 	 ]]
  	[[205][REG_EESCAPE]["Trailing backslash" 	 ]]
  	[[206][REG_ESUBREG]["Invalid back reference" 	 ]]
  	[[207][REG_EBRACK]["Unmatched \[ or \\\[" 	 ]]
  	[[208][REG_EPAREN]["Unmatched ( or \\(" 	 ]]
  	[[209][REG_EBRACE]["Unmatched \\{" 	 ]]
  	[[210][REG_BADBR]["Invalid content of \\{\\}" 	 ]]
  	[[211][REG_ERANGE]["Invalid range end" 	 ]]
  	[[212][REG_ESPACE]["Memory exhausted" 	 ]]
  	[[213][REG_BADRPT]["Invalid preceding regular expression" 	 ]]
  	[[214][REG_EEND]["Premature end of regular expression" 	 ]]
  	[[215][REG_ESIZE]["Regular expression too big" 	 ]]
  	[[216][REG_ERPAREN]["Unmatched ) or \\)" 	 ]]
  	[[217][REG_EMPTY]["Empty expression" 	 ]]
  	[[218][REG_E_UNKNOWN]["Unknown error" 	 ]]
]

Custom character class names are loaded as followed: \n
自定义字符分类名称如下调入：

[table
  	[[Message ID 信息ID][Description 说明][Equivalent default class name 等效的缺省类名	 ]]
  	[[300][The character class name for alphanumeric characters.\n
    表示字母数字字符的字符分类名称。]["alnum" 	 ]]
  	[[301][The character class name for alphabetic characters.\n
    表示字母字符的字符分类名称。]["alpha" 	 ]]
  	[[302][The character class name for control characters.\n
    表示控制字符的字符分类名称。]["cntrl" 	 ]]
  	[[303][The character class name for digit characters.\n
    表示数字字符的字符分类名称。]["digit" 	 ]]
  	[[304][The character class name for graphics characters.\n
    表示图形字符的字符分类名称。]["graph" 	 ]]
  	[[305][The character class name for lower case characters.\n
    表示小写字母的字符分类名称。]["lower" 	 ]]
  	[[306][The character class name for printable characters.\n
    表示可打印字符的字符分类名称。]["print" 	 ]]
  	[[307][The character class name for punctuation characters.\n
    表示标点字符的字符分类名称。]["punct" 	 ]]
  	[[308][The character class name for space characters.\n
    表示空白字符的字符分类名称。]["space" 	 ]]
  	[[309][The character class name for upper case characters.\n
    表示大写字母的字符分类名称。]["upper" 	 ]]
  	[[310][The character class name for hexadecimal characters.\n
    表示十六进制字符的字符分类名称。]["xdigit" 	 ]]
  	[[311][The character class name for blank characters.\n
    表示空白字符的字符分类名称。]["blank" 	 ]]
  	[[312][The character class name for word characters.\n
    表示字母字符的字符分类名称。]["word" 	 ]]
  	[[313][The character class name for Unicode characters.\n
    表示 Unicode 字符的字符分类名称。]["unicode" 	 ]]
]

Finally, custom collating element names are loaded starting from message 
id 400, and terminating when the first load thereafter fails. Each message 
looks something like: "tagname string" where tagname is the name used 
inside [[.tagname.]] and string is the actual text of the collating element. 
Note that the value of collating element [[.zero.]] is used for the 
conversion of strings to numbers - if you replace this with another value then 
that will be used for string parsing - for example use the Unicode 
character 0x0660 for [[.zero.]] if you want to use Unicode Arabic-Indic 
digits in your regular expressions in place of Latin digits.\n
最后，自定义的对照元素名称从信息 id 400 开始调入，并在第一个调入失败时结束。 
每条信息看起来都是这样的："tagname string" 其中 tagname 是在 [[.tagname.]] 中使用的名称，而 string 是对照元素实际的文本。 
注意对照元素 [[.zero.]] 的值用于将字符串转换为数字 - 如果你将其替换为其它值，就会应用于字符串分析中 - 
例如将 Unicode 字符 0x0660 用于 [[.zero.]] 如果想要在正则表达式中使用 Unicode Arabic-Indic 数字替换 Latin 数字。

Note that the POSIX defined names for character classes and collating elements 
are always available - even if custom names are defined, in contrast, 
custom error messages, and custom syntax messages replace the default ones.\n
注意 POSIX 定义的字符分类名称和对照元素名称总是可用的 - 即使定义了自定义名称，相反，自定义错误信息和自定义语法信息则替换默认的。

[endsect]


