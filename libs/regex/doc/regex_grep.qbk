[/ 
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]


[section:regex_grep regex_grep (Deprecated)]

The algorithm `regex_grep` is deprecated in favor of [regex_iterator]
which provides a more convenient and standard library friendly interface.\n
算法 `regex_grep` 由 [regex_iterator] 取代，后者提供更方便和更符号标准库的接口。

The following documentation is taken unchanged from the previous boost 
release, and will not be updated in future.\n
下面的文档从之前的 boost 发行版中未加修改地取出，并且以后也不会被更新。

   #include <boost/regex.hpp>

`regex_grep` allows you to search through a bidirectional-iterator range and 
locate all the (non-overlapping) matches with a given regular expression. 
The function is declared as:\n
`regex_grep` 用于在双向迭代器范围内搜索，并定位所有正则表达式的匹配 (非叠加的)。 函数声明如下：

   template <class Predicate, class iterator, class charT, class traits>
   unsigned int regex_grep(Predicate foo,
                           iterator first,
                           iterator last,
                           const basic_regex<charT, traits>& e,
                           boost::match_flag_type flags = match_default)

The library also defines the following convenience versions, which take 
either a `const charT*`, or a `const std::basic_string<>&` in place of a 
pair of iterators.\n
库中同样定义了简化版本，用 `const charT*` 或 `const std::basic_string<>&` 代替迭代器对。

   template <class Predicate, class charT, class traits>
   unsigned int regex_grep(Predicate foo, 
               const charT* str, 
               const basic_regex<charT, traits>& e, 
               boost::match_flag_type flags = match_default);

   template <class Predicate, class ST, class SA, class charT, class traits>
   unsigned int regex_grep(Predicate foo, 
               const std::basic_string<charT, ST, SA>& s, 
               const basic_regex<charT, traits>& e, 
               boost::match_flag_type flags = match_default);

The parameters for the primary version of `regex_grep` have the following meanings: \n
主版本的 `regex_grep` 参数含义如下：

foo: 	A predicate function object or function pointer, see below for more information.\n
foo: 断言函数对象或函数指针，更多信息参见下面。
 	 
first: 	The start of the range to search. \n
first: 搜索范围的起始。	 

last: 	The end of the range to search. \n
last: 搜索范围的终止。	 

e: 	The regular expression to search for. 	\n
e: 要搜索的正则表达式。 

flags: 	The flags that determine how matching is carried out, one of the match_flags enumerators. 	\n
flags: 决定如何匹配的标签，match_flags 枚举之一。 


The algorithm finds all of the non-overlapping matches of the expression /e/, 
for each match it fills a `match_results<iterator>` structure, which 
contains information on what matched, and calls the predicate /foo/, passing the 
`match_results<iterator>` as a single argument. If the predicate returns 
/true/, then the grep operation continues, otherwise it terminates 
without searching for further matches. The function returns the number 
of matches found.\n
算法找到表达式 /e/ 的所有非重叠匹配，对于每个匹配都填充一个 `match_results<iterator>` 
结构，记录匹配信息，并将 `match_results<iterator>` 作为唯一参数传入断言 /foo/ 中。 
如果断言返回 /true/，grep 操作继续，否则就停止，不再继续搜索匹配。函数返回找到的匹配数目。

The general form of the predicate is:\n
断言的一般形式如下：

   struct grep_predicate
   {
      bool operator()(const match_results<iterator_type>& m);
   };

For example the regular expression "a\*b" would find one match in the string 
"aaaaab" and two in the string "aaabb".\n
例如正则表达式 "a\*b" 可以在字符串 "aaaaab" 中找到一个匹配，在字符串 "aaabb" 中找到两个匹配。

Remember this algorithm can be used for a lot more than implementing a 
version of grep, the predicate can be and do anything that you want, 
grep utilities would output the results to the screen, another program could 
index a file based on a regular expression and store a set of bookmarks in a list, 
or a text file conversion utility would output to file. The results of one 
`regex_grep` can even be chained into another `regex_grep` to create recursive parsers.\n
记住这个算法可以应用于许多地方，而不仅是实现某个版本的 grep，断言可以做任何你想做的事情，grep 
工具将结果输出到屏幕上，另外一个程序根据正则表达式索引文件并在列表中存储一系列书签，或文本文件转换工具将输出到文件。 
一个 `regex_grep` 的结果甚至可以链接到另一个 `regex_grep` 用来创建递归分析器。

The algorithm may throw `std::runtime_error` if the complexity of matching the 
expression against an /N/ character string begins to exceed O(N[super 2]), or 
if the program runs out of stack space while matching the expression 
(if Boost.Regex is configured in recursive mode), or if the matcher 
exhausts it's permitted memory allocation (if Boost.Regex is configured in 
non-recursive mode).\n
如果匹配表达式的对 /N/ 的复杂度超过 O(N[super 2])，或者如果如果程序匹配表达式时栈空间溢出(Boost.Regex 设定为递归模式)， 
或匹配器用尽了它所允许分配的内容(Boost.Regex 设定为非递归模式)，算法会抛出 `std::runtime_error` 异常。

Example: convert the example from [regex_search] to use `regex_grep` instead:\n
示例：将使用 [regex_search] 的例子转为使用 `regex_grep`：

   #include <string> 
   #include <map> 
   #include <boost/regex.hpp> 

   // IndexClasses: 
   // takes the contents of a file in the form of a string 
   // and searches for all the C++ class definitions, storing 
   // their locations in a map of strings/int's 
   typedef std::map<std::string, int, std::less<std::string> > map_type; 

   const char* re = 
      // possibly leading whitespace:   
      "^[[:space:]]*" 
      // possible template declaration:
      "(template[[:space:]]*<[^;:{]+>[[:space:]]*)?"
      // class or struct:
      "(class|struct)[[:space:]]*" 
      // leading declspec macros etc:
      "("
         "\\<\\w+\\>"
         "("
            "[[:blank:]]*\\([^)]*\\)"
         ")?"
         "[[:space:]]*"
      ")*" 
      // the class name
      "(\\<\\w*\\>)[[:space:]]*" 
      // template specialisation parameters
      "(<[^;:{]+>)?[[:space:]]*"
      // terminate in { or :
      "(\\{|:[^;\\{()]*\\{)";

   boost::regex expression(re); 
   class IndexClassesPred 
   { 
      map_type& m; 
      std::string::const_iterator base; 
   public: 
      IndexClassesPred(map_type& a, std::string::const_iterator b) : m(a), base(b) {} 
      bool operator()(const  smatch& what) 
      { 
         // what[0] contains the whole string 
         // what[5] contains the class name. 
         // what[6] contains the template specialisation if any. 
         // add class name and position to map: 
         m[std::string(what[5].first, what[5].second) + std::string(what[6].first, what[6].second)] = 
                  what[5].first - base; 
         return true; 
      } 
   }; 
   void IndexClasses(map_type& m, const std::string& file) 
   { 
      std::string::const_iterator start, end; 
      start = file.begin(); 
      end = file.end(); 
      regex_grep(IndexClassesPred(m, start), start, end, expression); 
   }

Example: Use `regex_grep` to call a global callback function:\n
示例：使用 `regex_grep` 调用全局回调函数：

   #include <string> 
   #include <map> 
   #include <boost/regex.hpp> 

   // purpose: 
   // takes the contents of a file in the form of a string 
   // and searches for all the C++ class definitions, storing 
   // their locations in a map of strings/int's 
   typedef std::map<std::string, int, std::less<std::string> > map_type; 

   const char* re = 
      // possibly leading whitespace:   
      "^[[:space:]]*" 
      // possible template declaration:
      "(template[[:space:]]*<[^;:{]+>[[:space:]]*)?"
      // class or struct:
      "(class|struct)[[:space:]]*" 
      // leading declspec macros etc:
      "("
         "\\<\\w+\\>"
         "("
            "[[:blank:]]*\\([^)]*\\)"
         ")?"
         "[[:space:]]*"
      ")*" 
      // the class name
      "(\\<\\w*\\>)[[:space:]]*" 
      // template specialisation parameters
      "(<[^;:{]+>)?[[:space:]]*"
      // terminate in { or :
      "(\\{|:[^;\\{()]*\\{)";

   boost::regex expression(re);
   map_type class_index; 
   std::string::const_iterator base; 

   bool grep_callback(const  boost::smatch& what) 
   { 
      // what[0] contains the whole string 
      // what[5] contains the class name. 
      // what[6] contains the template specialisation if any. 
      // add class name and position to map: 
      class_index[std::string(what[5].first, what[5].second) + std::string(what[6].first, what[6].second)] = 
                  what[5].first - base; 
      return true; 
   } 
   void IndexClasses(const std::string& file) 
   { 
      std::string::const_iterator start, end; 
      start = file.begin(); 
      end = file.end(); 
      base = start; 
      regex_grep(grep_callback, start, end, expression, match_default); 
   }
 

Example: use `regex_grep` to call a class member function, use the standard 
library adapters `std::mem_fun` and `std::bind1st` to convert the member 
function into a predicate:\n
示例：使用 `regex_grep` 调用成员函数，使用标准库适配器 `std::mem_fun` 和 `std::bind1st` 将成员函数转换为断言：

   #include <string> 
   #include <map> 
   #include <boost/regex.hpp> 
   #include <functional> 
   // purpose: 
   // takes the contents of a file in the form of a string 
   // and searches for all the C++ class definitions, storing 
   // their locations in a map of strings/int's 

   typedef std::map<std::string, int, std::less<std::string> > map_type; 
   class class_index 
   { 
      boost::regex expression; 
      map_type index; 
      std::string::const_iterator base; 
      bool  grep_callback(boost::smatch what); 
   public: 
      void IndexClasses(const std::string& file); 
      class_index() 
         : index(), 
         expression("^(template[[:space:]]*<[^;:{]+>[[:space:]]*)?" 
                     "(class|struct)[[:space:]]*(\\<\\w+\\>([[:blank:]]*\\([^)]*\\))?" 
                     "[[:space:]]*)*(\\<\\w*\\>)[[:space:]]*(<[^;:{]+>[[:space:]]*)?" 
                     "(\\{|:[^;\\{()]*\\{)" 
                     ){} 
   }; 
   bool  class_index::grep_callback(boost::smatch what) 
   { 
      // what[0] contains the whole string 
      // what[5] contains the class name. 
      // what[6] contains the template specialisation if any. 
      // add class name and position to map: 
      index[std::string(what[5].first, what[5].second) + std::string(what[6].first, what[6].second)] = 
                  what[5].first - base; 
      return true; 
   } 

   void class_index::IndexClasses(const std::string& file) 
   { 
      std::string::const_iterator start, end; 
      start = file.begin(); 
      end = file.end(); 
      base = start; 
      regex_grep(std::bind1st(std::mem_fun(&class_index::grep_callback), this), 
               start, 
               end, 
               expression); 
   } 
 

Finally, C++ Builder users can use C++ Builder's closure type as a callback argument:\n
最后，C++ Builder 用户可以使用 C++ Builder 的 closure 类型作为回调参数：

   #include <string> 
   #include <map> 
   #include <boost/regex.hpp> 
   #include <functional> 
   // purpose: 
   // takes the contents of a file in the form of a string 
   // and searches for all the C++ class definitions, storing 
   // their locations in a map of strings/int's 

   typedef std::map<std::string, int, std::less<std::string> > map_type; 
   class class_index 
   { 
      boost::regex expression; 
      map_type index; 
      std::string::const_iterator base; 
      typedef  boost::smatch arg_type; 
      bool grep_callback(const arg_type& what); 
   public: 
      typedef bool (__closure* grep_callback_type)(const arg_type&); 
      void IndexClasses(const std::string& file); 
      class_index() 
         : index(), 
         expression("^(template[[:space:]]*<[^;:{]+>[[:space:]]*)?" 
                     "(class|struct)[[:space:]]*(\\<\\w+\\>([[:blank:]]*\\([^)]*\\))?" 
                     "[[:space:]]*)*(\\<\\w*\\>)[[:space:]]*(<[^;:{]+>[[:space:]]*)?" 
                     "(\\{|:[^;\\{()]*\\{)" 
                     ){} 
   }; 

   bool class_index::grep_callback(const arg_type& what) 
   { 
      // what[0] contains the whole string    
   // what[5] contains the class name.    
   // what[6] contains the template specialisation if any.    
   // add class name and position to map:    
   index[std::string(what[5].first, what[5].second) + std::string(what[6].first, what[6].second)] = 
                  what[5].first - base; 
      return true; 
   } 

   void class_index::IndexClasses(const std::string& file) 
   { 
      std::string::const_iterator start, end; 
      start = file.begin(); 
      end = file.end(); 
      base = start; 
      class_index::grep_callback_type cl = &(this->grep_callback); 
      regex_grep(cl, 
               start, 
               end, 
               expression); 
   }


[endsect]

