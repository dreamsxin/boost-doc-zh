[/ 
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:partial_matches Partial Matches 部分匹配]

The [match_flag_type] `match_partial` can be passed to the following algorithms: 
[regex_match], [regex_search], and [regex_grep], and used with the 
iterator [regex_iterator]. When used it indicates that partial as 
well as full matches should be found. A partial match is one that 
matched one or more characters at the end of the text input, but 
did not match all of the regular expression (although it may have done 
so had more input been available). Partial matches are typically used 
when either validating data input (checking each character as it is 
entered on the keyboard), or when searching texts that are either too long 
to load into memory (or even into a memory mapped file), or are of 
indeterminate length (for example the source may be a socket or similar). 
Partial and full matches can be differentiated as shown in the following 
table (the variable M represents an instance of [match_results] as filled in 
by [regex_match], [regex_search] or [regex_grep]):\n
[match_flag_type] `match_partial` 可以被传入如下算法：[regex_match], [regex_search], 和 [regex_grep] 还有迭代器 [regex_iterator]。 
这意味着部分匹配和完全匹配同样被寻找。 
部分匹配是指在输出文本的结尾时匹配一个或多个字符，但并不匹配完整的正则表达式(可能有更多输入时可以做到)。 
部分匹配典型地被应用于验证数据输入(当从键盘键入时检查每个字符)，或在过长(不能调入内存，甚至映射文件)
或不定长(例如socket源或类似)的文本中搜索。部分匹配和完全匹配的差别在下面的表格中显示
(变量M代表在 [regex_match], [regex_search] 或 [regex_grep] 中填充的 [match_results] 实例)： 

[table
[[ ][Result 结果][M\[0\].matched][M\[0\].first][M\[0\].second]]
[[No match\n不匹配][False][Undefined\n无定义][Undefined\n无定义][Undefined\n无定义]]
[[Partial match\n部分匹配][True][False][Start of partial match.\n部分匹配的开始。][End of partial match (end of text).\n部分匹配的结束。]]
[[Full match\n全匹配][True][True][Start of full match.\n全匹配的开始。][End of full match.\n全匹配的结束。]]
]

Be aware that using partial matches can sometimes result in somewhat 
imperfect behavior:\n
注意使用部分匹配有时会导致不完美的行为：

* There are some expressions, such as ".\*abc" that will always produce a partial match.  This problem can be reduced by careful construction of the regular expressions used, or by setting flags like match_not_dot_newline so that expressions like .\* can't match past line boundaries.\n
有一些表达式，例如".\*abc"总会生成部分匹配。 这个问题可以通过小心地构造使用的正则表达式，
或者设置如 match_not_dot_newline 的标记使得.\*这样的表达式不会匹配超过行边界，来解决。
* Boost.Regex currently prefers leftmost matches to full matches, so for example matching "abc|b" against "ab" produces a partial match against the "ab" rather than a full match against "b".  It's more efficient to work this way, but may not be the behavior you want in all situations.\n
Boost.Regex对于完全匹配总是使用最左匹配(leftmost match)，所以对于如"abc|b"应用于"ab"会导致部分匹配"ab"而不是完全匹配"b"。 
这种方式工作很有效，但可能不是所有情况都适用。

The following example tests to see whether the text could be a valid 
credit card number, as the user presses a key, the character entered 
would be added to the string being built up, and passed to `is_possible_card_number`. 
If this returns true then the text could be a valid card number, so the 
user interface's OK button would be enabled. If it returns false, then 
this is not yet a valid card number, but could be with more input, so 
the user interface would disable the OK button. Finally, if the procedure 
throws an exception the input could never become a valid number, and the 
inputted character must be discarded, and a suitable error indication 
displayed to the user.\n
下面的例子用来测试文本是否是有效的信用卡号码，当用户按键时，键入的字符被加入到生成的字符串中，并传入 `is_possible_card_number`。 
如果返回true说明文本是有效的卡号，这样用户界面的OK按钮可以被按下。 
如果返回false说明不是有效的卡号，但可以有更多输入，那么用户界面的OK按钮就被禁用。 
最后，如果过程扔出异常，输出不可能成为一个有效的卡号，并且输入的字符将被扔掉，并且适当的错误提示会显示给用户。

   #include <string>
   #include <iostream>
   #include <boost/regex.hpp>

   boost::regex e("(\\d{3,4})[- ]?(\\d{4})[- ]?(\\d{4})[- ]?(\\d{4})");

   bool is_possible_card_number(const std::string& input)
   {
      //
      // return false for partial match, true for full match, or throw for
      // impossible match based on what we have so far...
      boost::match_results<std::string::const_iterator> what;
      if(0 == boost::regex_match(input, what, e, boost::match_default | boost::match_partial))
      {
         // the input so far could not possibly be valid so reject it:
         throw std::runtime_error(
            "Invalid data entered - this could not possibly be a valid card number");
      }
      // OK so far so good, but have we finished?
      if(what[0].matched)
      {
         // excellent, we have a result:
         return true;
      }
      // what we have so far is only a partial match...
      return false;
   }

In the following example, text input is taken from a stream containing an 
unknown amount of text; this example simply counts the number of html tags 
encountered in the stream. The text is loaded into a buffer and searched a 
part at a time, if a partial match was encountered, then the partial match 
gets searched a second time as the start of the next batch of text:\n
在下面的例子中，文本从流中输入，大小未知；这个例子简单地记录流中遇到html标签的次数。 
文本被调入缓存，每次搜索一部分，如果遇到一个部分匹配，那么在下一批文本的开始处进行第2次部分匹配：

   #include <iostream>
   #include <fstream>
   #include <sstream>
   #include <string>
   #include <boost/regex.hpp>

   // match some kind of html tag:
   boost::regex e("<[^>]*>");
   // count how many:
   unsigned int tags = 0;

   void search(std::istream& is)
   {
      // buffer we'll be searching in:
      char buf[4096];
      // saved position of end of partial match:
      const char* next_pos = buf + sizeof(buf);
      // flag to indicate whether there is more input to come:
      bool have_more = true;

      while(have_more)
      {
         // how much do we copy forward from last try:
         unsigned leftover = (buf + sizeof(buf)) - next_pos;
         // and how much is left to fill:
         unsigned size = next_pos - buf;
         // copy forward whatever we have left:
         std::memmove(buf, next_pos, leftover);
         // fill the rest from the stream:
         is.read(buf + leftover, size);
         unsigned read = is.gcount();
         // check to see if we've run out of text:
         have_more = read == size;
         // reset next_pos:
         next_pos = buf + sizeof(buf);
         // and then iterate:
         boost::cregex_iterator a(
            buf, 
            buf + read + leftover, 
            e, 
            boost::match_default | boost::match_partial); 
         boost::cregex_iterator b;

         while(a != b)
         {
            if((*a)[0].matched == false)
            {
               // Partial match, save position and break:
               next_pos = (*a)[0].first;
               break;
            }
            else
            {
               // full match:
               ++tags;
            }
            
            // move to next match:
            ++a;
         }
      }
   }

[endsect]



