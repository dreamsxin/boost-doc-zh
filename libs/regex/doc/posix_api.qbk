[/ 
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:posix POSIX Compatible C API's  POSIX兼容的C API]

[note this is an abridged reference to the POSIX API functions, these are provided 
for compatibility with other libraries, rather than as an API to be used 
in new code (unless you need access from a language other than C++). 
This version of these functions should also happily coexist with other versions, 
as the names used are macros that expand to the actual function names.\n
这是 POSIX API 函数的精简参考，只是为提供与其它库的兼容性，而不是作为新代码的 API (除非你不用 C++)。 
这个版本的函数应该能够和其他版本兼容，名字用宏转发到实际的函数。] 

   #include <boost/cregex.hpp>
   
or:\n
或

   #include <boost/regex.h>

The following functions are available for users who need a POSIX compatible 
C library, they are available in both Unicode and narrow character versions, 
the standard POSIX API names are macros that expand to one version or the 
other depending upon whether UNICODE is defined or not.\n
下面的函数用来兼容 POSIX 的 C 库，同时提供 Unicode 和窄字符版本，标准的 POSIX API 名称是宏，根据 UNICODE 定义与否派发到合适的版本。

[important Note that all the symbols defined here are enclosed inside namespace 
`boost` when used in C++ programs, unless you use `#include <boost/regex.h>` 
instead - in which case the symbols are still defined in namespace boost, but 
are made available in the global namespace as well.\n
注意，这里定义的所有符号都是在 C++ 命名空间 boost 内，除非使用 `#include <boost/regex.h>` - 
这种情况下所有符号仍定义在命名空间 boost 内，但可在全局命名空间内使用。]

The functions are defined as:\n
这些函数定义如下：

   extern "C" {
   
   struct regex_tA;
   struct regex_tW;
   
   int regcompA(regex_tA*, const char*, int);
   unsigned int regerrorA(int, const regex_tA*, char*, unsigned int);
   int regexecA(const regex_tA*, const char*, unsigned int, regmatch_t*, int);
   void regfreeA(regex_tA*);

   int regcompW(regex_tW*, const wchar_t*, int);
   unsigned int regerrorW(int, const regex_tW*, wchar_t*, unsigned int);
   int regexecW(const regex_tW*, const wchar_t*, unsigned int, regmatch_t*, int);
   void regfreeW(regex_tW*);

   #ifdef UNICODE
   #define regcomp regcompW
   #define regerror regerrorW
   #define regexec regexecW
   #define regfree regfreeW
   #define regex_t regex_tW
   #else
   #define regcomp regcompA
   #define regerror regerrorA
   #define regexec regexecA
   #define regfree regfreeA
   #define regex_t regex_tA
   #endif
   }

All the functions operate on structure regex_t, which exposes two public members:\n
所有函数都操作结构 `regex_t`，暴露两个公共成员：

[table
[[Member 成员][Meaning 含义]]
[[`unsigned int re_nsub`][This is filled in by `regcomp` and indicates the number of sub-expressions contained in the regular expression.\n
通过 `regcomp` 填充，标识正则表达式内包含的子表达式数量。]]
[[`const TCHAR* re_endp`][Points to the end of the expression to compile when the flag REG_PEND is set.\n
如果标签 REG_PEND 设置，则指向欲编译表达式的结尾。]]
]

[note `regex_t` is actually a `#define` - it is either `regex_tA` or `regex_tW` 
depending upon whether `UNICODE` is defined or not, `TCHAR` is either `char` 
or `wchar_t` again depending upon the macro `UNICODE`.\n
`regex_t` 实际上是一个 `#define` - 根据 `UNICODE` 定义与否派发到 `regex_tA` 或 `regex_tW`， 
`TCHAR` 同样根据宏 `UNICODE` 派发到 `char` 或 `wchar_t`。]

[#regcomp][h4 regcomp]

`regcomp` takes a pointer to a `regex_t`, a pointer to the expression to 
compile and a flags parameter which can be a combination of:\n
`regcomp` 接受一个指向 `regex_t` 的指针，一个指向欲编译表达式的指针和可能是下面组合的标签参数：
 
[table
[[Flag 标志][Meaning 含义]]
[[REG_EXTENDED][Compiles modern regular expressions. Equivalent to `regbase::char_classes | regbase::intervals | regbase::bk_refs`. 	 \n
编译现代正则表达式。等价于 `regbase::char_classes | regbase::intervals | regbase::bk_refs`。]]
[[REG_BASIC][Compiles basic (obsolete) regular expression syntax. Equivalent to `regbase::char_classes | regbase::intervals | regbase::limited_ops | regbase::bk_braces | regbase::bk_parens | regbase::bk_refs`. 	 \n
编译基本(陈旧的)正则表达式语法。等价于 `regbase::char_classes | regbase::intervals | regbase::limited_ops | regbase::bk_braces | regbase::bk_parens | regbase::bk_refs` ]]
[[REG_NOSPEC][All characters are ordinary, the expression is a literal string. 	 \n
所有字符都是普通的，表达式是字面字符串。]]
[[REG_ICASE][Compiles for matching that ignores character case. 	 \n
忽略字符大小写。]]
[[REG_NOSUB][Has no effect in this library. 	 \n
对于本库无效。]]
[[REG_NEWLINE][When this flag is set a dot does not match the newline character. 	 \n
标签被设置时，点 '.' 不匹配换行符。]]
[[REG_PEND][When this flag is set the re_endp parameter of the regex_t structure must point to the end of the regular expression to compile. 	 \n
标签被设置时，`regex_t` 结构的 `re_endp` 参数必须指向要编译正则表达式的结尾。]]
[[REG_NOCOLLATE][When this flag is set then locale dependent collation for character ranges is turned off. 	 \n
标签被设置时，字符范围中区域相关的对照元素不被允许。]]
[[REG_ESCAPE_IN_LISTS][When this flag is set, then escape sequences are permitted in bracket expressions (character sets). 	 \n
标签被设置时，方括号表达式 (字符集) 内的转义序列被允许。]]
[[REG_NEWLINE_ALT ][When this flag is set then the newline character is equivalent to the alternation operator |. 	 \n
标签被设置时，换行符等价于选择操作符 | 。]]
[[REG_PERL][Compiles Perl like regular expressions. 	 \n
编译类 Perl 的正则表达式。]]
[[REG_AWK][A shortcut for awk-like behavior: `REG_EXTENDED | REG_ESCAPE_IN_LISTS` 	 \n
类 awk 行为的快捷方式：`REG_EXTENDED | REG_ESCAPE_IN_LISTS` ]]
[[REG_GREP][A shortcut for grep like behavior: `REG_BASIC | REG_NEWLINE_ALT` 	 \n
类 grep 行为的快捷方式：`REG_BASIC | REG_NEWLINE_ALT` ]]
[[REG_EGREP][A shortcut for egrep like behavior: `REG_EXTENDED | REG_NEWLINE_ALT` 	 \n
类 egrep 行为的快捷方式：`REG_EXTENDED | REG_NEWLINE_ALT` ]]
]

[#regerror][h4 regerror]

regerror takes the following parameters, it maps an error code to a human 
readable string:\n
`regerror` 接受下面的参数，将错误代码映射到可读的字符串：

[table
[[Parameter 参数][Meaning 含义]]
[[int code][The error code. 	 \n
错误代码。]]
[[const regex_t* e][The regular expression (can be null). 	 \n
正则表达式 (可能为 null)。]]
[[char* buf][The buffer to fill in with the error message. 	 \n
用于填充错误信息的缓冲区。]]
[[unsigned int buf_size][The length of buf. 	 \n
缓冲区长度。]]
]

If the error code is OR'ed with REG_ITOA then the message that results is the 
printable name of the code rather than a message, for example "REG_BADPAT". 
If the code is REG_ATIO then e must not be null and e->re_pend must point 
to the printable name of an error code, the return value is then the value 
of the error code. For any other value of code, the return value is the 
number of characters in the error message, if the return value is greater than 
or equal to buf_size then regerror will have to be called again with a larger buffer.\n
如果错误代码与 REG_ITOA 进行 '或' 运算结果为真，结果信息是代码的可打印名称，而不是类似于 "REG_BADPAT" 这样的信息。 
如果 code 是 REG_ATIO，e 必须不为 null，并且 e->re_pend 必须指向错误代码可打印名称的结尾，返回值是错误代码的值。 
对于其它的错误代码，返回值是错误信息的字符数，如果返回值大于或等于 buf_size，需要以更大的缓冲区重新调用 regerror。

[#regexec][h4 regexec]

regexec finds the first occurrence of expression e within string buf. 
If len is non-zero then /*m/ is filled in with what matched the regular 
expression, m[0] contains what matched the whole string, m[1] the 
first sub-expression etc, see regmatch_t in the header file declaration 
for more details. The eflags parameter can be a combination of:\n
`regexec` 在字符串 buf 中寻找表达式 e 的第一次出现。 如果 len 不是 0，那么 /*m/ 被填充为正则表达式匹配的结果， 
m[0]包含整个字符串匹配的结果，m[1]是第一个子表达式匹配的结果，依此类推，更多细节参见 regmatch_t 在头文件中的声明。 
eflags 参数可以是下面的组合：
 
[table
[[Flag 标志][Meaning 含义]]
[[REG_NOTBOL][Parameter buf does not represent the start of a line. 	 \n
参数 buf 并不表示行的开始。]]
[[REG_NOTEOL][Parameter buf does not terminate at the end of a line. 	 \n
参数 buf 并不在行的结尾行结束。]]
[[REG_STARTEND][The string searched starts at buf + pmatch\[0\].rm_so and ends at buf + pmatch\[0\].rm_eo. 	 \n
被搜索的字符串开始于 buf + pmatch\[0\].rm_so，结束于 buf + pmatch\[0\].rm_eo。 ]]
]

[#regfree][h4 regfree]

`regfree` frees all the memory that was allocated by regcomp.\n
`regfree` 用于释放 `regcomp` 分配的所有内存。

[endsect]



