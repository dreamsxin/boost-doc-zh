[/ 
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]


[section:regex_search regex_search]

   #include <boost/regex.hpp> 

The algorithm [regex_search] will search a range denoted by a pair of 
bidirectional-iterators for a given regular expression. The algorithm 
uses various heuristics to reduce the search time by only checking 
for a match if a match could conceivably start at that position. The 
algorithm is defined as follows:\n
算法 [regex_search] 在由一对双向迭代器指定的范围内搜索给定的正则表达式。 
该算法使用很多启发式的方法仅检查当前位置可能存在的匹配，以减少搜索时间。算法定义如下：

   template <class BidirectionalIterator, 
            class Allocator, class charT, class traits>
   bool regex_search(BidirectionalIterator first, BidirectionalIterator last,
                     match_results<BidirectionalIterator, Allocator>& m,
                     const basic_regex<charT, traits>& e,
                     match_flag_type flags = match_default);
                     
   template <class ST, class SA, 
            class Allocator, class charT, class traits> 
   bool regex_search(const basic_string<charT, ST, SA>& s, 
                     match_results<
                        typename basic_string<charT, ST,SA>::const_iterator, 
                        Allocator>& m, 
                     const basic_regex<charT, traits>& e, 
                     match_flag_type flags = match_default); 
             
   template<class charT, class Allocator, class traits> 
   bool regex_search(const charT* str, 
                     match_results<const charT*, Allocator>& m, 
                     const basic_regex<charT, traits>& e,
                     match_flag_type flags = match_default);
                     
   template <class BidirectionalIterator, class charT, class traits>                
   bool regex_search(BidirectionalIterator first, BidirectionalIterator last, 
                     const basic_regex<charT, traits>& e, 
                     match_flag_type flags = match_default); 
                     
   template <class charT, class traits> 
   bool regex_search(const charT* str, 
                     const basic_regex<charT, traits>& e, 
                     match_flag_type flags = match_default); 
                     
   template<class ST, class SA, class charT, class traits>
   bool regex_search(const basic_string<charT, ST, SA>& s,
                     const basic_regex<charT, traits>& e,
                     match_flag_type flags = match_default);

[h4 Description 说明]

   template <class BidirectionalIterator, class Allocator, class charT, class traits>
   bool regex_search(BidirectionalIterator first, BidirectionalIterator last,
                     match_results<BidirectionalIterator, Allocator>& m,
                     const basic_regex<charT, traits>& e,
                     match_flag_type flags = match_default);

[*Requires]: Type BidirectionalIterator meets the requirements of a Bidirectional Iterator (24.1.4).\n
[*要求]：类型 BidirectionalIterator 符合双向迭代器(24.1.4)的要求。

[*Effects]: Determines whether there is some sub-sequence within \[first,last) 
that matches the regular expression /e/, parameter /flags/ is used to control 
how the expression is matched against the character sequence. Returns 
true if such a sequence exists, false otherwise.\n
[*效果]：判断在 \[first,last) 内是否存在某个子序列匹配正则表达式 /e/，参数 /flags/ 用来控制表达式如何匹配字符序列。 
如果存在这样的序列则返回 true，否则返回 false。

[*Throws]: `std::runtime_error` if the complexity of matching the expression 
against an N character string begins to exceed O(N[super 2]), or if the 
program runs out of stack space while matching the expression (if Boost.Regex is 
configured in recursive mode), or if the matcher exhausts its permitted 
memory allocation (if Boost.Regex is configured in non-recursive mode).\n
[*异常]：如果对于N字符长度表达式匹配的复杂度超过O(N[super 2])，或者表达式匹配时发生栈空间溢出
(如果 Boost.Regex 设置为递归模式)，或者匹配器耗尽了所允许申请的内存(如果 Boost.Regex 设置为非递归模式)时， 
会抛出 `std::runtime_error` 异常。

[*Postconditions]: If the function returns false, then the effect on 
parameter /m/ is undefined, otherwise the effects on parameter /m/ 
are given in the table:\n
[*后验条件]：如果函数返回 false，参数 /m/ 结果未定义，否则结果如下：

[table
[[Element 元素][Value 值]]
[[`m.size()`][`e.mark_count()`]]
[[`m.empty()`][`false`]]
[[`m.prefix().first`][`first`]]
[[`m.prefix().last`][`m[0].first`]]
[[`m.prefix().matched`][`m.prefix().first != m.prefix().second`]]
[[`m.suffix().first`][`m[0].second`]]
[[`m.suffix().last`][`last`]]
[[`m.suffix().matched`][`m.suffix().first != m.suffix().second`]]
[[`m[0].first`][The start of the sequence of characters that matched the regular expression\n
与正则表达式相匹配的字符序列的起始点]]
[[`m[0].second`][The end of the sequence of characters that matched the regular expression\n
与正则表达式相匹配的字符序列的结束点]]
[[`m[0].matched`][true if a full match was found, and false if it was a partial match (found as a result of the match_partial flag being set).\n
如果找到一个全匹配，则为 true，如果是部分匹配(找到的结果其 match_partial 标志被置位)，则为 false。]]
[[`m[n].first`][For all integers `n < m.size()`, the start of the sequence that 
      matched sub-expression /n/. Alternatively, if sub-expression /n/ did not 
      participate in the match, then last.\n
   对于所有整数 `n < m.size()`，为匹配的子表达式 /n/ 的序列起始点。如果子表达式 /n/ 不参与该匹配，则为 `last`。]]
[[`m[n].second`][For all integers `n < m.size()`, the end of the sequence that 
      matched sub-expression /n/. Alternatively, if sub-expression /n/ did not 
      participate in the match, then `last`.\n
      对于所有整数 `n < m.size()`，为匹配的子表达式 /n/ 的序列结束点。如果子表达式 /n/ 不参与该匹配，则为 `last`。]]
[[`m[n].matched`][For all integers `n < m.size()`, true if sub-expression /n/ 
      participated in the match, false otherwise.\n
      对于所有整数 `n < m.size()`，如果子表达式 /n/ 参与该匹配，则为 true，否则为 false。]]
]

   template <class charT, class Allocator, class traits>
   bool regex_search(const charT* str, match_results<const charT*, Allocator>& m,
                     const basic_regex<charT, traits>& e,
                     match_flag_type flags = match_default);

[*Effects]: Returns the result of `regex_search(str, str + char_traits<charT>::length(str), m, e, flags)`.\n
[*效果]：返回 `regex_search(str, str + char_traits<charT>::length(str), m, e, flags)` 的结果。

   template <class ST, class SA, class Allocator, class charT,
            class traits>
   bool regex_search(const basic_string<charT, ST, SA>& s,
                     match_results<typename basic_string<charT, ST, SA>::const_iterator, Allocator>& m,
                     const basic_regex<charT, traits>& e,
                     match_flag_type flags = match_default);

[*Effects]: Returns the result of `regex_search(s.begin(), s.end(), m, e, flags)`.\n
[*效果]：返回 `regex_search(s.begin(), s.end(), m, e, flags)` 的结果。

   template <class iterator, class charT, class traits>
   bool regex_search(iterator first, iterator last,
                     const basic_regex<charT, traits>& e,
                     match_flag_type flags = match_default);

[*Effects]: Behaves "as if" by constructing an instance of 
`match_results<BidirectionalIterator> what`, and then returning the result of 
`regex_search(first, last, what, e, flags)`.\n
[*效果]：其行为“就象”构造一个 `match_results<BidirectionalIterator> what` 实例，然后返回
`regex_search(first, last, what, e, flags)` 的结果。

   template <class charT, class traits>
   bool regex_search(const charT* str
                     const basic_regex<charT, traits>& e,
                     match_flag_type flags = match_default);

[*Effects]: Returns the result of `regex_search(str, str + char_traits<charT>::length(str), e, flags)`.\n
[*效果]：返回 `regex_search(str, str + char_traits<charT>::length(str), e, flags)` 的结果。

   template <class ST, class SA, class charT, class traits>
   bool regex_search(const basic_string<charT, ST, SA>& s,
                     const basic_regex<charT, traits>& e,
                     match_flag_type flags = match_default);

[*Effects]: Returns the result of `regex_search(s.begin(), s.end(), e, flags)`.\n
[*效果]：返回 `regex_search(s.begin(), s.end(), e, flags)` 的结果。

[h4 Examples 示例]

The following example, takes the contents of a file in the form of a string, 
and searches for all the C++ class declarations in the file. The code will 
work regardless of the way that `std::string` is implemented, for example it 
could easily be modified to work with the SGI rope class, which uses a 
non-contiguous storage strategy.\n
以下例子以字符串的形式接受一个文件的内容，并在文件中查找所有C++类声明。
无论 `std::string` 如何实现，这段代码都可以工作，例如，它可以很容易地修改为与 
SGI rope 类一起使用，后者使用了一种非连续存储的策略。

   #include <string> 
   #include <map> 
   #include <boost/regex.hpp> 

   // purpose: 
   // takes the contents of a file in the form of a string 
   // and searches for all the C++ class definitions, storing 
   // their locations in a map of strings/int's 
   typedef std::map<std::string, int, std::less<std::string> > map_type; 

   boost::regex expression(
      "^(template[[:space:]]*<[^;:{]+>[[:space:]]*)?"
      "(class|struct)[[:space:]]*"
      "(\\<\\w+\\>([[:blank:]]*\\([^)]*\\))?"
      "[[:space:]]*)*(\\<\\w*\\>)[[:space:]]*"
      "(<[^;:{]+>[[:space:]]*)?(\\{|:[^;\\{()]*\\{)"); 

   void IndexClasses(map_type& m, const std::string& file) 
   { 
      std::string::const_iterator start, end; 
      start = file.begin(); 
      end = file.end(); 
         boost::match_results<std::string::const_iterator> what; 
      boost::match_flag_type flags = boost::match_default; 
      while(regex_search(start, end, what, expression, flags)) 
      { 
         // what[0] contains the whole string 
         // what[5] contains the class name. 
         // what[6] contains the template specialisation if any. 
         // add class name and position to map: 
         m[std::string(what[5].first, what[5].second) 
               + std::string(what[6].first, what[6].second)] 
            = what[5].first - file.begin(); 
         // update search position: 
         start = what[0].second; 
         // update flags: 
         flags |= boost::match_prev_avail; 
         flags |= boost::match_not_bob; 
      } 
   }
     
[endsect]

