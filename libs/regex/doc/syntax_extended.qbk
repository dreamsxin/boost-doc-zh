[/ 
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]


[section:basic_extended POSIX Extended Regular Expression Syntax  POSIX扩展正则表达式语法]

[h3 Synopsis 大纲]

The POSIX-Extended regular expression syntax is supported by the POSIX 
C regular expression API's, and variations are used by the utilities 
`egrep` and `awk`. You can construct POSIX extended regular expressions in 
Boost.Regex by passing the flag `extended` to the regex constructor, for example:\n
POSIX扩展的正则表达式语法通过POSIX C正则表达式API提供，其变种被工具 `egrep` 和 `awk` 使用。 
在Boost.Regex中你可以通过把 `extended` 标签传入regex的构造函数来构造POSIX扩展正则表达式，例如： 

   // e1 is a case sensitive POSIX-Extended expression:
   boost::regex e1(my_expression, boost::regex::extended);
   // e2 a case insensitive POSIX-Extended expression:
   boost::regex e2(my_expression, boost::regex::extended|boost::regex::icase);

[#boost_regex.posix_extended_syntax][h3 POSIX Extended Syntax  POSIX扩展的语法]

In POSIX-Extended regular expressions, all characters match themselves except for 
the following special characters:\n
在POSIX扩展的正则表达式中，除了下面的特殊字符外，所有的字符都匹配自己： 

[pre .\[{()\\\*+?|^$]

[h4 Wildcard: 通配符:]

The single character '.' when used outside of a character set will match 
any single character except:\n
单字符'.'在字符集外面使用时匹配任意单个字符，除了： 

* The NULL character when the flag `match_no_dot_null` is passed to the 
matching algorithms.\n
  NULL字符当标签 `match_no_dot_null` 被传到匹配算法中。
* The newline character when the flag `match_not_dot_newline` is passed 
to the matching algorithms.\n
  换行符当标签 `match_not_dot_newline` 被传到匹配算法中。

[h4 Anchors: 锚点: ]

A '^' character shall match the start of a line when used as the first 
character of an expression, or the first character of a sub-expression.\n
当'^'字符作为表达式或子表达式的第一个字符时会匹配行的开始。

A '$' character shall match the end of a line when used as the 
last character of an expression, or the last character of a sub-expression.\n
当'$'字符作为表达式或子表达式的最后一个字符时会匹配行的终止。

[h4 Marked sub-expressions: 标记子表达式: ]

A section beginning `(` and ending `)` acts as a marked sub-expression.  
Whatever matched the sub-expression is split out in a separate field 
by the matching algorithms.  Marked sub-expressions can also repeated, 
or referred to by a back-reference.\n
以 `(` 开始，以 `)` 结束的部分，是一个标记子表达式。子表达式匹配的部分会被匹配算法单独分离出去。
标记子表达式可以被重复，或被后向引用所引用。

[h4 Repeats: 重复: ]

Any atom (a single character, a marked sub-expression, or a character class) 
can be repeated with the `*`, `+`, `?`, and `{}` operators.\n
任何原子(单个字符，标记子表达式或一个字符集)都可以用 `*`、`+`、`?` 和 `{}` 操作符进行重复。

The `*` operator will match the preceding atom /zero or more times/, for 
example the expression `a*b` will match any of the following:\n
操作符 `*` 可以将前面的原子重复零或多次，例如表达式 `a*b` 可以匹配下面的：

[pre
b
ab
aaaaaaaab
]

The `+` operator will match the preceding atom /one or more times/, 
for example the expression a+b will match any of the following:\n
`+` 操作符可以将前面的原子重复一次或多次，例如表达式 `a+b` 会匹配下面的：

[pre 
ab
aaaaaaaab
]

But will not match:\n
但不会匹配：

[pre
b
]

The `?` operator will match the preceding atom /zero or one times/, for 
example the expression `ca?b` will match any of the following:\n
操作符 `?` 可以将前面的原子匹配/零或一次/， 例如表达式 `ca?b` 可以匹配下面的：

[pre
cb
cab
]

But will not match:\n
但不会匹配：

[pre
caab
]

An atom can also be repeated with a bounded repeat:\n
原子也可以进行有数次的重复：

`a{n}`  Matches 'a' repeated /exactly n times/.\n
`a{n}`  会匹配'a'/刚好n次/。 

`a{n,}`  Matches 'a' repeated /n or more times/.\n
`a{n,}`  会匹配'a'/n次或以上/。

`a{n, m}`  Matches 'a' repeated /between n and m times inclusive/.\n
`a{n, m}`  会匹配'a' /n到m/次。

For example:\n
例如：

[pre ^a{2,3}\$]

Will match either of:\n
会匹配如下的： 

   aa
   aaa

But neither of:\n
但不会匹配：

   a
   aaaa

It is an error to use a repeat operator, if the preceding construct can not 
be repeated, for example:\n
如果前面的结构不能被重复，那么使用重复操作符就是个错误，例如：

   a(*)

Will raise an error, as there is nothing for the `*` operator to be applied to.\n
会产生一个错误，因为 `*` 没有可以应用的对象。 

[h4 Back references: 后向引用: ]

An escape character followed by a digit /n/, where /n/ is in the range 1-9, 
matches the same string that was matched by sub-expression /n/.  For example 
the expression:\n
转义字符后跟一个数字 /n/，其中 /n/ 的范围是1-9，会匹配子表达式 /n/ 匹配的相同字符串。例如表达式：

[pre ^(a\*).\*\\1\$]

Will match the string:\n
会匹配字符串：

   aaabbaaa

But not the string:\n
但不会匹配：

   aaabba

[caution The POSIX standard does not support back-references for "extended" 
regular expressions, this is a compatible extension to that standard.\n
POSIX标准并不支持"扩展"正则表达式的后向引用，这是对标准的兼容扩展。]

[h4 Alternation 选择]

The `|` operator will match either of its arguments, so for example: 
`abc|def` will match either "abc" or "def". \n
`|` 操作符会匹配它的参数之一，例如：`abc|def` 会匹配"abc"或"def"。

Parenthesis can be used to group alternations, for example: `ab(d|ef)` 
will match either of "abd" or "abef".\n
括号可以用来将选择分组，例如：`ab(d|ef)` 会匹配"abd"或"abef"。

[h4 Character sets: 字符集: ]

A character set is a bracket-expression starting with \[ and ending with \], 
it defines a set of characters, and matches any single character that is 
a member of that set.\n
字符集是一个以 \[ 开始，以 \] 结束的方括号表达式，它定义了一个字符的集合，可以匹配集合内包含的任意一个单字符。

A bracket expression may contain any combination of the following:\n
一个方括号表达式可以包含下面情况的任意组合：

[h5 Single characters: 单个字符: ]

For example `[abc]`, will match any of the characters 'a', 'b', or 'c'.\n
例如 `[abc]` 会匹配 'a'、'b' 或 'c'。

[h5 Character ranges: 字符范围: ]

For example `[a-c]` will match any single character in the range 'a' to 'c'.  
By default, for POSIX-Extended regular expressions, a character /x/ is 
within the range /y/ to /z/, if it collates within that range; this 
results in locale specific behavior .  This behavior can be turned 
off by unsetting the `collate` 
[link boost_regex.ref.syntax_option_type option flag] - in which case whether 
a character appears within a range is determined by comparing the code 
points of the characters only.\n
例如 `[a-c]` 会匹配'a'到'c'之间的任意单个字符。默认地，对于POSIX扩展正则表达式来说，
如果字符 /x/ 是在范围 /y/ 到 /z/ 的范围之内，就说它位于该范围之中；这会导致区域特定行为。
这种行为可以通过取消设定 `collate` 选项标签来关闭 - 在这种情况下，一个字符是否处于某个范围之内仅通过比较编码点来判断。

[h5 Negation: 取反：]

If the bracket-expression begins with the ^ character, then it matches the 
complement of the characters it contains, for example `[^a-c]` matches 
any character that is not in the range `a-c`.\n
如果方括号表达式以字符 ^ 开始，那么它匹配该字符的补集，例如 `[^a-c]` 匹配任意不在 `a-c` 范围内的字符。

[h5 Character classes: 字符类: ]

An expression of the form `[[:name:]]` matches the named character class "name", 
for example `[[:lower:]]` matches any lower case character.  
See [link boost_regex.syntax.character_classes character class names].\n
`[[:name:]]` 这种形式的表达式匹配命名字符分类"name"，例如 `[[:lower:]]` 匹配任意的小写字符。
参见 [link boost_regex.syntax.character_classes 字符类名称]。

[h5 Collating Elements: 对照元素: ]

An expression of the form `[[.col.]` matches the collating element /col/.  
A collating element is any single character, or any sequence of 
characters that collates as a single unit.  Collating elements may 
also be used as the end point of a range, for example: `[[.ae.]-c]` 
matches the character sequence "ae", plus any single character 
in the range "ae"-c, assuming that "ae" is treated as a single 
collating element in the current locale.\n
`[[.col.]` 形式的表达式匹配对照元素 /col/。对照元素同样可以作为范围的端点，例如： 
`[[.ae.]-c]` 匹配字符序列"ae"，或者"ae"到c范围内的任意单个字符，假设在当前区域下"ae"被当作单个对照元素对待。

Collating elements may be used in place of escapes (which are not 
normally allowed inside character sets), for example `[[.^.]abc]` 
would match either one of the characters 'abc^'.\n
对照元素可以用来代替转义字符(在字符集中通常不允许)，例如 `[[.^.]abc]` 会匹配 'abc^' 中的一个。

As an extension, a collating element may also be specified via its 
[link boost_regex.syntax.collating_names symbolic name], for example:\n
作为扩展，对照元素同样可以用 [link boost_regex.syntax.collating_names 符号名称] 来指定，例如：

   [[.NUL.]]

matches a NUL character.\n
匹配NULL字符。

[h5 Equivalence classes: 等价类: ]

An expression of the form `[[=col=]]`, matches any character or collating element 
whose primary sort key is the same as that for collating element /col/, 
as with colating elements the name /col/ may be a 
[link boost_regex.syntax.collating_names symbolic name].  A primary 
sort key is one that ignores case, accentation, or locale-specific tailorings; 
so for example `[[=a=]]` matches any of the characters: 
a, '''&#xC0;''', '''&#xC1;''', '''&#xC2;''', 
'''&#xC3;''', '''&#xC4;''', '''&#xC5;''', A, '''&#xE0;''', '''&#xE1;''', 
'''&#xE2;''', '''&#xE3;''', '''&#xE4;''' and '''&#xE5;'''.  
Unfortunately implementation of this is reliant on the platform's 
collation and localisation support; this feature can not be relied 
upon to work portably across all platforms, or even all locales on one platform.\n
`[[=col=]]` 形式的表达式匹配任意字符或对照元素，只要它的主排序关键字和对照元素 /col/ 的主排序关键字相同，
其中对照元素 /col/ 可能是一个 [link boost_regex.syntax.collating_names 符号名称]。 
主排序关键是大小写无关，重音或区域特定无关的；例如 `[[=a=]]` 匹配这几个字符之一：
a, '''&#xC0;''', '''&#xC1;''', '''&#xC2;''', 
'''&#xC3;''', '''&#xC4;''', '''&#xC5;''', A, '''&#xE0;''', '''&#xE1;''', 
'''&#xE2;''', '''&#xE3;''', '''&#xE4;''' and '''&#xE5;'''.  
不幸的是，这个实现依赖于平台的对照和本地化(localization)支持； 
这个特性不能被可靠地可移植地应用于所有平台，甚至一个平台上的所有区域。

[h5 Combinations: 组合: ]

All of the above can be combined in one character set declaration, 
for example: `[[:digit:]a-c[.NUL.]]`.\n
下面所有的情况都可以在一个字符集声明中被组合，例如：`[[:digit:]a-c[.NUL.]]`。 

[h4 Escapes 转义字符]

The POSIX standard defines no escape sequences for POSIX-Extended 
regular expressions, except that:\n
POSIX标准并没有定义任何POSIX扩展正则表达式的转义序列，除了：

* Any special character preceded by an escape shall match itself.\n
  任何特殊字符前跟转义字符都匹配自己。
* The effect of any ordinary character being preceded by an escape is undefined.\n
  任何普通字符前跟转义字符的作用是未定义的。
* An escape inside a character class declaration shall match itself: in 
other words the escape character is not "special" inside a character 
class declaration; so `[\^]` will match either a literal '\\' or a '^'.\n
  字符类声明内的转义字符匹配自己：换句话说，字符类声明内的转义字符不"特殊"；所以 `[\^]` 匹配 '\\' 或 '^'。

However, that's rather restrictive, so the following standard-compatible 
extensions are also supported by Boost.Regex:\n
然而，这是很受限制的，所以下面与标准兼容的扩展同样被Boost.Regex支持：

[h5 Escapes matching a specific character 转义字符匹配特殊字符 ]

The following escape sequences are all synonyms for single characters:\n
下面的转义序列与单个字符同义：

[table
[[Escape 转义字符][Character 字符]]
[[\\a]['\\a']]
[[\\e][0x1B]]
[[\\f][\\f]]
[[\\n][\\n]]
[[\\r][\\r]]
[[\\t][\\t]]
[[\\v][\\v]]
[[\\b][\\b (but only inside a character class declaration).\n
\\b (但只在字符类声明内部)。]]
[[\\cX][An ASCII escape sequence - the character whose code point is X % 32\n
ASCII转义序列 - 字符码点为X % 32 ]]
[[\\xdd][A hexadecimal escape sequence - matches the single character whose code point is 0xdd.\n
十六进制转义序列 - 匹配码点为0xdd的单个字符。]]
[[\\x{dddd}][A hexadecimal escape sequence - matches the single character whose code point is 0xdddd.\n
十六进制转义序列 - 匹配码点为0xdddd的单个字符。]]
[[\\0ddd][An octal escape sequence - matches the single character whose code point is 0ddd.\n
八进制转义序列 - 匹配码表为0ddd的单个字符。]]
[[\\N{Name}][Matches the single character which has the symbolic name name.  For example `\\N{newline}` matches the single character \\n.\n
匹配符号名称为name的单个字符。例如 `\\N{newline}` 匹配字符\\n。]]
]

[h5 "Single character" character classes: "单字符"字符类: ]

Any escaped character /x/, if /x/ is the name of a character class shall 
match any character that is a member of that class, and any 
escaped character /X/, if /x/ is the name of a character class, 
shall match any character not in that class.\n
任意转义字符 /x/，如果 /x/ 是字符类的名称，则匹配这个字符类的任意成员，大对于转义字符 /X/，
如果 /x/ 是字符类的名称，则匹配不在这个字符类的任意字符。

The following are supported by default:\n
以下默认被支持：

[table
[[Escape sequence 转义序列][Equivalent to 等同于]]
[[`\d`][`[[:digit:]]`]]
[[`\l`][`[[:lower:]]`]]
[[`\s`][`[[:space:]]`]]
[[`\u`][`[[:upper:]]`]]
[[`\w`][`[[:word:]]`]]
[[`\D`][`[^[:digit:]]`]]
[[`\L`][`[^[:lower:]]`]]
[[`\S`][`[^[:space:]]`]]
[[`\U`][`[^[:upper:]]`]]
[[`\W`][`[^[:word:]]`]]
]

[h5 Character Properties 字符属性]

The character property names in the following table are all equivalent to the 
names used in character classes.\n
下面表格中的字符属性名称都等同于将名字应用于字符类中。

[table
[[Form 格式][Description 说明][Equivalent character set form 等价的字符集格式]]
[[`\pX`][Matches any character that has the property X.\n
匹配任意有属性X的字符。][`[[:X:]]`]]
[[`\p{Name}`][Matches any character that has the property Name.\n
匹配任意拥有属性Name的字符。][`[[:Name:]]`]]
[[`\PX`][Matches any character that does not have the property X.\n
匹配任意不拥有属性X的字符。][`[^[:X:]]`]]
[[`\P{Name}`][Matches any character that does not have the property Name.\n
匹配任意不拥有属性Name的字符。][`[^[:Name:]]`]]
]

For example `\pd` matches any "digit" character, as does `\p{digit}`.\n
例如 `\pd` 匹配任意"数字"字符，和 `\p{digit}` 一样。

[h5 Word Boundaries 单词边界]

The following escape sequences match the boundaries of words:\n
下面的转义序列匹配单词的边界：

[table
[[Escape 转义字符][Meaning 意义]]
[[`\<`][Matches the start of a word.\n
匹配单词的开始。]]
[[`\>`][Matches the end of a word.\n
匹配单词的结尾]]
[[`\b`][Matches a word boundary (the start or end of a word).\n
匹配单词边界(单词的开始或结尾)。]]
[[`\B`][Matches only when not at a word boundary.\n
只在非单词边界匹配。]]
]

[h5 Buffer boundaries 缓冲区边界]

The following match only at buffer boundaries: a "buffer" in this 
context is the whole of the input text that is being matched against 
(note that ^ and $ may match embedded newlines within the text).\n
下面的操作符只匹配缓冲区边界：这里的"缓冲区"指用于匹配的全部输入文本(^和$只能匹配文本内的行)。

[table
[[Escape 转义字符][Meaning 意义]]
[[\\\`][Matches at the start of a buffer only.\n
只匹配缓冲区的开始。]]
[[\\'][Matches at the end of a buffer only.\n
只匹配缓冲区的结尾。]]
[[`\A`][Matches at the start of a buffer only (the same as \\\`).\n
只匹配缓冲区的开始(和\\\`相同)。]]
[[`\z`][Matches at the end of a buffer only (the same as \\').\n
只匹配缓冲区的结尾(和\\'相同)。]]
[[`\Z`][Matches an optional sequence of newlines at the end of a buffer: 
equivalent to the regular expression `\n*\z`\n
匹配缓冲区结尾可能存在的空行序列：等同于正则表达式 `\n*\z`]]
]

[h5 Continuation Escape 持续转义]

The sequence `\G` matches only at the end of the last match found, or at 
the start of the text being matched if no previous match was found.  
This escape useful if you're iterating over the matches contained within 
a text, and you want each subsequence match to start where the last one ended.\n
序列 `\G` 只在上次匹配的结尾匹配，或者在没有前次匹配找到的情况下，匹配文本的开始。 
这个转义在你迭代文本中所有匹配，并且每一个子匹配都从前一个结束时开始时有用。

[h5 Quoting escape 引用转义]

The escape sequence `\Q` begins a "quoted sequence": all the subsequent 
characters are treated as literals, until either the end of the 
regular expression or `\E` is found.  For example the expression: `\Q\*+\Ea+` 
would match either of:\n
转义序列 `\Q` 开始一个"引用转义"：所有子序列字符都被当作字面值来处理，直到正则表达式结束或碰到 `\E`。 
例如表达式：`\Q\*+\Ea+`匹配：

   \*+a
   \*+aaa

[h5 Unicode escapes  Unicode转义]

[table
[[Escape 转义字符][Meaning 意义]]
[[`\C`][Matches a single code point: in Boost regex this has exactly the same effect as a "." operator.\n
匹配一个单一码点：在Boost.Regex中这和"."操作符作用完全相同。]]
[[`\X`][Matches a combining character sequence: that is any non-combining character followed by a sequence of zero or more combining characters.\n
匹配一个组合字符序列：即任意非组合字符后跟零个或多个组合字符。]]
]

[h5 Any other escape 其它转义序列]

Any other escape sequence matches the character that is escaped, 
for example \\@ matches a literal '@'.\n
任何其它的转义序列都匹配被转义的字符，例如 \\@ 匹配字面 '@'。

[h4 Operator precedence 操作符优先级]

The order of precedence for of operators is as follows:\n
操作符优先级如下：

# Collation-related bracket symbols 	`[==] [::] [..]`\n
  关于对照元素的方括号符号      `[==] [::] [..]`
# Escaped characters 	`\`\n
  转义字符      `\`
# Character set (bracket expression) 	`[]`\n
  字符集(方括号表达式)       `[] `
# Grouping 	`()`\n
  分组        `()` 
# Single-character-ERE duplication 	`* + ? {m,n}`\n
  单字符ERE重复      `* + ? {m,n}` 
# Concatenation 	\n
  连接
# Anchoring 	^$\n
  锚点    ^$ 
# Alternation 	`|`\n
  选择    `|`

[h4 What Gets Matched 匹配什么了]

When there is more that one way to match a regular expression, the 
"best" possible match is obtained using the 
[link boost_regex.syntax.leftmost_longest_rule leftmost-longest rule].\n
当匹配一个正则表达式时存在多种方式，可能的"最好"匹配是使用 [link boost_regex.syntax.leftmost_longest_rule 最左最长原则]。

[h3 Variations 变体]

[h4 Egrep]

When an expression is compiled with the 
[link boost_regex.ref.syntax_option_type flag `egrep`] set, then the 
expression is treated as a newline separated list of 
[link boost_regex.posix_extended_syntax POSIX-Extended expressions], 
a match is found if any of the 
expressions in the list match, for example:\n
表达式使用 [link boost_regex.ref.syntax_option_type 标签 `egrep`] 编译时，
表达式的每一行被作为 [link boost_regex.posix_extended_syntax POSIX扩展表达式] 单独对待，
构成一个列集，如果列集中任何一个表达式被匹配那么整个被匹配，例如：

   boost::regex e("abc\ndef", boost::regex::egrep);

will match either of the POSIX-Basic expressions "abc" or "def".\n
会匹配基本POSIX表达式 "abc" 或 "def"。 

As its name suggests, this behavior is consistent with the Unix utility `egrep`, 
and with grep when used with the -E option.\n
就像名称显示的，这个行为和Unix工具 `egrep` 一致，也和 grep 使用 -E 选项一样。

[h4 awk]

In addition to the 
[link boost_regex.posix_extended_syntax POSIX-Extended features] the 
escape character is 
special inside a character class declaration. \n
对于 [link boost_regex.posix_extended_syntax POSIX扩展特性] 来说，转义字符在字符类声明中也是特殊的。

In addition, some escape sequences that are not defined as part of 
POSIX-Extended specification are required to be supported - however Boost.Regex 
supports these by default anyway.\n
实际上，一些转义序列在POSIX扩展声明中并没有定义要求必须支持 - 但Boost.Regex默认支持。

[h3 Options 选项]

There are a [link boost_regex.ref.syntax_option_type.syntax_option_type_extended variety of flags] 
that may be combined with the `extended` and `egrep` options when 
constructing the regular expression, in particular note that the 
[link boost_regex.ref.syntax_option_type.syntax_option_type_extended `newline_alt`] 
option alters the syntax, while the 
[link boost_regex.ref.syntax_option_type.syntax_option_type_extended `collate`, `nosubs` 
and `icase` options] modify how the case and locale sensitivity are to be applied.\n
构造正则表达式时，有 [link boost_regex.ref.syntax_option_type.syntax_option_type_extended 很多标签] 可以和 
`extended` 以及 `egrep` 组合使用，尤其注意的是 [link boost_regex.ref.syntax_option_type.syntax_option_type_extended `newline_alt`] 
选项会改变语法，而 [link boost_regex.ref.syntax_option_type.syntax_option_type_extended `collate`, `nosubs` 
和 `icase` 选项] 会改变如何应用大小写和区域的方式。

[h3 References 参考资料]

[@http://www.opengroup.org/onlinepubs/000095399/basedefs/xbd_chap09.html 
IEEE Std 1003.1-2001, Portable Operating System Interface (POSIX ), Base Definitions and Headers, Section 9, Regular Expressions.]

[@http://www.opengroup.org/onlinepubs/000095399/utilities/grep.html
IEEE Std 1003.1-2001, Portable Operating System Interface (POSIX ), Shells and Utilities, Section 4, Utilities, egrep.]

[@http://www.opengroup.org/onlinepubs/000095399/utilities/awk.html 
IEEE Std 1003.1-2001, Portable Operating System Interface (POSIX ), Shells and Utilities, Section 4, Utilities, awk.]

[endsect]


