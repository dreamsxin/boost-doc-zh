[/ 
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]


[section:configuration Configuration 配置]

[section:compiler Compiler Setup 编译器设置]

You shouldn't need to do anything special to configure Boost.Regex for use 
with your compiler - the [@../../../config/index.html Boost.Config subsystem] should already take care of it, 
if you do have problems (or you are using a particularly obscure compiler 
or platform) then [@../../../config/index.html Boost.Config] has a configure script that you can run.\n
你不需要为了使用Boost.Regex而对你的编译器做任何特殊的配置 - [@../../../config/index.html Boost.Config子系统] 会负责照管的，
如果你确实有问题(或者你使用了某个偏门的编译器或平台)，那么 [@../../../config/index.html Boost.Config] 有一个你可以用的配置脚本。

[endsect]

[section:locale Locale and traits class selection 本地化和traits类的选择]

The following macros (see [@../../../../boost/regex/user.hpp user.hpp]) control how Boost.Regex interacts with 
the user's locale:\n
下面的宏(见 [@../../../../boost/regex/user.hpp user.hpp])控制了Boost.Regex如果与用户的locale进行交互：

[table
[[macro 宏][description 说明]]
[[BOOST_REGEX_USE_C_LOCALE][Forces Boost.Regex to use the global C locale in its traits class support: this is now deprecated in favour of the C++ locale.\n
强制Boost.Regex使用C的全局locale设置：现在已经不推荐使用了，最好用C++的locale代替。]]
[[BOOST_REGEX_USE_CPP_LOCALE][Forces Boost.Regex to use std::locale in it's default traits class, regular expressions can then be imbued with an instance specific locale.  This is the default behaviour on non-Windows platforms.\n
强制Boost.Regex使用std::locale和默认的特性类，正则表达式就可以使用特定的locale了。这是非Windows平台的默认选项。]]
[[BOOST_REGEX_NO_W32][Tells Boost.Regex not to use any Win32 API's even when available (implies BOOST_REGEX_USE_CPP_LOCALE unless BOOST_REGEX_USE_C_LOCALE is set).\n
告诉Boost.Regex不使用Win32的API，即使可以使用(默认为BOOST_REGEX_USE_CPP_LOCALE除非定义了BOOST_REGEX_USE_C_LOCALE)。]]
]

[endsect]


[section:linkage Linkage Options 链接选项]

[table
[[macro 宏][description 说明]]
[[BOOST_REGEX_DYN_LINK][For Microsoft and Borland C++ builds, this tells Boost.Regex that it should link to the dll build of the Boost.Regex.  By default boost.regex will link to its static library build, even if the dynamic C runtime library is in use.\n
对于Microsoft和Borland的C++编译器来说，这个宏告诉Boost.Regex链接到dll版本。Boost.Regex默认链接到静态库，即使使用的是C动态运行时库。]]
[[BOOST_REGEX_NO_LIB][For Microsoft and Borland C++ builds, this tells Boost.Regex that it should not automatically select the library to link to.\n
对于Microsoft和Borland的C++编译器来说，这个宏告诉Boost.Regex不要自动选择链接的库。]]
]

[endsect]

[section:algorithm Algorithm Selection 算法选择]

[table
[[macro 宏][description 说明]]
[[BOOST_REGEX_RECURSIVE][Tells Boost.Regex to use a stack-recursive matching algorithm.  This is generally the fastest option (although there is very little in it), but can cause stack overflow in extreme cases, on Win32 this can be handled safely, but this is not the case on other platforms.\n
Boost.Regex将使用栈递归的匹配算法。通常这是最快的选项(改善可能很小)，但在极端情况下可能导致栈溢出，Win32平台上这可以被安全地处理，
但在其它平台上不能。]]
[[BOOST_REGEX_NON_RECURSIVE][Tells Boost.Regex to use a non-stack recursive matching algorithm, this can be slightly slower than the alternative, but is always safe no matter how pathological the regular expression.  This is the default on non-Win32 platforms.\n
Boost.Regex将使用非栈递归匹配算法，这可能会稍微慢一点，但无论正则表达式如何变态都总是安全的。这是非Win32平台的默认选项。]]
]

[endsect]

[section:tuning Algorithm Tuning 算法调优]

The following option applies only if BOOST_REGEX_RECURSIVE is set.\n
下面选项只有当BOOST_REGEX_RECURSIVE定义时才有效：

[table
[[macro 宏][description 说明]]
[[BOOST_REGEX_HAS_MS_STACK_GUARD][Tells Boost.Regex that Microsoft style __try - __except blocks are supported, and can be used to safely trap stack overflow.\n
使Boost.Regex支持Microsoft的__try - __except块，能够安全地处理栈溢出。]]
]


The following options apply only if BOOST_REGEX_NON_RECURSIVE is set.\n
当BOOST_REGEX_NON_RECURSIVE被定义时下面选项有效：

[table
[[macro 宏][description 说明]]
[[BOOST_REGEX_BLOCKSIZE][In non-recursive mode, Boost.Regex uses largish blocks of memory to act as a stack for the state machine, the larger the block size then the fewer allocations that will take place.  This defaults to 4096 bytes, which is large enough to match the vast majority of regular expressions without further allocations, however, you can choose smaller or larger values depending upon your platforms characteristics.\n
在非递归模式下，Boost.Regex使用大块的内存作为状态机的栈，块越大则分配行为越少。
默认为4096字符，对于大多数正则表达式来说不需要额外分配就足够了，但是，你可以根据自己平台特性来选择更大或更小的数值。]]
[[BOOST_REGEX_MAX_BLOCKS][Tells Boost.Regex how many blocks of size BOOST_REGEX_BLOCKSIZE it is permitted to use.  If this value is exceeded then Boost.Regex will stop trying to find a match and throw a std::runtime_error.  Defaults to 1024, don't forget to tweek this value if you alter BOOST_REGEX_BLOCKSIZE by much.\n
定义BOOST_REGEX_BLOCKSIZE大小的块最多可以有多少个。如果这个值被超过了，那么Boost.Regex将停止匹配尝试并扔出std::runtime_error。 
默认为1024，如果你大幅度改动BOOST_REGEX_BLOCKSIZE，别忘了修改这个值。]]
[[BOOST_REGEX_MAX_CACHE_BLOCKS][Tells Boost.Regex how many memory blocks to store in 
         it's internal cache - memory blocks are taken from this cache rather than by calling 
         ::operator new.  Generally speeking this can be an order of magnitude faster than 
         calling ::opertator new each time a memory block is required, but has the 
         downside that Boost.Regex can end up caching a large chunk of memory (by default 
         up to 16 blocks each of BOOST_REGEX_BLOCKSIZE size).  If memory is tight then try 
         defining this to 0 (disables all caching), or if that is too slow, then a value of 
         1 or 2, may be sufficient.  On the other hand, on large multi-processor, 
multi-threaded systems, you may find that a higher value is in order.\n
定义在内部缓存中存储多少内存块 - 内存块将优先从缓存中取得而不是调用::operator new。
通常来说，这会比每次需要内存时都调用::operator new快上一个数量级，
但当Boost.Regex持有一大块缓存时会呈下降趋势(默认为16个BOOST_REGEX_BLOCKSIZE大小的内存块)。 
如果内存紧张可以尝试将其定义为0(禁用所有缓存)，如果太慢，那么1或2可能就足够了。 
另一方面，对于一个大型的多处理器、多线程系统，你可能会觉得一个更大的数值可能更好。]]
]

[endsect]

[endsect]


