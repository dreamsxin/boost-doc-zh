[/ 
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:faq FAQ 常见问题]

[*Q.] I can't get regex++ to work with escape characters, what's going on?\n
[*Q.] 为什么我不能使 regex++ 与转义字符一起工作？

[*A.] If you embed regular expressions in C++ code, then remember that escape 
characters are processed twice: once by the C++ compiler, and once by the 
Boost.Regex expression compiler, so to pass the regular expression \d+ 
to Boost.Regex, you need to embed "\\d+" in your code. Likewise to match a 
literal backslash you will need to embed "\\\\" in your code.\n
[*A.] 如果你将正则表达式嵌入 C++ 代码中，记得转义字符需要写两遍：一次提供给 C++ 编译器，一次提供给 
Boost.Regex 正则表达式编译器，所以想要将正则表达式 \d+ 传给 Boost.Regex，你需要在代码中嵌入 "\\d+"。 
同样如果你要想匹配字面的反斜杠，需要写 "\\\\"。 

[*Q.] No matter what I do regex_match always returns false, what's going on?\n
[*Q.] regex_match 总返回 false，为什么？

[*A.] The algorithm regex_match only succeeds if the expression matches *all*
of the text, if you want to *find* a sub-string within the text that matches
the expression then use regex_search instead.\n
[*A.] 算法 regex_match 只在表达式匹配 *全部* 文本时才成功，如果你想要在文本中 *寻找* 一个匹配的子字符串时使用 regex_search。

[*Q.] Why does using parenthesis in a POSIX regular expression change the 
result of a match?\n
[*Q.] 在 POSIX 正则表达式中使用括号为什么会改变匹配结果？

[*A.] For POSIX (extended and basic) regular expressions, but not for perl regexes, 
parentheses don't only mark; they determine what the best match is as well. 
When the expression is compiled as a POSIX basic or extended regex then Boost.Regex 
follows the POSIX standard leftmost longest rule for determining what matched. 
So if there is more than one possible match after considering the whole expression, 
it looks next at the first sub-expression and then the second sub-expression 
and so on. So...\n
[*A.] 对于 POSIX (扩展和基本) 正则表达式，不是 perl 正则表达式，括号并不仅仅标记；它们同时决定最佳匹配。 
当表达式作为 POSIX 基本或扩展正则表达式编译时，Boost.Regex 遵循 POSIX 标准的最左最长原则决定匹配结果。 
所以如果在考虑完整个表达式后有多于一个可能的匹配，会关注第一个子表达式，然后第二个，依此类推。 所以... 

"'''(0*)([0-9]*)'''" against "00123" would produce
$1 = "00"
$2 = "123"

where as\n
而

"0*([0-9])*" against "00123" would produce
$1 = "00123"

If you think about it, had $1 only matched the "123", this would be "less good" 
than the match "00123" which is both further to the left and longer. If you 
want $1 to match only the "123" part, then you need to use something like:\n
考虑一下，如果 $1 只匹配 "123"，这 "不如" 匹配 "00123"，离左边更远，也更长。如果要想 $1 只匹配 "123"，那么需要使用下面的：

"0*([1-9][0-9]*)"

as the expression.\n
这样的表达式。

[*Q.] Why don't character ranges work properly (POSIX mode only)?\n
[*Q.] 为什么字符范围工作不正常 (POSIX 模式)？ 

[*A.] The POSIX standard specifies that character range expressions are 
locale sensitive - so for example the expression [A-Z] will match any 
collating element that collates between 'A' and 'Z'. That means that for 
most locales other than "C" or "POSIX", [A-Z] would match the single 
character 't' for example, which is not what most people expect - or 
at least not what most people have come to expect from regular 
expression engines. For this reason, the default behaviour of Boost.Regex 
(perl mode) is to turn locale sensitive collation off by not setting the 
`regex_constants::collate` compile time flag. However if you set a non-default 
compile time flag - for example `regex_constants::extended` or 
`regex_constants::basic`, then locale dependent collation will be enabled, 
this also applies to the POSIX API functions which use either 
`regex_constants::extended` or `regex_constants::basic` internally. 
[Note - when `regex_constants::nocollate` in effect, the library behaves 
"as if" the LC_COLLATE locale category were always "C", regardless of what 
its actually set to - end note].\n
[*A.] POSIX 标准说明字符范围表达式是区域敏感的 - 例如表达式 [A-Z] 可以匹配任意对应 'A' 到 'Z' 之间的对照元素。 
这意味着对于大多数非 "C" 非 "POSIX" 的区域而言，[A-Z] 可以匹配单字符 't'，而不是人们期望的 - 至少不是大多数人所期望的。 
基于这个原因，Boost.Regex 的默认行为 (perl 模式) 关闭对照的区域敏感，不设定 regex_constants::collate 编译时标签。 
然而当你设置非默认编译时标签 - 例如 `regex_constants::extended` 或 `regex_constants::basic`，区域相关对照会被开启， 
这同时会应用到内部使用 `regex_constants::extended` 或 `regex_constants::basic` 的 POSIX API 函数。 
[Note - 当使用 `regex_constants::nocollate` 时，库认为 LC_COLLATE 区域分类总是 "C"，而不管实际值 - end note]。 

[*Q.] Why are there no throw specifications on any of the functions? 
What exceptions can the library throw?\n
[*Q.] 函数为什么没有异常规格声明？库会抛出什么异常？

[*A.] Not all compilers support (or honor) throw specifications, others 
support them but with reduced efficiency. Throw specifications may be added 
at a later date as compilers begin to handle this better. The library 
should throw only three types of exception: [boost::regex_error] can be 
thrown by [basic_regex] when compiling a regular expression, `std::runtime_error` 
can be thrown when a call to `basic_regex::imbue` tries to open a message 
catalogue that doesn't exist, or when a call to [regex_search] or [regex_match] 
results in an "everlasting" search, or when a call to `RegEx::GrepFiles` or 
`RegEx::FindFiles` tries to open a file that cannot be opened, finally 
`std::bad_alloc` can be thrown by just about any of the functions in this library.\n
[*A.] 不是所有编译器都支持 (或承认) 异常规格声明，有一些会支持，但会降低效率。
异常规格声明可能在以后编译器能更好处理的时候加入。库只会抛出三种类型的异常：
[boost::regex_error] 可能在 [basic_regex] 编译表达式时抛出，`std::runtime_error` 可能在调用 `basic_regex::imbue` 
试图打开不存在的信息目录，或调用 [regex_search] 或 [regex_match] 导致 "永远的" 搜索，或调用 
`RegEx::GrepFiles` 或 `RegEx::FindFiles` 试图打开不能打开的文件时抛出，最后 `std::bad_alloc` 可能在库的任意函数中抛出。

[*Q.] Why can't I use the "convenience" versions of regex_match / 
regex_search / regex_grep / regex_format / regex_merge?\n
[*Q.] 为什么我不能使用 regex_match / regex_search / regex_format / regex_merge 的 "简化" 版本？

[*A.] These versions may or may not be available depending upon the 
capabilities of your compiler, the rules determining the format of 
these functions are quite complex - and only the versions visible to 
a standard compliant compiler are given in the help. To find out 
what your compiler supports, run <boost/regex.hpp> through your 
C++ pre-processor, and search the output file for the function 
that you are interested in.  Note however, that very few current
compilers still have problems with these overloaded functions.\n
[*A.] 这些版本是否能用取决于你编译器的能力，规则很复杂 - 只有标准兼容的编译器可见的版本在帮助中给出。 
要找出编译器支持的版本，用 C++ 预处理器运行 <boost/regex.hpp>，在输出文件中搜索你感兴趣的函数。 
注意，现在只有很少的编译器对这些重载函数仍不支持。

[endsect]

