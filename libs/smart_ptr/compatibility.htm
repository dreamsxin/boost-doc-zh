<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
	<head>
		<title>Smart Pointer 的变化</title>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	</head>
	<body bgcolor="#ffffff" text="#000000">
		<h1><A href="../../index.htm"><img src="../../boost.png" alt="boost.png (6897 bytes)" align="middle" width="277" height="86"
					border="0"></A>Smart Pointer 的变化</h1>
		<p>2002 年 2 月 Boost 的智能指针引入了大量的变化。因为智能指针的早期版本已经应用了很长时间，从库用户的观点列出一个变化的详细列表是非常有用的。</p>
		<p>注意，对于不能充分支持 member templates 的编译器来说，有一份单独的实现，缺乏很多新的特性，而更像旧的版本。</p>
		<h2>特性要求的代码改善</h2>
		<ul>
			<li>
				现在每一个智能指针类模板有他们自己的头文件。为了兼容性，<a href="../../boost/smart_ptr.hpp">&lt;boost/smart_ptr.hpp&gt;</a> 头文件包含了四个传统的智能指针类模板的头文件。
			<li>
				增加了 <b>weak_ptr</b> 模板。
			<li>
				新的 <b>shared_ptr</b> 和 <b>shared_array</b> 放松了在实例化 <b>shared_ptr</b> 的析构函数时，所指对象的析构函数必须可见的条件。这使得没有显式析构函数的类中拥有 shared_ptr 成员更加容易。
			<li>
				在创建 <b>shared_ptr</b> 或 <b>shared_array</b> 时可以传入一个定制化的释放器。
			<li>
				<b>shared_static_cast</b> 和 <b>shared_dynamic_cast</b> 函数模板为 <b>shared_ptr</b> 和 <b>weak_ptr</b> 提供了类似 <b>static_cast</b> 和 <b>dynamic_cast</b> 所做的事情的指针版本。
			<li>
				自赋值的不当特性从 <b>shared_ptr::reset</b> 中削除，尽管它仍然存在于 <b>scoped_ptr</b> 和 <b>std::auto_ptr</b> 之中。对一个已经被 <b>shared_ptr</b> 拥有的对象的指针调用 <b>reset</b> 会导致未定义行为（一个断言，或者在断言失效时导致二次删除）。
			<li>
				<b>BOOST_SMART_PTR_CONVERSION</b> 特性已被削除。
			<li>
				<b>shared_ptr&lt;void&gt;</b> 现在已被接受。</li>
		</ul>
		<h2>改进鲁棒性的特性</h2>
		<ul>
			<li>
				现在，对使用技术的操作在 Windows，Linux 和其它支持 pthreads 的平台上是<a name="threadsafe">线程安全</a>的。细节请参见 <a href="../../boost/detail/atomic_count.hpp">&lt;boost/detail/atomic_count.hpp&gt;</a> 文件。
			<li>
				新的 shared_ptr 总是删除使用它最初赖以构造的那个指针的对象。这就避免了当最后的 <b>shared_ptr</b> 是一个指向一个没有虚拟析构函数的类的子对象时所引发的微妙的问题。</li>
		</ul>
		<h2>实现细节</h2>
		<ul>
			<li>
				赋值操作符实现和 <b>reset</b> 中的一些 bug 已经使用 "copy and swap" 惯用法修复。
			<li>
				增加了检查各种函数的前置条件的断言，但是，因为使用了新的 <a href="../../boost/assert.hpp">&lt;boost/assert.hpp&gt;</a> 头文件，这些断言在缺省状态下被关闭。
			<li>
				一部分 <b>std::less</b> 的特化被替换为完成同样功能而不依赖未定义行为的 <b>operator&lt;</b> 的重载。
			<li>
				<b>std::swap</b> 的不适当的重载被替换为 <b>boost::swap</b>，它能为泛型编程提供很多同样的优势，而不再违反 C++ 标准。</li>
		</ul>
		<hr>
		<p>Revised 1 February 2002</p>
		<p>Copyright 2002 Darin Adler. Permission to copy, use, modify, sell and distribute 
			this document is granted provided this copyright notice appears in all copies. 
			This document is provided "as is" without express or implied warranty, and with 
			no claim as to its suitability for any purpose.</p>
	</body>
</html>
