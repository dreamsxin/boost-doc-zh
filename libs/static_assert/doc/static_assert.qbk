[library Boost.StaticAssert
    [copyright 2000 2005 Steve Cleary and John Maddock]
    [purpose Compile time diagnostics library]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        <ulink url="http://www.boost.org/LICENSE_1_0.txt">
            http://www.boost.org/LICENSE_1_0.txt
        </ulink>)
    ]
    [authors [Maddock, John], [Cleary, Steve]]
    [category template]
    [category testing]
    [category generic]
    [last-revision $Date: 2009-02-23 13:39:32 -0500 (Mon, 23 Feb 2009) $]
]

This manual is also available in 
[@http://svn.boost.org/svn/boost/sandbox/pdf/static_assert/release/static_assert.pdf 
printer friendly PDF format].\n
本手册还提供了 [@http://svn.boost.org/svn/boost/sandbox/pdf/static_assert/release/static_assert.pdf 适于打印的PDF格式]。

[section:intro Overview and Tutorial 综述及指南]

The header `<boost/static_assert.hpp>` supplies a single macro `BOOST_STATIC_ASSERT(x)`, 
which generates a compile time error message if the integral-constant-expression `x`
is not true. In other words it is the compile time equivalent of the assert macro; 
this is sometimes known as a "compile-time-assertion", but will be called a 
"static assertion" throughout these docs. Note that if the condition is `true`, 
then the macro will generate neither code nor data - and the macro can also 
be used at either namespace, class or function scope. When used in a template, 
the static assertion will be evaluated at the time the template is instantiated; 
this is particularly useful for validating template parameters. \n
头文件 `<boost/static_assert.hpp>` 提供了一个独立的宏 `BOOST_STATIC_ASSERT(x)`，如果 integral-constant-expression `x` 不为 true，
将产生一个编译时错误信息。换句话说，它是一个 assert 宏在编译时的等价物，这有时被称为“编译时断言”，但在当前这些文档中被称为“静态断言”。
注意，如果条件为 true，这个宏将不生成代码和数据——而这个宏既可以用于名字空间域，类域，也可以用于函数域。
当用在模板中时，静态断言在模板实例化时被评估，这在确定模板参数时特别有用。

One of the aims of `BOOST_STATIC_ASSERT` is to generate readable error messages. 
These immediately tell the user that a library is being used in a manner that 
is not supported. While error messages obviously differ from compiler to compiler, 
but you should see something like: \n
`BOOST_STATIC_ASSERT` 的目标之一是生成可读的错误信息。这些就立刻告诉使用者一个库的某种用法是不被支持的。
这时的错误信息针对不同的编译器会有明显的不同，但你应该会看到类似这样的东西：

   Illegal use of STATIC_ASSERTION_FAILURE<false>

Which is intended to at least catch the eye!\n
这样至少能让人抓住要害！

You can use `BOOST_STATIC_ASSERT` at any place where you can place a declaration, 
that is at class, function or namespace scope, this is illustrated by the 
following examples:\n
你可以在任何能够放置一个声明的地方使用 `BOOST_STATIC_ASSERT`，也就是说在类域，函数与或名字空间域中，以下是举例说明：

[section:namespace Use at namespace scope. 在名字空间域中使用]

The macro can be used at namespace scope, if there is some requirement must 
always be true; generally this means some platform specific requirement. 
Suppose we require that `int` be at least a 32-bit integral type, and that `wchar_t` 
be an unsigned type. We can verify this at compile time as follows:\n
如果在名字空间域中有一些条件必须总为 true（这通常意味着平台的特殊需求），那么就可以把这个宏用在名字空间域中。
假设我们需要 `int` 至少是一个 32-bit 的整类型，而且 `wchar_t` 必须是一个 unsigned 类型。我们可以在编译时进行这样的校验：

   #include <climits>
   #include <cwchar>
   #include <limits>
   #include <boost/static_assert.hpp>

   namespace my_conditions {

      BOOST_STATIC_ASSERT(std::numeric_limits<int>::digits >= 32);
      BOOST_STATIC_ASSERT(WCHAR_MIN >= 0);

   } // namespace my_conditions

The use of the namespace my_conditions here requires some comment. 
The macro `BOOST_STATIC_ASSERT` works by generating an typedef declaration, 
and since the typedef must have a name, the macro generates one automatically by 
mangling a stub name with the value of `__LINE__`. When `BOOST_STATIC_ASSERT` is 
used at either class or function scope then each use of `BOOST_STATIC_ASSERT` 
is guaranteed to produce a name unique to that scope (provided you only use 
the macro once on each line). However when used in a header at namespace 
scope, that namespace can be continued over multiple headers, each of which 
may have their own static assertions, and on the "same" lines, thereby generating 
duplicate declarations. In theory the compiler should silently ignore duplicate 
typedef declarations, however many do not do so (and even if they do they are 
entitled to emit warnings in such cases). To avoid potential problems, if you 
use `BOOST_STATIC_ASSERT` in a header and at namespace scope, then enclose 
them in a namespace unique to that header.\n
这里名字空间 my_conditions 的用法需要一些解释。宏 `BOOST_STATIC_ASSERT` 一般是通过一个 typedef 声明在起作用，
而且因为 typedef 必须有一个名字，宏通过自动从 `__LINE__` 的值中截取一个片段来生成一个名字。
当在类域或函数域中使用 `BOOST_STATIC_ASSERT` 时，每一个使用 `BOOST_STATIC_ASSERT` 的地方保证生成一个在域中唯一的名字
（只要你在每一行中最多只使用一次宏）。但是如果用在一个头文件的名字空间域中，而这个名字空间会在多个头文件中延续，
每一个都可以有它自己的静态断言，因此在“相同”的行，就会生成重复的声明。在理论上编译器应该默默地忽略重复的 typedef 声明，
但是很多编译器并没有这样做（即使它们这样做了，它们也有资格在这种情况下发出一个警告）。为了避免潜在的问题，
如果你在一个头文件而且是在名字空间中使用 `BOOST_STATIC_ASSERT`，那么将它们封装在一个在头文件中是唯一的名字空间中。

[endsect]

[section:function Use at function scope 在函数域中使用]

The macro is typically used at function scope inside template functions, 
when the template arguments need checking. Imagine that we have an 
iterator-based algorithm that requires random access iterators. 
If the algorithm is instantiated with iterators that do not meet our 
requirements then an error will be generated eventually, but this may 
be nested deep inside several templates, making it hard for the user to 
determine what went wrong. One option is to add a static assertion at 
the top level of the template, in that case if the condition is not met, 
then an error will be generated in a way that makes it reasonably obvious to 
the user that the template is being misused.\n
这个宏在函数域中的典型用法就是用在模板函数内部，用来检查模板参数。设想我们有一个基于迭代器的算法需要随机访问迭代器。
如果这个算法被一个迭代器实例化，而这个迭代器不符合我们的要求，那么最终就会产生一个错误，
但是这可能深深地嵌套在几层模板之内，让使用者去确定到底哪里发生了问题可能很困难。
一种选择就是在模板的最上层增加一个静态断言，这样一来，如果条件没有被满足，
那么错误会以一种对于误用模板的使用者来说相当明显的方式产生出来。

   #include <iterator>
   #include <boost/static_assert.hpp>
   #include <boost/type_traits.hpp>

   template <class RandomAccessIterator >
   RandomAccessIterator foo(RandomAccessIterator from, 
                            RandomAccessIterator to)
   {
      // this template can only be used with
      // random access iterators...
      typedef typename std::iterator_traits< 
            RandomAccessIterator >::iterator_category cat;
      BOOST_STATIC_ASSERT(
         (boost::is_convertible<
            cat, 
            const std::random_access_iterator_tag&>::value));
      //
      // detail goes here...
      return from;
   }

A couple of footnotes are in order here: the extra set of parenthesis around the 
assert, is to prevent the comma inside the `is_convertible` template being 
interpreted by the preprocessor as a macro argument separator; the target type 
for `is_convertible` is a reference type, as some compilers have problems 
using `is_convertible` when the conversion is via a user defined constructor 
(in any case there is no guarantee that the iterator tag classes are 
copy-constructible).\n
有几个脚注记录在此：那一对围绕断言的额外插入的圆括号，是为了防止 `is_convertible` 模板内部的逗号被预处理器解释成为宏参数的分隔符；
`is_convertible` 的目标类型是一个引用类型，因为如果转换需要使用一个用户定义构造函数的话，
某些编译器在使用 `is_convertible` 时会出问题（在某些情况下，不能保证这里的 iterator tag 类是可拷贝构造的）。

[endsect]

[section:class Use at class scope 在类域中使用]

The macro is typically used inside classes that are templates. 
Suppose we have a template-class that requires an unsigned integral type with 
at least 16-bits of precision as a template argument, we can achieve this 
using something like this:\n
这个宏经常会用在那些是模板的类中。假设我们有一个模板类需要一个精度至少为 16-bit 的无符号整类型作为一个模板参数，
我们可以像这样做到这一点：

   #include <limits>
   #include <boost/static_assert.hpp>

   template <class UnsignedInt>
   class myclass
   {
   private:
      BOOST_STATIC_ASSERT((std::numeric_limits<UnsignedInt>::digits >= 16)
                           && std::numeric_limits<UnsignedInt>::is_specialized
                           && std::numeric_limits<UnsignedInt>::is_integer
                           && !std::numeric_limits<UnsignedInt>::is_signed);
   public:
      /* details here */
   };

[endsect]

[section:templates Use in templates 在模板中使用]

Normally static assertions when used inside a class or function template, 
will not be instantiated until the template in which it is used is instantiated.  
However, there is one potential problem to watch out for: if the static assertion 
is not dependent upon one or more template parameters, then the compiler is 
permitted to evaluate the static assertion at the point it is first seen, 
irrespective of whether the template is ever instantiated, for example:\n
通常情况下，用在一个类模板或函数模板中静态断言不会被实例化，直到那个使用它的模板被实例化，
它才会被实例化。可是，这里就要提防一个问题：如果静态断言没有依赖于一个或更多的模板参数，
那么编译器就被准许在它第一次看到静态断言的时候就评估它，而不管模板是否已经被实例化，例如：

   template <class T>
   struct must_not_be_instantiated
   {   
      BOOST_STATIC_ASSERT(false);
   };

Will produce a compiler error with some compilers (for example Intel 8.1 
or gcc 3.4), regardless of whether the template is ever instantiated.  A 
workaround in cases like this is to force the assertion to be dependent 
upon a template parameter:\n
无论模板是否已经被实例化，这在某些编译器（例如 Intel 8.1 或 gcc 3.4）上，都会产生一个编译错误。
在这种情况下，就要强迫这个断言依赖于一个模板参数：

   template <class T>
   struct must_not_be_instantiated
   {   
      // this will be triggered if this type is instantiated
      BOOST_STATIC_ASSERT(sizeof(T) == 0); 
   };


[endsect]

[endsect]

[section:how How it works 如何工作]

`BOOST_STATIC_ASSERT` works as follows. There is class `STATIC_ASSERTION_FAILURE`
 which is defined as:\n
`BOOST_STATIC_ASSERT` 像下面这样工作。有一个类 `STATIC_ASSERTION_FAILURE` 是这样定义的：

   namespace boost{

   template <bool> struct STATIC_ASSERTION_FAILURE;

   template <> struct STATIC_ASSERTION_FAILURE<true>{};

   }

The key feature is that the error message triggered by the undefined 
expression `sizeof(STATIC_ASSERTION_FAILURE<0>)`, tends to be consistent 
across a wide variety of compilers. The rest of the machinery of 
`BOOST_STATIC_ASSERT` is just a way to feed the `sizeof` expression into a `typedef`. 
The use of a macro here is somewhat ugly; however boost members have spent 
considerable effort trying to invent a static assert that avoided macros, 
all to no avail. The general conclusion was that the good of a static assert 
working at namespace, function, and class scope outweighed the ugliness of a macro.\n
关键的特性是错误信息由未定义表达式 `sizeof(STATIC_ASSERTION_FAILURE<0>)` 来触发，这样可以兼容于大多数编译器。
`BOOST_STATIC_ASSERT` 体系内的其它东西仅仅是将 `sizeof` 表达式注入一个 `typedef` 的方法。
在这里用一个宏多少有点难堪，无论如何，boost 成员用尽了值得考虑的努力试图创造一种可以避免宏的静态断言方法，但一无所成。
大致的结论是在名字空间域，函数域和类域中工作的一个静态断言的好处超过了一个宏的丑陋。

[endsect]

[section:test Test Programs 测试程序]

[table Test programs provided with static_assert 随static_assert一起提供的测试程序
[[Test Program 测试程序][Expected to Compile 编译预期][Description 描述]]

[[[@../../libs/static_assert/static_assert_test.cpp static_assert_test.cpp]] [Yes] [Illustrates usage, and should always compile, really just tests compiler compatibility.\n说明用法，而且应该总是可以编译，实际上正好可以测试编译器的兼容性。]] 
[[[@../../libs/static_assert/static_assert_example_1.cpp static_assert_example_1.cpp]] [Platform dependent.\n平台相关] [Namespace scope test program, may compile depending upon the platform. \n名字空间域测试程序，编译时可能与平台相关。]]
[[[@../../libs/static_assert/static_assert_example_2.cpp static_assert_example_2.cpp]] [Yes] [Function scope test program. \n函数域测试程序。]]
[[[@../../libs/static_assert/static_assert_example_3.cpp static_assert_example_3.cpp]] [Yes] [Class scope test program. \n类域测试程序。]]
[[[@../../libs/static_assert/static_assert_test_fail_1.cpp static_assert_test_fail_1.cpp]] [No] [Illustrates failure at namespace scope. \n说明在名字空间域的失败。]]
[[[@../../libs/static_assert/static_assert_test_fail_2.cpp static_assert_test_fail_2.cpp]] [No] [Illustrates failure at non-template function scope. \n说明在非模板函数域的失败。]]
[[[@../../libs/static_assert/static_assert_test_fail_3.cpp static_assert_test_fail_3.cpp]] [No] [Illustrates failure at non-template class scope. \n说明在非模板类域的失败。]]
[[[@../../libs/static_assert/static_assert_test_fail_4.cpp static_assert_test_fail_4.cpp]] [No] [Illustrates failure at non-template class scope. \n说明在非模板类域的失败。]]
[[[@../../libs/static_assert/static_assert_test_fail_5.cpp static_assert_test_fail_5.cpp]] [No] [Illustrates failure at template class scope. \n说明在模板类域的失败。]]
[[[@../../libs/static_assert/static_assert_test_fail_6.cpp static_assert_test_fail_6.cpp]] [No] [Illustrates failure at template class member function scope. \n说明在模板类成员函数域的失败。]]
[[[@../../libs/static_assert/static_assert_test_fail_7.cpp static_assert_test_fail_7.cpp]] [No] [Illustrates failure of class scope example. \n说明在类域的失败示例。]]
[[[@../../libs/static_assert/static_assert_test_fail_8.cpp static_assert_test_fail_8.cpp]] [No] [Illustrates failure of function scope example. \n说明在函数域的失败示例。]]
[[[@../../libs/static_assert/static_assert_test_fail_9.cpp static_assert_test_fail_9.cpp]] [No] [Illustrates failure of function scope example (part 2). \n说明在函数域的失败示例（第 2 部分）。]]

]

[endsect]


