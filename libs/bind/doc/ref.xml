<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
  "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<library name="Ref" dirname="ref" id="ref" last-revision="$Date: 2009-06-03 10:36:08 -0400 (Wed, 03 Jun 2009) $">
  <libraryinfo>
    <author>
      <firstname>Jaakko</firstname>
      <surname>J&auml;rvi</surname>
    </author>
    <author>
      <firstname>Peter</firstname>
      <surname>Dimov</surname>
    </author>
    <author>
      <firstname>Douglas</firstname>
      <surname>Gregor</surname>
    </author>
    <author>
      <firstname>Dave</firstname>
      <surname>Abrahams</surname>
    </author>

    <copyright>
      <year>1999</year>
      <year>2000</year>
      <holder>Jaakko J&auml;rvi</holder>
    </copyright>

    <copyright>
      <year>2001</year>
      <year>2002</year>
      <holder>Peter Dimov</holder>
    </copyright>
    
    <copyright>
      <year>2002</year>
      <holder>David Abrahams</holder>
    </copyright>

    <legalnotice>
      <para>Subject to the Boost Software License, Version 1.0. See 
      accompanying file <filename>LICENSE_1_0.txt</filename> or copy at
      <ulink url="http://www.boost.org/LICENSE_1_0.txt">http://www.boost.org/LICENSE_1_0.txt</ulink>.
      </para>
    </legalnotice>

    <librarypurpose>A utility library for passing references to generic functions</librarypurpose>
    <librarycategory name="category:higher-order"/>
  </libraryinfo>

<title>Boost.Ref</title>

<section id="ref.intro">
  <title>Introduction 简介</title> 

  <using-namespace name="boost"/>

  <para>The Ref library is a small library that is useful for passing
  references to function templates (algorithms) that would usually
  take copies of their arguments. It defines the class template
  <code><classname>boost::reference_wrapper&lt;T&gt;</classname></code>,
  two functions
  <code><functionname>boost::ref</functionname></code> and
  <code><functionname>boost::cref</functionname></code> that return
  instances of <code>boost::reference_wrapper&lt;T&gt;</code>, 
  a function <code><functionname>boost::unwrap_ref</functionname></code>
  that unwraps a <code>boost::reference_wrapper&lt;T&gt;</code> or
  returns a reference to any other type of object, and the
  two traits classes
  <code><classname>boost::is_reference_wrapper&lt;T&gt;</classname></code>
  and
  <code><classname>boost::unwrap_reference&lt;T&gt;</classname></code>.<sbr/>
  Ref 库是一个小型库，对于把引用传递给函数模板（算法）非常有用，这些函数模板（算法）通常都接收它们的参数的拷贝。
  它定义了类模板 <code><classname>boost::reference_wrapper&lt;T&gt;</classname></code>，
  两个返回 <code>boost::reference_wrapper&lt;T&gt;</code> 实例的函数 <code><functionname>boost::ref</functionname></code> 
  和 <code><functionname>boost::cref</functionname></code>，一个 <code><functionname>boost::unwrap_ref</functionname></code> 
  用以解开一个 <code>boost::reference_wrapper&lt;T&gt;</code> 的外包装或返回一个至任意其它类型的对象的引用，
  以及两个 traits classes（特征类）<code><classname>boost::is_reference_wrapper&lt;T&gt;</classname></code> 
  和 <code><classname>boost::unwrap_reference&lt;T&gt;</classname></code>。</para>

  <para>The purpose of
  <code>boost::reference_wrapper&lt;T&gt;</code> is to
  contain a reference to an object of type T. It is primarily used to
  "feed" references to function templates (algorithms) that take their
  parameter by value.<sbr/>
  <code>boost::reference_wrapper&lt;T&gt;</code> 的目的是容纳一个引向类型为 T 的对象的引用。
  它主要用于把引用“喂”给那些以传值方式持有它们的参数的函数模板（算法）。</para>

  <para>To support this usage,
  <code>boost::reference_wrapper&lt;T&gt;</code> provides an implicit
  conversion to <code>T&amp;</code>. This usually allows the function
  templates to work on references unmodified.<sbr/>
  为了支持这个用法，<code>boost::reference_wrapper&lt;T&gt;</code> 提供一个到 <code>T&amp;</code> 的隐式转换。
  这通常允许函数模板可以不加改变地工作在引用上。</para>

  <para><code>boost::reference_wrapper&lt;T&gt;</code> is
  both CopyConstructible and Assignable (ordinary references are not
  Assignable).<sbr/>
  <code>boost::reference_wrapper&lt;T&gt;</code> 是可拷贝构造的，也是可赋值的
  （普通引用不是可赋值的）。</para>

  <para>The expression <code>boost::ref(x)</code>
  returns a
  <code>boost::reference_wrapper&lt;X&gt;(x)</code> where X
  is the type of x. Similarly,
  <code>boost::cref(x)</code> returns a
  <code>boost::reference_wrapper&lt;X const&gt;(x)</code>.<sbr/>
  表达式 <code>boost::ref(x)</code> 返回一个 <code>boost::reference_wrapper&lt;X&gt;(x)</code>，X 是 x 的类型。
  类似地，<code>boost::cref(x)</code> 返回一个 <code>boost::reference_wrapper&lt;X const&gt;(x)</code>。</para>

  <para>The expression <code>boost::unwrap_ref(x)</code>
  returns a
  <code>boost::unwrap_reference&lt;X&gt;::type&amp;</code> where X
  is the type of x.<sbr/>
  表达式 <code>boost::unwrap_ref(x)</code> 返回一个 <code>boost::unwrap_reference&lt;X&gt;::type&amp;</code>，
  其中 X 为 x 的类型。</para>

  <para>The expression
  <code>boost::is_reference_wrapper&lt;T&gt;::value</code>
  is true if T is a <code>reference_wrapper</code>, and
  false otherwise.<sbr/>
  如果 T 是一个 <code>reference_wrapper</code>，则表达式 
  <code>boost::is_reference_wrapper&lt;T&gt;::value</code> 的值为 true，
  否则为 false。</para>

  <para>The type-expression
  <code>boost::unwrap_reference&lt;T&gt;::type</code> is T::type if T
  is a <code>reference_wrapper</code>, T otherwise.<sbr/>
  如果 T 是一个 <code>reference_wrapper</code>，则类型表达式 
  <code>boost::unwrap_reference&lt;T&gt;::type</code> 的值为 T::type，
  否则为 T。</para>
</section>

<library-reference>
<header name="boost/ref.hpp">
  <namespace name="boost">
    <class name="reference_wrapper">
      <template>
        <template-type-parameter name="T"/>
      </template>
      <purpose>
        Contains a reference to an object of type
        <computeroutput>T</computeroutput>. <sbr/>
        容纳一个引向类型为 <computeroutput>T</computeroutput> 的对象的引用。
      </purpose>

      <description>
        <para><computeroutput><classname>reference_wrapper</classname></computeroutput>
        is primarily used to "feed" references to function templates
        (algorithms) that take their parameter by value.  It provides
        an implicit conversion to
        <computeroutput>T&amp;</computeroutput>, which usually allows
        the function templates to work on references
        unmodified.<sbr/>
        <computeroutput><classname>reference_wrapper</classname></computeroutput> 主要用于把引用
        “喂”给那些以传值方式持有它们的参数的函数模板（算法）。它提供一个到 <computeroutput>T&amp;</computeroutput> 的隐式转换，
        这通常允许函数模板可以不加改变地工作在引用上。</para>
      </description>

      <typedef name="type"><type>T</type></typedef>

      <constructor specifiers="explicit">
        <parameter name="t">
          <paramtype>T&amp;</paramtype>
        </parameter>

        <effects><simpara>Constructs a
        <computeroutput><classname>reference_wrapper</classname></computeroutput>
        object that stores a reference to
        <computeroutput>t</computeroutput>.<sbr/>
        构造一个存储引向 <computeroutput>t</computeroutput> 的引用的 
        <computeroutput><classname>reference_wrapper</classname></computeroutput> 对象。</simpara></effects>

        <throws><simpara>Does not throw.<sbr/>
        不会抛出异常。</simpara></throws>
      </constructor>    

      <method-group name="access">
        <method name="conversion-operator" cv="const">
          <type>T&amp;</type>
          <returns><simpara>The stored reference.<sbr/>
          所存储的引用。</simpara></returns>
          <throws><simpara>Does not throw.<sbr/>
        不会抛出异常。</simpara></throws>
        </method>

        <method name="get" cv="const">
          <type>T&amp;</type>
          <returns><simpara>The stored reference.<sbr/>
          所存储的引用。</simpara></returns>
          <throws><simpara>Does not throw.<sbr/>
        不会抛出异常。</simpara></throws>
        </method>

        <method name="get_pointer" cv="const">
          <type>T*</type>
          <returns><simpara>A pointer to the object referenced by the stored reference.<sbr/>
          一个指向所存储的引用引向的对象的指针。</simpara></returns>
          <throws><simpara>Does not throw.<sbr/>
        不会抛出异常。</simpara></throws>
        </method>
      </method-group>

      <free-function-group name="constructors">
        <function name="ref">
          <type>reference_wrapper&lt;T&gt;</type>
          <parameter name="t">
            <paramtype>T&amp;</paramtype>
          </parameter>

          <returns><simpara><computeroutput><classname>reference_wrapper</classname>&lt;T&gt;(t)</computeroutput></simpara></returns>

          <throws><simpara>Does not throw.<sbr/>
        不会抛出异常。</simpara></throws>
        </function>

        <function name="cref">
          <type>reference_wrapper&lt;T const&gt;</type>
          <parameter name="t">
            <paramtype>T const&amp;</paramtype>
          </parameter>

          <returns><simpara><computeroutput><classname>reference_wrapper</classname>&lt;T const&gt;(t)</computeroutput></simpara></returns>

          <throws><simpara>Does not throw.<sbr/>
        不会抛出异常。</simpara></throws>
        </function>
      </free-function-group>

      <free-function-group name="access">
        <function name="unwrap_ref">
          <type>unwrap_reference&lt;T&gt;::type&amp;</type>
          <parameter name="t">
            <paramtype>T&amp;</paramtype>
          </parameter>

          <returns><simpara><computeroutput><classname>unwrap_reference</classname>&lt;T&gt;::type&amp;(t)</computeroutput></simpara></returns>

          <throws><simpara>Does not throw.<sbr/>
        不会抛出异常。</simpara></throws>
        </function>
      </free-function-group>
    </class>

    <class name="is_reference_wrapper">
      <template>
        <template-type-parameter name="T"/>
      </template>

      <purpose>Determine if a type <computeroutput>T</computeroutput> is an instantiation of <computeroutput><classname>reference_wrapper</classname></computeroutput>.<sbr/>
      判定类型 <computeroutput>T</computeroutput> 是否是一个 
      <computeroutput><classname>reference_wrapper</classname></computeroutput> 实例。</purpose>

      <description>
        <para>The <computeroutput>value</computeroutput> static
        constant will be <computeroutput>true</computeroutput> iff the
        type <computeroutput>T</computeroutput> is a specialization of
        <computeroutput><classname>reference_wrapper</classname></computeroutput>.<sbr/>
        如果类型 <computeroutput>T</computeroutput> 是 
        <computeroutput><classname>reference_wrapper</classname></computeroutput> 
        的特化，<computeroutput>value</computeroutput> 静态地持续性地为 
        <computeroutput>true</computeroutput>。</para>
      </description>

      <static-constant name="value">
        <type>bool</type>
        <default><emphasis>unspecified</emphasis></default>
      </static-constant>
    </class>

    <class name="unwrap_reference">
      <template>
        <template-type-parameter name="T"/>
      </template>
  
      <purpose>Find the type in a <computeroutput><classname>reference_wrapper</classname></computeroutput>.<sbr/>
      在一个 <computeroutput><classname>reference_wrapper</classname></computeroutput> 中寻找类型。</purpose>

      <description>
        <para>The typedef <computeroutput>type</computeroutput> is
        <computeroutput>T::type</computeroutput> if
        <computeroutput>T</computeroutput> is a
        <computeroutput><classname>reference_wrapper</classname></computeroutput>,
        <computeroutput>T</computeroutput> otherwise.<sbr/>
        如果 <computeroutput>T</computeroutput> 是一个 
        <computeroutput><classname>reference_wrapper</classname></computeroutput>，
        则 typedef <computeroutput>type</computeroutput> 为 <computeroutput>T::type</computeroutput>，
        否则为 <computeroutput>T</computeroutput>。</para>
      </description>

      <typedef name="type"><type><emphasis>unspecified</emphasis></type></typedef>
    </class>
  </namespace>
</header>
</library-reference>

<section id="ref.ack">
  <title>Acknowledgements 鸣谢</title>

  <using-namespace name="boost"/> 

  <para><functionname>ref</functionname> and <functionname>cref</functionname>
  were originally part of the <libraryname>Tuple</libraryname> library
  by Jaakko J&auml;rvi. They were "promoted to boost:: status" by
  Peter Dimov because they are generally useful.  Douglas Gregor and
  Dave Abrahams contributed
  <classname>is_reference_wrapper</classname> and
  <classname>unwrap_reference</classname>.  Frank Mori Hess and Ronald
  Garcia contributed <functionname>boost::unwrap_ref</functionname><sbr/>
  <functionname>ref</functionname> 和 <functionname>cref</functionname> 最初曾经是 Jaakko J&auml;rvi 做的 
  <libraryname>Tuple</libraryname> 库的一部分。他们被 Peter Dimov “提拔到 boost::status 中”，因为它们有更广泛的用途。
  Douglas Gregor 和 Dave Abrahams 贡献了 <classname>is_reference_wrapper</classname> 和 <classname>unwrap_reference</classname>。
  Frank Mori Hess 和 Ronald Garcia 贡献了 <functionname>boost::unwrap_ref</functionname></para>
</section>

</library>
