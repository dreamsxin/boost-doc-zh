<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE section PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
  "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<!--
Copyright Douglas Gregor 2001-2004
Copyright Frank Mori Hess 2007-2009

Distributed under the Boost Software License, Version 1.0. (See accompanying
file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
-->
<section last-revision="$Date: 2007-06-12 14:01:23 -0400 (Tue, 12 Jun 2007) $" id="signals2.faq">
  <title>Frequently Asked Questions 常见问题</title>

  <using-namespace name="boost"/>
  <using-namespace name="boost::signals2"/>

  <qandaset>
    <qandaentry>
      <question>
        <para>Don't noncopyable signal semantics mean that a class
        with a signal member will be noncopyable as well?<sbr/>
        singal 不可复制的语义是否意味着带有 signal 成员的类也是不可复制的？</para>
      </question>
      <answer>
        <para>No. The compiler will not be able to generate a copy
        constructor or copy assignment operator for your class if it
        has a signal as a member, but you are free to write your own
        copy constructor and/or copy assignment operator. Just don't
        try to copy the signal.<sbr/>
        否。如果你的类有个 signal 成员，编译器不能为它生成一个复制构造函数或复制赋值操作符， 
        是你可以自己编写复制构造函数和赋值操作符。只是不要试图复制那个 signal。</para>
      </answer>
    </qandaentry>
    <qandaentry>
      <question>
        <para>Is Boost.Signals2 thread-safe?<sbr/>
        Boost.Signals2 是否线程安全？</para>
      </question>
      <answer>
        <para>
          Yes, as long as the Mutex template parameter is not set to
          a fake mutex type like <classname>boost::signals2::dummy_mutex</classname>.
          Also, if your slots depend on objects which may be destroyed concurrently
          with signal invocation, you will need to use automatic connection management.
          That is, the objects will need to be owned by
          <classname>shared_ptr</classname> and passed to the slot's
          <methodname alt="slotN::track">track</methodname>() method before the slot is connected.
          The <classname>trackable</classname> scheme of automatic connection management
          is NOT thread-safe, and is only provided to ease porting of single-threaded
          code from Boost.Signals to Boost.Signals2.<sbr/>
          是的，只要 Mutex 模板参数不是被设为像 <classname>boost::signals2::dummy_mutex</classname> 这样的假互斥体类型。 
          此外，如果您的插槽依赖的对象可能在信号调用的同时被销毁，您将需要使用自动连接管理。 
          这就是说，在插槽连接之前，需要由 <classname>shared_ptr</classname> 拥有对象，并传递给插槽的 
          <methodname alt="slotN::track">track</methodname>() 方法。自动连接管理的 <classname>trackable</classname> 
          方案不是线程安全的，它仅仅用于方便移植单线程代码从 Boost.Signals 到 Boost.Signals2。
        </para>
        <para>See the documentation section on <link linkend="signals2.thread-safety">thread-safety</link>
          for more information.<sbr/>
          详情请参阅文档 <link linkend="signals2.thread-safety">线程安全性</link> 一节。
        </para>
      </answer>
    </qandaentry>
  </qandaset>
</section>
