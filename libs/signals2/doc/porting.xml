<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE section PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
  "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<!--
Copyright Frank Mori Hess 2007-2009

Distributed under the Boost Software License, Version 1.0. (See accompanying
file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
-->
<section last-revision="$Date: 2007-06-12 14:01:23 -0400 (Tue, 12 Jun 2007) $" id="signals2.api_changes">
  <title>Signals2 API Changes</title>
  <using-namespace name="boost::signals2"/>
  <using-namespace name="boost"/>
  <section id="signals2.porting">
  <title>Porting from Boost.Signals to Boost.Signals2  从Boost.Signals向Boost.Signals2移植</title>

  <using-namespace name="boost"/>
  <using-namespace name="boost::signals2"/>

  <para>The changes made to the Boost.Signals2 API compared to the original Boost.Signals
    library are summarized below.  We also provide some notes on
    dealing with each change while porting existing Boost.Signals code to Boost.Signals2.<sbr/>
    与原 Boost.Signals 库相比，Boost.Signals2 API 所作的更改总结如下。我们还提供了一些说明，
    说明当现有 Boost.Signals 代码移植到 Boost.Signals2 时，如何处理每一个变化。
  </para>
  <itemizedlist>
    <listitem>
      <para>The namespace <code>boost::signals</code> has been replaced by <code>boost::signals2</code>
        to avoid conflict with the original Boost.Signals implementation, as well as the Qt "signals" macro.
        All the Boost.Signals2 classes are inside the <code>boost::signals2</code> namespace,
        unlike the original Boost.Signals which has some classes in the <code>boost</code>
        namespace in addition to its own <code>boost::signals</code> namespace.<sbr/>
        名字空间 <code>boost::signals</code> 已被 <code>boost::signals2</code> 取代，
        以避免与原 Boost.Signals 实现以及 Qt 的“signals”宏冲突。所有 Boost.Signals2 的类都在 
        <code>boost::signals2</code> 名字空间中，不像原 Boost.Signals 除了其本身的 <code>boost::signals</code> 名字空间，
        有某些类在 <code>boost</code> 名字空间。
      </para>
      <para>
        The Boost.Signals2 header files are contained in the
        <code>boost/signals2/</code> subdirectory instead of the <code>boost/signals</code>
        subdirectory used by the original Boost.Signals.  Furthermore, all the headers except
        for the convenience header <code>boost/signals2.hpp</code> are inside the
        <code>boost/signals2/</code> subdirectory, unlike the original Boost.Signals which
        keeps a few headers in the parent <code>boost/</code> directory
        in addition to its own <code>boost/signals/</code> subdirectory.<sbr/>
        Boost.Signals2 头文件位于 <code>boost/signals2/</code> 子目录，而不是原 Boost.Signals 所使用的 
        <code>boost/signals</code> 子目录。此外，除了便捷头文件 <code>boost/signals2.hpp</code>， 
        所有头文件都在 <code>boost/signals2/</code> 子目录，不像原 Boost.Signals 除了其本身的 
        <code>boost/signals/</code> 子目录，另外在父目录 <code>boost/</code> 中也有几个头文件。
      </para>
      <para>
        For example, the <code>signal</code> class is now
        in the <code>boost::signals2</code> namespace instead of the
        <code>boost</code> namespace,
        and it's header file is now at <code>boost/signals2/signal.hpp</code> instead of
        <code>boost/signal.hpp</code>.<sbr/>
        例如，<code>signal</code> 类目前在 <code>boost::signals2</code> 名字空间，而不是 <code>boost</code> 名字空间， 
        它的头文件目前是 <code>boost/signals2/signal.hpp</code> 而不是 <code>boost/signal.hpp</code>。
      </para>
      <para>
        While porting, only trivial changes to <code>#include</code> directives
        and namespace qualifications should be required to deal with these changes.
        Furthermore, the new namespace and header locations for Boost.Signals2
        allow it to coexist in the same program with the original Boost.Signals library,
        and porting can be performed piecemeal.<sbr/>
        移植时，为处理这些更改，应该只需对 <code>#include</code> 指示和名字空间限定作些微不足道的更改。 
        此外，Boost.Signals2 新的名字空间和头文件位置使它能够与原 Boost.Signals 库共存于同一程序， 
        这样移植就可以逐渐进行。
      </para>
    </listitem>
    <listitem>
      <para>
        Automatic connection management is now achieved through the use of
        <classname>shared_ptr</classname>/<classname>weak_ptr</classname>
        and <methodname alt="slotN::track">slot::track</methodname>(), as described in the
        <link linkend="signals2.tutorial.connection-management">tutorial</link>.
        However, the old (thread-unsafe) Boost.Signals scheme of automatic connection management
        is still supported via the <classname>boost::signals2::trackable</classname> class.<sbr/>
        自动连接管理现在是通过利用 <classname>shared_ptr</classname>/<classname>weak_ptr</classname> 和 
        <methodname alt="slotN::track">slot::track</methodname>() 达到的，见 
        <link linkend="signals2.tutorial.connection-management">教程</link> 所述。 
        然而，通过 <classname>boost::signals2::trackable</classname> 类，
        旧的（线程不安全的）Boost.Signals 的自动连接管理方案仍被支持。
      </para>
      <para>
        If you do not intend to make your program multi-threaded, the easiest porting path is to simply replace
        your uses of <classname>boost::signals::trackable</classname> as a base class with
        <classname>boost::signals2::trackable</classname>.  Boost.Signals2 uses the same
        <functionname>boost::visit_each</functionname> mechanism to discover
        <classname>trackable</classname> objects
        as used by the original Boost.Signals library.<sbr/>
        如果您不打算让您的程序多线程化，最方便的移植路径是，简单地把作为基类使用的 
        <classname>boost::signals::trackable</classname> 替换为 <classname>boost::signals2::trackable</classname>。 
        与原 Boost.Signals 库一样，Boost.Signals2 使用同样的 <functionname>boost::visit_each</functionname> 
        机制来发现 <classname>trackable</classname> 对象。
      </para>
    </listitem>
    <listitem>
      <para>Support for postconstructors (and predestructors) on objects managed by <classname>shared_ptr</classname>
        has been added with
        the <functionname>deconstruct</functionname> factory function.
        This was motivated by the importance of
        <code>shared_ptr</code> for the new connection tracking scheme, and the
        inability to obtain a <code>shared_ptr</code> to an object in its constructor.
        The use of <functionname>deconstruct</functionname> is described in the
        <link linkend="signals2.tutorial.deconstruct">tutorial</link>.<sbr/>
        对于由 <classname>shared_ptr</classname> 所管理的对象，增加了对后构造器（和预析构器）的支持，
        以及 <functionname>deconstruct</functionname> 工厂函数。这样做的动机在于 <code>shared_ptr</code> 
        对新的连接跟踪方案的重要性，并且不能在对象的造构函数中获得它的 <code>shared_ptr</code>。 
        <functionname>deconstruct</functionname> 的使用在 <link linkend="signals2.tutorial.deconstruct">教程</link> 中描述。
      </para>
      <para>
        The use of <functionname>deconstruct</functionname> is in no way required,
        it is only provided in the hope
        it may be useful.  You may wish to use it if you are porting code where
        a class creates connections to its own member functions in its constructor,
        and you also
        wish to use the new automatic connection management scheme.  You could then
        move the connection creation from the constructor to to the an
        <code>adl_postconstruct</code> function, where
        a reference to the owning <classname>shared_ptr</classname> is available for
        passing to <methodname alt="slotN::track">slot::track</methodname>.
        The <functionname>deconstruct</functionname> function would be used create objects
        of the class and run their associated <code>adl_postconstruct</code> function.
        You can enforce use of <functionname>deconstruct</functionname> by
        making the class' constructors private and declaring
        <classname>deconstruct_access</classname> a friend.<sbr/>
        <functionname>deconstruct</functionname> 的使用绝不是必需的，提供它只是希望它有用。 
        如果您移植的代码中，一个类在其构造函数中创建连接到其自身的成员函数，并且你还希望使用新的自动连接管理方案， 
        这时您就可以使用它。然后，您可以将创建连接从构造函数移到 <code>adl_postconstruct</code> 函数，其中有个引用，
        指向拥有该对象的 <classname>shared_ptr</classname>，它可以传递给 <methodname alt="slotN::track">slot::track</methodname>。 
        <functionname>deconstruct</functionname> 函数将被用于创建类的对象，并运行其相关的 <code>adl_postconstruct</code> 函数。 
        您可以使类的构造函数私有，并声明 <classname>deconstruct_access</classname> 为友元，
        来强制使用 <functionname>deconstruct</functionname>。
      </para>
    </listitem>
    <listitem>
      <para>
        The <classname>slot</classname> class takes a new <code>Signature</code> template parameter,
        is useable as a function object, and has some additional features to support the
        new Boost.Signals2 automatic connection management scheme.<sbr/>
        <classname>slot</classname> 类需要一个新的 <code>Signature</code> 模板参数，该参数用作一个函数对象， 
        并具有一些附加功能以支持新的 Boost.Signals2 自动连接管理方案。
      </para>
      <para>
        The changes to the slot class should generally not cause any porting difficulties,
        especially if you are using the <classname>boost::signals2::trackable</classname>
        compatibility class mentioned above.  If you are converting your code over to
        use the new automatic connection management scheme, you will need to
        employ some of the new slot features, as described in the
        <link linkend="signals2.tutorial.connection-management">tutorial</link>.<sbr/>
        对插槽类的更改一般应不会造成任何移植困难，尤其是如果您使用的是上述的兼容类 
        <classname>boost::signals2::trackable</classname>。如果您是要将您的代码转换为使用新的自动连接管理方案， 
        您将需要用到一些新的插槽功能，请见 <link linkend="signals2.tutorial.connection-management">教程</link> 所述。
      </para>
    </listitem>
    <listitem>
      <para>
        The <classname>optional_last_value</classname> class has replaced <classname>last_value</classname>
        as the default combiner for signals.<sbr/>
        <classname>optional_last_value</classname> 类已取代 <classname>last_value</classname>，成为了信号的默认合并器。
      </para>
      <para>
        The <classname>last_value</classname> combiner is still provided, although its
        behavior is slightly changed in that it
        throws an exception when no slots are connected on signal invocation, instead of
        always requiring at least one slot to be connected (except for its void specialization
        which never required any slots to be connected).<sbr/>
        <classname>last_value</classname> 合并器仍然存在，但其行为略有改变，当信号调用时无插槽连接会抛异常， 
        而不是总是要求至少有一个插槽连接 （除了 void 特化，它从不要求任何插槽连接）。
      </para>
      <para>
        If you are porting signals which have a <code>void</code> return type in their signature
        and they use the default combiner, there are no changes required.  If you are
        using the default combiner with a non-void return type and care about the
        value returned from signal invocation, you will have to take into account that
        <classname>optional_last_value</classname> returns a
        <classname>boost::optional</classname> instead of a plain value.  One simple
        way to deal with this is to use <code>boost::optional::operator*()</code> to access the
        value wrapped inside the returned <classname>boost::optional</classname>.<sbr/>
        如果您移植的信号返回类型是 <code>void</code>，并且使用默认的合并器，那就不需要任何更改。 
        如果您使用的是返回类型非空的默认合并器，并且关心信号调用的返回值，您就必须考虑到 
        <classname>optional_last_value</classname> 返回的是 <classname>boost::optional</classname>， 
        而不是一个简单的值。处理该问题最简单的一种方法，就是使用 <code>boost::optional::operator*()</code> 
        来访问返回的 <classname>boost::optional</classname> 中所封装的值。
      </para>
      <para>
        Alternatively, you could do a port by specifying the <code>Combiner</code> template parameter
        for your <code>signals2::signal</code> to be <classname>last_value</classname>.<sbr/>
        或者，您也可以这样移植：指定 <code>signals2::signal</code> 的 <code>Combiner</code> 
        模板参数为 <classname>last_value</classname>。
      </para>
    </listitem>
    <listitem>
      <para>
        The <classname>signal</classname> class has an additional typedef
        <classname alt="signalN::extended_slot_type">signal::extended_slot_type</classname>
        and new <methodname alt="signalN::connect_extended">signal::connect_extended</methodname>()
        methods.  These allow connection of slots
        which take an additional <classname>connection</classname> argument, giving them thread-safe
        access to their signal/slot connection when they are invoked.  There is also a
        new <code>ExtendedSlotFunction</code> template parameter for specifying the underlying slot function
        type for the new extended slots.<sbr/>
        <classname>signal</classname> 类添加了一个 
        <classname alt="signalN::extended_slot_type">signal::extended_slot_type</classname> 类型定义，
        和新的 <methodname alt="signalN::connect_extended">signal::connect_extended</methodname>() 方法。 
        这使得连接的插槽可以接受一个额外的 <classname>connection</classname> 参数，
        使插槽被调用时可以线程安全地访问其信号/插槽连接。 
        还有一个新的 <code>ExtendedSlotFunction</code> 模板参数，来为新的扩展插槽指定底层的插槽函数类型。
      </para>
      <para>
        These additions should have no effect on porting unless you are also converting
        your program from a single threaded program into a multi-threaded one.  In that case,
        if you have slots which need access to their <classname>connection</classname>
        to the signal invoking them (for example to block or disconnect their connection)
        you may wish to connect the slots with
        <methodname alt="signalN::connect_extended">signal::connect_extended</methodname>().
        This also requires adding an additional connection argument to the slot.
        More information on how and why to use extended slots is available
        in the <link linkend="signals2.tutorial.extended-slot-type">tutorial</link>.<sbr/>
        这些添加应该不会影响移植，除非您同时在把程序从单线程转换为多线程的。在这种情况下，
        如果您有插槽需要访问其 <classname>connection</classname> （例如，阻止或断开其连接，
        即插槽与调用插槽的信号之间的连接），您可能希望用 
        <methodname alt="signalN::connect_extended">signal::connect_extended</methodname>() 来连接插槽。 
        这也要求插槽增加一个额外的连接参数。<link linkend="signals2.tutorial.extended-slot-type">教程</link> 
        中有如何以及为什么使用扩展插槽的详细信息。
      </para>
    </listitem>
    <listitem>
      <para>
        The <classname>signal</classname> class has a new <code>Mutex</code> template parameter for specifying
        the mutex type used internally by the signal and its connections.<sbr/>
        signal 类有个新的 Mutex 模板参数，用来指定信号及其连接内部使用的互斥体类型。
      </para>
      <para>
        The <code>Mutex</code> template parameter can be left to its default value of
        <classname>boost::signals2::mutex</classname> and should have little effect on porting.
        However, if you have a single-threaded program and are
        concerned about incuring a performance overhead from unneeded mutex locking, you may
        wish to use a different mutex for your signals such as <classname>dummy_mutex</classname>.
        See the <link linkend="signals2.tutorial.signal-mutex-template-parameter">tutorial</link>
        for more information on the <code>Mutex</code> parameter.<sbr/>
        <code>Mutex</code> 模板参数可保持缺省值 <classname>boost::signals2::mutex</classname>，应该不会影响移植。 
        但是，如果你有一个单线程程序，担心因不必要的互斥锁而招致性能开销，你不妨为你的信号使用不同的互斥体，
        如 <classname>dummy_mutex</classname>。关于 <code>Mutex</code> 参数的更多信息请见 
        <link linkend="signals2.tutorial.signal-mutex-template-parameter">教程</link>。
      </para>
    </listitem>
    <listitem>
      <para>The <code>signal::combiner()</code> method, which formerly returned a reference to the
        signal's combiner has been replaced by <methodname alt="signalN::combiner">signal::combiner</methodname>
        (which now returns the combiner by value) and <methodname alt="signalN::set_combiner">signal::set_combiner</methodname>.<sbr/>
        <code>signal::combiner()</code>方法，原来返回一个指向信号合并器的引用，已被 
        <methodname alt="signalN::combiner">signal::combiner</methodname>（现在按值返回合并器）和 
        <methodname alt="signalN::set_combiner">signal::set_combiner</methodname> 取代。
      </para>
      <para>
        During porting it should be straightforward to replace uses of the old reference-returning
        <code>signal::combiner()</code>
        function with the new "by-value" <methodname alt="signalN::combiner">signal::combiner</methodname>
        and <methodname alt="signalN::set_combiner">signal::set_combiner</methodname> functions.
        However, you will need to inspect each call of the <code>combiner</code> method in your code
        to determine if your program logic has been broken by the changed
        return type.<sbr/>
        移植过程中，将旧的返回引用的 <code>signal::combiner()</code> 函数替换为新的“按值”方式的 
        <methodname alt="signalN::combiner">signal::combiner</methodname> 和 
        <methodname alt="signalN::set_combiner">signal::set_combiner</methodname> 函数，应该是简单的。 
        但是，您需要检查代码中每个 <code>combiner</code> 方法调用，以确定您的程序逻辑没有因更改返回类型而破坏。
      </para>
    </listitem>
    <listitem>
      <para>Connections no longer have <code>block()</code> and <code>unblock()</code> methods.  Blocking
        of connections is now accomplished by creating <classname>shared_connection_block</classname> objects,
        which provide RAII-style blocking.<sbr/>
        连接不再有 <code>block()</code> 和 <code>unblock()</code> 方法。连接的阻塞现在通过创建 
        <classname>shared_connection_block</classname> 对象完成，它提供了 RAII 方式的阻塞。
      </para>
      <para>
        If you have existing Boost.Signals code that blocks, for example:<sbr/>
        如果您现有的 Boost.Signals 代码有阻塞，例如：
      </para>
      <programlisting>
namespace bs = boost::signals;

bs::connection my_connection;
//...

my_connection.block();
do_something();
my_connection.unblock();
</programlisting>
          <para>
            then the version ported to Boost.Signals2 would look like:<sbr/>
            那么移植到 Boost.Signals2 的版本将如下所示：
          </para>
            <programlisting>
namespace bs2 = boost::signals2;

bs2::connection my_connection;
//...

{
  bs2::shared_connection_block blocker(my_connection);
  do_something();
} // blocker goes out of scope here and releases its block on my_connection
</programlisting>
    </listitem>
  </itemizedlist>
</section>
  <section id="signals2.api_history">
    <title>Signals2 API Development  Signals API发展</title>
    <section id="signals2.api_history.1-40">
      <title>Version 1.40</title>
      <para>
        Version 1.40 adds a few new features to the <classname>shared_connection_block</classname>
        class to make it more flexible:<sbr/>
        版本1.40为 <classname>shared_connection_block</classname> 类增加了一些新的特性令其更为灵活：
        <itemizedlist>
          <listitem>
            <para>
              <classname>shared_connection_block</classname> is now default constructible.<sbr/>
              <classname>shared_connection_block</classname> 现在可以缺省构造。
            </para>
          </listitem>
          <listitem>
            <para>
              A <classname>shared_connection_block</classname> may now be constructed without
              immediately blocking its connection.<sbr/>
              <classname>shared_connection_block</classname> 现在可以无须立即阻塞其连接而被构造。
            </para>
          </listitem>
          <listitem>
            <para>
              The <methodname>shared_connection_block::connection</methodname>() query has been
              added, to provide access to the <code>shared_connection_block</code>s associated
              connection.<sbr/>
              增加了 <methodname>shared_connection_block::connection</methodname>() 查询，
              以提供对 <code>shared_connection_block</code> 相关联连接的访问。
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>Version 1.40 also introduces a variadic templates implementation of
        Signals2, which is used when Boost detects compiler support for variadic templates
        (variadic templates are a new feature of C++0x).
        This change is mostly transparent to the user, however it does introduce a few
        visible tweaks to the interface as described in the following.<sbr/>
        版本1.40还引入了一个 Signals2 的可变参数模板实现，当 Boost 检测到编译器支持可变参数模板
        (可变参数是C++0x的新特性)时即会使用该实现。该变化对于用户而言基本上是透明的，
        但是也确实对接口带来一些可见的调整，说明如下。
      </para>
      <para>
        The following library features are
        deprecated, and are only available if your compiler is NOT using
        variadic templates (i.e. BOOST_NO_VARIADIC_TEMPLATES is defined
        by Boost.Config).<sbr/>
        以下的库特性已过时，仅当你的编译器不使用可变参数模板(即Boost.Config定义了BOOST_NO_VARIADIC_TEMPLATES)时可用。
        <itemizedlist>
          <listitem>
            <para>
              The "portable syntax" signal and slot classes, i.e. signals2::signal0, signal1, etc.<sbr/>
              "兼容句法"的信号和插槽类，即 signals2::signal0, signal1, 等等。
            </para>
          </listitem>
          <listitem>
            <para>
              The arg1_type, arg2_type, etc. member typedefs in the <classname>signals2::signal</classname> and
              <classname>signals2::slot</classname> classes.  They are replaced by the
              template member classes <classname>signals2::signal::arg</classname> and
              <classname>signals2::slot::arg</classname>.<sbr/>
              <classname>signals2::signal</classname> 和 <classname>signals2::slot</classname> 类中的 arg1_type, 
              arg2_type 等成员typedef。它们被模板成员类 <classname>signals2::signal::arg</classname> 和
              <classname>signals2::slot::arg</classname> 所替代。
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <section id="signals2.api_history.1-39">
      <title>Version 1.39</title>
      <para>Version 1.39 is the first release of Boost to include the Signals2 library.<sbr/>
      版本1.39是包含 Signals2 库的第一个 Boost 发布。</para>
    </section>
  </section>
</section>
