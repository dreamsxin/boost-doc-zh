<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
"http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">


<!-- Copyright (c) 2002-2006 Pavol Droba.
     Subject to the Boost Software License, Version 1.0. 
     (See accompanying file LICENSE_1_0.txt or  http://www.boost.org/LICENSE_1_0.txt)
-->

<section id="string_algo.intro" last-revision="$Date: 2008-02-27 15:00:24 -0500 (Wed, 27 Feb 2008) $">
    <title>Introduction 简介</title>

    <para>
        The String Algorithm Library provides a generic implementation of
        string-related algorithms which are missing in STL. It is an extension
        to the algorithms library of STL and it includes trimming, case conversion, 
        predicates and find/replace functions. All of them come in different variants 
        so it is easier to choose the best fit for a particular need.<sbr/>
        string 算法库提供 STL 所缺少的 string 相关算法的通用实现。它是 STL 算法库以及它所包含的修剪，大小写转换，
        判断式和查找/替换函数的扩展。它们全部具有多种不同变化，以便于针对某一特定需求做出最适当的选择。
    </para>
    <para>
        The implementation is not restricted to work with a particular container 
        (like <code>std::basic_string</code>), rather it is as generic as
        possible. This generalization is not compromising the performance since
        algorithms are using container specific features when it means a performance
        gain.<sbr/>
        这一实现并不局限于特定的容器（比如 <code>std::basic_string</code>），而是尽可能地通用。
        这种通用化并不牺牲性能，因为如果容器的特殊特性会增进性能，算法就会使用这一特性。
    </para>
    <para>
        <emphasis role="bold">
            Important note: In this documentation we use term <emphasis>string</emphasis> to 
            designate a sequence of <emphasis>characters</emphasis> stored in an arbitrary container.
            A <emphasis>string</emphasis> is not restricted to <code>std::basic_string</code> and 
            <emphasis>character</emphasis> does not have to be <code>char</code> or <code>wchar_t</code>,
            although these are most common candidates.
        </emphasis>
        Consult the <link linkend="string_algo.design">design chapter</link> to see precise specification of
        supported string types.<sbr/>
        <emphasis role="bold">特别注意：本文档中我们使用术语 <emphasis>string</emphasis> 指称一个存储在任何容器中的 
        <emphasis>characters</emphasis> 的序列。一个 <emphasis>string</emphasis> 并不局限于 <code>std::basic_string</code>，
        而 <emphasis>character</emphasis> 也不一定就是 <code>char</code> 或 <code>wchar_t</code>，虽然这些是最常见的情形。
        </emphasis>请参考 <link linkend="string_algo.design">design章节</link> 中关于所支持的 string 类型的各种明确的规范。
    </para>
    <para>      
        The library interface functions and classes are defined in namespace <code>boost::algorithm</code>, and
        they are lifted into namespace <code>boost</code> via using declaration.<sbr/>
        本库接口函数和类定义在名字空间 <code>boost::algorithm</code> 中，而且通过 using 声明，
        它们也可以生存在名字空间 <code>boost</code> 中。
    </para>
    <para>
        The documentation is divided into several sections. For a quick start read the 
        <link linkend="string_algo.usage">Usage</link> section followed by 
        <link linkend="string_algo.quickref">Quick Reference</link>. 
        <link linkend="string_algo.design">The Design Topics</link>,
        <link linkend="string_algo.concept">Concepts</link> and <link linkend="string_algo.rationale">Rationale</link>
        provide some explanation about the library design and structure an explain how it should be used.
        See the <link linkend="string_algo.reference">Reference</link> for the complete list of provided utilities
        and algorithms. Functions and classes in the reference are organized by the headers in which they are defined.
        The reference contains links to the detailed description for every entity in the library.<sbr/>
        本文档分为几个部分。如果想快速开始，可以阅读 <link linkend="string_algo.usage">用法</link> 部分，
        然后是 <link linkend="string_algo.quickref">快速参考</link>。
        <link linkend="string_algo.design">设计讨论</link>, <link linkend="string_algo.concept">概念</link> 
        和 <link linkend="string_algo.rationale">一些解释</link>提供了关于库的设计和构造的一些解释，
        以及应该如何使用的说明。关于本库提供的工具和算法的完整列表请参见 <link linkend="string_algo.reference">参考</link>。
        参考中的函数和类根据定义它们的头文件进行组织。参考中包含一些链接，可以链到本库中每一个实体的细节描述。
    </para>
</section>
