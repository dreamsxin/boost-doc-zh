<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE header PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
  "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<header name="boost/variant/variant.hpp">
  <namespace name="boost">
    <class name="variant">
      <purpose>Safe, generic, stack-based discriminated union container.<sbr/>
      安全、泛型、基于栈的可识别联合容器。</purpose>
      <description>
        <simpara>The <code>variant</code> class template (inspired by Andrei
        Alexandrescu's class of the same name
        [<link linkend="variant.refs.ale01a">Ale01A</link>]) is an efficient,
        <link linkend="variant.tutorial.recursive">recursive-capable</link>,
        bounded discriminated union value type capable of containing any value
        type (either POD or non-POD). It supports construction from any type
        convertible to one of its bounded types or from a source
        <code>variant</code> whose bounded types are each convertible to one
        of the destination <code>variant</code>'s bounded types. As well,
        through <code><functionname>apply_visitor</functionname></code>,
        <code>variant</code> supports compile-time checked, type-safe
        visitation; and through <code><functionname>get</functionname></code>,
        <code>variant</code> supports run-time checked, type-safe value
        retrieval.<sbr/>
        <code>variant</code> 类模板(灵感来自于 Andrei Alexandrescu 的同名类 
        [<link linkend="variant.refs.ale01a">Ale01A</link>])是一个高效的、
        <link linkend="variant.tutorial.recursive">可递归的</link>、可保存任意值类型(POD 或 非-POD)的有界可识别值类型。
        它可以构造自任意可转换为其任一有界类型的类型，或者构造自一个源 <code>variant</code>，只要源 
        <code>variant</code> 的每个有界类型可以转换为目标 <code>variant</code> 的某个有界类型。
        通过使用 <code><functionname>apply_visitor</functionname></code>, <code>variant</code> 
        可以支持编译期检查的、类型安全的访问；而通过 <code><functionname>get</functionname></code>, 
        <code>variant</code> 可以支持运行期检查的、类型安全的值取出。</simpara>

        <simpara><emphasis role="bold">Notes 说明</emphasis>:</simpara>
        <itemizedlist>
          <listitem>The bounded types of the <code>variant</code> are exposed
            via the nested typedef <code>types</code>, which is an
            <libraryname>MPL</libraryname>-compatible Sequence containing the
            set of types that must be handled by any
            <link linkend="variant.concepts.static-visitor">visitor</link> to
            the <code>variant</code>.<sbr/>
            <code>variant</code> 的有界类型通过内嵌的 typedef <code>types</code> 获得，它是一个 
            <libraryname>MPL</libraryname>-兼容的序列，其中包含一组类型，这些类型必须被访问该 
            <code>variant</code> 的 <link linkend="variant.concepts.static-visitor">visitor</link> 所处理。</listitem>
          <listitem>All members of <code>variant</code> satisfy at least the
            basic guarantee of exception-safety. That is, all operations on
            a <code>variant</code> remain defined even after previous
            operations have failed.<sbr/>
            <code>variant</code> 的所有成员至少要满足基本的异常安全保证。
            即，<code>variant</code> 的所有操作即使失败了也必须保持数据的一致性。</listitem>
          <listitem>Each type specified as a template argument to
            <code>variant</code> must meet the requirements of the
            <emphasis><link linkend="variant.concepts.bounded-type">BoundedType</link></emphasis>
            concept.<sbr/>
            每个被指定为 <code>variant</code> 的模板参数的类型必须满足 
            <emphasis><link linkend="variant.concepts.bounded-type">BoundedType</link></emphasis> 概念的要求。</listitem>
          <listitem>Each type specified as a template argument to
            <code>variant</code> must be distinct after removal of qualifiers.
            Thus, for instance, both <code>variant&lt;int, int&gt;</code> and
            <code>variant&lt;int, const int&gt;</code> have undefined
            behavior.<sbr/>
            每个被指定为 <code>variant</code> 的模板参数的类型必须在去除限定符后是唯一的。因此，象 
            <code>variant&lt;int, int&gt;</code> 和 <code>variant&lt;int, const int&gt;</code> 这样的类型的行为是未定义的。</listitem>
          <listitem>Conforming implementations of <code>variant</code> must
            allow at least ten types as template arguments. The exact number
            of allowed arguments is exposed by the preprocessor macro
            <code><macroname>BOOST_VARIANT_LIMIT_TYPES</macroname></code>.
            (See <code><classname>make_variant_over</classname></code> for a
            means to specify the bounded types of a <code>variant</code> by
            the elements of an <libraryname>MPL</libraryname> or compatible
            Sequence, thus overcoming this limitation.)<sbr/>
            符合规范的 <code>variant</code> 实现必须至少允许10个类型作为模板参数。
            实际所允许的参数数量由预处理器宏 <code><macroname>BOOST_VARIANT_LIMIT_TYPES</macroname></code> 获得。
            (以 <libraryname>MPL</libraryname> 或兼容序列的元素来指定 <code>variant</code> 的有界类型，
            则可以超过这个限制，相关说明请见 <code><classname>make_variant_over</classname></code>) 
</listitem>
        </itemizedlist>
      </description>

      <template>
        <template-type-parameter name="T1"/>
        <template-type-parameter name="T2">
          <default><emphasis>unspecified</emphasis></default>
        </template-type-parameter>
        <template-varargs/>
        <template-type-parameter name="TN">
          <default><emphasis>unspecified</emphasis></default>
        </template-type-parameter>
      </template>

      <typedef name="types">
        <type><emphasis>unspecified</emphasis></type>
      </typedef>

      <destructor>
        <effects>
          <simpara>Destroys the content of <code>*this</code>.<sbr/>
          销毁 <code>*this</code> 的内容。</simpara>
        </effects>

        <throws>Will not throw.<sbr/>
        不会抛出。</throws>
      </destructor>

      <constructor>
        <requires>
          <simpara>The first bounded type of the <code>variant</code> (i.e.,
            <code>T1</code>) must fulfill the requirements of the
            <emphasis>DefaultConstructible</emphasis> [20.1.4]
            concept.<sbr/>
            <code>variant</code> 的第一个有界类型(即 <code>T1</code>)必须符合 
            <emphasis>DefaultConstructible</emphasis> [20.1.4] 概念的要求。</simpara>
        </requires>

        <postconditions>
          <simpara>Content of <code>*this</code> is the default value of the
            first bounded type (i.e, <code>T1</code>).<sbr/>
            <code>*this</code> 的内容为第一个有界类型(即 <code>T1</code>)的缺省值。</simpara>
        </postconditions>

        <throws>
          <simpara>May fail with any exceptions arising from the default
            constructor of <code>T1</code>.<sbr/>
            可能因 <code>T1</code> 的缺省构造函数所引起的任何异常而失败。</simpara>
        </throws>
      </constructor>

      <constructor>
        <parameter name="other">
          <paramtype>const variant &amp;</paramtype>
        </parameter>

        <postconditions>
          <simpara>Content of <code>*this</code> is a copy of the content of
            <code>other</code>.<sbr/>
            <code>*this</code> 的内容为 <code>other</code> 内容的一份拷贝。</simpara>
        </postconditions>
        
        <throws>
          <simpara>May fail with any exceptions arising from the
            copy constructor of <code>other</code>'s contained type.<sbr/>
            可能因 <code>other</code> 所含类型的复制构造函数所引起的任何异常而失败。</simpara>
        </throws>
      </constructor>

      <constructor>
        <template>
          <template-type-parameter name="T"/>
        </template>

        <parameter name="operand">
          <paramtype>T &amp;</paramtype>
        </parameter>

        <requires>
          <simpara><code>T</code> must be unambiguously convertible to one of
            the bounded types (i.e., <code>T1</code>, <code>T2</code>,
            etc.).<sbr/>
            <code>T</code> 必须明确地可转换为某个有界类型(如 <code>T1</code>, <code>T2</code>, 等)。</simpara>
        </requires>

        <postconditions>
          <simpara>Content of <code>*this</code> is the best conversion of
            <code>operand</code> to one of the bounded types, as determined
            by standard overload resolution rules.<sbr/>
            <code>*this</code> 的内容为 <code>operand</code> 到某个有界类型的最佳转换，取决于标准的重载决议规则。</simpara>
        </postconditions>

        <throws>
          <simpara>May fail with any exceptions arising from the conversion of
            <code>operand</code> to one of the bounded types.<sbr/>
            可能因 <code>operand</code> 至某个有界类型的转换所引起的任何异常而失败。</simpara>
        </throws>
      </constructor>

      <constructor>
        <template>
          <template-type-parameter name="T"/>
        </template>

        <parameter name="operand">
          <paramtype>const T &amp;</paramtype>
        </parameter>

        <notes>
          <simpara>Same semantics as previous constructor, but allows
            construction from temporaries.<sbr/>
            与前一构造函数语义相同，但允许构造自临时对象。</simpara>
        </notes>
      </constructor>

      <constructor>
        <template>
          <template-type-parameter name="U1"/>
          <template-type-parameter name="U2"/>
          <template-varargs/>
          <template-type-parameter name="UN"/>
        </template>

        <parameter name="operand">
          <paramtype>variant&lt;U1, U2, ..., UN&gt; &amp;</paramtype>
        </parameter>

        <requires>
          <simpara><emphasis>Every</emphasis> one of <code>U1</code>,
            <code>U2</code>, ..., <code>UN</code> must have an unambiguous
            conversion to one of the bounded types (i.e., <code>T1</code>,
            <code>T2</code>, ..., <code>TN</code>).<sbr/>
            <emphasis>每一个</emphasis> <code>U1</code>,
            <code>U2</code>, ..., <code>UN</code> 都必须明确可转换为某个有界类型(如 <code>T1</code>,
            <code>T2</code>, ..., <code>TN</code>)。</simpara>
        </requires>

        <postconditions>
          <simpara>If <code>variant&lt;U1, U2, ..., UN&gt;</code> is itself
            one of the bounded types, then content of <code>*this</code> is a
            copy of <code>operand</code>. Otherwise, content of
            <code>*this</code> is the best conversion of the content of
            <code>operand</code> to one of the bounded types, as determined
            by standard overload resolution rules.<sbr/>
            如果 <code>variant&lt;U1, U2, ..., UN&gt;</code> 本身是其中一个有界类型，则 <code>*this</code> 
            的内容为 <code>operand</code> 的拷贝。否则，<code>*this</code> 的内容为 <code>operand</code> 
            到某个有界类型的最佳转换，取决于标准的重载决议规则。</simpara>
        </postconditions>

        <throws>
          <simpara>If <code>variant&lt;U1, U2, ..., UN&gt;</code> is itself
          one of the bounded types, then may fail with any exceptions arising
          from the copy constructor of
          <code>variant&lt;U1, U2, ..., UN&gt;</code>. Otherwise, may fail
          with any exceptions arising from the conversion of the content of
          <code>operand</code> to one of the bounded types.<sbr/>
          如果 <code>variant&lt;U1, U2, ..., UN&gt;</code> 本身是其中一个有界类型，则可能因 
          <code>variant&lt;U1, U2, ..., UN&gt;</code> 的复制构造函数所引起的任何异常而失败。
          否则，可能因 <code>operand</code> 至某个有界类型的转换所引起的任何异常而失败。</simpara>
        </throws>
      </constructor>
      
      <constructor>
        <template>
          <template-type-parameter name="U1"/>
          <template-type-parameter name="U2"/>
          <template-varargs/>
          <template-type-parameter name="UN"/>
        </template>

        <parameter name="operand">
          <paramtype>const variant&lt;U1, U2, ..., UN&gt; &amp;</paramtype>
        </parameter>

        <notes>
          <simpara>Same semantics as previous constructor, but allows
            construction from temporaries.<sbr/>
            与前一构造函数语义相同，但允许构造自临时对象。</simpara>
        </notes>
      </constructor>

      <method-group name="modifiers">

        <method name="swap">
          <type>void</type>

          <parameter name="other">
            <paramtype>variant &amp;</paramtype>
          </parameter>

          <requires>
            <simpara>Every bounded type must fulfill the requirements of the
              <conceptname>Assignable</conceptname>
              concept.<sbr/>
              每个有界类型都必须满足 <conceptname>Assignable</conceptname> 概念的要求。</simpara>
          </requires>

          <effects>
            <simpara>Interchanges the content of <code>*this</code> and
              <code>other</code>.<sbr/>
              交换 <code>*this</code> 和 <code>other</code> 的内容。</simpara>
          </effects>

          <throws>
            <simpara>If the contained type of <code>other</code> is the same as
              the contained type of <code>*this</code>, then may fail with any
              exceptions arising from the <code>swap</code> of the contents of
              <code>*this</code> and <code>other</code>. Otherwise, may fail
              with any exceptions arising from either of the copy constructors
              of the contained types. Also, in the event of insufficient
              memory, may fail with <code>std::bad_alloc</code>
              (<link linkend="variant.design.never-empty.problem">why?</link>).<sbr/>
              如果 <code>other</code> 所含类型与 <code>*this</code> 所含类型相同，则可能因 <code>*this</code> 
              和 <code>other</code> 的内容的 swap 操作所引起的异常而失败。
              否则，可能因某个所含类型的复制构造函数所引起的异常而失败。
              也可能由于内存不足而抛出 <code>std::bad_alloc</code>.</simpara>
          </throws>
        </method>

        <method name="operator=">
          <type>variant &amp;</type>

          <parameter name="rhs">
            <paramtype>const variant &amp;</paramtype>
          </parameter>

          <requires>
            <simpara>Every bounded type must fulfill the requirements of the
              <conceptname>Assignable</conceptname>
              concept.<sbr/>
              每个有界类型都必须满足 <conceptname>Assignable</conceptname> 概念的要求。</simpara>
          </requires>

          <effects>
            <simpara>If the contained type of <code>rhs</code> is the same as
              the contained type of <code>*this</code>, then assigns the
              content of <code>rhs</code> into the content of
              <code>*this</code>. Otherwise, makes the content of
              <code>*this</code> a copy of the content of <code>rhs</code>,
              destroying the previous content of <code>*this</code>.<sbr/>
              如果 <code>rhs</code> 所含类型与 <code>*this</code> 所含类型相同，则将 <code>rhs</code> 
              的内容赋值到 <code>*this</code> 的内容中。否则，将 <code>*this</code> 的内容变为 
              <code>rhs</code> 内容的一份拷贝，并销毁 <code>*this</code> 原来的内容。</simpara>
          </effects>

          <throws>
            <simpara>If the contained type of <code>rhs</code> is the same as
              the contained type of <code>*this</code>, then may fail with any
              exceptions arising from the assignment of the content of
              <code>rhs</code> into the content <code>*this</code>. Otherwise,
              may fail with any exceptions arising from the copy constructor
              of the contained type of <code>rhs</code>. Also, in the event of
              insufficient memory, may fail with <code>std::bad_alloc</code>
              (<link linkend="variant.design.never-empty.problem">why?</link>).<sbr/>
              如果 <code>rhs</code> 所含类型与 <code>*this</code> 所含类型相同，则可能因将 <code>rhs</code> 
              的内容赋值到 <code>*this</code> 中而引起的异常而失败。否则，可能因 <code>rhs</code> 
              所含类型的复制构造函数所引起的异常而失败。也可能由于内存不足而抛出 <code>std::bad_alloc</code>.</simpara>
          </throws>
        </method>

        <method name="operator=">
          <type>variant &amp;</type>

          <template>
            <template-type-parameter name="T"/>
          </template>

          <parameter name="rhs">
            <paramtype>const T &amp;</paramtype>
          </parameter>

          <requires>
            <itemizedlist>
              <listitem><code>T</code> must be unambiguously convertible to
                one of the bounded types (i.e., <code>T1</code>,
                <code>T2</code>, etc.).<sbr/>
                <code>T</code> 必须明确可转换为某个有界类型(即 <code>T1</code>, <code>T2</code>, 等)。 </listitem>
              <listitem>Every bounded type must fulfill the requirements of the
                <conceptname>Assignable</conceptname>
                concept.<sbr/>
                每个有界类型都必须满足 <conceptname>Assignable</conceptname> 概念的要求。</listitem>
            </itemizedlist>
          </requires>

          <effects>
            <simpara>If the contained type of <code>*this</code> is
              <code>T</code>, then assigns <code>rhs</code> into the content
              of <code>*this</code>. Otherwise, makes the content of
              <code>*this</code> the best conversion of <code>rhs</code> to
              one of the bounded types, as determined by standard overload
              resolution rules, destroying the previous content of
              <code>*this</code>.<sbr/>
              如果 <code>*this</code> 所含类型为 T, 则将 <code>rhs</code> 赋为 <code>*this</code> 的内容。
              否则，将 <code>*this</code> 的内容变为从 <code>rhs</code> 到某个有界类型的最佳转换，
              取决于标准的重载决议规则，并销毁 <code>*this</code> 原来的内容。</simpara>
          </effects>

          <throws>
            <simpara>If the contained type of <code>*this</code> is
              <code>T</code>, then may fail with any exceptions arising from
              the assignment of <code>rhs</code> into the content
              <code>*this</code>. Otherwise, may fail with any exceptions
              arising from the conversion of <code>rhs</code> to one of the
              bounded types. Also, in the event of insufficient memory, may
              fail with <code>std::bad_alloc</code>
              (<link linkend="variant.design.never-empty.problem">why?</link>).<sbr/>
              如果 <code>*this</code> 所含类型为 T, 则可能因将 <code>rhs</code> 赋为 <code>*this</code> 的内容所引起的异常而失败。
              否则，可能因从 <code>rhs</code> 到某个有界类型的转换所引起的异常而失败。
              还可能由于内存不足而抛出 <code>std::bad_alloc</code>.</simpara>
          </throws>
        </method>

      </method-group>

      <method-group name="queries">

        <method name="which" cv="const">
          <type>int</type>

          <returns>
            <simpara>The zero-based index into the set of bounded types
              of the contained type of <code>*this</code>. (For instance, if
              called on a <code>variant&lt;int, std::string&gt;</code> object
              containing a <code>std::string</code>, <code>which()</code>
              would return <code>1</code>.)<sbr/>
              <code>*this</code> 所含类型在有界类型集合中的索引值，从零起计。
              (例如，如果从一个包含 <code>std::string</code> 的 <code>variant&lt;int, std::string&gt;</code> 
              调用，<code>which()</code> 将返回 <code>1</code>.)</simpara>
          </returns>

          <throws>Will not throw.<sbr/>
          不会抛出异常。</throws>
        </method>

        <method name="empty" cv="const">
          <type>bool</type>

          <returns>
            <simpara><code>false</code>: <code>variant</code> always contains
              exactly one of its bounded types. (See
              <xref linkend="variant.design.never-empty"/>
              for more information.)<sbr/>
              <code>false</code>: <code>variant</code> 总是刚好包含某一个有界类型。(更多信息请见 
              <xref linkend="variant.design.never-empty"/>)</simpara>
          </returns>

          <rationale>
            <simpara>Facilitates generic compatibility with
              <classname>boost::any</classname>.<sbr/>
              便于与 <classname>boost::any</classname> 的泛型兼容。</simpara>
          </rationale>

          <throws>Will not throw.<sbr/>
          不会抛出异常。</throws>
        </method>

        <method name="type" cv="const">
          <type>const std::type_info &amp;</type>

          <returns>
            <simpara><code>typeid(x)</code>, where <code>x</code> is the the
              content of <code>*this</code>.<sbr/>
              <code>typeid(x)</code>, 其中 <code>x</code> 为 <code>*this</code> 的内容。</simpara>
          </returns>

          <throws>Will not throw.<sbr/>
          不会抛出异常。</throws>
          
          <notes>
            <simpara>Not available when <code>BOOST_NO_TYPEID</code> is
              defined.<sbr/>
              当定义了 <code>BOOST_NO_TYPEID</code> 时无效。</simpara>
          </notes>
        </method>

      </method-group>
      
      <method-group name="relational">

        <overloaded-method name="operator==" cv="const">
          <purpose>Equality comparison.</purpose>

          <signature cv="const">
            <type>bool</type>
            <parameter name="rhs">
              <paramtype>const variant &amp;</paramtype>
            </parameter>
          </signature>
          
          <signature cv="const">
            <type>void</type>
            <template>
              <template-type-parameter name="U"/>
            </template>
            <parameter>
              <paramtype>const U &amp;</paramtype>
            </parameter>
          </signature>

          <notes>
            <simpara>The overload returning <code>void</code> exists only to
              prohibit implicit conversion of the operator's right-hand side
              to <code>variant</code>; thus, its use will (purposefully)
              result in a compile-time error.<sbr/>
              存在一个返回 <code>void</code> 的重载只是为了防止右操作数隐式转换为 <code>variant</code>; 
              这样的用法将(被有意地)引发一个编译错误。</simpara>
          </notes>

          <requires>
            <simpara>Every bounded type of the <code>variant</code> must
              fulfill the requirements of the
              <conceptname>EqualityComparable</conceptname>
              concept.<sbr/>
              <code>variant</code> 的每一个有界类型都必须满足 <conceptname>EqualityComparable</conceptname> 概念的要求。</simpara>
          </requires>

          <returns>
            <simpara><code>true</code> iff <code>which() == rhs.which()</code>
              <emphasis>and</emphasis>
              <code>content_this == content_rhs</code>, where
              <code>content_this</code> is the content of <code>*this</code>
              and <code>content_rhs</code> is the content of
              <code>rhs</code>.<sbr/>
              <code>true</code> 当且仅当 <code>which() == rhs.which()</code> 且 <code>content_this == content_rhs</code>, 
              其中 <code>content_this</code> 为 <code>*this</code> 的内容而 <code>content_rhs</code> 为 <code>rhs</code> 的内容。</simpara>
          </returns>
          
          <throws>
            <simpara>If <code>which() == rhs.which()</code> then may fail with
              any exceptions arising from <code>operator==(T,T)</code>, where
              <code>T</code> is the contained type of
              <code>*this</code>.<sbr/>
              如果 <code>which() == rhs.which()</code> 则可能因 <code>operator==(T,T)</code> 
              所引起的异常而失败，其中 <code>T</code> 为 <code>*this</code> 所含类型。</simpara>
          </throws>
        </overloaded-method>

        <overloaded-method name="operator&lt;">
          <purpose>LessThan comparison.</purpose>

          <signature cv="const">
            <type>bool</type>
            <parameter name="rhs">
              <paramtype>const variant &amp;</paramtype>
            </parameter>
          </signature>
          
          <signature cv="const">
            <type>void</type>
            <template>
              <template-type-parameter name="U"/>
            </template>
            <parameter>
              <paramtype>const U &amp;</paramtype>
            </parameter>
          </signature>

          <notes>
            <simpara>The overload returning <code>void</code> exists only to
              prohibit implicit conversion of the operator's right-hand side
              to <code>variant</code>; thus, its use will (purposefully)
              result in a compile-time error.<sbr/>
              存在一个返回 <code>void</code> 的重载只是为了防止右操作数隐式转换为 <code>variant</code>; 
              这样的用法将(被有意地)引发一个编译错误。</simpara>
          </notes>

          <requires>
            <simpara>Every bounded type of the <code>variant</code> must
              fulfill the requirements of the
              <conceptname>LessThanComparable</conceptname>
              concept.<sbr/>
              <code>variant</code> 的每一个有界类型都必须满足 <conceptname>LessThanComparable</conceptname> 概念的要求。</simpara>
          </requires>

          <returns>
            <simpara>If <code>which() == rhs.which()</code> then:
              <code>content_this &lt; content_rhs</code>, where
              <code>content_this</code> is the content of <code>*this</code>
              and <code>content_rhs</code> is the content of <code>rhs</code>.
              Otherwise: <code>which() &lt; rhs.which()</code>.<sbr/>
              如果 <code>which() == rhs.which()</code> 则返回：<code>content_this &lt; content_rhs</code>, 
              其中 <code>content_this</code> 为 <code>*this</code> 的内容而 <code>content_rhs</code> 为 
              <code>rhs</code> 的内容。否则返回：<code>which() &lt; rhs.which()</code>.</simpara>
          </returns>

          <throws>
            <simpara>If <code>which() == rhs.which()</code> then may fail with
              any exceptions arising from <code>operator&lt;(T,T)</code>,
              where <code>T</code> is the contained type of
              <code>*this</code>.<sbr/>
              如果 <code>which() == rhs.which()</code> 则可能因 <code>operator==(T,T)</code> 
              所引起的异常而失败，其中 <code>T</code> 为 <code>*this</code> 所含类型。</simpara>
          </throws>
        </overloaded-method>

      </method-group>
    </class>

    <function name="swap">
      <template>
        <template-type-parameter name="T1"/>
        <template-type-parameter name="T2"/>
        <template-varargs/>
        <template-type-parameter name="TN"/>
      </template>

      <type>void</type>

      <parameter name="lhs">
        <paramtype><classname>variant</classname>&lt;T1, T2, ..., TN&gt; &amp;</paramtype>
      </parameter>

      <parameter name="rhs">
        <paramtype><classname>variant</classname>&lt;T1, T2, ..., TN&gt; &amp;</paramtype>
      </parameter>

      <effects>
        <simpara>Swaps <code>lhs</code> with <code>rhs</code> by application
          of <code><methodname>variant::swap</methodname></code>.<sbr/>
          通过调用 <code><methodname>variant::swap</methodname></code> 来交换<code>lhs</code> 和 <code>rhs</code>。</simpara>
      </effects>

      <throws>
        <simpara>May fail with any exception arising from
          <code><methodname>variant::swap</methodname></code>.<sbr/>
          可能由于 <code><methodname>variant::swap</methodname></code> 抛出的任何异常而失败。</simpara>
      </throws>
    </function>

    <function name="operator&lt;&lt;">
      <purpose>Provides streaming output for <code>variant</code> types.</purpose>

      <template>
        <template-type-parameter name="ElemType"/>
        <template-type-parameter name="Traits"/>
        <template-type-parameter name="T1"/>
        <template-type-parameter name="T2"/>
        <template-varargs/>
        <template-type-parameter name="TN"/>
      </template>

      <type>std::basic_ostream&lt;ElemType,Traits&gt; &amp;</type>

      <parameter name="out">
        <paramtype>std::basic_ostream&lt;ElemType,Traits&gt; &amp;</paramtype>
      </parameter>

      <parameter name="rhs">
        <paramtype>const <classname>variant</classname>&lt;T1, T2, ..., TN&gt; &amp;</paramtype>
      </parameter>

      <requires>
        <simpara>Every bounded type of the <code>variant</code> must
          fulfill the requirements of the
          <link linkend="variant.concepts.output-streamable"><emphasis>OutputStreamable</emphasis></link>
          concept.<sbr/>
          <code>variant</code> 的每个有界类型必须满足 
          <link linkend="variant.concepts.output-streamable"><emphasis>OutputStreamable</emphasis></link> 概念的要求。</simpara>
      </requires>

      <effects>
        <simpara>Calls <code>out &lt;&lt; x</code>, where <code>x</code> is
          the content of <code>rhs</code>.<sbr/>
          调用 <code>out &lt;&lt; x</code>, 其中 <code>x</code> 为 <code>rhs</code> 的内容。</simpara>
      </effects>
      
      <notes>
        <simpara>Not available when <code>BOOST_NO_IOSTREAM</code> is
          defined.<sbr/>
          当定义了 <code>BOOST_NO_IOSTREAM</code> 时无效。</simpara>
      </notes>

    </function>
    
    <class name="make_variant_over">
      <purpose>
        <simpara>Exposes a <code>variant</code> whose bounded types are the
          elements of the given type sequence.<sbr/>
          提供一个 <code>variant</code>，其有界类型为给定类型序列的元素。</simpara>
      </purpose>

      <template>
        <template-type-parameter name="Sequence"/>
      </template>

      <typedef name="type">
        <type>variant&lt; <emphasis>unspecified</emphasis> &gt;</type>
      </typedef>

      <description>
        <simpara><code>type</code> has behavior equivalent in every respect to
          <code><classname>variant</classname>&lt; Sequence[0], Sequence[1], ... &gt;</code>
          (where <code>Sequence[<emphasis>i</emphasis>]</code> denotes the
          <emphasis>i</emphasis>-th element of <code>Sequence</code>), except
          that no upper limit is imposed on the number of types.<sbr/>
          <code>type</code> 的行为在各方面均等同于 <code><classname>variant</classname>&lt; Sequence[0], Sequence[1], ... &gt;</code> 
          (其中 <code>Sequence[<emphasis>i</emphasis>]</code> 表示 <code>Sequence</code> 的第<emphasis>i</emphasis>个元素)，
          除了一点，即类型的数量没有上限。</simpara>

        <simpara><emphasis role="bold">Notes 注</emphasis>:</simpara>
        <itemizedlist>
          <listitem><code>Sequence</code> must meet the requirements of
            <libraryname>MPL</libraryname>'s <emphasis>Sequence</emphasis>
            concept.<sbr/>
            <code>Sequence</code> 必须符合 <libraryname>MPL</libraryname> 的 <emphasis>Sequence</emphasis> 概念的要求。</listitem>
          <listitem>Due to standard conformance problems in several compilers,
            <code>make_variant_over</code> may not be supported on your
            compiler. See
            <code><macroname>BOOST_VARIANT_NO_TYPE_SEQUENCE_SUPPORT</macroname></code>
            for more information.<sbr/>
            由于在某些编译器上的标准符合问题，<code>make_variant_over</code> 可能在你的编译器上不被支持。
            更多信息请见 <code><macroname>BOOST_VARIANT_NO_TYPE_SEQUENCE_SUPPORT</macroname></code>.
</listitem>
        </itemizedlist>
      </description>
    </class>
  </namespace>
</header>