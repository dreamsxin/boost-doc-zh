<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE section PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
  "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<section id="variant.misc">
  <title>Miscellaneous Notes 杂项说明</title>

<using-namespace name="boost"/>

<section id="variant.versus-any">
  <title>Boost.Variant vs. Boost.Any</title>

  <para>As a discriminated union container, the Variant library shares many
    of the same features of the <libraryname>Any</libraryname> library.
    However, since neither library wholly encapsulates the features of the
    other, one library cannot be generally recommended for use over the
    other.<sbr/>
    作为一个可识别的联合空器，Variant 库共享了 <libraryname>Any</libraryname> 库的许多相同特性。
    不过，由于没有一个库可以完全包含另一个库的所有特性，所以没有哪一个库被推荐优于另一个库。</para>

  <para>That said, Boost.Variant has several advantages over Boost.Any,
    such as:<sbr/>
    可以说，Boost.Variant 有几个优于 Boost.Any 之处，如：

    <itemizedlist>
      <listitem>Boost.Variant guarantees the type of its content is one of a
        finite, user-specified set of types.<sbr/>
        Boost.Variant 保证其内容的类型是一个有限的、用户指定的类型。</listitem>
      <listitem>Boost.Variant provides <emphasis>compile-time</emphasis>
        checked visitation of its content. (By contrast, the current version
        of Boost.Any provides no visitation mechanism at all; but even if it
        did, it would need to be checked at run-time.)<sbr/>
        Boost.Variant 提供了对其内容的<emphasis>编译期</emphasis>检查的访问方式。
        (作为对比，当前版本的 Boost.Any 根本没有提供访问机制；即使它提供了，也只能在运行期进行检查) 
</listitem>
      <listitem>Boost.Variant enables generic visitation of its content.
        (Even if Boost.Any did provide a visitation mechanism, it would enable
        visitation only of explicitly-specified types.)<sbr/>
        Boost.Variant 可以实现对其内容的泛型访问。(即使 Boost.Any 也提供访问机制，也只能根据显式指定的类型进行访问)</listitem>
      <listitem>Boost.Variant offers an efficient, stack-based storage scheme
        (avoiding the overhead of dynamic allocation).<sbr/>
        Boost.Variant 提供了高效的、基于栈的存储方式(避免了动态分配的开销)。 </listitem>
    </itemizedlist>

  </para>

  <para>Of course, Boost.Any has several advantages over Boost.Variant,
    such as:<sbr/>
    当然，Boost.Any 也有优于 Boost.Variant 之处，如：

    <itemizedlist>
      <listitem>Boost.Any, as its name implies, allows virtually any type for
        its content, providing great flexibility.<sbr/>
        Boost.Any, 顾名思义，允许其内容为任意类型，提供了强大的灵活性。</listitem>
      <listitem>Boost.Any provides the no-throw guarantee of exception safety
        for its swap operation.<sbr/>
        Boost.Any 为其交换操作提供了无抛出的异常安全保证。</listitem>
      <listitem>Boost.Any makes little use of template metaprogramming
        techniques (avoiding potentially hard-to-read error messages and
        significant compile-time processor and memory demands).<sbr/>
        Boost.Any 只使用了少量模板元编程的技术(避免了难以阅读的错误信息和编译时对处理器和内存的大量需求)。</listitem>
    </itemizedlist>

  </para>

</section>

<section>
  <title>Portability 可移植性</title>

  <para>The library aims for 100% ANSI/ISO C++ conformance. However, this is
    strictly impossible due to the inherently non-portable nature of the
    <libraryname>Type Traits</libraryname> library's
    <code><classname>type_with_alignment</classname></code> facility. In
    practice though, no compilers or platforms have been discovered where this
    reliance on undefined behavior has been an issue.<sbr/>
    本库的目标是 100% ANSI/ISO C++ 的兼容性。但是，这是不可能的，因为 <libraryname>Type Traits</libraryname> 
    库的 <code><classname>type_with_alignment</classname></code> 工具固有的不可移植性。
    尽管在实际中，还没有发现某个编译器或平台有这方面的问题。</para>

  <para>Additionally, significant effort has been expended to ensure proper
    functioning despite various compiler bugs and other conformance problems.
    To date the library testsuite has
    been compiled and tested successfully on at least the following compilers
    for basic and advanced functionality:<sbr/>
    此外，我们还做出了重大努力，在各种编译器缺陷和标准符合度问题下保证正确的功能。
    到目前为止，本库的测试组件至少在以下编译器上编译和测试通过，测试是针对各种基本和高级功能的：

    <informaltable>
      <tgroup cols="5">
        <thead>
          <row>
            <entry></entry>
            <entry>Basic 基本</entry>
            <entry>
              <code>variant&lt;T&amp;&gt;</code>
            </entry>
            <entry>
              <link linkend="variant.tutorial.over-sequence">
                <code>make_variant_over</code>
              </link>
            </entry>
            <entry>
              <link linkend="variant.tutorial.recursive.recursive-variant">
                <code>make_recursive_variant</code>
              </link>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Borland C++ 5.5.1 and 5.6.4</entry>
            <entry>X</entry>
            <entry>X</entry>
            <entry></entry>
            <entry></entry>
          </row>
          <row>
            <entry>Comeau C++ 4.3.0</entry>
            <entry>X</entry>
            <entry>X</entry>
            <entry>X</entry>
            <entry>X</entry>
          </row>
          <row>
            <entry>GNU GCC 3.3.1</entry>
            <entry>X</entry>
            <entry>X</entry>
            <entry>X</entry>
            <entry>X</entry>
          </row>
          <row>
            <entry>GNU GCC 2.95.3</entry>
            <entry>X</entry>
            <entry>X</entry>
            <entry></entry>
            <entry>X</entry>
          </row>
          <row>
            <entry>Intel C++ 7.0</entry>
            <entry>X</entry>
            <entry></entry>
            <entry>X</entry>
            <entry>X</entry>
          </row>
          <row>
            <entry>Metrowerks CodeWarrior 8.3</entry>
            <entry>X</entry>
            <entry></entry>
            <entry>X</entry>
            <entry>X</entry>
          </row>
          <row>
            <entry>Microsoft Visual C++ 7.1</entry>
            <entry>X</entry>
            <entry>X</entry>
            <entry>X</entry>
            <entry>X</entry>
          </row>
          <row>
            <entry>Microsoft Visual C++ 6 SP5 and 7</entry>
            <entry>X</entry>
            <entry></entry>
            <entry></entry>
            <entry></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

  </para>

  <para>Finally, the current state of the testsuite in CVS may be found on the
    <ulink url="http://boost.sourceforge.net/regression-logs">Test Summary</ulink>
    page. Please note, however, that this page reports on day-to-day changes
    to inter-release code found in the Boost CVS and thus likely does not
    match the state of code found in Boost releases.<sbr/>
    最后，在 CVS 中的测试组件当前状态可以在 <ulink url="http://boost.sourceforge.net/regression-logs">Test Summary</ulink> 页找到。
    不过请注意，该网页按天报告在 Boost CVS 中的内部版本代码的变化，所以与 Boost 发布版的代码状态会不匹配。</para>

</section>

<section id="variant.troubleshooting">
  <title>Troubleshooting 疑难解答</title>

<para>Due to the heavy use of templates in the implementation of
  <code>variant</code>, it is not uncommon when compiling to encounter
  problems related to template instantiaton depth, compiler memory, etc. This
  section attempts to provide advice to common problems experienced on several
  popular compilers.<sbr/>
  由于 <code>variant</code> 的实现大量使用了模板，所以常常会出现与模板实例化深度、编译器内存等有关的问题。
  本节试图对在常用编译器上会遇到的常见问题提出一些建议。</para>
  
<para>(This section is still in progress, with additional advice/feedback
  welcome. Please post to the Boost-Users list with any useful experiences you
  may have.)<sbr/>
  (本节还在完成中，欢迎提出建议和反馈。请将任何有用的经验发送到 Boost-Users 列表)。</para>

  <section id="variant.troubleshooting.template-depth">
    <title>&quot;Template instantiation depth exceeds maximum&quot; &quot;模板实例化深度超出最大值&quot;</title>
    
    <section id="variant.troubleshooting.template-depth.gcc">
      <title>GNU GCC</title>
      <para>The compiler option
        <code>-ftemplate-depth-<emphasis>NN</emphasis></code> can increase the
        maximum allowed instantiation depth. (Try
        <code>-ftemplate-depth-50</code>.)<sbr/>
        编译器选项 <code>-ftemplate-depth-<emphasis>NN</emphasis></code> 可以增加允许的实例化深度最大值。
        (试一下 <code>-ftemplate-depth-50</code>.)</para>
    </section>
  </section>
  
  <section id="variant.troubleshooting.compiler-memory">
    <title>&quot;Internal heap limit reached&quot; &quot;达到内部堆的上限&quot;</title>
    
    <section id="variant.troubleshooting.compiler-memory.msvc">
      <title>Microsoft Visual C++</title>
      <para>The compiler option <code>/Zm<emphasis>NNN</emphasis></code> can
        increase the memory allocation limit. The <code>NNN</code> is a
        scaling percentage (i.e., <code>100</code> denotes the default limit).
        (Try <code>/Zm200</code>.)<sbr/>
        编译器选项 <code>/Zm<emphasis>NNN</emphasis></code> 可以增加内存分配的上限。
        <code>NNN</code> 为缩放的百分比(即 <code>100</code> 表示缺省上限)。(试一下 <code>/Zm200</code>.)</para>
    </section>
  </section>

</section>

<section id="variant.ack">
  <title>Acknowledgments 鸣谢</title>

<para>Eric Friedman and Itay Maman designed the initial submission; Eric was
  the primary implementer.</para>

<para>Eric is also the library maintainer and has expanded upon the initial
  submission -- adding
  <code><classname>make_recursive_variant</classname></code>,
  <code><classname>make_variant_over</classname></code>, support for
  reference content, etc.</para>

<para>Andrei Alexandrescu's work in
    [<link linkend="variant.refs.ale01a">Ale01a</link>]
and
    [<link linkend="variant.refs.ale02">Ale02</link>]
inspired the library's design.</para>

<para>Jeff Garland was the formal review manager.</para>

<para>Douglas Gregor,
Dave Abrahams,
Anthony Williams,
Fernando Cacciola,
Joel de Guzman,
Dirk Schreib,
Brad King,
Giovanni Bajo,
Eugene Gladyshev,
and others provided helpful feedback and suggestions to refine the semantics,
interface, and implementation of the library.</para>

</section>

</section>