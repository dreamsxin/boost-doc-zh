<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
  "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<section id="variant.tutorial.advanced">
  <title>Advanced Topics 高级议题</title>

<using-namespace name="boost"/>
<using-class name="boost::variant"/>

<para>This section discusses several features of the library often required
  for advanced uses of <code>variant</code>. Unlike in the above section, each
  feature presented below is largely independent of the others. Accordingly,
  this section is not necessarily intended to be read linearly or in its
  entirety.<sbr/>
  本节将讨论本库的几个特性，这些特性通常在 <code>variant</code> 的高级用法中使用。
  与前面一节不同，以下介绍的各个特性与其它特性间互不依赖。因此，这一节不需要按顺序阅读或者全部读完。

</para>

<section id="variant.tutorial.preprocessor">
  <title>Preprocessor macros 预处理器宏</title>

  <para>While the <code>variant</code> class template's variadic parameter
    list greatly simplifies use for specific instantiations of the template,
    it significantly complicates use for generic instantiations. For instance,
    while it is immediately clear how one might write a function accepting a
    specific <code>variant</code> instantiation, say
    <code>variant&lt;int, std::string&gt;</code>, it is less clear how one
    might write a function accepting any given <code>variant</code>.<sbr/>
    虽然 <code>variant</code> 类模板的可变长度参数列表大大简化了该模板在使用时的实例化，但是也使得该模板的泛型实例化变得复杂了。
    例如，如何编写一个接受某个特定 <code>variant</code> 实例的函数是很显然的，如 <code>variant&lt;int, std::string&gt;</code>, 
    但是如何编写一个接受任意 <code>variant</code> 的函数就不太明显了。</para>

  <para>Due to the lack of support for true variadic template parameter lists
    in the C++98 standard, the preprocessor is needed. While the
    <libraryname>Preprocessor</libraryname> library provides a general and
    powerful solution, the need to repeat
    <code><macroname>BOOST_VARIANT_LIMIT_TYPES</macroname></code>
    unnecessarily clutters otherwise simple code. Therefore, for common
    use-cases, this library provides its own macro
    <code><emphasis role="bold"><macroname>BOOST_VARIANT_ENUM_PARAMS</macroname></emphasis></code>.<sbr/>
    由于C++98标准在支持真正的可变长度模板参数方面的不足，所以这里需要预处理器。
    虽然 <libraryname>Preprocessor</libraryname> 库提供了通用和强大的解决方法，但是重复 
    <code><macroname>BOOST_VARIANT_LIMIT_TYPES</macroname></code> 次对于简单代码而言还是过于混乱。
    因此，本库为最常见的用例提供了自己的宏 
    <code><emphasis role="bold"><macroname>BOOST_VARIANT_ENUM_PARAMS</macroname></emphasis></code>.

</para>

  <para>This macro simplifies for the user the process of declaring 
    <code>variant</code> types in function templates or explicit partial
    specializations of class templates, as shown in the following:<sbr/>
    该宏简化了用户在函数模板或类模板的显式偏特化中声明 <code>variant</code> 类型的方式，举例如下：

<programlisting>// general cases
template &lt;typename T&gt; void some_func(const T &amp;);
template &lt;typename T&gt; class some_class;

// function template overload
template &lt;<macroname>BOOST_VARIANT_ENUM_PARAMS</macroname>(typename T)&gt;
void some_func(const <classname>boost::variant</classname>&lt;<macroname>BOOST_VARIANT_ENUM_PARAMS</macroname>(T)&gt; &amp;);

// explicit partial specialization
template &lt;<macroname>BOOST_VARIANT_ENUM_PARAMS</macroname>(typename T)&gt;
class some_class&lt; <classname>boost::variant</classname>&lt;<macroname>BOOST_VARIANT_ENUM_PARAMS</macroname>(T)&gt; &gt;;</programlisting>

  </para>

</section>

<section id="variant.tutorial.over-sequence">
  <title>Using a type sequence to specify bounded types 用一个类型序列来指定有界类型</title>

  <para>While convenient for typical uses, the <code>variant</code> class
    template's variadic template parameter list is limiting in two significant
    dimensions. First, due to the lack of support for true variadic template 
    parameter lists in C++, the number of parameters must be limited to some
    implementation-defined maximum (namely,
    <code><macroname>BOOST_VARIANT_LIMIT_TYPES</macroname></code>).
    Second, the nature of parameter lists in general makes compile-time
    manipulation of the lists excessively difficult.<sbr/>
    虽然很方便使用，但是 <code>variant</code> 类模板的变长模板参数列表还是在两方面在明显的限制。
    首先，由于C++在支持真正的变长模板参数方面的不足，参数的数量肯定要受限于某个实现定义的最大值
    (即 <code><macroname>BOOST_VARIANT_LIMIT_TYPES</macroname></code>)。
    其次，参数列表本身的性质通常会使得列表的编译期操作非常困难。</para>

  <para>To solve these problems,
    <code>make_variant_over&lt; <emphasis>Sequence</emphasis> &gt;</code>
    exposes a <code>variant</code> whose bounded types are the elements of
    <code>Sequence</code> (where <code>Sequence</code> is any type fulfilling
    the requirements of <libraryname>MPL</libraryname>'s
    <emphasis>Sequence</emphasis> concept). For instance,<sbr/>
    为了解决这些问题，<code>make_variant_over&lt; <emphasis>Sequence</emphasis> &gt;</code> 可以以 <code>Sequence</code> 的元素
    (这里的 <code>Sequence</code> 是满足 <libraryname>MPL</libraryname> 的 <emphasis>Sequence</emphasis> 概念的任意类型)
    作为一个 <code>variant</code> 的有界类型。例如，

<programlisting>typedef <classname>mpl::vector</classname>&lt; std::string &gt; types_initial;
typedef <classname>mpl::push_front</classname>&lt; types_initial, int &gt;::type types;

<classname>boost::make_variant_over</classname>&lt; types &gt;::type v1;</programlisting>

    behaves equivalently to<sbr/>
    等同于

<programlisting><classname>boost::variant</classname>&lt; int, std::string &gt; v2;</programlisting>

  </para>

  <para><emphasis role="bold">Portability</emphasis>: Unfortunately, due to
    standard conformance issues in several compilers,
    <code>make_variant_over</code> is not universally available. On these
    compilers the library indicates its lack of support for the syntax via the
    definition of the preprocessor symbol
    <code><macroname>BOOST_VARIANT_NO_TYPE_SEQUENCE_SUPPORT</macroname></code>.<sbr/>
    <emphasis role="bold">可移植性</emphasis>：不幸的是，由于某些编译器不完全符合标准，
    <code>make_variant_over</code> 并不是在哪都可以用。在这些编译器上，本库以预处理器符号 
    <code><macroname>BOOST_VARIANT_NO_TYPE_SEQUENCE_SUPPORT</macroname></code> 的定义来表明编译器语法支持的不足。</para>

</section>

<section id="variant.tutorial.recursive">
  <title>Recursive <code>variant</code> types  递归的 <code>variant</code> 类型</title>

  <para>Recursive types facilitate the construction of complex semantics from
    simple syntax. For instance, nearly every programmer is familiar with the
    canonical definition of a linked list implementation, whose simple
    definition allows sequences of unlimited length:<sbr/>
    递归类型可以用简单的语法来实现复杂的语义结构。
    例如，几乎所有程序员都熟悉规范的链表定义，其简单的定义可以实现无限长度的序列：

<programlisting>template &lt;typename T&gt;
struct list_node
{
    T data;
    list_node * next;
};</programlisting>

  </para>

  <para>The nature of <code>variant</code> as a generic class template
    unfortunately precludes the straightforward construction of recursive
    <code>variant</code> types. Consider the following attempt to construct
    a structure for simple mathematical expressions:<sbr/>
    由于 <code>variant</code> 本身是一个泛型的类模板，这样就排除了简单地构造递归 <code>variant</code> 类型的可能。
    想象一下，以下要构造一个简单的数学表达式的结构：

    <programlisting>struct add;
struct sub;
template &lt;typename OpTag&gt; struct binary_op;

typedef <classname>boost::variant</classname>&lt;
      int
    , binary_op&lt;add&gt;
    , binary_op&lt;sub&gt;
    > expression;

template &lt;typename OpTag&gt;
struct binary_op
{
    expression left;  // <emphasis>variant instantiated here...</emphasis>
    expression right;

    binary_op( const expression &amp; lhs, const expression &amp; rhs )
        : left(lhs), right(rhs)
    {
    }

}; // <emphasis>...but binary_op not complete until here!</emphasis></programlisting>

  </para>

  <para>While well-intentioned, the above approach will not compile because
    <code>binary_op</code> is still incomplete when the <code>variant</code>
    type <code>expression</code> is instantiated. Further, the approach suffers
    from a more significant logical flaw: even if C++ syntax were different
    such that the above example could be made to &quot;work,&quot;
    <code>expression</code> would need to be of infinite size, which is
    clearly impossible.<sbr/>
    虽然是出于好意的，但以上方法并不能通过编译，因为 <code>binary_op</code> 在 <code>variant</code> 类型 
    <code>expression</code> 实例化时尚未是完整的。更进一步，该方法还有一个更为重大的逻辑缺陷：
    即使C++语法可以让以上例子&quot;通过&quot;，<code>expression</code> 仍将会具有无穷大的大小，这显然是不可能的。</para>

  <para>To overcome these difficulties, <code>variant</code> includes special
    support for the
    <code><classname>boost::recursive_wrapper</classname></code> class
    template, which breaks the circular dependency at the heart of these
    problems. Further,
    <code><classname>boost::make_recursive_variant</classname></code> provides
    a more convenient syntax for declaring recursive <code>variant</code>
    types. Tutorials for use of these facilities is described in
    <xref linkend="variant.tutorial.recursive.recursive-wrapper"/> and
    <xref linkend="variant.tutorial.recursive.recursive-variant"/>.<sbr/>
    为了克服这些困难，<code>variant</code> 含有对 <code><classname>boost::recursive_wrapper</classname></code> 
    类模板的特殊支持，它可以打破作为问题核心的循环依赖。更进一步，
    <code><classname>boost::make_recursive_variant</classname></code> 还提供了一个更为方便的语法来声明递归 
    <code>variant</code> 类型。有关这两个工具的用法分别在 <xref linkend="variant.tutorial.recursive.recursive-wrapper"/> 和
    <xref linkend="variant.tutorial.recursive.recursive-variant"/> 中讲述。</para>

<section id="variant.tutorial.recursive.recursive-wrapper">
  <title>Recursive types with <code>recursive_wrapper</code>  <code>recursive_wrapper</code>的递归类型</title>

  <para>The following example demonstrates how <code>recursive_wrapper</code>
    could be used to solve the problem presented in
    <xref linkend="variant.tutorial.recursive"/>:<sbr/>
    以下例子示范了如何用 <code>recursive_wrapper</code> 来解决在 <xref linkend="variant.tutorial.recursive"/> 中所说的问题：

    <programlisting>typedef <classname>boost::variant</classname>&lt;
      int
    , <classname>boost::recursive_wrapper</classname>&lt; binary_op&lt;add&gt; &gt;
    , <classname>boost::recursive_wrapper</classname>&lt; binary_op&lt;sub&gt; &gt;
    &gt; expression;</programlisting>

  </para>

  <para>Because <code>variant</code> provides special support for
    <code>recursive_wrapper</code>, clients may treat the resultant
    <code>variant</code> as though the wrapper were not present. This is seen
    in the implementation of the following visitor, which calculates the value
    of an <code>expression</code> without any reference to
    <code>recursive_wrapper</code>:<sbr/>
    因为 <code>variant</code> 提供了对 <code>recursive_wrapper</code> 的特殊支持，用户可以将得到的 <code>variant</code> 
    视为没有 wrapper 的一样。这可以在以下访问者的实现中看到，该访问者计算一个 <code>expression</code> 的值而无需引用 
    <code>recursive_wrapper</code>：

    <programlisting>class calculator : public <classname>boost::static_visitor&lt;int&gt;</classname>
{
public:

    int operator()(int value) const
    {
        return value;
    }

    int operator()(const binary_op&lt;add&gt; &amp; binary) const
    {
        return <functionname>boost::apply_visitor</functionname>( calculator(), binary.left )
             + <functionname>boost::apply_visitor</functionname>( calculator(), binary.right );
    }

    int operator()(const binary_op&lt;sub&gt; &amp; binary) const
    {
        return <functionname>boost::apply_visitor</functionname>( calculator(), binary.left )
             - <functionname>boost::apply_visitor</functionname>( calculator(), binary.right );
    }

};</programlisting>

  </para>
  
  <para>Finally, we can demonstrate <code>expression</code> in action:<sbr/>
  最后，我们可以示范 <code>expression</code> 如何运作：
  
    <programlisting>void f()
{
    // result = ((7-3)+8) = 12
    expression result(
        binary_op&lt;add&gt;(
            binary_op&lt;sub&gt;(7,3)
          , 8
          )
      );

    assert( <functionname>boost::apply_visitor</functionname>(calculator(),result) == 12 );
}</programlisting>

  </para>

</section>

<section id="variant.tutorial.recursive.recursive-variant">
  <title>Recursive types with <code>make_recursive_variant</code>  <code>make_recursive_variant</code>的递归类型</title>

  <para>For some applications of recursive <code>variant</code> types, a user
    may be able to sacrifice the full flexibility of using
    <code>recursive_wrapper</code> with <code>variant</code> for the following
    convenient syntax:<sbr/>
    在某些递归 <code>variant</code> 类型的应用中，用户也许可以为了以下简便的语法而牺牲使用 
    <code>recursive_wrapper</code> 的灵活性：

<programlisting>typedef <classname>boost::make_recursive_variant</classname>&lt;
      int
    , std::vector&lt; boost::recursive_variant_ &gt;
    &gt;::type int_tree_t;</programlisting>

  </para>

  <para>Use of the resultant <code>variant</code> type is as expected:<sbr/>
  可以象你所想的那样使用得到的 <code>variant</code> 类型：

<programlisting>std::vector&lt; int_tree_t &gt; subresult;
subresult.push_back(3);
subresult.push_back(5);

std::vector&lt; int_tree_t &gt; result;
result.push_back(1);
result.push_back(subresult);
result.push_back(7);

int_tree_t var(result);</programlisting>

  </para>

  <para>To be clear, one might represent the resultant content of
    <code>var</code> as <code>( 1 ( 3 5 ) 7 )</code>.<sbr/>
    为清楚起见，你可以将得到的 <code>var</code> 表示为 <code>( 1 ( 3 5 ) 7 )</code>.</para>

  <para>Finally, note that a type sequence can be used to specify the bounded
    types of a recursive <code>variant</code> via the use of
    <code><classname>boost::make_recursive_variant_over</classname></code>,
    whose semantics are the same as <code>make_variant_over</code> (which is
    described in <xref linkend="variant.tutorial.over-sequence"/>).<sbr/>
    最后要注意的是，可以通过 <code><classname>boost::make_recursive_variant_over</classname></code> 
    用一个类型序列来指定递归 <code>variant</code> 的有界类型，其语法类似于 make_variant_over 
    (在 <xref linkend="variant.tutorial.over-sequence"/> 中有说明)。</para>

  <para><emphasis role="bold">Portability</emphasis>: Unfortunately, due to
    standard conformance issues in several compilers,
    <code>make_recursive_variant</code> is not universally supported. On these
    compilers the library indicates its lack of support via the definition
    of the preprocessor symbol
    <code><macroname>BOOST_VARIANT_NO_FULL_RECURSIVE_VARIANT_SUPPORT</macroname></code>.
    Thus, unless working with highly-conformant compilers, maximum portability
    will be achieved by instead using <code>recursive_wrapper</code>, as
    described in
    <xref linkend="variant.tutorial.recursive.recursive-wrapper"/>.<sbr/>
    <emphasis role="bold">可移植性</emphasis>：不幸的是，由于某些编译器不完全符合标准，<code>make_recursive_variant</code> 
    并不是在哪都可以用。在这些编译器上，本库以预处理器符号 
    <code><macroname>BOOST_VARIANT_NO_FULL_RECURSIVE_VARIANT_SUPPORT</macroname></code> 的定义来表明编译器语法支持的不足。
    因此，除非是使用高标准的编译器，否则使用 <code>recursive_wrapper</code> 可以得到最好的可移植性，就象在 
    <xref linkend="variant.tutorial.recursive.recursive-wrapper"/> 中所说的那样。</para>

</section>

</section> <!--/tutorial.recursive-->

<section id="variant.tutorial.binary-visitation">
  <title>Binary visitation 二元访问方式</title>

  <para>As the tutorial above demonstrates, visitation is a powerful mechanism
    for manipulating <code>variant</code> content. Binary visitation further
    extends the power and flexibility of visitation by allowing simultaneous
    visitation of the content of two different <code>variant</code>
    objects.<sbr/>
    就象前面的例子所展现的，访问方式是一种对 <code>variant</code> 的内容进行操作的强大机制。
    二元访问方式进一步扩展了访问方式的能力和灵活性，它允许同时访问两个不同 <code>variant</code> 对象中的内容。</para>

  <para>Notably this feature requires that binary visitors are incompatible
    with the visitor objects discussed in the tutorial above, as they must
    operate on two arguments. The following demonstrates the implementation of
    a binary visitor:<sbr/>
    注意，这一特性要求二元访问者与前面所讨论的访问者对象是不兼容的，二元访问者必须操作两个参数。
    以下例子示范了一个二元访问者的实现：

<programlisting>class are_strict_equals
    : public <classname>boost::static_visitor</classname>&lt;bool&gt;
{
public:

    template &lt;typename T, typename U&gt;
    bool operator()( const T &amp;, const U &amp; ) const
    {
        return false; // cannot compare different types
    }

    template &lt;typename T&gt;
    bool operator()( const T &amp; lhs, const T &amp; rhs ) const
    {
        return lhs == rhs;
    }

};</programlisting>

  </para>

  <para>As expected, the visitor is applied to two <code>variant</code>
    arguments by means of <code>apply_visitor</code>:<sbr/>
    如你所想，这个访问者要通过 <code>apply_visitor</code> 应用于两个 <code>variant</code> 参数上：

<programlisting><classname>boost::variant</classname>&lt; int, std::string &gt; v1( "hello" );

<classname>boost::variant</classname>&lt; double, std::string &gt; v2( "hello" );
assert( <functionname>boost::apply_visitor</functionname>(are_strict_equals(), v1, v2) );

<classname>boost::variant</classname>&lt; int, const char * &gt; v3( "hello" );
assert( !<functionname>boost::apply_visitor</functionname>(are_strict_equals(), v1, v3) );</programlisting>

  </para>

  <para>Finally, we must note that the function object returned from the
    &quot;delayed&quot; form of
    <code><functionname>apply_visitor</functionname></code> also supports
    binary visitation, as the following demonstrates:<sbr/>
    最后，我们必须说明，由 <code><functionname>apply_visitor</functionname></code> 
    的&quot;延迟&quot;形式所返回的函数对象也可以支持二元访问方式，如下所示：

<programlisting>typedef <classname>boost::variant</classname>&lt;double, std::string&gt; my_variant;

std::vector&lt; my_variant &gt; seq1;
seq1.push_back("pi is close to ");
seq1.push_back(3.14);

std::list&lt; my_variant &gt; seq2;
seq2.push_back("pi is close to ");
seq2.push_back(3.14);

are_strict_equals visitor;
assert( std::equal(
      seq1.begin(), seq1.end(), seq2.begin()
    , <functionname>boost::apply_visitor</functionname>( visitor )
    ) );</programlisting>

  </para>

</section>

</section>
