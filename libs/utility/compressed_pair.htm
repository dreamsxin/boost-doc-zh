<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <title>Header</title>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta name="Template" content="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
  <meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
</head>

<body style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);" link="#0000ff" vlink="#800080">
 <boostcompressed_pair.hpp>
</boostcompressed_pair.hpp>
<h2><img src="../../boost.png" height="86" width="276">头文件 &lt;<a href="../../boost/detail/compressed_pair.hpp">boost/compressed_pair.hpp</a>&gt;</h2>

<p>文件 &lt;boost/compressed_pair.hpp&gt; 中的所有内容都定义在 boost
名称空间中。</p>
 
<p>类 compressed pair 和 std::pair
非常相似，但是有一点不同：当这个类的任何一个模板参数为空类（empty
classes），编译器就会应用&ldquo;空基类优化（empty base-class optimisation）&rdquo;来压缩 pair 的大小。</p>

<pre>template &lt;class T1, class T2&gt;<br>class compressed_pair<br>{<br>public:<br>	typedef T1 first_type;<br>	typedef T2 second_type;<br>	typedef typename call_traits&lt;first_type&gt;::param_type first_param_type;<br>	typedef typename call_traits&lt;second_type&gt;::param_type second_param_type;<br>	typedef typename call_traits&lt;first_type&gt;::reference first_reference;<br>	typedef typename call_traits&lt;second_type&gt;::reference second_reference;<br>	typedef typename call_traits&lt;first_type&gt;::const_reference first_const_reference;<br>	typedef typename call_traits&lt;second_type&gt;::const_reference second_const_reference;<br><br>	compressed_pair() : base() {}<br>	compressed_pair(first_param_type x, second_param_type y);<br>	explicit compressed_pair(first_param_type x);<br>	explicit compressed_pair(second_param_type y);<br><br>	compressed_pair&amp; operator=(const compressed_pair&amp;);<br><br>	first_reference first();<br>	first_const_reference first() const;<br><br>	second_reference second();<br>	second_const_reference second() const;<br><br>	void swap(compressed_pair&amp; y);<br>};</pre>
<p>pair
的两个成员可以通过方法 first() 和 last()
来访问。注意，对于有些模板参数类型来说，并非这两个方法都能被实具现化。具体来说，compressed_pair
可以使用引用类型和数组类型来具现化，但是并非所有的构造函数都一定可用。如果类型 T1 和 T2
是同一种类型，那么就只有一个接收单个参数的构造函数，这个构造函数把 pair 中的两个值都初始化为参数的值。</p>
 
<p>注
意，如果有一个成员是 POD(Plain Old Data) 类型，那么这个成员就不会被默认构造函数初始化为&ldquo;0&rdquo;，如果你需要给它指定一个初始值的话，请调用有参数的构造函数。</p>

<p>注意，compressed_pair 不能使用 union 类型作为模板参数来具现化，除非编译器支持
boost::is_union，或 boost::is_union 针对该 union 类型进行了偏特化。&nbsp;</p>

<p>最后，使用 Visual C++ 6
的用户需要注意：如果任何一个模板参数为&ldquo;空&rdquo;类型，那么对该成员赋值将导致内存被破坏，除非为该&ldquo;空白
&rdquo;类定义一个什么都不做的赋值运算符。这是因为 VC 6 在生成隐含的复制运算符时存在bug。<br>
</p>

<h3>鸣谢</h3>

<p>Based on contributions by Steve Cleary, Beman Dawes, Howard Hinnant and John 
Maddock.</p>

<p>Maintained by <a href="mailto:john@johnmaddock.co.uk">John Maddock</a>, the 
latest version of this file can be found at <a href="http://www.boost.org/">www.boost.org</a>, and the boost discussion list at 
<a href="http://www.yahoogroups.com/list/boost">www.yahoogroups.com/list/boost</a>.</p>

<hr>

<p>Revised <!--webbot bot="Timestamp" S-Type="EDITED" S-Format="%d %B %Y" startspan -->07 
November 2007<!--webbot bot="Timestamp" endspan i-checksum="40338" --></p>

<p>&copy; Copyright Beman Dawes, 2000.</p>

<p>Distributed under the Boost Software License, Version 1.0. See <a href="http://www.boost.org/LICENSE_1_0.txt">www.boost.org/LICENSE_1_0.txt</a><br>
&nbsp;</p>

</body>
</html>
