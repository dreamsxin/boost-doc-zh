<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>

  
  <meta http-equiv="Content-Language" content="en-us">

  
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">


  
  <title>Generator Iterator Adaptor Documentation</title>
</head>



<body bgcolor="#ffffff" text="#000000">

  <img src="../../boost.png" alt="boost.png (6897 bytes)" align="middle" height="86" width="277">

  
<h1>生成器迭代器适配器 Generator Iterator Adaptor</h1>


  
<p>在头文件 <a href="../../boost/generator_iterator.hpp">boost/generator_iterator.hpp</a> 中定义<a href="../../boost/generator_iterator.hpp"></a></p>


  
<p>生成器迭代器适配器使得我们可以更容易地从无参函数和函数对象创建定制的输入迭代器。该适配器接受一个
  <a href="http://www.sgi.com/tech/stl/Generator.html">生成器</a> 并创建一个 <a href="http://www.sgi.com/tech/stl/InputIterator.html">输入迭代器</a>。每次递增将从该生成器中取出一项并使之可以通过解引用来提取。这种迭代器的动机在于，有些概念可以更为自然地表示为生成器，而多数 STL
  算法要求的是迭代器。<a href="../random/index.html">随机数</a> 库就是这样的一个例子。</p>


  
<h2>概要</h2>


  
<blockquote>
    
  <pre>namespace boost {<br>  template &lt;class Generator&gt;<br>  class generator_iterator_policies;<br><br>  template &lt;class Generator&gt;<br>  class generator_iterator_generator;<br><br>  template &lt;class Generator&gt;<br>  typename generator_iterator_generator&lt;Generator&gt;::type<br>  make_generator_iterator(Generator &amp; gen);<br>}<br></pre>

  </blockquote>

  
<hr>

  
<h2>生成器迭代器适配器类</h2>


  
<p>类 generator_iterator_generator 是一个辅助类，它的目的是构造一个生成器迭代器类型。该类的模板参数是被包装的
Generator
函数对象类型。生成器迭代器适配器只保存该函数对象的一个引用(或指针)，因此该函数对象必须比从它所构造的生成器迭代器适配器生命周期更长。</p>

  
<pre>template &lt;class Generator&gt;<br>class generator_iterator_generator<br>{<br>public:<br>  typedef <i>unspecified</i> type; // 得到的生成器迭代器类型<br>}<br></pre>


  
<h3>模板参数</h3>


  
<table summary="" border="1">

    <tbody>
    <tr>

      <th>参数</th>


      <th>说明</th>

    </tr>


    <tr>

      <td><tt><a href="http://www.sgi.com/tech/stl/Generator.html">Generator</a></tt></td>


      <td>被包装的生成器(无参函数对象)。该函数的返回类型被定义为 <tt>Generator::result_type</tt>. 该函数对象必须符合 <a href="http://www.sgi.com/tech/stl/Generator.html">Generator</a>.</td>

    </tr>

  
  </tbody>
</table>


  
<h3>概念模型</h3>


  
<p>生成器迭代器类符合 <a href="http://www.sgi.com/tech/stl/InputIterator.html">输入迭代器</a>。</p>


  
<h3>成员</h3>


  
<p>生成器迭代器实现了 <a href="http://www.sgi.com/tech/stl/InputIterator.html">输入迭代器</a> 概念所要求的成员函数和操作符。<br>
</p>

  
<hr>

  
<h2><a name="make_generator_iterator" id="make_generator_iterator">生成器迭代器的对象生成器</a></h2>


  
<p>函数 <tt>make_generator_iterator()</tt> 提供了一个便利的方法来创建生成器迭代器对象。该函数让用户无须显式写出迭代器的类型。</p>


  
<blockquote>
    
  <pre>template &lt;class Generator&gt;<br>typename generator_iterator_generator&lt;Generator&gt;::type<br>make_generator_iterator(Generator &amp; gen);<br></pre>

  </blockquote>

  
<hr>

  
<h3>例子</h3>


  
<p>以下程序示范了 <code>generator_iterator</code>
  如何将一个生成器转换为一个输入迭代器。</p>


  
<blockquote>
    
  <pre>#include &lt;iostream&gt;<br>#include &lt;boost/generator_iterator.hpp&gt;<br><br>class my_generator<br>{<br>public:<br>  typedef int result_type;<br>  my_generator() : state(0) { }<br>  int operator()() { return ++state; }<br>private:<br>  int state;<br>};<br><br>int main()<br>{<br>  my_generator gen;<br>  boost::generator_iterator_generator&lt;my_generator&gt;::type it = boost::make_generator_iterator(gen);<br>  for(int i = 0; i &lt; 10; ++i, ++it)<br>    std::cout &lt;&lt; *it &lt;&lt; std::endl;<br>}<br></pre>

  </blockquote>

  
<hr>

  
<p><a href="http://validator.w3.org/check?uri=referer"><img src="http://www.w3.org/Icons/valid-html401" alt="Valid HTML 4.01 Transitional" border="0" height="31" width="88"></a></p>


  
<p>Revised 
  <!--webbot bot="Timestamp" s-type="EDITED" s-format="%d %B, %Y" startspan -->05 December, 2006<!--webbot bot="Timestamp" endspan i-checksum="38516" --></p>


  
<p><i>Copyright &copy; 2001 <a href="http://www.boost.org/people/jens_maurer.htm">Jens Maurer</a></i></p>


  
<p><i>Distributed under the Boost Software License, Version 1.0. (See
  accompanying file <a href="../../LICENSE_1_0.txt">LICENSE_1_0.txt</a> or
  copy at <a href="http://www.boost.org/LICENSE_1_0.txt">http://www.boost.org/LICENSE_1_0.txt</a>)</i></p>

</body>
</html>
