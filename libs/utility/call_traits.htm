<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>




  
  
  
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">




  
  
  
  <meta name="Template" content="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">




  
  
  
  <meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">




  
  
  
  <title>Call Traits</title>
</head>


<body bgcolor="#ffffff" link="#0000ff" text="#000000" vlink="#800080">





<h1><img src="../../boost.png" height="86" width="276">头文件
&lt;<a href="../../boost/detail/call_traits.hpp">boost/call_traits.hpp</a>&gt;</h1>





<p>&lt;boost/call_traits.hpp&gt; 的所有内容定义于名字空间 boost 中。</p>





<p>模板类 call_traits&lt;T&gt; 封装了
"最好的" 方法来传递某种类型 T 的参数给函数，或从函数返回，它由下表所列的一组 typedef 定义所组成。call_traits 的目的是，确保不会发生象 "<a href="#refs">引用的引用</a>"
这样的情况，而且参数以最高效的方式传递(请见 <a href="#examples">例子</a>)。如果你现在是使用左边所定义的类型，那么请将它替换为右边所定义的 call_traits 类型。 </p>





<p>注意，对于不支持偏特化或成员模板的编译器，不能从使用 call_traits 中得到好处：这种情形下 call_traits 定义的类型总是与现有类型保持一致。另外如果编译器只支持成员模板而不支持偏特化(如 Visual C++ 6)，那么
call_traits 不能用于数组类型(虽然它可以用于解决引用的引用这类问题)。</p>





<table border="0" cellpadding="7" cellspacing="1" width="797">




    <tbody>



    <tr>




        <td bgcolor="#008080" valign="top" width="17%">
      
      
      
      <p align="center">现有的习惯</p>




        </td>




        <td bgcolor="#008080" valign="top" width="35%">
      
      
      
      <p align="center">call_traits 等价物</p>




        </td>




        <td bgcolor="#008080" valign="top" width="32%">
      
      
      
      <p align="center">说明</p>




        </td>




        <td bgcolor="#008080" valign="top" width="16%">
      
      
      
      <p align="center">备注</p>




        </td>




    </tr>




    <tr>




        <td valign="top" width="17%">
      
      
      
      <p align="center">T<br>




        (以值返回)</p>




        </td>




        <td valign="top" width="35%">
      
      
      
      <p align="center"><code>call_traits&lt;T&gt;::value_type</code></p>




        </td>




        <td valign="top" width="32%">定义一个类型，表示类型 T 的"值"。用于以值返回的函数，或保存类型 T 的值。</td>




        <td valign="top" width="16%">
      
      
      
      <p align="center">2</p>




        </td>




    </tr>




    <tr>




        <td valign="top" width="17%">
      
      
      
      <p align="center">T&amp;<br>




        (返回值)</p>




        </td>




        <td valign="top" width="35%">
      
      
      
      <p align="center"><code>call_traits&lt;T&gt;::reference</code></p>




        </td>




        <td valign="top" width="32%">定义一个类型，表示类型 T 的引用。用于返回 T&amp; 的函数。</td>




        <td valign="top" width="16%">
      
      
      
      <p align="center">1</p>




        </td>




    </tr>




    <tr>




        <td valign="top" width="17%">
      
      
      
      <p align="center">const
        T&amp;<br>




        (返回值)</p>




        </td>




        <td valign="top" width="35%">
      
      
      
      <p align="center"><code>call_traits&lt;T&gt;::const_reference</code></p>




        </td>




        <td valign="top" width="32%">定义一个类型，表示类型 T 的常量引用。用于返回 const T&amp; 函数。</td>




        <td valign="top" width="16%">
      
      
      
      <p align="center">1</p>




        </td>




    </tr>




    <tr>




        <td valign="top" width="17%">
      
      
      
      <p align="center">const
        T&amp;<br>




        (函数参数)</p>




        </td>




        <td valign="top" width="35%">
      
      
      
      <p align="center"><code>call_traits&lt;T&gt;::param_type</code></p>




        </td>




        <td valign="top" width="32%">定义一个类型，表示传递一个类型 T 的参数给函数的 "最好" 方法。</td>




        <td valign="top" width="16%">
      
      
      
      <p align="center">1,3</p>




        </td>




    </tr>




  
  
  
  </tbody>
</table>





<p>备注：</p>





<ol>




    <li>如果 T 已经是一个引用类型，则不会发生 call_traits 被定义为 <a href="#refs">引用的引用</a> (需要偏特化)。</li>




    <li>如果 T 是一个数组类型，则 call_traits 定义 <code>value_type</code>
        为 "类型的常量指针" 而不是
        "类型的数组" (需要偏特化)。注意，如果你将 value_type 用作一个保存值，则会导致保存了一个 "指向数组的常量指针" 而不是数组本身。这可能是也可能不是一个好事，取决于你的真正需要(换句话说，就是要当心！)。</li>




    <li>如果 T 是一个小的内建类型或指针，则 <code>param_type</code>
        定义为 <code>T const</code>, 而不是 <code>T
        const&amp;</code>. 这可以提升编译器对函数体中的循环的优化，如果它们依赖于传入的参数，传入参数的语义并没有改变(需要偏特化)。</li>




</ol>





<p>&nbsp;</p>





<h3>可复制构造</h3>





<p>下表定义了哪些 call_traits 类型总是可以从其它类型进行复制构造，标记了 '?' 的项为 true 当且仅当 T 是可复制构造的：</p>





<table border="0" cellpadding="7" cellspacing="1" width="766">




    <tbody>



    <tr>




        <td valign="top" width="17%">&nbsp;</td>




        <td colspan="5" bgcolor="#008080" valign="top" width="85%">
      
      
      
      <p align="center">到：</p>




        </td>




    </tr>




    <tr>




        <td bgcolor="#008080" valign="top" width="17%">从：</td>




        <td bgcolor="#c0c0c0" valign="top" width="17%">
      
      
      
      <p align="center">T</p>




        </td>




        <td bgcolor="#c0c0c0" valign="top" width="17%">
      
      
      
      <p align="center">value_type</p>




        </td>




        <td bgcolor="#c0c0c0" valign="top" width="17%">
      
      
      
      <p align="center">reference</p>




        </td>




        <td bgcolor="#c0c0c0" valign="top" width="17%">
      
      
      
      <p align="center">const_reference</p>




        </td>




        <td bgcolor="#c0c0c0" valign="top" width="17%">
      
      
      
      <p align="center">param_type</p>




        </td>




    </tr>




    <tr>




        <td bgcolor="#c0c0c0" valign="top" width="17%">T</td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">?</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">?</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">Y</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">Y</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">Y</p>




        </td>




    </tr>




    <tr>




        <td bgcolor="#c0c0c0" valign="top" width="17%">value_type</td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">?</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">?</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">N</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">N</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">Y</p>




        </td>




    </tr>




    <tr>




        <td bgcolor="#c0c0c0" valign="top" width="17%">reference</td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">?</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">?</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">Y</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">Y</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">Y</p>




        </td>




    </tr>




    <tr>




        <td bgcolor="#c0c0c0" valign="top" width="17%">const_reference</td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">?</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">N</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">N</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">Y</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">Y</p>




        </td>




    </tr>




    <tr>




        <td bgcolor="#c0c0c0" valign="top" width="17%">param_type</td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">?</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">?</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">N</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">N</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">Y</p>




        </td>




    </tr>




  
  
  
  </tbody>
</table>





<p>&nbsp;</p>





<p>如果 T 是一个可赋值类型，则以下赋值是可以的：</p>





<table border="0" cellpadding="7" cellspacing="1" width="766">




    <tbody>



    <tr>




        <td valign="top" width="17%">&nbsp;</td>




        <td colspan="5" bgcolor="#008080" valign="top" width="85%">
      
      
      
      <p align="center">到：</p>




        </td>




    </tr>




    <tr>




        <td bgcolor="#008080" valign="top" width="17%">从：</td>




        <td bgcolor="#c0c0c0" valign="top" width="17%">
      
      
      
      <p align="center">T</p>




        </td>




        <td bgcolor="#c0c0c0" valign="top" width="17%">
      
      
      
      <p align="center">value_type</p>




        </td>




        <td bgcolor="#c0c0c0" valign="top" width="17%">
      
      
      
      <p align="center">reference</p>




        </td>




        <td bgcolor="#c0c0c0" valign="top" width="17%">
      
      
      
      <p align="center">const_reference</p>




        </td>




        <td bgcolor="#c0c0c0" valign="top" width="17%">
      
      
      
      <p align="center">param_type</p>




        </td>




    </tr>




    <tr>




        <td bgcolor="#c0c0c0" valign="top" width="17%">T</td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">Y</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">Y</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">-</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">-</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">-</p>




        </td>




    </tr>




    <tr>




        <td bgcolor="#c0c0c0" valign="top" width="17%">value_type</td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">Y</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">Y</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">-</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">-</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">-</p>




        </td>




    </tr>




    <tr>




        <td bgcolor="#c0c0c0" valign="top" width="17%">reference</td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">Y</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">Y</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">-</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">-</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">-</p>




        </td>




    </tr>




    <tr>




        <td bgcolor="#c0c0c0" valign="top" width="17%">const_reference</td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">Y</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">Y</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">-</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">-</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">-</p>




        </td>




    </tr>




    <tr>




        <td bgcolor="#c0c0c0" valign="top" width="17%">param_type</td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">Y</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">Y</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">-</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">-</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">-</p>




        </td>




    </tr>




  
  
  
  </tbody>
</table>





<p>&nbsp;</p>





<h3><a name="examples"></a>例子</h3>





<p>下表列出了 call_traits 对不同类型的作用，这里假定编译器支持偏特化：如果不支持的话，那么所有类型的行为与 "myclass" 那行一样，且
call_traits 不可用于引用或数组类型。</p>





<table border="0" cellpadding="7" cellspacing="1" width="766">




    <tbody>



    <tr>




        <td valign="top" width="17%">&nbsp;</td>




        <td colspan="5" bgcolor="#008080" valign="top" width="85%">
      
      
      
      <p align="center">Call_traits 的类型：</p>




        </td>




    </tr>




    <tr>




        <td bgcolor="#008080" valign="top" width="17%">
      
      
      
      <p align="center">原先的类型 T</p>




        </td>




        <td bgcolor="#c0c0c0" valign="top" width="17%">
      
      
      
      <p align="center">value_type</p>




        </td>




        <td bgcolor="#c0c0c0" valign="top" width="17%">
      
      
      
      <p align="center">reference</p>




        </td>




        <td bgcolor="#c0c0c0" valign="top" width="17%">
      
      
      
      <p align="center">const_reference</p>




        </td>




        <td bgcolor="#c0c0c0" valign="top" width="17%">
      
      
      
      <p align="center">param_type</p>




        </td>




        <td bgcolor="#c0c0c0" valign="top" width="17%">
      
      
      
      <p align="center">应用于：</p>




        </td>




    </tr>




    <tr>




        <td bgcolor="#c0c0c0" valign="top" width="17%">
      
      
      
      <p align="center">myclass</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">myclass</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">myclass&amp;</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">const
        myclass&amp;</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">myclass
        const&amp;</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">所有用户自定义类型</p>




        </td>




    </tr>




    <tr>




        <td bgcolor="#c0c0c0" valign="top" width="17%">
      
      
      
      <p align="center">int</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">int</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">int&amp;</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">const
        int&amp;</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">int const</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">所有小的内建类型</p>




        </td>




    </tr>




    <tr>




        <td bgcolor="#c0c0c0" valign="top" width="17%">
      
      
      
      <p align="center">int*</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">int*</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">int*&amp;</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">int*const&amp;</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">int* const</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">所有指针类型</p>




        </td>




    </tr>




    <tr>




        <td bgcolor="#c0c0c0" valign="top" width="17%">
      
      
      
      <p align="center">int&amp;</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">int&amp;</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">int&amp;</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">const
        int&amp;</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">int&amp;</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">所有引用类型</p>




        </td>




    </tr>




    <tr>




        <td bgcolor="#c0c0c0" valign="top" width="17%">
      
      
      
      <p align="center">const int&amp;</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">const
        int&amp;</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">const
        int&amp;</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">const
        int&amp;</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">const
        int&amp;</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">所有常量引用</p>




        </td>




    </tr>




    <tr>




        <td bgcolor="#c0c0c0" valign="top" width="17%">
      
      
      
      <p align="center">int[3]</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">const int*</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">int(&amp;)[3]</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">const int(&amp;)[3]</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">const int*
        const</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">所有数组类型</p>




        </td>




    </tr>




    <tr>




        <td bgcolor="#c0c0c0" valign="top" width="17%">
      
      
      
      <p align="center">const int[3]</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">const int*</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">const int(&amp;)[3]</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">const int(&amp;)[3]</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">const int*
        const</p>




        </td>




        <td valign="top" width="17%">
      
      
      
      <p align="center">所有常量数组类型</p>




        </td>




    </tr>




  
  
  
  </tbody>
</table>





<p>&nbsp;</p>





<h4>例&nbsp;1:</h4>





<p>以下这个类是一个简单的类，以值方式保存类型 T (见 <a href="call_traits_test.cpp">call_traits_test.cpp</a> 文件)，其目的是示范如何使用每个可用的
call_traits:</p>





<pre>template &lt;class T&gt;<br>struct contained<br>{<br>   // 首先定义我们的 typedefs, 数组是以值方式存储的<br>   // 所以 value_type 与 result_type 不一样：<br>   typedef typename boost::call_traits&lt;T&gt;::param_type       param_type;<br>   typedef typename boost::call_traits&lt;T&gt;::reference        reference;<br>   typedef typename boost::call_traits&lt;T&gt;::const_reference  const_reference;<br>   typedef T                                                value_type;<br>   typedef typename boost::call_traits&lt;T&gt;::value_type       result_type;<br><br>   // 被保存的值：<br>   value_type v_;<br>   <br>   // 构造函数：<br>   contained() {}<br>   contained(param_type p) : v_(p){}<br>   // 以值返回：<br>   result_type value() { return v_; }<br>   // 以引用返回：<br>   reference get() { return v_; }<br>   const_reference const_get()const { return v_; }<br>   // 以值传递：<br>   void call(param_type p){}<br><br>};</pre>





<h4><a name="refs"></a>例 2 ("引用的引用"的问题)：</h4>





<p>考虑 std::binder1st 的定义：</p>





<pre>template &lt;class Operation&gt; <br>class binder1st : <br>   public unary_function&lt;typename Operation::second_argument_type, typename Operation::result_type&gt; <br>{ <br>protected: <br>   Operation op; <br>   typename Operation::first_argument_type value; <br>public: <br>   binder1st(const Operation&amp; x, const typename Operation::first_argument_type&amp; y); <br>   typename Operation::result_type operator()(const typename Operation::second_argument_type&amp; x) const; <br>}; </pre>





<p>想象一下如果仿函数是以引用方式接受第二个参数的，那么会发生什么，这意味着 <code>Operation::second_argument_type</code> 是一个引用类型，<code>operator()</code> 就会接受一个引用的引用作为参数，这是非法的。解决的办法是将 <code>operator()</code>
改为使用 call_traits:</p>





<pre>typename Operation::result_type operator()(typename call_traits&lt;typename Operation::second_argument_type&gt;::param_type x) const;</pre>





<p>现在，就算 <code>Operation::second_argument_type</code>
是一个引用类型，也会以引用方式来传递参数，而不会发生 "引用的引用"。</p>





<h4><a name="ex3"></a>例 3 (make_pair 问题)：</h4>





<p>如果我们将一个数组的名字作为一个(或两个)参数传递给 <code>std::make_pair</code>,
那么模板参数推断将认为传递的参数是
"T
数组的常量引用"，这种情况同样会出现在字符串常量(其实它也是数组常量)中。从而不是返回一对指针，而是试图返回一对数组，由于数组类型不是可复制构造
的，因此代码将无法编译。一个解决的办法是，将传给 make_pair 的参数显式转换为指针，不过 call_traits
提供了一个更好(自动的)解决办法(你甚至可以将它用在转型可能出错的泛型代码中)：</p>





<pre>template &lt;class T1, class T2&gt;<br>std::pair&lt;<br>   typename boost::call_traits&lt;T1&gt;::value_type, <br>   typename boost::call_traits&lt;T2&gt;::value_type&gt; <br>      make_pair(const T1&amp; t1, const T2&amp; t2)<br>{<br>   return std::pair&lt;<br>      typename boost::call_traits&lt;T1&gt;::value_type, <br>      typename boost::call_traits&lt;T2&gt;::value_type&gt;(t1, t2);<br>}</pre>





<p>这里，如果被推断的类型是数组，将会自动退化为指针，就象在标准绑定器和适配器中发生的一样：理论上是"包装"一个被推断类型的任何函数。注意，make_pair&nbsp;函数的参数并不以 call_traits 传递：这样做可以防止从函数推断模板参数。</p>





<h4><a name="ex4"></a>例 4 (优化填充)：</h4>





<p>call_traits 模板可以 "优化" 作为函数参数传递的小的内建类型，这主要在该参数在一个循环体中使用时有作用。在下例中(见 <a href="../type_traits/examples/fill_example.cpp">fill_example.cpp</a>)，以两种方法优化 std::fill 的一个版本：如果传入的类型是一个单字节内建类型，则使用 std::memset 来提高填充的效率，否则使用传统的C++实现，但使用 call_traits 来 "优化" 传入的参数：</p>





<pre>namespace detail{<br><br>template &lt;bool opt&gt;<br>struct filler<br>{<br>   template &lt;typename I, typename T&gt;<br>   static void do_fill(I first, I last, typename boost::call_traits&lt;T&gt;::param_type val)<br>   {<br>      while(first != last)<br>      {<br>         *first = val;<br>         ++first;<br>      }<br>   }<br>};<br><br>template &lt;&gt;<br>struct filler&lt;true&gt;<br>{<br>   template &lt;typename I, typename T&gt;<br>   static void do_fill(I first, I last, T val)<br>   {<br>      memset(first, val, last-first);<br>   }<br>};<br><br>}<br><br>template &lt;class I, class T&gt;<br>inline void fill(I first, I last, const T&amp; val)<br>{<br>   enum{ can_opt = boost::is_pointer&lt;I&gt;::value<br>                   &amp;&amp; boost::is_arithmetic&lt;T&gt;::value<br>                   &amp;&amp; (sizeof(T) == 1) };<br>   typedef detail::filler&lt;can_opt&gt; filler_t;<br>   filler_t::template do_fill&lt;I,T&gt;(first, last, val);<br>}</pre>





<p>注：之所以说这对于小的内建类型是"最优的"，是因为用 "T
const"&nbsp;替代 "const T&amp;"
来传递值，可以告诉编译器该值是常量且不是别名。有了这些信息，编译器就可以将这个传入的值缓存在寄存器中，解开循环，可使用并行指令：如果它们被支持的
话。你可以从中得到多少好处取决于你的编译器 - 我们可以用 boost 中的一些精确的基准软件来验证这一点。</p>





<p>注意，fill&nbsp;函数的参数没有以 call_traits 传递：这样做可以防止从函数推断模板参数。fill 担当了一个
"瘦包装" 的角色，其中执行模板参数推断，编译器将优化对 fill 的调用，代之以对 filler&lt;&gt;::do_fill
的调用，后者使用了 call_traits.</p>





<h3>原理</h3>





<p>以下说明简要地描述了在 call_traits 中所作出的抉择背后的原理。</p>





<p>所有用户自定义类型遵循 "现有习惯"，无需任何说明。</p>





<p>小的内建类型(在标准中称为基本类型[3.9.1])与现有习惯的差别仅在于 <i>param_type</i>
typedef. 在这种情况下，传递 "T const" 是兼容于现有习惯的，但有些情形可以提升性能(见 <a href="#ex4">Example 4</a>)，任何情况下都不会比 existing practice 更差。</p>





<p>指针与小型内建类型的原理相同。</p>





<p>对于引用类型，相关原理遵循 <a href="#refs">Example
2</a> - 引用的引用是不允许的，所以必须定义
call_traits 的成员以使得这些问题不会发生。现在有一个提议是将语言标准修改为
"引用的引用是一个引用" (issue #106, 由 Bjarne Stroustrup 提交),
call_traits&lt;T&gt;::value_type 和 call_traits&lt;T&gt;::param_type
所提供的和这个提议相同的，不需要对语言的修改(换言之它绕过了问题)。</p>





<p>对于数组类型，一个以数组作为参数的函数会将数组类型退化为指针类型：这意味着真实参数的类型会不同于所声明的类型，在那些依赖于参数的声明类型的模板代码中，这会导致很多问题。例如：</p>





<pre>template &lt;class T&gt;<br>struct A<br>{<br>   void foo(T t);<br>};</pre>





<p><font face="Times New Roman">这种情况下，如果我们实例化
A&lt;int[2]&gt; 那么传给成员函数 foo 的参数的声明类型就是 int[2], 但它的真实类型是 const int*,
如果我们试图用在函数体中使用类型 T, 那么很可能我们的代码无法编译：</font></p>





<pre>template &lt;class T&gt;<br>void A&lt;T&gt;::foo(T t)<br>{<br>   T dup(t); // 无法编译，由于 T 是一个数组。<br>}</pre>





<p>通过使用 call_traits 显式地从数组退化为指针，使得参数的类型与其声明类型相同：</p>





<pre>template &lt;class T&gt;<br>struct A<br>{<br>   void foo(typename call_traits&lt;T&gt;::value_type t);<br>};<br><br>template &lt;class T&gt;<br>void A&lt;T&gt;::foo(typename call_traits&lt;T&gt;::value_type t)<br>{<br>   typename call_traits&lt;T&gt;::value_type dup(t); // 即使 T 为数组类型也可以<br>}</pre>





<p>对于 value_type (以值方式返回)，同样只会返回指针，而不是整个数组的拷贝，同样是 call_traits 实施了显式的退化。当一个数组必须退化为指针时，value_type 成员就有用了 - <a href="#ex3">Example 3</a> 提供了测试案例(注：以数组特化 call_traits 是所有 call_traits 特化中最不好懂的，如果给定的语义引起某些问题，或者不能解决与数组相关的问题，我希望能收到相关的反馈。多数人可能从不需要这种特化)。</p>





<hr>

<p>Revised 01 September 2000</p>





<p>&copy; Copyright boost.org 2000. Permission to copy, use, modify,
sell and distribute this document is granted provided this
copyright notice appears in all copies. This document is provided
"as is" without express or implied warranty, and with
no claim as to its suitability for any purpose.</p>





<p>Based on contributions by Steve Cleary, Beman Dawes, Howard
Hinnant and John Maddock.</p>





<p>Maintained by <a href="mailto:john@johnmaddock.co.uk">John
Maddock</a>, the latest version of this file can be found at <a href="http://www.boost.org/">www.boost.org</a>, and the boost
discussion list at <a href="http://www.yahoogroups.com/list/boost">www.yahoogroups.com/list/boost</a>.</p>





<p>.</p>





<p>&nbsp;</p>





<p>&nbsp;</p>




</body>
</html>
