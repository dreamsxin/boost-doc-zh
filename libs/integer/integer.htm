<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>

  
  <meta content="text/html; charset=UTF-8" http-equiv="content-type">


  
  <title>Integer Type Selection Templates</title>
</head>


<body bgcolor="white" text="black">


<h1>
<img src="../../boost.png" alt="boost.png (6897 bytes)" align="middle" height="86" width="277">整数类型选择模板</h1>



<p><cite><a href="../../boost/integer.hpp">&lt;boost/integer.hpp&gt;</a></cite> 的类型选择模板可以基于特定的属性，如位数或最大值，选择相应的整数类型。在解决泛型编程的问题时，这一工具特别有用。</p>



<h2><a name="contents">目录</a></h2>



<ul>


	<li><a href="#contents">目录</a></li>


	<li><a href="#synopsis">摘要</a></li>


	<li><a href="#easy">最容易操作的类型</a></li>


	<li><a href="#sized">指定大小的类型</a></li>


	<li><a href="#example">例子</a></li>


	<li><a href="#demo">示范程序</a></li>


	<li><a href="#rationale">原理</a></li>


	<li><a href="#alternative">其它选择</a></li>


	<li><a href="#credits">鸣谢</a></li>


</ul>



<h2><a name="synopsis">摘要</a></h2>



<blockquote>
  
  <pre>namespace boost<br>{<br>  //  从最小整数得到快速整数<br>  template&lt; typename LeastInt &gt;<br>  struct int_fast_t<br>  {<br>      typedef <em>implementation_supplied</em>  fast;<br>  };<br><br>  //  有符号的<br>  template&lt; int Bits &gt;<br>  struct int_t <br>  {<br>      typedef <em>implementation_supplied</em>  least;<br>      typedef int_fast_t&lt;least&gt;::fast  fast;<br>  };<br><br>  //  无符号的<br>  template&lt; int Bits &gt;<br>  struct uint_t <br>  {<br>      typedef <em>implementation_supplied</em>  least;<br>      typedef int_fast_t&lt;least&gt;::fast  fast;<br>  };<br><br>  //  有符号的<br>  template&lt; long MaxValue &gt;<br>  struct int_max_value_t <br>  {<br>      typedef <em>implementation_supplied</em>  least;<br>      typedef int_fast_t&lt;least&gt;::fast  fast;<br>  };<br><br>  template&lt; long MinValue &gt;<br>  struct int_min_value_t <br>  {<br>      typedef <em>implementation_supplied</em>  least;<br>      typedef int_fast_t&lt;least&gt;::fast  fast;<br>  };<br><br>  //  无符号的<br>  template&lt; unsigned long Value &gt;<br>  struct uint_value_t <br>  {<br>      typedef <em>implementation_supplied</em>  least;<br>      typedef int_fast_t&lt;least&gt;::fast  fast;<br>  };<br>} // namespace boost<br></pre>

</blockquote>



<h2><a name="easy">最容易操作的类型</a></h2>



<p><code>int_fast_t</code>
类模板将它的输入类型映射为处理器最容易操作的稍大的类型，或者如果输入类型已经是易于操作的就返回它本身。例如，在处理一串字符时，如果先将它们转换为
int 则会处理得更快。唯一的模板参数，即输入类型，必须是除了 bool
以外的内建整数类型。可以象有符号整数类型一样使用无符号整数类型。输出类型由类成员 <code>fast</code> 给出。</p>



<p><strong>实现说明</strong><br>

缺省的，输出类型等同于输入类型。最后，该代码的实现要对每个平台进行特化，在内建类型和最易操作类型之间给出精确的映射。此外，并不保证输出类型确实比输入类型更容易操作。</p>



<h2><a name="sized">指定大小的类型</a></h2>



<p><code>int_t</code>, <code>uint_t</code>,
<code>int_max_value_t</code>, <code>int_min_value_t</code>, 和
<code>uint_value_t</code> 类模板根据给定的模板参数查找最合适的内建整数类型。该类型由类成员 <code>least</code> 给出。该类型的最易操作类型由类成员 <code>fast</code> 给出。下表描述了各个模板的标准。</p>



<table border="1" cellpadding="5">


	<caption>Sized Type 类模板的标准</caption>
	<tbody>

    <tr>


		<th>类模板</th>


		<th>模板参数映射</th>


	</tr>


	<tr>


		<td><code>boost::int_t</code></td>


		<td>至少具有给定位数的最小内建有符号整数类型，给定位数包含符号位。模板参数应为一个正数。如果参数大于
			<code>long</code> 的位数，将导致编译错误。</td>


	</tr>


	<tr>


		<td><code>boost::uint_t</code></td>


		<td>至少具有给定位数的最小内建无符号整数类型。模板参数应为一个正数。如果参数大于 <code>unsigned</code>
			<code>long</code> 的位数，将导致编译错误。</td>


	</tr>


	<tr>


		<td><code>boost::int_max_value_t</code></td>


		<td>支持以给定位值作为最大值的最小内建有符号整数类型。模板参数应为一个正数。</td>


	</tr>


	<tr>


		<td><code>boost::int_min_value_t</code></td>


		<td>支持以给定位值作为最小值的最小内建有符号整数类型。模板参数应为一个负数。</td>


	</tr>


	<tr>


		<td><code>boost::uint_value_t</code></td>


		<td>支持以给定位值作为最大值的最小内建无符号整数类型。模板参数应为一个正数。</td>


	</tr>


  
  </tbody>
</table>



<h2><a name="example">例子</a></h2>



<blockquote>
  
  <pre>#include &lt;boost/integer.hpp&gt;<br><br>//...<br><br>int main()<br>{<br>    boost::int_t&lt;24&gt;::least my_var;<br>    //...<br>}<br></pre>

</blockquote>



<h2><a name="demo">示范程序</a></h2>



<p>程序 <a href="integer_test.cpp">integer_test.cpp</a> 简单地示范了对各种 sized type 类模板的实例化结果。</p>



<h2><a name="rationale">原理</a></h2>



<p>该头文件中的模板的设计原理包括：</p>



<ul>


	<li>避免递归，因为这关系到 C++ 对递归深度的限制(17).</li>


	<li>避免使用宏，因为众所周知的原因。</li>


	<li>使设计尽可能地简单。</li>


</ul>



<h2><a name="alternative">其它选择</a></h2>



<p>如果可以预先知道位数，则更适合使用 <cite><a href="../../boost/cstdint.hpp">&lt;boost/cstdint.hpp&gt;</a></cite> 所提供的类型。</p>



<h2><a name="credits">鸣谢</a></h2>



<p>The author of most of the Boost integer type choosing templates is <a href="../../people/beman_dawes.html">Beman Dawes</a>.  He gives thanks
to Valentin Bonnard and
<a href="../../people/kevlin_henney.htm"> Kevlin Henney</a> for sharing
their designs for similar templates.  <a href="../../people/daryle_walker.html">Daryle Walker</a> designed the
value-based sized templates.</p>



<hr>

<p>Revised May 20, 2001</p>



<p>&copy; Copyright Beman Dawes 1999.  Permission to copy, use, modify,
sell and distribute this document is granted provided this copyright
notice appears in all copies.  This document is provided "as
is" without express or implied warranty, and with no claim as to
its suitability for any purpose.</p>


</body>
</html>
