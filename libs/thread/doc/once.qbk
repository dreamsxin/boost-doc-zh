[/
  (C) Copyright 2007-8 Anthony Williams.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:once One-time Initialization]

`boost::call_once` provides a mechanism for ensuring that an initialization routine is run exactly once without data races or deadlocks.\n
`boost::call_once` 提供一个机制，确保初始化函数只执行一次，并避免数据竞态或死锁。

[section:once_flag Typedef `once_flag`]

    #include <boost/thread/once.hpp>

    typedef platform-specific-type once_flag;
    #define BOOST_ONCE_INIT platform-specific-initializer

Objects of type `boost::once_flag` shall be initialized with `BOOST_ONCE_INIT`:\n
`boost::once_flag` 对象由 `BOOST_ONCE_INIT` 初始化: 

    boost::once_flag f=BOOST_ONCE_INIT;

[endsect]

[section:call_once Non-member function `call_once`  自由函数`call_once`]

    #include <boost/thread/once.hpp>

    template<typename Callable>
    void call_once(once_flag& flag,Callable func);

[variablelist

[[Requires:] [`Callable` is `CopyConstructible`. Copying `func` shall have no side effects, and the effect of calling the copy shall
be equivalent to calling the original. \n
`Callable` 类型要求 `CopyConstructible`。拷贝 `func` 不能有副效果，并且拷贝和原始对象有相同的调用效果。]]

[[Effects:] [Calls to `call_once` on the same `once_flag` object are serialized. If there has been no prior effective `call_once` on
the same `once_flag` object, the argument `func` (or a copy thereof) is called as-if by invoking `func()`, and the invocation of
`call_once` is effective if and only if `func()` returns without exception. If an exception is thrown, the exception is
propagated to the caller. If there has been a prior effective `call_once` on the same `once_flag` object, the `call_once` returns
without invoking `func`. \n
对同一个 `once_flag` 对象调用 `call_once` 被序列化了。如果在此之前对于同一个 `once_flag` 对象没有有效的 `call_once` 调用，
则参数 `func` (或其拷贝)被通过 `func()` 调用，当且仅当 `func()` 成功返回，`call_once` 调用被视为有效的。
如果有异常抛出，则该异常被传递到调用者。`call_once` 调用被视为无效的；如果对同一个 `once_flag` 对象有过有效的 `call_once` 调用，
则 `call_once` 只是简单返回，并不调用 `func`。]]

[[Synchronization:] [The completion of an effective `call_once` invocation on a `once_flag` object, synchronizes with
all subsequent `call_once` invocations on the same `once_flag` object. \n
对 `once_flag` 对象有效调用 `call_once` 后，后续对该 `once_flag` 的 `call_once` 调用会被同步。]]

[[Throws:] [`thread_resource_error` when the effects cannot be achieved. or any exception propagated from `func`.\n
如果初始化效果不能达到，抛出 `thread_resource_error`，或者 `func` 抛出的异常。]]

]

    void call_once(void (*func)(),once_flag& flag);
    
This second overload is provided for backwards compatibility. The effects of `call_once(func,flag)` shall be the same as those of
`call_once(flag,func)`.\n
第二个重载提供向前的兼容支持。函数 `call_once(func,flag)` 的效果和 `call_once(flag,func)` 一样。

[endsect]
[endsect]
