[/
  (C) Copyright 2007-8 Anthony Williams.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:condvar_ref Condition Variables 条件变量]

[heading:synopsis Synopsis 概述]

The classes `condition_variable` and `condition_variable_any` provide a
mechanism for one thread to wait for notification from another thread that a
particular condition has become true. The general usage pattern is that one
thread locks a mutex and then calls `wait` on an instance of
`condition_variable` or `condition_variable_any`. When the thread is woken from
the wait, then it checks to see if the appropriate condition is now true, and
continues if so. If the condition is not true, then the thread then calls `wait`
again to resume waiting. In the simplest case, this condition is just a boolean
variable:\n
类型 `condition_variable` 和 `condition_variable_any` 提供一个种机制，一个线程可以等待另外一个线程内某个事件发生的通知。 
通常的应用模式是一个线程锁定一个互斥量，然后通过函数 `wait` 等待一个 `condition_variable` 或 `condition_variable_any` 实例，
当线程从等待中被唤醒激活时，检查特定的条件是否满足，如果满足，线程继续执行。如果不满足，线程则再次调用 `wait` 以继续等待。
最简单的情况下，这个条件只是一个布尔变量。

    boost::condition_variable cond;
    boost::mutex mut;
    bool data_ready;

    void process_data();

    void wait_for_data_to_process()
    {
        boost::unique_lock<boost::mutex> lock(mut);
        while(!data_ready)
        {
            cond.wait(lock);
        }
        process_data();
    }

Notice that the `lock` is passed to `wait`: `wait` will atomically add the
thread to the set of threads waiting on the condition variable, and unlock the
mutex. When the thread is woken, the mutex will be locked again before the call
to `wait` returns. This allows other threads to acquire the mutex in order to
update the shared data, and ensures that the data associated with the condition
is correctly synchronized.\n
请注意 `lock` 对象会传递给 `wait` 函数: `wait` 函数会自动将线程添加到等待条件变量的线程集合中，并且解锁传递进来的互斥量。
当线程被唤醒，`wait` 退出前互斥量会再次被锁定。这样允许其他线程获取互斥量来更新共享的数据，确保条件变量关联的数据被正确同步。

In the mean time, another thread sets the condition to `true`, and then calls
either `notify_one` or `notify_all` on the condition variable to wake one
waiting thread or all the waiting threads respectively.\n
同时，另外的线程将这个条件置为 `true`，然后对条件变量调用函数 `notify_one` 或 `notify_all` 来唤醒等待该条件变量的一个或多个线程。

    void retrieve_data();
    void prepare_data();

    void prepare_data_for_processing()
    {
        retrieve_data();
        prepare_data();
        {
            boost::lock_guard<boost::mutex> lock(mut);
            data_ready=true;
        }
        cond.notify_one();
    }

Note that the same mutex is locked before the shared data is updated, but that
the mutex does not have to be locked across the call to `notify_one`.\n
注意，同一个互斥量在共享数据被更新前被锁定，但是这个互斥量锁定范围不需要包含函数 `notify_one` 调用。

This example uses an object of type `condition_variable`, but would work just as
well with an object of type `condition_variable_any`: `condition_variable_any`
is more general, and will work with any kind of lock or mutex, whereas
`condition_variable` requires that the lock passed to `wait` is an instance of
`boost::unique_lock<boost::mutex>`. This enables `condition_variable` to make
optimizations in some cases, based on the knowledge of the mutex type;
`condition_variable_any` typically has a more complex implementation than
`condition_variable`.\n
这个例子使用一个 `condition_variable` 对象，如果换成 `condition_variable_any` 对象也是同样适用：`condition_variable_any` 更加通用，
支持和其他类型的互斥量和锁定类型，而 `condition_variable` 要求传递给函数 `wait` 的是 `boost::unique_lock<boost::mutex>` 对象。
这样在已知互斥量的条件下，`condition_variable` 可以做适当的优化；`condition_variable_any` 类型的实现比 `condition_variable` 复杂许多。

[section:condition_variable Class `condition_variable`]

    #include <boost/thread/condition_variable.hpp>

    namespace boost
    {
        class condition_variable
        {
        public:
            condition_variable();
            ~condition_variable();

            void notify_one();
            void notify_all();

            void wait(boost::unique_lock<boost::mutex>& lock);

            template<typename predicate_type>
            void wait(boost::unique_lock<boost::mutex>& lock,predicate_type predicate);

            bool timed_wait(boost::unique_lock<boost::mutex>& lock,boost::system_time const& abs_time);

            template<typename duration_type>
            bool timed_wait(boost::unique_lock<boost::mutex>& lock,duration_type const& rel_time);

            template<typename predicate_type>
            bool timed_wait(boost::unique_lock<boost::mutex>& lock,boost::system_time const& abs_time,predicate_type predicate);

            template<typename duration_type,typename predicate_type>
            bool timed_wait(boost::unique_lock<boost::mutex>& lock,duration_type const& rel_time,predicate_type predicate);

        // backwards compatibility

            bool timed_wait(boost::unique_lock<boost::mutex>& lock,boost::xtime const& abs_time);

            template<typename predicate_type>
            bool timed_wait(boost::unique_lock<boost::mutex>& lock,boost::xtime const& abs_time,predicate_type predicate);
        };
    }

[section:constructor `condition_variable()`]

[variablelist

[[Effects:] [Constructs an object of class `condition_variable`.\n
创建一个 `condition_variable` 对象。]]

[[Throws:] [__thread_resource_error__ if an error occurs.\n
如果出现错误，抛出异常 __thread_resource_error__。]]

]

[endsect]

[section:destructor `~condition_variable()`]

[variablelist

[[Precondition:] [All threads waiting on `*this` have been notified by a call to
`notify_one` or `notify_all` (though the respective calls to `wait` or
`timed_wait` need not have returned).\n
所有等待 `*this` 的线程得到通知通过调用函数 `notify_one` 或 `notify_all`
（尽管不是每个独立的函数调用 `wait` 或 `timed_wait` 都返回)。]]

[[Effects:] [Destroys the object.\n
销毁条件变量。]]

[[Throws:] [Nothing.\n
无。]]

]

[endsect]

[section:notify_one `void notify_one()`]

[variablelist

[[Effects:] [If any threads are currently __blocked__ waiting on `*this` in a call
to `wait` or `timed_wait`, unblocks one of those threads.\n
如果有线程当前因为等待 `*this` 而在 `wait` 或 `timed_wait` 中 __blocked__，这个函数调用会解除一个线程的阻塞状态。]]

[[Throws:] [Nothing.\n
无。]]

]

[endsect]

[section:notify_all `void notify_all()`]

[variablelist

[[Effects:] [If any threads are currently __blocked__ waiting on `*this` in a call
to `wait` or `timed_wait`, unblocks all of those threads.\n
如果有线程当前因为等待 `*this` 而在 `wait` 或 `timed_wait` 中 __blocked__，这个函数调用会解除所有这些线程的阻塞状态。]]

[[Throws:] [Nothing.\n
无。]]

]

[endsect]

[section:wait `void wait(boost::unique_lock<boost::mutex>& lock)`]

[variablelist

[[Precondition:] [`lock` is locked by the current thread, and either no other
thread is currently waiting on `*this`, or the execution of the `mutex()` member
function on the `lock` objects supplied in the calls to `wait` or `timed_wait`
in all the threads currently waiting on `*this` would return the same value as
`lock->mutex()` for this call to `wait`.\n
`lock` 对象被当前线程锁定, 并且要么没有其它线程正在等待 `*this`，要么在所有当前正在等待 `*this` 的线程中调用 `wait` 或 `timed_wait` 所给定的 `lock` 对象执行 `mutex()` 成员函数, 返回与本 `wait` 调用中的 `lock->mutex()` 相同的值。]]

[[Effects:] [Atomically call `lock.unlock()` and blocks the current thread. The
thread will unblock when notified by a call to `this->notify_one()` or
`this->notify_all()`, or spuriously. When the thread is unblocked (for whatever
reason), the lock is reacquired by invoking `lock.lock()` before the call to
`wait` returns. The lock is also reacquired by invoking `lock.lock()` if the
function exits with an exception.\n
自动调用 `lock.unlock()` 并且阻塞当前线程。线程在 `this->notify_one()` 或 `this->notify_all()` 调用通知后解除阻塞状态。
当线程被解除阻塞(不论任何原因)时，在 `wait` 函数退出前调用 `lock.lock()` 来加锁。
如果这个函数因为异常退出，退出前也会调用 `lock.lock()`。]]

[[Postcondition:] [`lock` is locked by the current thread.\n
当前线程锁定 `lock`。]]

[[Throws:] [__thread_resource_error__ if an error
occurs. __thread_interrupted__ if the wait was interrupted by a call to
__interrupt__ on the __thread__ object associated with the current thread of execution.\n
如果出错则抛出异常 __thread_resource_error__。如果对线程执行体关联的 __thread__ 对象调用 __interrupt__， 
抛出 __thread_interrupted__ 异常。]]

]

[endsect]

[section:wait_predicate `template<typename predicate_type> void wait(boost::unique_lock<boost::mutex>& lock, predicate_type pred)`]

[variablelist

[[Effects:] [As-if\n
相当于 ``
while(!pred())
{
    wait(lock);
}
``]]

]

[endsect]

[section:timed_wait `bool timed_wait(boost::unique_lock<boost::mutex>& lock,boost::system_time const& abs_time)`]

[variablelist

[[Precondition:] [`lock` is locked by the current thread, and either no other
thread is currently waiting on `*this`, or the execution of the `mutex()` member
function on the `lock` objects supplied in the calls to `wait` or `timed_wait`
in all the threads currently waiting on `*this` would return the same value as
`lock->mutex()` for this call to `wait`.\n
`lock` 对象被当前线程锁定, 并且要么没有其它线程正在等待 `*this`，要么在所有当前正在等待 `*this` 的线程中调用 `wait` 或 `timed_wait` 所给定的 `lock` 对象执行 `mutex()` 成员函数, 返回与本 `wait` 调用中的 `lock->mutex()` 相同的值。]]

[[Effects:] [Atomically call `lock.unlock()` and blocks the current thread. The
thread will unblock when notified by a call to `this->notify_one()` or
`this->notify_all()`, when the time as reported by `boost::get_system_time()`
would be equal to or later than the specified `abs_time`, or spuriously. When
the thread is unblocked (for whatever reason), the lock is reacquired by
invoking `lock.lock()` before the call to `wait` returns. The lock is also
reacquired by invoking `lock.lock()` if the function exits with an exception.\n
自动调用 `lock.unlock()` 并且阻塞当前线程。线程在 `this->notify_one()` 或 `this->notify_all()` 调用通知后，
或当 `boost::get_system_time()` 所报告的时间等于或后于给定的 `abs_time` 时解除阻塞状态。
当线程被解除阻塞(不论任何原因)时，在 `wait` 函数退出前调用 `lock.lock()` 来加锁。
如果这个函数因为异常退出，退出前也会调用 `lock.lock()`。]]

[[Returns:] [`false` if the call is returning because the time specified by
`abs_time` was reached, `true` otherwise.\n
如果函数因为 `abs_time` 到达而退出，返回 `false`，否则 `true`。]]

[[Postcondition:] [`lock` is locked by the current thread.\n
当前线程锁定 `lock`。]]

[[Throws:] [__thread_resource_error__ if an error
occurs. __thread_interrupted__ if the wait was interrupted by a call to
__interrupt__ on the __thread__ object associated with the current thread of execution.\n
如果出错则抛出异常 __thread_resource_error__。如果对线程执行体关联的 __thread__ 对象调用 __interrupt__， 
抛出 __thread_interrupted__ 异常。]]

]

[endsect]

[section:timed_wait_rel `template<typename duration_type> bool timed_wait(boost::unique_lock<boost::mutex>& lock,duration_type const& rel_time)`]

[variablelist

[[Precondition:] [`lock` is locked by the current thread, and either no other
thread is currently waiting on `*this`, or the execution of the `mutex()` member
function on the `lock` objects supplied in the calls to `wait` or `timed_wait`
in all the threads currently waiting on `*this` would return the same value as
`lock->mutex()` for this call to `wait`.\n
`lock` 对象被当前线程锁定, 并且要么没有其它线程正在等待 `*this`，要么在所有当前正在等待 `*this` 的线程中调用 `wait` 或 `timed_wait` 所给定的 `lock` 对象执行 `mutex()` 成员函数, 返回与本 `wait` 调用中的 `lock->mutex()` 相同的值。]]

[[Effects:] [Atomically call `lock.unlock()` and blocks the current thread. The
thread will unblock when notified by a call to `this->notify_one()` or
`this->notify_all()`, after the period of time indicated by the `rel_time`
argument has elapsed, or spuriously. When the thread is unblocked (for whatever
reason), the lock is reacquired by invoking `lock.lock()` before the call to
`wait` returns. The lock is also reacquired by invoking `lock.lock()` if the
function exits with an exception.\n
自动调用 `lock.unlock()` 并且阻塞当前线程。线程在 `this->notify_one()` 或 `this->notify_all()` 调用通知后，
或当 `rel_time` 所表示的时间已过去时解除阻塞状态。当线程被解除阻塞(不论任何原因)时，在 `wait` 函数退出前调用 `lock.lock()` 来加锁。
如果这个函数因为异常退出，退出前也会调用 `lock.lock()`。]]

[[Returns:] [`false` if the call is returning because the time period specified
by `rel_time` has elapsed, `true` otherwise.\n
如果函数因为 `rel_time` 过去而退出，返回 `false`，否则 `true`。]]

[[Postcondition:] [`lock` is locked by the current thread.\n
当前线程锁定 `lock`。]]

[[Throws:] [__thread_resource_error__ if an error
occurs. __thread_interrupted__ if the wait was interrupted by a call to
__interrupt__ on the __thread__ object associated with the current thread of execution.\n
如果出错则抛出异常 __thread_resource_error__。如果对线程执行体关联的 __thread__ 对象调用 __interrupt__， 
抛出 __thread_interrupted__ 异常。]]

]

[note The duration overload of timed_wait is difficult to use correctly. The overload taking a predicate should be preferred in most cases.\n
使用时间段参数的 timed_wait 函数难以正确使用，通常情况下带断言的重载比较容易使用。]

[endsect]

[section:timed_wait_predicate `template<typename predicate_type> bool timed_wait(boost::unique_lock<boost::mutex>& lock, boost::system_time const& abs_time, predicate_type pred)`]

[variablelist

[[Effects:] [As-if \n
相当于 ``
while(!pred())
{
    if(!timed_wait(lock,abs_time))
    {
        return pred();
    }
}
return true;
``]]

]

[endsect]


[endsect]

[section:condition_variable_any Class `condition_variable_any`]

    #include <boost/thread/condition_variable.hpp>

    namespace boost
    {
        class condition_variable_any
        {
        public:
            condition_variable_any();
            ~condition_variable_any();

            void notify_one();
            void notify_all();

            template<typename lock_type>
            void wait(lock_type& lock);

            template<typename lock_type,typename predicate_type>
            void wait(lock_type& lock,predicate_type predicate);

            template<typename lock_type>
            bool timed_wait(lock_type& lock,boost::system_time const& abs_time);

            template<typename lock_type,typename duration_type>
            bool timed_wait(lock_type& lock,duration_type const& rel_time);

            template<typename lock_type,typename predicate_type>
            bool timed_wait(lock_type& lock,boost::system_time const& abs_time,predicate_type predicate);

            template<typename lock_type,typename duration_type,typename predicate_type>
            bool timed_wait(lock_type& lock,duration_type const& rel_time,predicate_type predicate);

        // backwards compatibility

            template<typename lock_type>
            bool timed_wait(lock_type>& lock,boost::xtime const& abs_time);

            template<typename lock_type,typename predicate_type>
            bool timed_wait(lock_type& lock,boost::xtime const& abs_time,predicate_type predicate);
        };
    }

[section:constructor `condition_variable_any()`]

[variablelist

[[Effects:] [Constructs an object of class `condition_variable_any`.\n
创建一个 `condition_variable_any` 对象。]]

[[Throws:] [__thread_resource_error__ if an error occurs.\n
如果出错则抛出 __thread_resource_error__ 异常。]]

]

[endsect]

[section:destructor `~condition_variable_any()`]

[variablelist

[[Precondition:] [All threads waiting on `*this` have been notified by a call to
`notify_one` or `notify_all` (though the respective calls to `wait` or
`timed_wait` need not have returned).\n
所有等待 `*this` 的线程得到通知，通过调用函数 `notify_one` 或 `notify_all`，
(尽管不是每个独立的函数调用 `wait` 或 `timed_wait` 都返回)。]]

[[Effects:] [Destroys the object.\n
销毁这个对象。]]

[[Throws:] [Nothing.\n
无。]]

]

[endsect]

[section:notify_one `void notify_one()`]

[variablelist

[[Effects:] [If any threads are currently __blocked__ waiting on `*this` in a call
to `wait` or `timed_wait`, unblocks one of those threads.\n
如果有线程当前因在 `wait` 或 `timed_wait` 中等待 `*this` 而 __blocked__，这个函数调用会解除一个线程的阻塞状态。]]

[[Throws:] [Nothing.\n
无。]]

]

[endsect]

[section:notify_all `void notify_all()`]

[variablelist

[[Effects:] [If any threads are currently __blocked__ waiting on `*this` in a call
to `wait` or `timed_wait`, unblocks all of those threads.\n
如果有线程当前因在 `wait` 或 `timed_wait` 中等待 `*this` 而 __blocked__，这个函数调用会解除所有这些线程的阻塞状态。]]

[[Throws:] [Nothing.\n
无。]]

]

[endsect]

[section:wait `template<typename lock_type> void wait(lock_type& lock)`]

[variablelist

[[Effects:] [Atomically call `lock.unlock()` and blocks the current thread. The
thread will unblock when notified by a call to `this->notify_one()` or
`this->notify_all()`, or spuriously. When the thread is unblocked (for whatever
reason), the lock is reacquired by invoking `lock.lock()` before the call to
`wait` returns. The lock is also reacquired by invoking `lock.lock()` if the
function exits with an exception.\n
自动调用 `lock.unlock()` 并且阻塞当前线程。线程在 `this->notify_one()` 或 `this->notify_all()` 调用通知后解除阻塞状态。
当线程被解除阻塞(不论任何原因)时，在 `wait` 函数退出前调用 `lock.lock()` 来加锁。
如果这个函数因为异常退出，退出前也会调用 `lock.lock()`。]]

[[Postcondition:] [`lock` is locked by the current thread.\n
当前线程锁定 `lock`。]]

[[Throws:] [__thread_resource_error__ if an error
occurs. __thread_interrupted__ if the wait was interrupted by a call to
__interrupt__ on the __thread__ object associated with the current thread of execution.\n
如果出错则抛出异常 __thread_resource_error__。如果对线程执行体关联的 __thread__ 对象调用 __interrupt__， 
抛出 __thread_interrupted__ 异常。]]

]

[endsect]

[section:wait_predicate `template<typename lock_type,typename predicate_type> void wait(lock_type& lock, predicate_type pred)`]

[variablelist

[[Effects:] [As-if \n
相当于 ``
while(!pred())
{
    wait(lock);
}
``]]

]

[endsect]

[section:timed_wait `template<typename lock_type> bool timed_wait(lock_type& lock,boost::system_time const& abs_time)`]

[variablelist

[[Effects:] [Atomically call `lock.unlock()` and blocks the current thread. The
thread will unblock when notified by a call to `this->notify_one()` or
`this->notify_all()`, when the time as reported by `boost::get_system_time()`
would be equal to or later than the specified `abs_time`, or spuriously. When
the thread is unblocked (for whatever reason), the lock is reacquired by
invoking `lock.lock()` before the call to `wait` returns. The lock is also
reacquired by invoking `lock.lock()` if the function exits with an exception.\n
自动调用 `lock.unlock()` 并且阻塞当前线程。线程在 `this->notify_one()` 或 `this->notify_all()` 调用通知后，
或当 `boost::get_system_time()` 所报告的时间等于或后于给定的 `abs_time` 时解除阻塞状态。
当线程被解除阻塞(不论任何原因)时，在 `wait` 函数退出前调用 `lock.lock()` 来加锁。
如果这个函数因为异常退出，退出前也会调用 `lock.lock()`。]]

[[Returns:] [`false` if the call is returning because the time specified by
`abs_time` was reached, `true` otherwise.\n
如果函数因为 `abs_time` 到达而退出，返回 `false`，否则 `true`。]]

[[Postcondition:] [`lock` is locked by the current thread.\n
当前线程锁定 `lock`。]]

[[Throws:] [__thread_resource_error__ if an error
occurs. __thread_interrupted__ if the wait was interrupted by a call to
__interrupt__ on the __thread__ object associated with the current thread of execution.\n
如果出错则抛出异常 __thread_resource_error__。如果对线程执行体关联的 __thread__ 对象调用 __interrupt__， 
抛出 __thread_interrupted__ 异常。]]

]

[endsect]

[section:timed_wait_rel `template<typename lock_type,typename duration_type> bool timed_wait(lock_type& lock,duration_type const& rel_time)`]

[variablelist

[[Effects:] [Atomically call `lock.unlock()` and blocks the current thread. The
thread will unblock when notified by a call to `this->notify_one()` or
`this->notify_all()`, after the period of time indicated by the `rel_time`
argument has elapsed, or spuriously. When the thread is unblocked (for whatever
reason), the lock is reacquired by invoking `lock.lock()` before the call to
`wait` returns. The lock is also reacquired by invoking `lock.lock()` if the
function exits with an exception.\n
自动调用 `lock.unlock()` 并且阻塞当前线程。线程在 `this->notify_one()` 或 `this->notify_all()` 调用通知后，
或当 `rel_time` 所表示的时间已过去时解除阻塞状态。当线程被解除阻塞(不论任何原因)时，在 `wait` 函数退出前调用 `lock.lock()` 来加锁。
如果这个函数因为异常退出，退出前也会调用 `lock.lock()`。]]

[[Returns:] [`false` if the call is returning because the time period specified
by `rel_time` has elapsed, `true` otherwise.\n
如果函数因为 `rel_time` 过去而退出，返回 `false`，否则 `true`。]]

[[Postcondition:] [`lock` is locked by the current thread.\n
当前线程锁定 `lock`。]]

[[Throws:] [__thread_resource_error__ if an error
occurs. __thread_interrupted__ if the wait was interrupted by a call to
__interrupt__ on the __thread__ object associated with the current thread of execution.\n
如果出错则抛出异常 __thread_resource_error__。如果对线程执行体关联的 __thread__ 对象调用 __interrupt__， 
抛出 __thread_interrupted__ 异常。]]

]

[note The duration overload of timed_wait is difficult to use correctly. The overload taking a predicate should be preferred in most cases.\n
使用时间段参数的 timed_wait 函数难以正确使用，通常情况下带断言的重载比较容易使用。]

[endsect]

[section:timed_wait_predicate `template<typename lock_type,typename predicate_type> bool timed_wait(lock_type& lock, boost::system_time const& abs_time, predicate_type pred)`]

[variablelist

[[Effects:] [As-if \n
相当于 ``
while(!pred())
{
    if(!timed_wait(lock,abs_time))
    {
        return pred();
    }
}
return true;
``]]

]

[endsect]

[endsect]

[section:condition Typedef `condition`]

    #include <boost/thread/condition.hpp>

    typedef condition_variable_any condition;

The typedef `condition` is provided for backwards compatibility with previous boost releases.\n
typedef `condition` 提供对以前版本的兼容。

[endsect]

[endsect]
