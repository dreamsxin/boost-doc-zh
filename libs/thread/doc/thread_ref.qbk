[/
  (C) Copyright 2007-8 Anthony Williams.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:thread_management Thread Management 线程管理]

[heading Synopsis 概要]

The __thread__ class is responsible for launching and managing threads. Each __thread__ object represents a single thread of execution,
or __not_a_thread__, and at most one __thread__ object represents a given thread of execution: objects of type __thread__ are not
copyable.\n
__thread__ 类的职责是启动和管理线程对象。每一个 __thread__ 实例表示单个执行线程或 __not_a_thread__，
而多数时候一个 __thread__ 对象代表一个给定的执行线程: __thread__ 类型的对象是不可拷贝的。

Objects of type __thread__ are movable, however, so they can be stored in move-aware containers, and returned from functions. This
allows the details of thread creation to be wrapped in a function.\n
__thread__ 类型的对象是可转移的, 因此它们可以被存放到支持转移语义的容器中, 由函数返回。这样使得线程对象的创建细节可以用函数包装起来。

    boost::thread make_thread();

    void f()
    {
        boost::thread some_thread=make_thread();
        some_thread.join();
    }

[Note: On compilers that support rvalue references, __thread__ provides a proper move constructor and move-assignment operator, and
therefore meets the C++0x ['MoveConstructible] and ['MoveAssignable] concepts. With such compilers, __thread__ can therefore be used
with containers that support those concepts.\n
注: 在支持右值引用的编译器上，__thread__ 提供一个适当的转移构造函数和转移赋值操作, 以此来符合C++0x中的
['可转移拷贝]和['可转移赋值]的概念。在这些编译器的帮助下, __thread__ 能够用于支持转移语义的容器。

For other compilers, move support is provided with a move emulation layer, so containers must explicitly detect that move emulation
layer. See <boost/thread/detail/move.hpp> for details.\n
对于其他的编译器, 转移语义由一个转移模仿层来支持, 这样容器需要显式检测模仿层。 详细资料参考 <boost/thread/detail/move.hpp>]

[heading Launching threads 启动线程]

A new thread is launched by passing an object of a callable type that can be invoked with no parameters to the constructor. The
object is then copied into internal storage, and invoked on the newly-created thread of execution. If the object must not (or
cannot) be copied, then `boost::ref` can be used to pass in a reference to the function object. In this case, the user of
__boost_thread__ must ensure that the referred-to object outlives the newly-created thread of execution.\n
通过传递一个拥有无参数构造函数的可调用对象来启动一个线程。这个对象会被拷贝进内部存储，然后在新创建的线程执行时被调用。 
如果对象不能被拷贝，可以通过 `boost::ref` 传递一个引用。在此种状况下，__boost_thread__ 的用户必须确保该对象在线程执行期间存在。

    struct callable
    {
        void operator()();
    };

    boost::thread copies_are_safe()
    {
        callable x;
        return boost::thread(x);
    } // x is destroyed, but the newly-created thread has a copy, so this is OK

    boost::thread oops()
    {
        callable x;
        return boost::thread(boost::ref(x));
    } // x is destroyed, but the newly-created thread still has a reference
      // this leads to undefined behaviour

If you wish to construct an instance of __thread__ with a function or callable object that requires arguments to be supplied,
this can be done by passing additional arguments to the __thread__ constructor:\n
如果你希望通过带参数的函数或可调用对象来构造一个 __thread__ 对象，可以通过将额外的参数传递给 __thread__ 构造函数的方法来实现:

    void find_the_question(int the_answer);

    boost::thread deep_thought_2(find_the_question,42);

The arguments are ['copied] into the internal thread structure: if a reference is required, use `boost::ref`, just as for references
to callable functions.\n
参数会['被拷贝]到线程内部: 如果需要使用参数引用, 请使用 `boost::ref，参照可调用对象的引用方法。

There is an unspecified limit on the number of additional arguments that can be passed.\n
对于额外参数的个数没有限制。

[heading Exceptions in thread functions 线程函数中的异常]

If the function or callable object passed to the __thread__ constructor propagates an exception when invoked that is not of type
__thread_interrupted__, `std::terminate()` is called. \n
如果传递给 __thread__ 构造函数的线程函数或可调用对象在被调用时产生一个非 __thread_interrupted__ 类型的异常，`std::terminate()` 会被调用。

[heading Joining and detaching 邻连和分离]

When the __thread__ object that represents a thread of execution is destroyed the thread becomes ['detached]. Once a thread is
detached, it will continue executing until the invocation of the function or callable object supplied on construction has completed,
or the program is terminated. A thread can also be detached by explicitly invoking the __detach__ member function on the __thread__
object. In this case, the __thread__ object ceases to represent the now-detached thread, and instead represents __not_a_thread__.\n
当代表的线程执行体的 __thread__ 对象被销毁的时候，线程执行体处于被分离的状态。线程执行体此时继续执行，
直到线程函数或可调用对象执行结束, 或者程序终止。线程执行体也可以通过显式调用 __thread__ 成员函数 __detach__ 分离， 
在这种状况下，__thread__ 对象结束了和线程执行体的关系，变为代表 __not_a_thread__。 

In order to wait for a thread of execution to finish, the __join__ or __timed_join__ member functions of the __thread__ object must be
used. __join__ will block the calling thread until the thread represented by the __thread__ object has completed. If the thread of
execution represented by the __thread__ object has already completed, or the __thread__ object represents __not_a_thread__, then __join__
returns immediately. __timed_join__ is similar, except that a call to __timed_join__ will also return if the thread being waited for
does not complete when the specified time has elapsed.\n
如果要等待一个线程结束, 使用 __thread__ 对象的成员函数 __join__ 或 __timed_join__。函数 __join__ 会阻塞调用线程直到等待的 __thread__ 
对象执行结束。如果等待的 __thread__ 对象已经结束，或者等待的 __thread__ 对象表示 __not_a_thread__, 函数 __join__ 会立即返回。
函数 __timed_join__ 也类似, 只是 __timed_join__ 在等待指定的时间后也会返回。

[heading Interruption 中断]

A running thread can be ['interrupted] by invoking the __interrupt__ member function of the corresponding __thread__ object. When the
interrupted thread next executes one of the specified __interruption_points__ (or if it is currently __blocked__ whilst executing one)
with interruption enabled, then a __thread_interrupted__ exception will be thrown in the interrupted thread. If not caught,
this will cause the execution of the interrupted thread to terminate. As with any other exception, the stack will be unwound, and
destructors for objects of automatic storage duration will be executed.\n
一个执行着的线程可以通过调用对应 __thread__ 对象的函数 __interrupt__ 来['中断]。当一个被中断的线程在中断打开时再次执行到某个特定的 
__interruption_points__ (或是它当前被 __blocked__ 而执行一个) , 它会触发一个 __thread_interrupted__ 异常。如果这个异常没有被捕捉，
会导致该线程终止。如同其它异常一样, 栈会被展开, 自动变量会被析构。

If a thread wishes to avoid being interrupted, it can create an instance of __disable_interruption__. Objects of this class disable
interruption for the thread that created them on construction, and restore the interruption state to whatever it was before on
destruction:\n
如果一个线程不希望被中断, 可以创建一个 __disable_interruption__ 对象来达到这个目的。该对象创建成功后，线程中断关闭，直到该对象被销毁: 

    void f()
    {
        // interruption enabled here
        {
            boost::this_thread::disable_interruption di;
            // interruption disabled
            {
                boost::this_thread::disable_interruption di2;
                // interruption still disabled
            } // di2 destroyed, interruption state restored
            // interruption still disabled
        } // di destroyed, interruption state restored
        // interruption now enabled
    }

The effects of an instance of __disable_interruption__ can be temporarily reversed by constructing an instance of
__restore_interruption__, passing in the __disable_interruption__ object in question. This will
restore the interruption state to what it was when the __disable_interruption__ object was constructed, and then
disable interruption again when the __restore_interruption__ object is destroyed.\n
__disable_interruption__ 对象关闭的线程中断可以通过构建一个 __restore_interruption__ 对象来临时打开, 
并在构造时传递对应的 __disable_interruption__ 对象。这样将恢复线程中断状态到构建 __disable_interruption__ 对象之前, 
当 __restore_interruption__ 对象销毁的时候，线程中断会再次处于关闭。

    void g()
    {
        // interruption enabled here
        {
            boost::this_thread::disable_interruption di;
            // interruption disabled
            {
                boost::this_thread::restore_interruption ri(di);
                // interruption now enabled
            } // ri destroyed, interruption disable again
        } // di destroyed, interruption state restored
        // interruption now enabled
    }

At any point, the interruption state for the current thread can be queried by calling __interruption_enabled__.\n
在任何时候，线程中断状态可以通过函数 __interruption_enabled__ 来取得。

[#interruption_points]

[heading Predefined Interruption Points 预定义的中断点]

The following functions are ['interruption points], which will throw __thread_interrupted__ if interruption is enabled for the
current thread, and interruption is requested for the current thread:\n
下列函数是['中断点], 会在被调用线程对象中断开启的情况下抛出 __thread_interrupted__ 异常:

* [join_link `boost::thread::join()`]
* [timed_join_link `boost::thread::timed_join()`]
* [cond_wait_link `boost::condition_variable::wait()`]
* [cond_timed_wait_link `boost::condition_variable::timed_wait()`]
* [cond_any_wait_link `boost::condition_variable_any::wait()`]
* [cond_any_timed_wait_link `boost::condition_variable_any::timed_wait()`]
* [link thread.thread_management.thread.sleep `boost::thread::sleep()`]
* __sleep__
* __interruption_point__

[heading Thread IDs 线程标识]

Objects of class __thread_id__ can be used to identify threads. Each running thread of execution has a unique ID obtainable
from the corresponding __thread__ by calling the `get_id()` member function, or by calling `boost::this_thread::get_id()` from
within the thread. Objects of class __thread_id__ can be copied, and used as keys in associative containers: the full range of
comparison operators is provided. Thread IDs can also be written to an output stream using the stream insertion operator, though the
output format is unspecified.\n
__thread_id__ 对象可用于标识线程。每个执行期的线程都有一个唯一的标识，可通过对应 __thread__ 的成员函数 `get_id()` 获得, 
或者在线程内部通过函数 `boost::this_thread::get_id()` 获得。__thread_id__ 对象支持拷贝, 并提供完整的比较操作符，
可以用于关联式容器的键值。尽管没有指定输出格式，线程标识还是可以用标准操作输出到流。

Each instance of __thread_id__ either refers to some thread, or __not_a_thread__. Instances that refer to __not_a_thread__
compare equal to each other, but not equal to any instances that refer to an actual thread of execution. The comparison operators on
__thread_id__ yield a total order for every non-equal thread ID.\n
__thread_id__ 对象可能标识线程, 也可能是 __not_a_thread__。__not_a_thread__ 在比较时都是相同的, 但是和任何实际运行的线程相比较则都不一样。
__thread_id__ 的比较操作生成每个不同线程ID的全序。

[section:thread Class `thread`]

    #include <boost/thread/thread.hpp>

    class thread
    {
    public:
        thread();
        ~thread();

        template <class F>
        explicit thread(F f);

        template <class F,class A1,class A2,...>
        thread(F f,A1 a1,A2 a2,...);

        template <class F>
        thread(detail::thread_move_t<F> f);

        // move support
        thread(detail::thread_move_t<thread> x);
        thread& operator=(detail::thread_move_t<thread> x);
        operator detail::thread_move_t<thread>();
        detail::thread_move_t<thread> move();

        void swap(thread& x);

        class id;
        id get_id() const;

        bool joinable() const;
        void join();
        bool timed_join(const system_time& wait_until);

        template<typename TimeDuration>
        bool timed_join(TimeDuration const& rel_time);

        void detach();

        static unsigned hardware_concurrency();

        typedef platform-specific-type native_handle_type;
        native_handle_type native_handle();

        void interrupt();
        bool interruption_requested() const;

        // backwards compatibility
        bool operator==(const thread& other) const;
        bool operator!=(const thread& other) const;

        static void yield();
        static void sleep(const system_time& xt);
    };

    void swap(thread& lhs,thread& rhs);

[section:default_constructor Default Constructor 默认构造函数]

    thread();

[variablelist

[[Effects:] [Constructs a __thread__ instance that refers to __not_a_thread__.\n
创建一个表示 __not_a_thread__ 的 __thread__ 对象。]]

[[Throws:] [Nothing\n
无]]

]

[endsect]

[section:callable_constructor Thread Constructor 线程构造函数]

    template<typename Callable>
    thread(Callable func);

[variablelist

[[Preconditions:] [`Callable` must by copyable.\n
`Callable` 支持拷贝。]]

[[Effects:] [`func` is copied into storage managed internally by the thread library, and that copy is invoked on a newly-created
thread of execution. If this invocation results in an exception being propagated into the internals of the thread library that is
not of type __thread_interrupted__, then `std::terminate()` will be called.\n
对象 `func` 被拷贝到 thread 库管理的内部存储区, 这份拷贝在稍后创建的线程中被调用。 
如果这个调用产生一个非 __thread_interrupted__ 异常，并被传递到库内部, 函数 `std::terminate()` 会被调用。]]

[[Postconditions:] [`*this` refers to the newly created thread of execution.\n
`*this` 引用创建出来的线程执行体。]]

[[Throws:] [__thread_resource_error__ if an error occurs.\n
如果出错，抛出 __thread_resource_error__ 异常。]]

]

[endsect]

[section:multiple_argument_constructor Thread Constructor with arguments 带参数的构造函数]

    template <class F,class A1,class A2,...>
    thread(F f,A1 a1,A2 a2,...);

[variablelist

[[Preconditions:] [`F` and each `A`n must by copyable or movable.\n
参数 `F` 和 `A`n 需要支持拷贝或者转移语义。]]

[[Effects:] [As if [link
thread.thread_management.thread.callable_constructor
`thread(boost::bind(f,a1,a2,...))`]. Consequently, `f` and each `a`n
are copied into internal storage for access by the new thread.\n
类似 [link thread.thread_management.thread.callable_constructor `thread(boost::bind(f,a1,a2,...))`]。
结果是, `f` 和 `a`n 被拷贝到线程内部存储由线程对象访问。]]

[[Postconditions:] [`*this` refers to the newly created thread of execution.\n
`*this` 引用创建出来的线程执行体。]]

[[Throws:] [__thread_resource_error__ if an error occurs.\n
如果出错，抛出 __thread_resource_error__ 异常。]]

[[Note:] [Currently up to nine additional arguments `a1` to `a9` can be specified in addition to the function `f`.\n
目前最多支持带九个额外参数（`a1` 到 `a9`）的 `f`。]]

]

[endsect]

[section:destructor Thread Destructor 析构函数]

    ~thread();

[variablelist

[[Effects:] [If `*this` has an associated thread of execution, calls __detach__. Destroys `*this`.\n
如果 `*this` 标识一个线程执行体, 调用函数 __detach__。销毁 `*this`。]]

[[Throws:] [Nothing.\n
无。]]

]

[endsect]

[section:joinable Member function `joinable()`]

    bool joinable() const;

[variablelist

[[Returns:] [`true` if `*this` refers to a thread of execution, `false` otherwise.\n
如果 `*this` 标识一个线程执行体, 返回 `true`，否则返回 `false`。]]

[[Throws:] [Nothing\n
无]]

]


[endsect]

[section:join Member function `join()`]

    void join();

[variablelist

[[Preconditions:] [`this->get_id()!=boost::this_thread::get_id()`]]

[[Effects:] [If `*this` refers to a thread of execution, waits for that thread of execution to complete.\n
如果 `*this` 标识一个线程执行体, 调用者等待线程对象执行结束。]]

[[Postconditions:] [If `*this` refers to a thread of execution on entry, that thread of execution has completed. `*this` no longer refers to any thread of execution.\n
如果 `*this` 标识一个线程执行体, 线程结束。`*this` 不再标识任何执行体。]]

[[Throws:] [__thread_interrupted__ if the current thread of execution is interrupted.\n
如果该线程被中断，抛出 __thread_interrupted__ 异常。]]

[[Notes:] [`join()` is one of the predefined __interruption_points__.\n
`join()` 是预定义的 __interruption_points__。 ]]

]

[endsect]

[section:timed_join Member function `timed_join()`]

    bool timed_join(const system_time& wait_until);

    template<typename TimeDuration>
    bool timed_join(TimeDuration const& rel_time);

[variablelist

[[Preconditions:] [`this->get_id()!=boost::this_thread::get_id()`]]

[[Effects:] [If `*this` refers to a thread of execution, waits for that thread of execution to complete, the time `wait_until` has
been reach or the specified duration `rel_time` has elapsed. If `*this` doesn't refer to a thread of execution, returns immediately.\n
如果 `*this` 标识一个线程执行体, 调用者等待线程对象执行结束, 时间 `wait_until` 到达，或者指定 `rel_time` 时间过去。
如果 `*this` 并不标识线程执行体, 立即返回。]]

[[Returns:] [`true` if `*this` refers to a thread of execution on entry, and that thread of execution has completed before the call
times out, `false` otherwise.\n
如果 `*this` 标识一个线程执行体,并且线程在等待时间结束前结束，返回 `true`，否则返回 `false`。]]

[[Postconditions:] [If `*this` refers to a thread of execution on entry, and `timed_join` returns `true`, that thread of execution
has completed, and `*this` no longer refers to any thread of execution. If this call to `timed_join` returns `false`, `*this` is
unchanged.\n
如果 `*this` 标识一个线程执行体 , 并且 `timed_join` 返回 `true`, 则线程执行体已经结束, `*this` 不再标识任何执行体。
如果 `timed_join` 返回 `false`, `*this` 不变。 ]]

[[Throws:] [__thread_interrupted__ if the current thread of execution is interrupted.\n
如果该线程被中断，抛出 __thread_interrupted__ 异常。]]

[[Notes:] [`timed_join()` is one of the predefined __interruption_points__.\n
`timed_join()` 是预定义的 __interruption_points__。]]

]

[endsect]

[section:detach Member function `detach()`]

    void detach();

[variablelist

[[Effects:] [If `*this` refers to a thread of execution, that thread of execution becomes detached, and no longer has an associated __thread__ object.\n
如果 `*this` 标识一个线程执行体, 则线程执行体被分离, 不再具有一个关联的 __thread__ 对象。]]

[[Postconditions:] [`*this` no longer refers to any thread of execution.\n
`*this` 不再标识任何执行体。]]

[[Throws:] [Nothing\n
无]]

]

[endsect]


[section:get_id Member function `get_id()`]

    thread::id get_id() const;

[variablelist

[[Returns:] [If `*this` refers to a thread of execution, an instance of __thread_id__ that represents that thread. Otherwise returns
a default-constructed __thread_id__.\n
如果 `*this` 标识一个线程执行体, 返回表示该线程的 __thread_id__。否则返回空的 __thread_id__。]]

[[Throws:] [Nothing\n
无]]

]

[endsect]

[section:interrupt Member function `interrupt()`]

    void interrupt();

[variablelist

[[Effects:] [If `*this` refers to a thread of execution, request that the thread will be interrupted the next time it enters one of
the predefined __interruption_points__ with interruption enabled, or if it is currently __blocked__ in a call to one of the
predefined __interruption_points__ with interruption enabled .\n
如果 `*this` 标识一个线程执行体, 则请求该线程在下次进入某个带有中断激活的预定义 __interruption_points__ 时被中断，
或如果线程当前是 __blocked__，则在调用某个带有中断激活的预定义 __interruption_points__ 时。 ]]

[[Throws:] [Nothing\n
无]]

]
        

[endsect]

[section:hardware_concurrency Static member function `hardware_concurrency()`]

    unsigned hardware_concurrency();

[variablelist

[[Returns:] [The number of hardware threads available on the current system (e.g. number of CPUs or cores or hyperthreading units),
or 0 if this information is not available.\n
返回当前硬件系统支持的线程数量（处理器内核数量）, 如果当前信息不可用，返回 0。]]

[[Throws:] [Nothing\n
无]]

]

[endsect]

[section:nativehandle Member function `native_handle()`]

    typedef platform-specific-type native_handle_type;
    native_handle_type native_handle();

[variablelist

[[Effects:] [Returns an instance of `native_handle_type` that can be used with platform-specific APIs to manipulate the underlying
implementation. If no such instance exists, `native_handle()` and `native_handle_type` are not present.\n
返回一个 `native_handle_type` 实例，该实例支持平台特定的线程访问函数。 如果该平台不支持, 
函数 `native_handle()` 和类型 `native_handle_type` 都不存在。]]

[[Throws:] [Nothing.\n
无]]

]

[endsect]

[section:equals `operator==`]

    bool operator==(const thread& other) const;

[variablelist

[[Returns:] [`get_id()==other.get_id()`]]

]

[endsect]

[section:not_equals `operator!=`]

    bool operator!=(const thread& other) const;

[variablelist

[[Returns:] [`get_id()!=other.get_id()`]]

]

[endsect]

[section:sleep Static member function `sleep()`]

    void sleep(system_time const& abs_time);

[variablelist

[[Effects:] [Suspends the current thread until the specified time has been reached.\n
将调用线程挂起指定的时间。]]

[[Throws:] [__thread_interrupted__ if the current thread of execution is interrupted.\n
如果线程中断，抛出 __thread_interrupted__ 异常。]]

[[Notes:] [`sleep()` is one of the predefined __interruption_points__.\n
`sleep()` 是一个预定义 __interruption_points__。 ]]

]

[endsect]

[section:yield Static member function `yield()`]

    void yield();

[variablelist

[[Effects:] [See [link thread.thread_management.this_thread.yield `boost::this_thread::yield()`].\n
参考 [link thread.thread_management.this_thread.yield `boost::this_thread::yield()`]。]]

]

[endsect]

[section:swap Member function `swap()`]

    void swap(thread& other);

[variablelist

[[Effects:] [Exchanges the threads of execution associated with `*this` and `other`, so `*this` is associated with the thread of
execution associated with `other` prior to the call, and vice-versa.\n
交换 `*this` 和 `other` 所关联的线程执行体，因此 `*this` 将关联至之前 `other` 所关联的线程执行体，反之亦然。]]

[[Postconditions:] [`this->get_id()` returns the same value as `other.get_id()` prior to the call. `other.get_id()` returns the same
value as `this->get_id()` prior to the call.\n
`this->get_id()` 返回与之前 `other.get_id()` 相同的值。`other.get_id()` 则返回与之前 `this->get_id()` 相同的值。]]

[[Throws:] [Nothing.\n
无]]

]

[endsect]

[section:non_member_swap Non-member function `swap()`]

    #include <boost/thread/thread.hpp>

    void swap(thread& lhs,thread& rhs);

[variablelist

[[Effects:] [[link thread.thread_management.thread.swap `lhs.swap(rhs)`].]]

]

[endsect]


[section:id Class `boost::thread::id`]

    #include <boost/thread/thread.hpp>

    class thread::id
    {
    public:
        id();

        bool operator==(const id& y) const;
        bool operator!=(const id& y) const;
        bool operator<(const id& y) const;
        bool operator>(const id& y) const;
        bool operator<=(const id& y) const;
        bool operator>=(const id& y) const;

        template<class charT, class traits>
        friend std::basic_ostream<charT, traits>& 
        operator<<(std::basic_ostream<charT, traits>& os, const id& x);
    };

[section:constructor Default constructor 默认构造函数]

    id();

[variablelist

[[Effects:] [Constructs a __thread_id__ instance that represents __not_a_thread__.\n
构造一个表示 __not_a_thread__ 的 __thread_id__。]]

[[Throws:] [Nothing\n
无]]

]

[endsect]

[section:is_equal `operator==`]

    bool operator==(const id& y) const;

[variablelist

[[Returns:] [`true` if `*this` and `y` both represent the same thread of execution, or both represent __not_a_thread__, `false`
otherwise.\n
如果 `*this` 和 `y` 代表同一个线程执行体, 或者都标识 __not_a_thread__, 返回 `true`, 否则返回 `false`。]]

[[Throws:] [Nothing\n
无]]

]

[endsect]

[section:not_equal `operator!=`]

    bool operator!=(const id& y) const;

[variablelist

[[Returns:] [`true` if `*this` and `y` represent different threads of execution, or one represents a thread of execution, and
the other represent __not_a_thread__, `false` otherwise.\n
如果 `*this` 和 `y` 代表不同的线程执行体, 或者一个代表线程执行体，而另一个标识 __not_a_thread__, 返回 `true`, 否则返回 `false`。]]

[[Throws:] [Nothing\n
无]]

]

[endsect]

[section:less_than `operator<`]

    bool operator<(const id& y) const;

[variablelist

[[Returns:] [`true` if `*this!=y` is `true` and the implementation-defined total order of __thread_id__ values places `*this` before
`y`, `false` otherwise.\n
如果 `*this!=y` 为 `true`，并且 __thread_id__ 定义的顺序中 `*this` 在 `y` 之前，返回 `true`, 否则返回 `false`。]]

[[Throws:] [Nothing\n
无]]

[[Note:] [A __thread_id__ instance representing __not_a_thread__ will always compare less than an instance representing a thread of
execution.\n
如果一个 __thread_id__ 标识 __not_a_thread__，那么它小于任何一个代表线程执行体的实例。]]

]

[endsect]


[section:greater_than `operator>`]

    bool operator>(const id& y) const;

[variablelist

[[Returns:] [`y<*this`]]

[[Throws:] [Nothing\n
无]]

]

[endsect]

[section:less_than_or_equal `operator>=`]

    bool operator<=(const id& y) const;

[variablelist

[[Returns:] [`!(y<*this)`]]

[[Throws:] [Nothing\n
无]]

]

[endsect]

[section:greater_than_or_equal `operator>=`]

    bool operator>=(const id& y) const;

[variablelist

[[Returns:] [`!(*this<y)`]]

[[Throws:] [Nothing\n
无]]

]

[endsect]

[section:stream_out Friend `operator<<`]

    template<class charT, class traits>
    friend std::basic_ostream<charT, traits>& 
    operator<<(std::basic_ostream<charT, traits>& os, const id& x);

[variablelist

[[Effects:] [Writes a representation of the __thread_id__ instance `x` to the stream `os`, such that the representation of two
instances of __thread_id__ `a` and `b` is the same if `a==b`, and different if `a!=b`.\n
将 __thread_id__ 实例 'x' 的表示法写入输出流 `os`，两个 __thread_id__ 实例 `a` 和 `b` 的表示法在 `a==b` 时是相同的，
在 `a!=b` 时是不同的。]]

[[Returns:] [`os`]]

]

[endsect]


[endsect]

[endsect]

[section:this_thread Namespace `this_thread`]

[section:get_id Non-member function `get_id()`]

    #include <boost/thread/thread.hpp>

    namespace this_thread
    {
        thread::id get_id();
    }

[variablelist

[[Returns:] [An instance of __thread_id__ that represents that currently executing thread.\n
返回代表当前执行线程的 __thread_id__ 对象。]]

[[Throws:] [__thread_resource_error__ if an error occurs.\n
如果发生错误，抛出 __thread_resource_error__ 异常。]]

]

[endsect]

[section:interruption_point Non-member function `interruption_point()`]

    #include <boost/thread/thread.hpp>

    namespace this_thread
    {
        void interruption_point();
    }

[variablelist

[[Effects:] [Check to see if the current thread has been interrupted.\n
检查当前线程是否被中断。]]

[[Throws:] [__thread_interrupted__ if __interruption_enabled__ and __interruption_requested__ both return `true`.\n
如果 __interruption_enabled__ 并且 __interruption_requested__ 返回 `true`，抛出 __thread_interrupted__ 异常 。]]

]

[endsect]

[section:interruption_requested Non-member function `interruption_requested()`]

    #include <boost/thread/thread.hpp>

    namespace this_thread
    {
        bool interruption_requested();
    }

[variablelist

[[Returns:] [`true` if interruption has been requested for the current thread, `false` otherwise.\n
如果当前线程要求中断，返回 `true`，否则返回 `false`。]]

[[Throws:] [Nothing.\n
无]]

]

[endsect]

[section:interruption_enabled Non-member function `interruption_enabled()`]

    #include <boost/thread/thread.hpp>

    namespace this_thread
    {
        bool interruption_enabled();
    }

[variablelist

[[Returns:] [`true` if interruption has been enabled for the current thread, `false` otherwise.\n
如果线程中断开启，返回 `true`,否则返回 `false`。]]

[[Throws:] [Nothing.\n
无]]

]

[endsect]

[section:sleep Non-member function `sleep()`]

    #include <boost/thread/thread.hpp>

    namespace this_thread
    {
        template<typename TimeDuration>
        void sleep(TimeDuration const& rel_time);
    }

[variablelist

[[Effects:] [Suspends the current thread until the specified time has elapsed.\n
将调用线程挂起指定的时间。]]

[[Throws:] [__thread_interrupted__ if the current thread of execution is interrupted.\n
如果线程被中断，抛出 __thread_interrupted__ 异常。]]

[[Notes:] [`sleep()` is one of the predefined __interruption_points__.\n
`sleep()` 是一个预定义的 __interruption_points__。 ]]

]

[endsect]

[section:yield Non-member function `yield()`]

    #include <boost/thread/thread.hpp>

    namespace this_thread
    {
        void yield();
    }

[variablelist

[[Effects:] [Gives up the remainder of the current thread's time slice, to allow other threads to run.\n
放弃当前线程当前时间片, 允许其他线程运行。]]

[[Throws:] [Nothing.\n
无]]

]

[endsect]

[section:disable_interruption Class `disable_interruption`]

    #include <boost/thread/thread.hpp>

    namespace this_thread
    {
        class disable_interruption
        {
        public:
            disable_interruption();
            ~disable_interruption();
        };
    }

`boost::this_thread::disable_interruption` disables interruption for the current thread on construction, and restores the prior
interruption state on destruction. Instances of `disable_interruption` cannot be copied or moved.\n
`boost::this_thread::disable_interruption` 对象在构造时关闭当前线程中断, 在析构后恢复线程中断状态。 
`disable_interruption` 对象不支持拷贝和转移。

[section:constructor Constructor 构造函数]

    disable_interruption();

[variablelist

[[Effects:] [Stores the current state of __interruption_enabled__ and disables interruption for the current thread.\n
存贮当前 __interruption_enabled__ 状态并关闭当前线程中断。]]

[[Postconditions:] [__interruption_enabled__ returns `false` for the current thread.\n
函数 __interruption_enabled__ 返回 `false`。]]

[[Throws:] [Nothing.\n
无]]

]

[endsect]

[section:destructor Destructor 析构函数]

    ~disable_interruption();

[variablelist

[[Preconditions:] [Must be called from the same thread from which `*this` was constructed.\n
必须在 `*this` 构造时所在的线程内调用。]]

[[Effects:] [Restores the current state of __interruption_enabled__ for the current thread to that prior to the construction of `*this`.\n
恢复 `*this` 改变的 __interruption_enabled__ 状态。]]

[[Postconditions:] [__interruption_enabled__ for the current thread returns the value stored in the constructor of `*this`.\n
当前线程的 __interruption_enabled__ 状态恢复至 `*this` 构造之前。]]

[[Throws:] [Nothing.\n
无]]

]

[endsect]

[endsect]

[section:restore_interruption Class `restore_interruption`]

    #include <boost/thread/thread.hpp>

    namespace this_thread
    {
        class restore_interruption
        {
        public:
            explicit restore_interruption(disable_interruption& disabler);
            ~restore_interruption();
        };
    }

On construction of an instance of `boost::this_thread::restore_interruption`, the interruption state for the current thread is
restored to the interruption state stored by the constructor of the supplied instance of __disable_interruption__. When the instance
is destroyed, interruption is again disabled. Instances of `restore_interruption` cannot be copied or moved.\n
`boost::this_thread::restore_interruption` 对象的构建将当前线程的中断状态恢复至 __disable_interruption__ 对象存储的状态。  
当该对象析构时，中断再次关闭。`restore_interruption` 对象不支持拷贝和转移。

[section:constructor Constructor 构造函数]

    explicit restore_interruption(disable_interruption& disabler);

[variablelist

[[Preconditions:] [Must be called from the same thread from which `disabler` was constructed.\n
必须和 `disabler` 对象在同一个线程创建。]]

[[Effects:] [Restores the current state of __interruption_enabled__ for the current thread to that prior to the construction of `disabler`.\n
恢复当前线程的 __interruption_enabled__ 状体至 `disabler` 构造之前。]]

[[Postconditions:] [__interruption_enabled__ for the current thread returns the value stored in the constructor of `disabler`.\n
对当前线程调用 __interruption_enabled__ 将返回保存在 `disabler` 构造函数中的值。]]

[[Throws:] [Nothing.\n
无]]

]

[endsect]

[section:destructor Destructor 析构函数]

    ~restore_interruption();

[variablelist

[[Preconditions:] [Must be called from the same thread from which `*this` was constructed.\n
必须和 `*this` 的构造函数在同一个线程调用。]]

[[Effects:] [Disables interruption for the current thread.\n
关闭当前线程中断。]]

[[Postconditions:] [__interruption_enabled__ for the current thread returns `false`.\n
当前线程 __interruption_enabled__ 返回 `false`。]]

[[Throws:] [Nothing.\n
无]]

]

[endsect]

[endsect]

[section:atthreadexit Non-member function template `at_thread_exit()`]

    #include <boost/thread/thread.hpp>

    template<typename Callable>
    void at_thread_exit(Callable func);

[variablelist

[[Effects:] [A copy of `func` is placed in
thread-specific storage. This copy is invoked when the current thread
exits (even if the thread has been interrupted).\n
拷贝 `func` 至线程相关存储区。这个拷贝在线程结束时被调用（即使线程被中断)。]]

[[Postconditions:] [A copy of `func` has been saved for invocation on thread exit.\n
`func` 的拷贝被保存，线程退出时调用。]]

[[Throws:] [`std::bad_alloc` if memory cannot be allocated for the copy of the function, __thread_resource_error__ if any other
error occurs within the thread library. Any exception thrown whilst copying `func` into internal storage.\n
内存分配失败抛出 `std::bad_alloc` 异常, 如果线程库内部出错抛出 __thread_resource_error__ 异常。
如果拷贝 `func` 过程出错，抛出其它异常。]]

[[Note:] [This function is *not* called if the thread was terminated
forcefully using platform-specific APIs, or if the thread is
terminated due to a call to `exit()`, `abort()` or
`std::terminate()`. In particular, returning from `main()` is
equivalent to call to `exit()`, so will not call any functions
registered with `at_thread_exit()`\n
如果线程是通过平台特定的API被强行中止的，或者线程是由于对 `exit()`, `abort()` 或 `std::terminate()` 的调用而中止的，
则该函数*不会*被调用。特别地，从 `main()` 返回等同于调用 `exit()`，所以也不会调用任何用 `at_thread_exit()` 登记的函数。]]

]

[endsect]

[endsect]

[section:threadgroup Class `thread_group`]

    #include <boost/thread/thread.hpp>

    class thread_group:
        private noncopyable
    {
    public:
        thread_group();
        ~thread_group();

        template<typename F>
        thread* create_thread(F threadfunc);
        void add_thread(thread* thrd);
        void remove_thread(thread* thrd);
        void join_all();
        void interrupt_all();
        int size() const;
    };

`thread_group` provides for a collection of threads that are related in some fashion. New threads can be added to the group with
`add_thread` and `create_thread` member functions. `thread_group` is not copyable or movable.\n
`thread_group` 提供一组类似线程对象的集合。新的线程对象可以通过函数 `add_thread` 和 `create_thread` 加入到这个集合。 
`thread_group` 对象不支持拷贝和转移语义。

[section:constructor Constructor 构造函数]

    thread_group();

[variablelist

[[Effects:] [Create a new thread group with no threads.\n
创建一个线程组，不包含任何线程对象。]]

]

[endsect]

[section:destructor Destructor 析构函数]

    ~thread_group();

[variablelist

[[Effects:] [Destroy `*this` and `delete` all __thread__ objects in the group.\n
销毁 `*this`，`delete` 组内的所有 __thread__ 对象。]]

]

[endsect]

[section:create_thread Member function `create_thread()`]

    template<typename F>
    thread* create_thread(F threadfunc);

[variablelist

[[Effects:] [Create a new __thread__ object as-if by `new thread(threadfunc)` and add it to the group.\n
象 `new thread(threadfunc)` 那样创建一个新的 __thread__ 对象，将它添加到该组。]]

[[Postcondition:] [`this->size()` is increased by one, the new thread is running.\n
属性 `this->size()` 增加1, 新线程开始运行。]]

[[Returns:] [A pointer to the new __thread__ object.\n
新 __thread__ 对象的指针。]]

]

[endsect]

[section:add_thread Member function `add_thread()`]

    void add_thread(thread* thrd);

[variablelist

[[Precondition:] [The expression `delete thrd` is well-formed and will not result in undefined behaviour.\n
表达式 `delete thrd` 有效且不会产生无定义行为。]]

[[Effects:] [Take ownership of the __thread__ object pointed to by `thrd` and add it to the group.\n
获得 `thrd` 所指向的 __thread__ 对象的拥有权，并将它添加到线程组。]]

[[Postcondition:] [`this->size()` is increased by one.\n
属性 `this->size()` 增加计数1。]]

]

[endsect]

[section:remove_thread Member function `remove_thread()`]

    void remove_thread(thread* thrd);

[variablelist

[[Effects:] [If `thrd` is a member of the group, remove it without calling `delete`.\n
如果 `thrd` 指向的对象属于该线程组, 将该对象从该组中移除，不调用 `delete`。]]

[[Postcondition:] [If `thrd` was a member of the group, `this->size()` is decreased by one.\n
如果 `thrd` 指向的对象属于该线程组, 属性 `this->size()` 减少计数1。 ]]

]

[endsect]

[section:join_all Member function `join_all()`]

    void join_all();

[variablelist

[[Effects:] [Call `join()` on each __thread__ object in the group.\n
对组中每个 __thread__ 对象调用 `join()`。]]

[[Postcondition:] [Every thread in the group has terminated.\n
该组内所有线程结束。]]

[[Note:] [Since __join__ is one of the predefined __interruption_points__, `join_all()` is also an interruption point.\n
由于 __join__ 是一个预定义的 __interruption_points__, 所以 `join_all()` 也是一个中断点。]]

]

[endsect]

[section:interrupt_all Member function `interrupt_all()`]

    void interrupt_all();

[variablelist

[[Effects:] [Call `interrupt()` on each __thread__ object in the group.\n
对该组内每个 __thread__ 对象调用 `interrupt()` 函数。]]

]

[endsect]

[section:size Member function `size()`]

    int size();

[variablelist

[[Returns:] [The number of threads in the group.\n
该组内线程对象数目。]]

[[Throws:] [Nothing.\n
无]]

]

[endsect]


[endsect]

[endsect]
