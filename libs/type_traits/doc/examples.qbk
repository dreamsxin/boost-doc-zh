[/ 
  Copyright 2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:examples Examples 示例]

[section:copy An Optimized Version of std::copy  一个优化版本的std::copy]

Demonstrates a version of `std::copy` that uses `__has_trivial_assign` to
determine whether to use `memcpy` to optimise the copy operation 
(see [@../../examples/copy_example.cpp copy_example.cpp]):\n
示范了一个 `std::copy` 的版本，它使用 `__has_trivial_assign` 测定是否可以用 `memcpy` 来优化拷贝操作（参见 
[@../../examples/copy_example.cpp copy_example.cpp]）：

   //
   // opt::copy
   // same semantics as std::copy
   // calls memcpy where appropriate.
   // 和 std::copy 语义相同，适当时调用 memcpy
   //

   namespace detail{

   template<typename I1, typename I2, bool b>
   I2 copy_imp(I1 first, I1 last, I2 out, const boost::__integral_constant<bool, b>&)
   {
      while(first != last)
      {
         *out = *first;
         ++out;
         ++first;
      }
      return out;
   }

   template<typename T>
   T* copy_imp(const T* first, const T* last, T* out, const boost::__true_type&)
   {
      memmove(out, first, (last-first)*sizeof(T));
      return out+(last-first);
   }


   }

   template<typename I1, typename I2>
   inline I2 copy(I1 first, I1 last, I2 out)
   {
      //
      // We can copy with memcpy if T has a trivial assignment operator,
      // and if the iterator arguments are actually pointers (this last
      // requirement we detect with overload resolution):
      // 如果 T 具有平凡的赋值操作符且迭代器参数为真正的指针，我们可以用 memcpy 来复制 
      // (我们用重载决议来检测后一个要求):
      //
      typedef typename std::iterator_traits<I1>::value_type value_type;
      return detail::copy_imp(first, last, out, boost::__has_trivial_assign<value_type>());
   }


[endsect]

[section:fill An Optimised Version of std::fill 一个优化版本的std::fill]

Demonstrates a version of `std::fill` that uses `__has_trivial_assign` to
determine whether to use `memset` to optimise the fill operation 
(see [@../../examples/fill_example.cpp fill_example.cpp]):\n
示范了一个 `std::fill` 的版本，它使用 `__has_trivial_assign` 测定是否可以用 `memset` 来优化填充操作（参见
[@../../examples/fill_example.cpp fill_example.cpp]）：

   //
   // fill
   // same as std::fill, but uses memset where appropriate
   // 与 std::fill 相同，不过会在适当时使用 memset
   //
   namespace detail{

   template <typename I, typename T, bool b>
   void do_fill(I first, I last, const T& val, const boost::__integral_constant<bool, b>&)
   {
      while(first != last)
      {
         *first = val;
         ++first;
      }
   }

   template <typename T>
   void do_fill(T* first, T* last, const T& val, const boost::__true_type&)
   {
      std::memset(first, val, last-first);
   }

   }

   template <class I, class T>
   inline void fill(I first, I last, const T& val)
   {
      //
      // We can do an optimised fill if T has a trivial assignment 
      // operator and if it's size is one:
      // 如果 T 具有平凡的赋值操作符且它的大小为1，则我们可以进行优化的 fill:
      //
      typedef boost::__integral_constant<bool, 
         ::boost::__has_trivial_assign<T>::value && (sizeof(T) == 1)> truth_type;
      detail::do_fill(first, last, val, truth_type());
   }


[endsect]

[section:destruct An Example that Omits Destructor Calls For Types with Trivial Destructors 对于带有 trivial（非特殊）的析构函数的类型忽略析构函数调用的一个示例]

Demonstrates a simple algorithm that uses `__has_trivial_destruct` to
determine whether to destructors need to be called 
(see [@../../examples/trivial_destructor_example.cpp trivial_destructor_example.cpp]):\n
示范了一个简单算法，它使用 `__has_trivial_destruct` 测定是否需要调用析构函数（参见
[@../../examples/trivial_destructor_example.cpp trivial_destructor_example.cpp]）：

   //
   // algorithm destroy_array:
   // The reverse of std::unitialized_copy, takes a block of
   // initialized memory and calls destructors on all objects therein.
   // 与 std::unitialized_copy 相反，接受一块已初始化的内存并对其中的所有对象调用析构函数。
   //

   namespace detail{

   template <class T>
   void do_destroy_array(T* first, T* last, const boost::__false_type&)
   {
      while(first != last)
      {
         first->~T();
         ++first;
      }
   }

   template <class T>
   inline void do_destroy_array(T* first, T* last, const boost::__true_type&)
   {
   }

   } // namespace detail

   template <class T>
   inline void destroy_array(T* p1, T* p2)
   {
      detail::do_destroy_array(p1, p2, ::boost::__has_trivial_destructor<T>());
   }


[endsect]

[section:iter An improved Version of std::iter_swap 一个改进版本的std::iter_swap]

Demonstrates a version of `std::iter_swap` that use type traits to
determine whether an it's arguments are proxying iterators or not,
if they're not then it just does a `std::swap` of it's dereferenced 
arguments (the
same as `std::iter_swap` does), however if they are proxying iterators
then takes special care over the swap to ensure that the algorithm
works correctly for both proxying iterators, and even iterators of
different types 
(see [@../../examples/iter_swap_example.cpp iter_swap_example.cpp]):\n
示范了一个 `std::iter_swap` 的版本，它使用 type traits 测定它的参数是否是 proxying iterators，
如果它们不是，就仅仅对它的解引用后的参数做一次 `std::swap`（和 `std::iter_swap` 所做的一样），
反之，如果它们是 proxying iterators，就特别关照它们的交换，以确保对两个 proxying iterators，
甚至不同类型的 iterators 所做的操作正确（参见 [@../../examples/iter_swap_example.cpp iter_swap_example.cpp]）：

   //
   // iter_swap:
   // tests whether iterator is a proxying iterator or not, and
   // uses optimal form accordingly:
   // 测试迭代器是否为代理迭代器，并采用相应的优化形式：
   //
   namespace detail{

   template <typename I>
   static void do_swap(I one, I two, const boost::__false_type&)
   {
      typedef typename std::iterator_traits<I>::value_type v_t;
      v_t v = *one;
      *one = *two;
      *two = v;
   }
   template <typename I>
   static void do_swap(I one, I two, const boost::__true_type&)
   {
      using std::swap;
      swap(*one, *two);
   }

   }

   template <typename I1, typename I2>
   inline void iter_swap(I1 one, I2 two)
   {
      //
      // See is both arguments are non-proxying iterators, 
      // and if both iterator the same type:
      // 检查两个参数是否均为非代理迭代器，且两个迭代器为相同类型：
      //
      typedef typename std::iterator_traits<I1>::reference r1_t;
      typedef typename std::iterator_traits<I2>::reference r2_t;

      typedef boost::__integral_constant<bool,
         ::boost::__is_reference<r1_t>::value
         && ::boost::__is_reference<r2_t>::value
         && ::boost::__is_same<r1_t, r2_t>::value> truth_type;

      detail::do_swap(one, two, truth_type());
   }


[endsect]

[section:to_double Convert Numeric Types and Enums to double 将数字类型和枚举类型转换为double]

Demonstrates a conversion of
[@../../../../libs/numeric/conversion/doc/html/boost_numericconversion/definitions.html#boost_numericconversion.definitions.numeric_types
Numeric Types]
and enum types to double:\n
示范将 
[@../../../../libs/numeric/conversion/doc/html/boost_numericconversion/definitions.html#boost_numericconversion.definitions.numeric_types
数字类型] 和枚举类型转换为 double: 

    template<class T>
    inline double to_double(T const& value)
    {
        typedef typename boost::promote<T>::type promoted;
        return boost::numeric::converter<double,promoted>::convert(value);
    }

[endsect]

[endsect]

