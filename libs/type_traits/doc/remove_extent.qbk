[/ 
  Copyright 2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:remove_extent remove_extent]

   template <class T>
   struct remove_extent
   {
      typedef __below type;
   };
  
__type If `T` is an array type, then removes the topmost array bound, 
otherwise leaves `T` unchanged.\n
__type 如果 `T` 是数组类型，则移除最顶层数组界限，否则保留 `T` 不变。

__std_ref 8.3.4.

__compat If the compiler does not support partial specialization of class-templates
then this template will compile, but the member `type` will always be the same as 
type `T` except where __transform_workaround have been applied.\n
__compat 如果编译器不支持类模板的偏特化，这个模板也可以编译，但是成员 `type` 总是和 `T` 类型相同，除非 __transform_workaround 可用。

__header ` #include <boost/type_traits/remove_extent.hpp>` or ` #include <boost/type_traits.hpp>`

[table Examples 示例

[ [Expression 表达式] [Result Type 结果类型]]

[[`remove_extent<int>::type`][`int`]]

[[`remove_extent<int const[2]>::type`] [`int const`]]

[[`remove_extent<int[2][4]>::type`] [`int[4]`]]

[[`remove_extent<int[][2]>::type`] [`int[2]`]]

[[`remove_extent<int const*>::type`] [`int const*`]]

]

[endsect]

