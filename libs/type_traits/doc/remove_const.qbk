[/ 
  Copyright 2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:remove_const remove_const]

   template <class T>
   struct remove_const
   {
      typedef __below type;
   };
  
The same type as `T`, but with any /top level/ const-qualifier removed.\n
__type 与 `T` 的类型相同，但移除了任何 /顶层/ const 修饰符。

__std_ref 3.9.3.

__compat If the compiler does not support partial specialization of class-templates
then this template will compile, but the member `type` will always be the same as 
type `T` except where __transform_workaround have been applied.\n
__compat 如果编译器不支持类模板的偏特化，这个模板也可以编译，但是成员 `type` 总是和 `T` 类型相同，除非 __transform_workaround 可用。

__header ` #include <boost/type_traits/remove_const.hpp>` or ` #include <boost/type_traits.hpp>`

[table Examples 示例

[ [Expression 表达式] [Result Type 结果类型]]

[[`remove_const<int>::type`][`int`]]

[[`remove_const<int const>::type`] [`int`]]

[[`remove_const<int const volatile>::type`] [`int volatile`]]

[[`remove_const<int const&>::type`] [`int const&`]]

[[`remove_const<int const*>::type`] [`int const*`]]

]

[endsect]

