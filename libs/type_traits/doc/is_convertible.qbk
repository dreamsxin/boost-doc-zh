[/ 
  Copyright 2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:is_convertible is_convertible]
   template <class From, class To>
   struct is_convertible : public __tof {};
  
__inherit If an imaginary lvalue of type `From` is convertible to type `To` then 
inherits from __true_type, otherwise inherits from __false_type.\n
__inherit 如果一个类型为 `From` 的 imaginary lvalue（假想左值）可以转换为类型 `To`，则从 __true_type 继承，否则从 __false_type 继承。

Type From must not be an incomplete type.\n
类型 From 一定不能是一个不完整类型。

Type To must not be an incomplete, or function type.\n
类型 To 一定不能是一个不完整类型，或函数类型。

No types are considered to be convertible to array types or abstract-class types.\n
没有类型被认为具有转化为数组或抽象类类型的能力。

This template can not detect whether a converting-constructor is `public` or not: if
type `To` has a `private` converting constructor from type `From` then instantiating
`is_convertible<From, To>` will produce a compiler error.  For this reason `is_convertible`
can not be used to determine whether a type has a `public` copy-constructor or not.\n
这个模板不能检测一个转换构造函数是否是 `public` 的：如果类型 `To` 有一个从 `From` 到 `To` 的 `private` 
的转换构造函数，则实例化 `is_convertible<From,To>` 时会发生一个编译错误。因此 `is_convertible` 
不能用于检测一个类型是否有一个 `public` 的拷贝构造函数。

This template will also produce compiler errors if the conversion is ambiguous, 
for example:\n
如果转换是有歧义的，这个模板也会产生编译错误，比如：

   struct A {};
   struct B : A {};
   struct C : A {};
   struct D : B, C {};
   // This produces a compiler error, the conversion is ambiguous:
   bool const y = boost::is_convertible<D*,A*>::value;

__std_ref 4 and 8.5.

__compat This template is currently broken with Borland C++ Builder 5 (and earlier), 
for constructor-based conversions, and for the Metrowerks 7 (and earlier) 
compiler in all cases.  If the compiler does not support `__is_abstract`, then the
template parameter `To` must not be an abstract type.\n
__compat 对于基于构造函数的转换，这个模板现在无法和 Borland C++ Builder 5（或更早版本）一起工作，在任何情况下，也不能和 
Metrowerks 7（或更早版本）一起工作。如果编译器不支持 `__is_abstract`，那么模板参数 `To` 一定不能是一个抽象类型。

__header ` #include <boost/type_traits/is_convertible.hpp>` or ` #include <boost/type_traits.hpp>`

__examples

[:`is_convertible<int, double>` inherits from `__true_type`.]

[:`is_convertible<const int, double>::type` is the type `__true_type`.]

[:`is_convertible<int* const, int*>::value` is an integral constant 
expression that evaluates to /true/.]

[:`is_convertible<int const*, int*>::value` is an integral constant 
expression that evaluates to /false/: the conversion would require a `const_cast`.]

[:`is_convertible<int const&, long>::value` is an integral constant 
expression that evaluates to /true/.]

[:`is_convertible<int, int>::value` is an integral constant 
expression that evaluates to /false/.]

[:`is_convertible<T, T>::value_type` is the type `bool`.]

[endsect]


