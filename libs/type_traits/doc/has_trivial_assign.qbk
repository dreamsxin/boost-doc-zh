[/ 
  Copyright 2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:has_trivial_assign has_trivial_assign]
   template <class T>
   struct has_trivial_assign : public __tof {};
  
__inherit If T is a (possibly cv-qualified) type with a trivial assignment-operator
then inherits from __true_type, otherwise inherits from __false_type.\n
__inherit 如果 T 是一个带有 trivial（非特殊）的赋值操作符的（可能被 cv 修饰的）类型，则从 __true_type 继承，否则从 __false_type 继承。
类型 `T` 必须是一个完整类型。

If a type has a trivial assignment-operator then the operator has the same effect
as copying the bits of one object to the other: 
calls to the operator can be safely replaced with a call to `memcpy`.\n
如果一个类型有一个 trivial（非特殊）的赋值操作符，则这个操作符的作用就好像将一个对象的字节逐个地拷贝到另一个：
对这个操作符的调用可以安全地替换为对 `memcpy` 的调用。

__compat If the compiler does not support partial-specialization of class 
templates, then this template can not be used with function types.\n
__compat 如果编译器不支持类模板的偏特化，则这个模板不能用于函数类型。

Without some (as yet unspecified) help from the compiler, 
has_trivial_assign will never report that a user-defined class or struct has a 
trivial constructor; this is always safe, if possibly sub-optimal.  Currently 
(May 2005) only MWCW 9 and Visual C++ 8 have the necessary compiler __intrinsics to detect 
user-defined classes with trivial constructors.\n
没有来自编译器的某些（未加规定的）帮助，`has_nothrow_assign` 绝不会报告一个 class 或 struct 有一个 
trivial（非特殊）的赋值操作符，如果 sub-optimal 可能，这总是安全的。
当前（2005 年 5 月）只有 Visual C++ 8 具有探测带有 trivial（非特殊）的赋值操作符的用户自定义类所必须的编译器 __intrinsics。

__std_ref 12.8p11.

__header ` #include <boost/type_traits/has_trivial_assign.hpp>` or ` #include <boost/type_traits.hpp>`

__examples

[:`has_trivial_assign<int>` inherits from `__true_type`.]

[:`has_trivial_assign<char*>::type` is the type `__true_type`.]

[:`has_trivial_assign<int (*)(long)>::value` is an integral constant 
expression that evaluates to /true/.]

[:`has_trivial_assign<MyClass>::value` is an integral constant 
expression that evaluates to /false/.]

[:`has_trivial_assign<T>::value_type` is the type `bool`.]

[endsect]

