[/ 
  Copyright 2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:is_stateless is_stateless]
   template <class T>
   struct is_stateless : public __tof {};
  
__inherit Ff T is a stateless type then inherits from __true_type, otherwise
from __false_type.\n
__inherit 如果 T 是一个 stateless type，则从 __true_type 继承，否则从 __false_type 继承。

Type T must be a complete type.\n
类型 T 必须是一个完整类型。

A stateless type is a type that has no storage and whose constructors and 
destructors are trivial. That means that `is_stateless` only inherits from 
__true_type if the following expression is `true`:\n
一个 stateless type 是一个无存储空间，而且构造函数和析构函数都是 trivial（非特殊）的。
这意味着只有下面的表达式成立，`is_stateless` 才从 __true_type 继承：

   ::boost::has_trivial_constructor<T>::value
   && ::boost::has_trivial_copy<T>::value
   && ::boost::has_trivial_destructor<T>::value
   && ::boost::is_class<T>::value
   && ::boost::is_empty<T>::value

__std_ref 3.9p10.

__header ` #include <boost/type_traits/is_stateless.hpp>` or ` #include <boost/type_traits.hpp>`

__compat If the compiler does not support partial-specialization of class templates, 
then this template can not be used with function types.\n
__compat 如果编译器不支持类模板的偏特化，则这个模板不能用于 function types（函数类型）。

Without some (as yet unspecified) help from the compiler, is_stateless will never 
report that a class or struct is stateless; this is always safe, 
if possibly sub-optimal.  Currently (May 2005) only MWCW 9 and Visual C++ 8 have the necessary 
compiler __intrinsics to make this template work automatically.\n
没有来自编译器的某些（未加规定的）帮助，is_stateless 绝不会报告一个 class 或 struct 是一个 stateless，如果 sub-optimal 
可能，这总是安全的。当前（2005 年 5 月）只有 MWCW 9 和 Visual C++ 8 具有使这个模板自动工作所必须的编译器 __intrinsics。

[endsect]

