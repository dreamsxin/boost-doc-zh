[/ 
  Copyright 2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:is_base_of is_base_of]
   template <class Base, class Derived>
   struct is_base_of : public __tof {};
  
__inherit If Base is base class of type Derived or if both types are the same
then inherits from __true_type, 
otherwise inherits from __false_type.\n
__inherit 如果 Base 是类型 Derived 的基类，或者两个类型相同，则从 __true_type 继承，否则从 __false_type 继承。

This template will detect non-public base classes, and ambiguous base classes.\n
这个模板可用于检测非公有基类，和 ambiguous base classes（歧义基类）。

Note that `is_base_of<X,X>` will always inherit from __true_type.  [*This is the
case even if `X` is not a class type].  This is a change in behaviour 
from Boost-1.33 in order to track the Technical Report on C++ Library Extensions.\n
注意，`is_base_of<X,X>` 总是从 __true_type 继承。[*甚至在 `X` 不是一个类类型时也是如此]。
这是 Boost-1.33 为了符合 C++ 库扩展技术报告而做的行为上的更改。

Types `Base` and `Derived` must not be incomplete types.\n
类型 `Base` 和 `Derived` 一定不能是不完整类型。

__std_ref 10.

__header ` #include <boost/type_traits/is_base_of.hpp>` or ` #include <boost/type_traits.hpp>`

__compat If the compiler does not support partial-specialization of class templates, 
then this template can not be used with function types.  There are some older compilers
which will produce compiler errors if `Base` is a private base class of `Derived`, or if
`Base` is an ambiguous base of `Derived`.  These compilers include Borland C++, older 
versions of Sun Forte C++, Digital Mars C++, and older versions of EDG based compilers.\n
__compat 如果编译器不支持类模板的偏特化，则这个模板可能不能和 function types（函数类型）一起使用。
如果 `Base` 是 `Derived` 的私有基类，或者 `Base` 是 `Derived` 的歧义基类，则在一些老旧的编译器上可能会产生编译错误。
这些编译器包括 Borland C++，Sun Forte C++ 的旧版本，Digital Mars C++，和基于 EDG 的旧版本的编译器。

__examples

[:Given: ` class Base{}; class Derived : public Base{};` ]

[:`is_base_of<Base, Derived>` inherits from `__true_type`.]

[:`is_base_of<Base, Derived>::type` is the type `__true_type`.]

[:`is_base_of<Base, Derived>::value` is an integral constant 
expression that evaluates to /true/.]

[:`is_base_of<Base, Base>::value` is an integral constant 
expression that evaluates to /true/: a class is regarded as it's own base.]

[:`is_base_of<T, T>::value_type` is the type `bool`.]

[endsect]


