[/ 
  Copyright 2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:is_class is_class]
   template <class T>
   struct is_class : public __tof {};
  
__inherit If T is a (possibly cv-qualified) class type then inherits from __true_type, 
otherwise inherits from __false_type.\n
__inherit 如果 T 是一个（可能被 cv 修饰的）类类型，则从 __true_type 继承，否则从 __false_type 继承。

__std_ref 3.9.2 and 9.2.

__header ` #include <boost/type_traits/is_class.hpp>` or ` #include <boost/type_traits.hpp>`

__compat Without (some as yet unspecified) help from the compiler, 
we cannot distinguish between union and class types, as a result this type 
will erroneously inherit from __true_type for union types.  See also __is_union.  
Currently (May 2005) only Visual C++ 8 has the necessary compiler __intrinsics to
correctly identify union types, and therefore make is_class function correctly.\n
__compat 没有来自编译器的（某些未加规定的）帮助，我们无法区分 union 类型和类类型，对于 union 类型，结果会错误地从 __true_type 继承。
参见 __is_union。当前（2005 年 5 月）只有 Visual C++ 8 具有正确识别 union 类型，因而使得 is_class 
函数得以正确工作所必须的编译器 __intrinsics。

__examples

[:Given: `class MyClass;` then:]

[:`is_class<MyClass>` inherits from `__true_type`.]

[:`is_class<MyClass const>::type` is the type `__true_type`.]

[:`is_class<MyClass>::value` is an integral constant 
expression that evaluates to /true/.]

[:`is_class<MyClass&>::value` is an integral constant 
expression that evaluates to /false/.]

[:`is_class<MyClass*>::value` is an integral constant 
expression that evaluates to /false/.]

[:`is_class<T>::value_type` is the type `bool`.]

[endsect]

