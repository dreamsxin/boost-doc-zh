[/ 
  Copyright 2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:has_trivial_destructor has_trivial_destructor]
   template <class T>
   struct has_trivial_destructor : public __tof {};
  
__inherit If T is a (possibly cv-qualified) type with a trivial destructor
then inherits from __true_type, otherwise inherits from __false_type.\n
__inherit 如果 T 是一个带有 trivial（非特殊）的析构函数的（可能被 cv 修饰的）类型，则从 __true_type 继承，否则从 __false_type 继承。

If a type has a trivial destructor then the destructor has no effect: 
calls to the destructor can be safely omitted.  Note that using meta-programming
to omit a call to a single trivial-constructor call is of no benefit whatsoever. 
However, if loops and/or exception handling code can also be omitted, then some
benefit in terms of code size and speed can be obtained.\n
如果一个类型有一个 trivial（非特殊）的析构函数，则这个析构函数没什么作用：对这个析构函数的调用可以安全地忽略。
注意，使用元编程如果只是单独忽略对一个 trivial（非特殊）析构函数的调用没有任何好处。
但是，如果循环和/或异常处理代码也可以被忽略，则可以获得代码大小和速度方面的好处。

__compat If the compiler does not support partial-specialization of class 
templates, then this template can not be used with function types.\n
__compat 如果编译器不支持类模板的偏特化，则这个模板不能用于 function types（函数类型）。

Without some (as yet unspecified) help from the compiler, 
has_trivial_destructor will never report that a user-defined class or struct has a 
trivial destructor; this is always safe, if possibly sub-optimal.  Currently 
(May 2005) only MWCW 9 and Visual C++ 8 have the necessary compiler __intrinsics to detect 
user-defined classes with trivial constructors.\n
没有来自编译器的某些（未加规定的）帮助，has_trivial_destructor 绝不会报告一个用户自定义 class 或 struct 有一个 trivial（非特殊）的析构函数，如果 sub-optimal 可能，这总是安全的。当前（2005 年 5 月）只有 MWCW 9 和 Visual C++ 8 具有探测带有 trivial（非特殊）的析构函数的用户自定义类所必须的编译器 __intrinsics。

__std_ref 12.4p3.

__header ` #include <boost/type_traits/has_trivial_destructor.hpp>` or ` #include <boost/type_traits.hpp>`

__examples

[:`has_trivial_destructor<int>` inherits from `__true_type`.]

[:`has_trivial_destructor<char*>::type` is the type `__true_type`.]

[:`has_trivial_destructor<int (*)(long)>::value` is an integral constant 
expression that evaluates to /true/.]

[:`has_trivial_destructor<MyClass>::value` is an integral constant 
expression that evaluates to /false/.]

[:`has_trivial_destructor<T>::value_type` is the type `bool`.]

[endsect]

