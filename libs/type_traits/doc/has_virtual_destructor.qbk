[/ 
  Copyright 2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:has_virtual_destructor has_virtual_destructor]
   template <class T>
   struct has_virtual_destructor : public __tof {};
  
__inherit If T is a (possibly cv-qualified) type with a virtual destructor
then inherits from __true_type, otherwise inherits from __false_type.\n
__inherit 如果 T 是一个带有虚拟析构函数的（可能被 cv 修饰的）类型，则从 __true_type 继承，否则从 __false_type 继承。

__compat This trait is provided for completeness, since it's part of the
Technical Report on C++ Library Extensions.  However, there is currently no 
way to portably implement this trait.  The default version provided 
always inherits from __false_type, and has to be explicitly specialized for 
types with virtual destructors unless the compiler used has compiler __intrinsics
that enable the trait to do the right thing: currently (May 2005) only Visual C++
8 and GCC-4.3 have the necessary __intrinsics.\n
__compat 这个 trait 被完全提供，因为它是 C++ 库扩展技术报告的一部分。然而，现在还没有可移植地实现这个 trait 的方法。
所提供的缺省版本总是从 __false_type 继承，而且必须为带有虚拟析构函数的类型进行显式特化，除非使用可以让这个 trait 
做对事情的编译器 __intrinsics：目前（2005 年 5 月）只有 Visual C++ 8 具有必要的 __intrinsics。

__std_ref 12.4.

__header ` #include <boost/type_traits/has_virtual_destructor.hpp>` or ` #include <boost/type_traits.hpp>`

[endsect]

