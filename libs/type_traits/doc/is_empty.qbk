[/ 
  Copyright 2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:is_empty is_empty]
   template <class T>
   struct is_empty : public __tof {};
  
__inherit If T is an empty class type then inherits from __true_type, 
otherwise inherits from __false_type.\n
__inherit 如果 T 是一个 empty class type（空的类类型），则从 __true_type 继承，否则从 __false_type 继承。

__std_ref 10p5.

__header ` #include <boost/type_traits/is_empty.hpp>` or ` #include <boost/type_traits.hpp>`

__compat In order to correctly detect empty classes this trait relies on either:\n
__compat 为了正确检测空类，这个 trait 依赖于：

* the compiler implementing zero sized empty base classes, or\n
  编译器实现 0 大小空基类，以及
* the compiler providing __intrinsics to detect empty classes. \n
  编译器提供检测空类的 __intrinsics。

Can not be used with incomplete types.\n
不能用于不完整类型。

Can not be used with union types, until is_union can be made to work.\n
不能用于 union 类型，除非 is_union 能够有效工作。

If the compiler does not support partial-specialization of class templates, 
then this template can not be used with abstract types.\n
如果编译器不支持类模板的偏特化，则这个模板不能用于抽象类型。

__examples

[:Given: `struct empty_class {};` ]

[:`is_empty<empty_class>` inherits from `__true_type`.]

[:`is_empty<empty_class const>::type` is the type `__true_type`.]

[:`is_empty<empty_class>::value` is an integral constant 
expression that evaluates to /true/.]

[:`is_empty<T>::value_type` is the type `bool`.]

[endsect]

