[/ 
  Copyright 2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:intrinsics Support for Compiler Intrinsics 编译器固有的支持]

There are some traits that can not be implemented within the current C++ language:
to make these traits "just work" with user defined types, some kind of additional
help from the compiler is required.  Currently (April 2008) Visual C++ 8 and 9,
GNU GCC 4.3 and MWCW 9
provide the necessary intrinsics, and other compilers will no doubt follow in due 
course.  \n
有一些 traits 在当前的 C++ 语言中不能实现：为了让这些 traits 能和用户定义类型一起“正确地工作”，需要一些来自编译器的额外的帮助。
现在（2008 年 4 月）Visual C++ 8 和 9, GNU GCC 4.3 以及 MWCW 9 提供了必要的内部特性，其它编译器无疑会及时跟进。

The Following traits classes always need compiler support to do the right thing 
for all types 
(but all have safe fallback positions if this support is unavailable):\n
下面的 traits 类对于所有类型都需要编译器的支持才能正常工作（不过，如果没有这些支持，它们也都会安全地退回原位）：

* __is_union
* __is_pod
* __has_trivial_constructor
* __has_trivial_copy
* __has_trivial_assign
* __has_trivial_destructor
* __has_nothrow_constructor
* __has_nothrow_copy
* __has_nothrow_assign
* __has_virtual_destructor

The following traits classes can't be portably implemented in the C++ language, 
although in practice, the implementations do in fact do the right thing on all
the compilers we know about:\n
下面的 traits 类在 C++ 语言中不能可移植地实现，但是，在实践中，这个实现在我们所知道的编译器上做的事情总是正确的：

* __is_empty
* __is_polymorphic

The following traits classes are dependent on one or more of the above:\n
下面的 traits 类依赖于上面一个或多个 traits 类：

* __is_class
* __is_stateless

The hooks for compiler-intrinsic support are defined in 
[@../../../../boost/type_traits/intrinsics.hpp boost/type_traits/intrinsics.hpp], adding support for new compilers is simply
a matter of defining one of more of the following macros:\n
为编译器固有支持准备的钩子定义在 [@../../../../boost/type_traits/intrinsics.hpp boost/type_traits/intrinsics.hpp] 
中，为新的编译器增加支持只不过是定义下面一个或多个宏：

[table Macros for Compiler Intrinsics 为编译器固有支持定义的宏
   [[BOOST_IS_UNION(T)][Should evaluate to true if T is a union type\n
   如果 T 是一个 union 类型，则应该得到 true]]
   [[BOOST_IS_POD(T)][Should evaluate to true if T is a POD type\n
   如果 T 是一个 POD 类型，则应该得到 true]]
   [[BOOST_IS_EMPTY(T)][Should evaluate to true if T is an empty struct or union\n
   如果 T 是一个空的 struct 或 union，则应该得到 true]]
   [[BOOST_HAS_TRIVIAL_CONSTRUCTOR(T)][Should evaluate to true if the default constructor for T is trivial (i.e. has no effect)\n
   如果 T 的缺省构造函数是 trivial（非特殊）的（也就是说，起不了什么作用），则应该得到 true]]
   [[BOOST_HAS_TRIVIAL_COPY(T)][Should evaluate to true if T has a trivial copy constructor (and can therefore be replaced by a call to memcpy)\n
   如果 T 有一个 trivial（非特殊）的拷贝构造函数（并因此可以通过调用 memcpy 来重新设置），则应该得到 true]]
   [[BOOST_HAS_TRIVIAL_ASSIGN(T)][Should evaluate to true if T has a trivial assignment operator (and can therefore be replaced by a call to memcpy)\n
   如果 T 有一个 trivial（非特殊）的缺省复制操作符（并因此可以通过调用 memcpy 来重新设置），则应该得到 true]]
   [[BOOST_HAS_TRIVIAL_DESTRUCTOR(T)][Should evaluate to true if T has a trivial destructor (i.e. ~T() has no effect)\n
   如果 T 有一个 trivial（非特殊）的析构函数（也就是说，~T() 起不了什么作用），则应该得到 true]]
   [[BOOST_HAS_NOTHROW_CONSTRUCTOR(T)][Should evaluate to true if `T x;` can not throw\n
   如果 T x; 不会抛出异常，则应该得到 true]]
   [[BOOST_HAS_NOTHROW_COPY(T)][Should evaluate to true if `T(t)` can not throw\n
   如果 T(t) 不会抛出异常，则应该得到 true]]
   [[BOOST_HAS_NOTHROW_ASSIGN(T)][Should evaluate to true if `T t, u; t = u` can not throw\n
   如果 T t, u; t = u 不会抛出异常，则应该得到 true]]
   [[BOOST_HAS_VIRTUAL_DESTRUCTOR(T)][Should evaluate to true T has a virtual destructor\n
   如果 T 有一个虚拟析构函数，则应该得到 true]]

   [[BOOST_IS_ABSTRACT(T)][Should evaluate to true if T is an abstract type\n
   如果 T 是一个抽象类型，则应该求值为 true]]
   [[BOOST_IS_BASE_OF(T,U)][Should evaluate to true if T is a base class of U\n
   如果 T 是一个 U 的基类，则应该求值为 true]]
   [[BOOST_IS_CLASS(T)][Should evaluate to true if T is a class type\n
   如果 T 是一个类类型，则应该求值为 true]]
   [[BOOST_IS_CONVERTIBLE(T,U)][Should evaluate to true if T is convertible to U\n
   如果 T 可转换为 U，则应该求值为 true]]
   [[BOOST_IS_ENUM(T)][Should evaluate to true is T is an enum\n
   如果 T 是一个枚举类型，则应该求值为 true]]
   [[BOOST_IS_POLYMORPHIC(T)][Should evaluate to true if T is a polymorphic type\n
   如果 T 是一个多态类型，则应该求值为 true]]
   [[BOOST_ALIGNMENT_OF(T)][Should evaluate to the alignment requirements of type T.\n
   应该求值为类型 T 的对齐要求。]]
   
]

[endsect]

