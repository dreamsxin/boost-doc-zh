[/
 / Copyright (c) 2009 Steven Watanabe
 /
 / Distributed under the Boost Software License, Version 1.0. (See
 / accompanying file LICENSE_1_0.txt or copy at
 / http://www.boost.org/LICENSE_1_0.txt)
]

[section:introduction Introduction 简介]

Random numbers are required in a number of different problem domains, such as\n
许多应用领域都需要用到随机数，例如：

* numerics (simulation, Monte-Carlo integration) \n
  数字控制 (模拟, Monte-Carlo 算法) 
* games (non-deterministic enemy behavior) \n
  游戏 (敌人的行为应该是不确定的) 
* security (key generation) \n
  安全 (密钥生成) 
* testing (random coverage in white-box tests) \n
  测试 (白盒测试中的随机覆盖) 

The Boost Random Number Generator Library provides a framework for random
number generators with well-defined properties so that the generators can be
used in the demanding numerics and security domains. For a general
introduction to random numbers in numerics, see \n
Boost 随机数生成库框架中的随机数生成器具有良好的性质，因此它们可以用于数字控制和安全领域。关于数字控制中随机数应用的介绍，参看：

[:"Numerical Recipes in C: The art of scientific computing", William H. Press,
Saul A. Teukolsky, William A. Vetterling, Brian P. Flannery, 2nd ed., 1992,
pp. 274-328]
 
Depending on the requirements of the problem domain, different variations of
random number generators are appropriate: \n
以下几种随机数生成器对应于不同的应用领域：

* non-deterministic random number generator \n
  不确定随机数生成器
* pseudo-random number generator \n
  伪随机数生成器
* quasi-random number generator \n
  拟随机数生成器

All variations have some properties in common, these concepts (in the STL
sense) are called __NumberGenerator and __UniformRandomNumberGenerator. Each
concept will be defined in a subsequent section. \n
所有的变体都具有一些共同的性质，这些 (STL) 概念叫做 __NumberGenerator 和 __UniformRandomNumberGenerator。
每一种概念都将在相应节中予以定义。

The goals for this library are the following:\n
本库的目标是：

* allow easy integration of third-party random-number generators \n
  简化第三方随机数生成器的集成
* define a validation interface for the generators \n
  定义生成器的检验接口
* provide easy-to-use front-end classes which model popular distributions \n
  为常见分布提供易用的前端类
* provide maximum efficiency \n
  提供尽可能高的效率
* allow control on quantization effects in front-end processing (not yet done) \n
  控制前端处理中的量子化 (quantization) 问题 (未完成)

[endsect]

[section:number_generator Number Generator 数字生成器]

A number generator is a /function object/ (std:20.3 [lib.function.objects]) that
takes zero arguments. Each call to `operator()` returns a number. In the
following table, X denotes a number generator class returning objects of type
T, and u is a value of X.\n
数字生成器是带 0 个参数的 /函数对象/ (std:20.3 [lib.function.objects])。每次调用 `operator()` 都返回一个数字。
下表中，X 是返回类型 T 的数字生成器类，u 是 X 的实例。

[table NumberGenerator requirements 要求
  [[expression 表达式] [return type 返回类型] [pre/post-condition 先验/后验条件]]
  [[`X::result_type`] [`T`] [`std::numeric_limits<T>::is_specialized` is
                             `true`, `T` is __LessThanComparable]]
  [[`u.operator()()`] [`T`] [-]]
] 

[note The NumberGenerator requirements do not impose any restrictions on the
characteristics of the returned numbers.\n
NumberGenerator 要求中并未对返回值的性质作任何限定。]

[endsect]

[section:uniform_random_number_generator Uniform Random Number Generator 均匀随机数生成器]

A uniform random number generator is a __NumberGenerator that provides a
sequence of random numbers uniformly distributed on a given range. The
range can be compile-time fixed or available (only) after run-time construction
of the object.\n
一个均匀随机数生成器是一个 __NumberGenerator，它能提供在给定值域内均匀分布的随机数序列。
这一值域可以是编译时就确定的；也可以是 (仅) 在运行时生成器构建之后才可知的。

The /tight lower bound/ of some (finite) set S is the (unique) member l in S, so
that for all v in S, l <= v holds. Likewise, the /tight upper bound/ of some
(finite) set S is the (unique) member u in S, so that for all v in S, v <= u
holds.\n
(有限)集合 S 的 /紧下界/ 是 S 中的(唯一)元素 l，满足：对 S 中的任意元素 v，l <= v 成立。
类似地，(有限)集合 S 的 /紧上界/ 是 S 中的(唯一)元素 u，满足：对 S 中的任意元 v，v <= u 成立。

In the following table, X denotes a number generator class returning objects
of type T, and v is a const value of X.\n
下表中，X 是返回类型 T 的均匀随机数生成器类，v 是 X 的 const 实例。

[table UniformRandomNumberGenerator requirements 要求
  [[expression 表达式] [return type 返回类型] [pre/post-condition 先验/后验条件]]
  [[`X::has_fixed_range`] [`bool`] [compile-time constant; if `true`, the range
                                    on which the random numbers are uniformly
                                    distributed is known at compile-time and
                                    members `min_value` and `max_value` exist.
                                    Note: This flag may also be `false` due to
                                    compiler limitations\n
                                    编译时常量；若为 `true`，随机数均匀分布的值域在编译时是可知的，成员 `min_value` 和 `max_value` 存在。
                                    注意：由于编译器的限制，这一标志可能为 `false`。]]
  [[`X::min_value`] [`T`] [compile-time constant; `min_value` is only defined if
                           `has_fixed_range` is `true`.  If it exists, it is
                           equal to `v.min()`.\n
                           编译时常量；`min_value` 仅当 `has_fixed_range` 为 `true` 时有定义。若存在则等于 `v.min()`]]
  [[`X::max_value`] [`T`] [compile-time constant; `max_value` is only defined if
                           `has_fixed_range` is `true`.  If it exists, it is
                           equal to `v.max()`\n
                           编译时常量；`max_value` 仅当 `has_fixed_range` 为 `true` 时有定义。若存在则等于 `v.max()`]] 
  [[`v.min()`] [`T`] [tight lower bound on the set of all values returned by
                      `operator()`. The return value of this function shall not
                      change during the lifetime of the object.\n
                      `operator()` 可能返回的值的紧下界。此函数的返回值在 v 的生存期内不会改变。]]
  [[`v.max()`] [`T`] [if `std::numeric_limits<T>::is_integer`, tight upper
                      bound on the set of all values returned by `operator()`,
                      otherwise, the smallest representable number larger than
                      the tight upper bound on the set of all values returned
                      by `operator()`.  In any case, the return value of this
                      function shall not change during the lifetime of the
                      object.\n
                      若 `std::numeric_limits<T>::is_integer` 为真，则为 `operator()` 可能返回的值的紧上界；
                      否则为大于该紧上界的最小可表示数字。此函数的返回值在 v 的生存期内不会改变。]]
]

The member functions `min`, `max`, and `operator()` shall have amortized
constant time complexity.\n
成员函数 `min`, `max`, 和 `operator()` 的均摊时间复杂度应当是常数。

[note For integer generators (i.e. integer `T`), the generated values `x`
fulfill `min() <= x <= max()`, for non-integer generators (i.e. non-integer
`T`), the generated values `x` fulfill `min() <= x < max()`.\n
对于整数生成器 (即 `T` 为整数类型)，生成的值 `x` 满足 `min() <= x <= max()`；
对非整数生成器 (即 `T` 为非整数类型)，生成的值 `x` 满足 `min() <= x < max()`。

Rationale: The range description with min and max serves two purposes. First,
it allows scaling of the values to some canonical range, such as [0..1).
Second, it describes the significant bits of the values, which may be
relevant for further processing.\n
原理：min 和 max 所描述的值域有两个用途。首先，借助它可以把生成的值缩放到某个“正规”的值域内，如 [0..1)。
其次，它描述了生成值的有效位数，后者在进一步处理过程中可能会有用。

The range is a closed interval \[min,max\] for integers, because the underlying
type may not be able to represent the half-open interval \[min,max+1). It is
a half-open interval \[min, max) for non-integers, because this is much more
practical for borderline cases of continuous distributions.\n
对于整数，值域是闭区间 \[min,max\]，因为现有的整数类型可能无法表示半开区间 \[min,max+1)。
对于非整数，值域是半开区间 \[min, max)，因为作此规定在处理连续分布的边界情况时更为方便。]

[note The __UniformRandomNumberGenerator concept does not require
`operator()(long)` and thus it does not fulfill the `RandomNumberGenerator`
(std:25.2.11 \[lib.alg.random.shuffle\]) requirements. Use the
__random_number_generator adapter for that.\n
__UniformRandomNumberGenerator 概念并不需要 `operator()(long)` 因此不满足 `RandomNumberGenerator` 
(std:25.2.11 \[lib.alg.random.shuffle\]) 需求。如果需要，应该使用 __random_number_generator。

Rationale: `operator()(long)` is not provided, because mapping the output of
some generator with integer range to a different integer range is not trivial.\n
原理：没有提供 `operator()(long)`，因为把某些生成器产生的结果从一个整数值域映射到另一个整数值域会带来开销。]

[endsect]

[section:non_deterministic_uniform_random_number_generator Non-deterministic Uniform Random Number Generator 不确定均匀随机数生成器]

A non-deterministic uniform random number generator is a
__UniformRandomNumberGenerator that is based on some stochastic process.
Thus, it provides a sequence of truly-random numbers. Examples for such
processes are nuclear decay, noise of a Zehner diode, tunneling of quantum
particles, rolling a die, drawing from an urn, and tossing a coin. Depending
on the environment, inter-arrival times of network packets or keyboard events
may be close approximations of stochastic processes.\n
一个不确定均匀随机数生成器是一个 __UniformRandomNumberGenerator，它基于某种随机过程，因此能提供“真正随机的”的随机数序列。
随机过程包括原子核衰变、Zehner 二极管的噪音、量子隧道效应、投掷骰子、罐中取物、投掷硬币等等。
网络数据包到达的间隔、键盘事件有时也可以被看作随机过程。

The class __random_device is a model for a non-deterministic random number
generator.\n
__random_device 类是不确定随机数生成器的一个模型。

[note This type of random-number generator is useful for security
applications, where it is important to prevent an outside attacker from
guessing the numbers and thus obtaining your encryption or authentication key.
Thus, models of this concept should be cautious not to leak any information,
to the extent possible by the environment. For example, it might be advisable
to explicitly clear any temporary storage as soon as it is no longer needed.\n
这种随机数生成器可以用于安全应用，从而避免入侵者“猜出”程序所生成的随机数，从而窃取密码或者认证密钥。
因此，这一概念的模型必须小心设计，不能泄露与环境有关的任何信息。例如，及时清除临时数据可能是很恰当的。]

[endsect]

[section:pseudo_random_number_generator Pseudo-Random Number Generator 伪随机数生成器]

A pseudo-random number generator is a __UniformRandomNumberGenerator which
provides a deterministic sequence of pseudo-random numbers, based on some
algorithm and internal state. [classref boost::random::linear_congruential
Linear congruential] and [classref boost::random::inversive_congruential
inversive congruential] generators are examples of such [prng pseudo-random
number generators]. Often, these generators are very sensitive to their
parameters. In order to prevent wrong implementations from being used, an
external testsuite should check that the generated sequence and the validation
value provided do indeed match.\n
一个伪随机数生成器是一个 __UniformRandomNumberGenerator，它根据某一算法和内部状态提供确定的伪随机数序列。
[classref boost::random::linear_congruential 线性同余] 和 [classref boost::random::inversive_congruential 反向同余] 生成器属于此类生成器。
此类生成器的行为往往在很大程度上取决于其参数。为检查出错误的实现，应该提供一个外部测试套件来检查所产生的序列和验证值相符。

Donald E. Knuth gives an extensive overview on pseudo-random number generation
in his book "The Art of Computer Programming, Vol. 2, 3rd edition,
Addison-Wesley, 1997". The descriptions for the specific generators contain
additional references.\n
Donald E. Knuth 在其著作 "The Art of Computer Programming, Vol. 2, 3rd edition, Addison-Wesley, 1997" 中给出了伪随机数生成的综述。
对各个生成器的描述将分别指出其参考资料。

[note Because the state of a pseudo-random number generator is necessarily
finite, the sequence of numbers returned by the generator will loop
eventually.\n
因为伪随机数生成器的状态是有穷的，生成器返回的数字序列最终总会陷入循环。]

In addition to the __UniformRandomNumberGenerator requirements,
a pseudo-random number generator has some additional requirements. In the
following table, `X` denotes a pseudo-random number generator class returning
objects of type `T`, `x` is a value of `T`, `u` is a value of `X`, and `v` is
a const value of `X`.\n
伪随机数生成器的需求是 __UniformRandomNumberGenerator 需求的超集。
下表中，`X` 是返回类型 `T` 的伪随机数生成器类，`x` 是 `T` 的实例，`u` 是 `X` 的实例，`v` 是 `X` 的 const 实例。

[table PseudoRandomNumberGenerator requirements 要求
  [[expression 表达式] [return type 返回类型] [pre/post-condition 先验/后验条件]]
  [[`X()`] [-] [creates a generator in some implementation-defined state.
                Note: Several generators thusly created may possibly produce
                dependent or identical sequences of random numbers.\n
                创建一个生成器，其初始状态取决于实现。 注意：用这种方法创建的多个生成器实例可能产生有关或者相同的随机数序列。]]
  [[`explicit X(...)`] [-] [creates a generator with user-provided state; the
                            implementation shall specify the constructor
                            argument(s)\n
                            创建一个生成器，其初始状态由用户提供；构造函数的参数由实现确定。]]
  [[`u.seed(...)`] [`void`] [sets the current state according to the
                             argument(s); at least functions with the same
                             signature as the non-default constructor(s)
                             shall be provided.\n
                             根据参数设置当前状态；至少要提供一个与非默认构造函数签名式相同的 seed 函数。]]
  [[`X::validation(x)`] [`bool`] [compares the pre-computed and hardcoded
                                  10001th element in the generator's random
                                  number sequence with x. The generator must
                                  have been constructed by its default
                                  constructor and seed must not have been
                                  called for the validation to be
                                  meaningful.\n
                                  把 x 和随机数序列的第 10001 个元素相比，后者是预先计算出来并硬编码的。
                                  生成器必须使用默认构造函数构建，并且没有调用 seed，以确保验证是有意义的。]]
]

[note The seed member function is similar to the assign member function in
STL containers. However, the naming did not seem appropriate.\n
seed 成员函数与 STL 容器的 assign 成员函数类似，尽管后者的命名不太恰当。]

Classes which model a pseudo-random number generator shall also model
__EqualityComparable, i.e. implement `operator==`. Two pseudo-random number
generators are defined to be /equivalent/ if they both return an identical
sequence of numbers starting from a given state.\n
伪随机数生成器的模型类也必须是 __EqualityComparable 的模型，即实现 `operator==`。
若从给定状态出发，两伪随机数生成器返回相同的数字序列，则称它们 /等价/。

Classes which model a pseudo-random number generator should also model the
__Streamable concept, i.e. implement `operator<<` and `operator>>`. If so,
`operator<<` writes all current state of the pseudo-random number generator
to the given `ostream` so that `operator>>` can restore the state at a later
time. The state shall be written in a platform-independent manner, but it is
assumed that the `locales` used for writing and reading be the same. The
pseudo-random number generator with the restored state and the original at
the just-written state shall be equivalent.\n
伪随机数生成器的模型类也应当是 __Streamable 概念的模型，即实现 `operator<<` 和 `operator>>`。
若实现，`operator<<` 把伪随机数生成器的当前全部状态写入给定的 `ostream` 中；`operator>>` 用于其后恢复状态。
状态应该以平台无关的方式写入；但可以假设读写时 locales 是相同的。恢复后的伪随机数生成器和原生成器应等价。

Classes which model a pseudo-random number generator may also model the
__CopyConstructible and __Assignable concepts. However, note that the
sequences of the original and the copy are strongly correlated (in fact,
they are identical), which may make them unsuitable for some problem domains.
Thus, copying pseudo-random number generators is discouraged; they should
always be passed by (non-const) reference.\n
伪随机数生成器的模型类也可以是 __CopyConstructible 和 __Assignable 概念的模型。
但请注意，原生成器和其副本是完全相同的，因此对于有些应用领域可能会不恰当。
因此，不鼓励复制伪随机数生成器；它们总应以 (非 const) 引用传递。

The classes __rand48, __minstd_rand, and __mt19937 are models for a
pseudo-random number generator.\n
__rand48, __minstd_rand, 和 __mt19937 类是伪随机数生成器的模型。

[note This type of random-number generator is useful for numerics, games and
testing. The non-zero arguments constructor(s) and the `seed()` member
function(s) allow for a user-provided state to be installed in the generator.
This is useful for debugging Monte-Carlo algorithms and analyzing particular
test scenarios. The __Streamable concept allows to save/restore the state of
the generator, for example to re-run a test suite at a later time.\n
此类伪随机数生成器可用于数字控制、游戏和测试。取不少于一个参数的构造函数和 `seed()` 成员函数可以让用户设定状态；
在调试 Monte-Carlo 算法、分析特定的测试场景 (test scenario) 时这是很有用的。
__Streamable 概念允许保存和恢复生成器的状态，例如隔一段时间后重新运行某一测试套件。]

[endsect]

[section:random_distribution Random Distribution 随机分布]

A random distribution produces random numbers distributed according to some
distribution, given uniformly distributed random values as input. In the
following table, `X` denotes a random distribution class returning objects of
type `T`, `u` is a value of `X`, `x` is a (possibly const) value of `X`, and
`e` is an lvalue of an arbitrary type that meets the requirements of a
__UniformRandomNumberGenerator, returning values of type `U`.\n
随机分布取均匀分布的随机值作为输入，输出符合某一分布的随机数。
下表中，`X` 是返回 T 类型的随机分布类，`u` 是 `X` 的实例，`x` 是 `X` 的实例 (可为 const)，`e` 是任一 
__UniformRandomNumberGenerator 类型的左值，返回类型是 `U`。

[table Random distribution requirements (in addition to NumberGenerator, CopyConstructible, and Assignable)
  [[expression 表达式] [return type 返回类型] [pre/post-condition 先验/后验条件] [complexity 复杂度]]
  [[`X::input_type`] [`U`] [-] [compile-time\n
  编译期]]
  [[`u.reset()`] [`void`] [subsequent uses of `u` do not depend on values
                           produced by `e` prior to invoking `reset`.\n
                           此后对 `u` 的使用将不受调用 `reset` 前 `e` 产生的数字序列的影响。]
                         [constant\n常数]]
  [[`u(e)`] [`T`] [the sequence of numbers returned by successive invocations
                   with the same object `e` is randomly distributed with some
                   probability density function `p(x)`\n
                   使用同一对象 `e` 反复调用产生的随机数序列将按某一概率密度函数 `p(x)` 随机分布。]
                  [amortized constant  number of invocations of `e`\n
                  (均摊) 对 `e` 的调用的复杂度的常数倍]]
  [[`os << x`] [`std::ostream&`] [writes a textual representation for the
                                  parameters and additional internal data of
                                  the distribution `x` to `os`.
                                  post: The `os.fmtflags` and fill character
                                  are unchanged.\n
                                  把分布 `x` 的参数内部状态的文本表示写入到 `os` 中。之后：`os.fmtflags` 和填充字符不变。]
                                 [O(size of state)]]
  [[`is >> u`] [`std::istream&`] [restores the parameters and additional
                                  internal data of the distribution `u`.
                                  pre: `is` provides a textual representation
                                  that was previously written by `operator<<`
                                  post: The `is.fmtflags` are unchanged.\n
                                  恢复分布 `u` 的参数和内部状态。之前：`is` 提供之前由 `operator<<` 写入的文本表示。
                                  之后：`is.fmtflags` 不变。]
                                 [O(size of state)]]
]

Additional requirements: The sequence of numbers produced by repeated
invocations of `x(e)` does not change whether or not `os << x` is invoked
between any of the invocations `x(e)`. If a textual representation is written
using `os << x` and that representation is restored into the same or a
different object `y` of the same type using `is >> y`, repeated invocations
of `y(e)` produce the same sequence of random numbers as would repeated
invocations of `x(e)`.\n
附加需求：反复调用 `x(e)` 产生的序列不应因调用 `os << x` 而改变；用 `os << x` 保存，并用 `is >> y` 恢复到同一或另一对象 `y` 
后，反复调用 `y(e)` 产生的序列应该和原序列相同。

[endsect]
