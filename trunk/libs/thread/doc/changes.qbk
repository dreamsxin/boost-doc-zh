[/
  (C) Copyright 2007-8 Anthony Williams.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:changes Changes since boost 1.40]

The 1.41.0 release of Boost adds futures to the thread library. There are also a few minor changes.\n
Boost的1.41.0版本为 thread 库增加了 futures。另外还有一些不太重要的修改。 

[heading Changes since boost 1.35]

The 1.36.0 release of Boost includes a few new features in the thread library:\n
1.36.0 版包含了以下新特性: 

* New generic __lock_multiple_ref__ and __try_lock_multiple_ref__ functions for locking multiple mutexes at once.\n
  新的通用锁定函数 __lock_multiple_ref__ 和__try_lock_multiple_ref__, 可以一次锁定多个互斥量。

* Rvalue reference support for move semantics where the compilers supports it.\n
  编译器支持的条件下，支持转移语义中的右值引用。

* A few bugs fixed and missing functions added (including the serious win32 condition variable bug).\n
  修复了一些问题，补上了一些缺失的函数(包括 win32 平台上状态变量的严重bug）。

* `scoped_try_lock` types are now backwards-compatible with Boost 1.34.0 and previous releases.\n
  `scoped_try_lock` 类型兼容于 Boost 1.34.0 和更早的版本。

* Support for passing function arguments to the thread function by supplying additional arguments to the __thread__ constructor.\n
  支持通过 __thread__ 构造函数的额外参数传递函数参数给线程函数。

* Backwards-compatibility overloads added for `timed_lock` and `timed_wait` functions to allow use of `xtime` for timeouts.\n
  重载 `timed_lock` 和 `timed_wait` 函数支持使用 `xtime` 做超时类型。

[heading Changes since boost 1.34]

Almost every line of code in __boost_thread__ has been changed since the 1.34 release of boost. However, most of the interface
changes have been extensions, so the new code is largely backwards-compatible with the old code. The new features and breaking
changes are described below.\n
__boost_thread__ 库差不多的所有代码和1.34版相比都被改写了。然而，大多数接口变化被扩展，使这些新的代码也能兼容就的代码。
新特性和明显的变化列举如下：

[heading New Features 新特性]

* Instances of __thread__ and of the various lock types are now movable.\n
  __thread__ 和锁类型支持转移语义。

* Threads can be interrupted at __interruption_points__.\n
  线程可在 __interruption_points__ 被中断。

* Condition variables can now be used with any type that implements the __lockable_concept__, through the use of
`boost::condition_variable_any` (`boost::condition` is a `typedef` to `boost::condition_variable_any`, provided for backwards
compatibility). `boost::condition_variable` is provided as an optimization, and will only work with
`boost::unique_lock<boost::mutex>` (`boost::mutex::scoped_lock`).\n
通过使用 `boost::condition_variable_any`，条件变量现在可以和任意实现了 __lockable_concept__ 的类型一起工作。 
(`boost::condition` 是 `boost::condition_variable_any` 的一个 `typedef`，提供后向兼容性)，
`boost::condition_variable` 作为一个优化提供，并且只能和 `boost::unique_lock<boost::mutex>` (`boost::mutex::scoped_lock`)一起工作。

* Thread IDs are separated from __thread__, so a thread can obtain it's own ID (using `boost::this_thread::get_id()`), and IDs can
be used as keys in associative containers, as they have the full set of comparison operators.\n
线程标识从 __thread__ 类中分离出来, 这样一个线程可以获得自己的对应的标识(使用 `boost::this_thread::get_id()`)， 并且线程标识可以被用作关联容器的键，因为它们有完全的比较操作符。

* Timeouts are now implemented using the Boost DateTime library, through a typedef `boost::system_time` for absolute timeouts, and
with support for relative timeouts in many cases. `boost::xtime` is supported for backwards compatibility only.\n
通过 Boost DateTime library实现了超时，采用 `boost::system_time` 作为绝对时间，在很多场合支持相对的时间段超时，
`boost::xtime` 只是为了兼容性和被支持。

* Locks are implemented as publicly accessible templates `boost::lock_guard`, `boost::unique_lock`, `boost::shared_lock`, and
`boost::upgrade_lock`, which are templated on the type of the mutex. The __lockable_concept__ has been extended to include publicly
available __lock_ref__ and __unlock_ref__ member functions, which are used by the lock types.\n
锁定通过一些公开的模板实现，如 `boost::lock_guard`, `boost::unique_lock`， `boost::shared_lock`，和 `boost::upgrade_lock`， 具体实现取决于作为模板参数的互斥量。__lockable_concept__ 被扩展，增加供锁定操作需要使用的 __lock_ref__ 和 __unlock_ref__ 成员函数。

[heading Breaking Changes 破坏性变化]

The list below should cover all changes to the public interface which break backwards compatibility.\n
下面列出没有保持兼容的接口改变：

* __try_mutex__ has been removed, and the functionality subsumed into __mutex__. __try_mutex__ is left as a `typedef`,
but is no longer a separate class.\n
__try_mutex__ 被移除了, 它的功能被包含在 __mutex__。__try_mutex__ 只是作为一个 `typedef` 存在，而不是单独的类。

* __recursive_try_mutex__ has been removed, and the functionality subsumed into
__recursive_mutex__. __recursive_try_mutex__ is left as a `typedef`, but is no longer a separate class.\n
__recursive_try_mutex__ 被移除了，其功能被包含在 __recursive_mutex__. __recursive_try_mutex__ 只是作为一个 `typedef` 存在，
而不是单独的类。

* `boost::detail::thread::lock_ops` has been removed. Code that relies on the `lock_ops` implementation detail will no longer work,
as this has been removed, as it is no longer necessary now that mutex types now have public __lock_ref__ and __unlock_ref__ member
functions.\n
`boost::detail::thread::lock_ops` 被移除了，依赖于 `lock_ops` 实现的代码将不能工作。`lock_ops` 已经不再需要，
因为互斥量现在已经有公用的 __lock_ref__ 和 __unlock_ref__ 函数。

* `scoped_lock` constructors with a second parameter of type `bool` are no longer provided. With previous boost releases,\n
  `scoped_lock` 中支持第二个 `bool` 参数的构造函数被移除了。在以前的 boost 版本，如下的定义
``boost::mutex::scoped_lock some_lock(some_mutex,false);`` could be used to create a lock object that was associated with a mutex,
but did not lock it on construction. This facility has now been replaced with the constructor that takes a
`boost::defer_lock_type` as the second parameter: \n
可以用来创建一个和互斥量关联的锁对象，但是并不马上在构造是锁定它。这个功能现在被以 `boost::defer_lock_type` 
作为第二个参数的构造函数代替了：
``boost::mutex::scoped_lock some_lock(some_mutex,boost::defer_lock);``

* The `locked()` member function of the `scoped_lock` types has been renamed to __owns_lock_ref__.\n
  `scoped_lock` 类型的成员函数 `locked()` 改名为 __owns_lock_ref__。 

* You can no longer obtain a __thread__ instance representing the current thread: a default-constructed __thread__ object is not
associated with any thread. The only use for such a thread object was to support the comparison operators: this functionality has
been moved to __thread_id__.\n
不能在当前线程内获得代表自己的 __thread__ 对象，现在一个默认构造出来的 __thread__ 实例不会关联到任何线程，
这样的实例唯一的用处是在线程做比较时。现在这些功能（标识线程）都被移到 __thread_id__ 类型里了。

* The broken `boost::read_write_mutex` has been replaced with __shared_mutex__.\n
  `boost::read_write_mutex` 被 __shared_mutex__ 取代了。

* __mutex__ is now never recursive. For Boost releases prior to 1.35 __mutex__ was recursive on Windows and not on POSIX platforms.\n
  __mutex__ 现在不是支持递归的，在1.35版以前，__mutex__ 在 Windows平台上是支持递归的，而在POSIX 平台上却不是。

* When using a __recursive_mutex__ with a call to [cond_any_wait_link `boost::condition_variable_any::wait()`], the mutex is only
  unlocked one level, and not completely. This prior behaviour was not guaranteed and did not feature in the tests.\n
  当 __recursive_mutex__ 配合 [cond_any_wait_link `boost::condition_variable_any::wait()`] 使用时，该函数只是释放一次锁定，
  而不是所有的锁定。这个在以前是不被保证的，也没有体现在测试代码中。

[endsect]
