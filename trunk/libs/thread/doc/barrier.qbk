[/
  (C) Copyright 2007-8 Anthony Williams.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:barriers Barriers 栏栅]

A barrier is a simple concept. Also known as a ['rendezvous], it is a synchronization point between multiple threads. The barrier is
configured for a particular number of threads (`n`), and as threads reach the barrier they must wait until all `n` threads have
arrived. Once the `n`-th thread has reached the barrier, all the waiting threads can proceed, and the barrier is reset.\n
"栏栅"是一个简单的概念。也被称为 ['会合], 是多个线程间的同步点。栏栅被配置为一定数量的线程使用(`n`)，当线程到达栏栅时，他们必须等待，
直到所有 `n` 个线程都到达这个栏栅。当第 `n` 个线程到达栏栅，所有的线程才能继续执行，并且这个栏栅对象被复位。

[section:barrier Class `barrier`]

    #include <boost/thread/barrier.hpp>

    class barrier
    {
    public:
        barrier(unsigned int count);
        ~barrier();

        bool wait();
    };

Instances of __barrier__ are not copyable or movable.\n
__barrier__ 对象不支持拷贝和转移。

[heading Constructor 构造函数]

    barrier(unsigned int count);

[variablelist

[[Effects:] [Construct a barrier for `count` threads.\n
构造一个支持 `count` 个线程的栏栅。]]

[[Throws:] [__thread_resource_error__ if an error occurs.\n
如果出错，抛出 __thread_resource_error__ 异常。]]

]

[heading Destructor 析构函数]

    ~barrier();

[variablelist

[[Precondition:] [No threads are waiting on `*this`.\n
没有线程在等待 `*this`。]]

[[Effects:] [Destroys `*this`.\n
销毁 `*this`。]]

[[Throws:] [Nothing.\n
无。]]

]

[heading Member function `wait`]

    bool wait();

[variablelist

[[Effects:] [Block until `count` threads have called `wait` on `*this`. When the `count`-th thread calls `wait`, all waiting threads
are unblocked, and the barrier is reset. \n
阻塞当前线程直到 `count` 个线程对 `*this` 调用 `wait`, 当第 `count` 个线程调用 `wait`，所有阻塞的线程解除阻塞，栏栅被复位。]]

[[Returns:] [`true` for exactly one thread from each batch of waiting threads, `false` otherwise.\n
如果每批等待线程中正好有一个线程，返回 `true`，否则返回 `false`。]]

[[Throws:] [__thread_resource_error__ if an error occurs.\n
如果出错，抛出 __thread_resource_error__ 异常。]]

]

[endsect]

[endsect]
