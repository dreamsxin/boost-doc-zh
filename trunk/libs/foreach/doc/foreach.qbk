
[library Boost.Foreach
    [quickbook 1.3]
    [authors [Niebler, Eric]]
    [copyright 2004 Eric Niebler]
    [category algorithms]
    [purpose 
        foreach looping construct, for writing simple loops over STL containers,
        null-terminated strings, arrays, iterator pairs and user defined types.
    ]
    [id foreach]
    [dirname foreach]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[/  Images   ]

[def _note_                         [$images/note.png]]
[def _alert_                        [$images/caution.png]]
[def _detail_                       [$images/note.png]]
[def _tip_                          [$images/tip.png]]

[/  Links   ]

[def _foreach_                      [^BOOST_FOREACH]] 
[def _range_                        [@../../libs/range/index.html Boost.Range]]
[def _iterator_range_               [@../../libs/range/doc/utility_class.html#iter_range `boost::iterator_range<>`]]
[def _sub_range_                    [@../../libs/range/doc/utility_class.html#sub_range `boost::sub_range<>`]]
[def _extending_range_              [@../../libs/range/doc/boost_range.html#minimal_interface Extending Boost.Range]]
[def _single_pass_range_concept_    [@../../libs/range/doc/range.html#single_pass_range Single Pass Range Concept]]
[def _range_portability_            [@../../libs/range/doc/portability.html Boost.Range Portability]]
[def _noncopyable_                  [@../../libs/utility/utility.htm#Class_noncopyable `boost::noncopyable`]]
[def _iterator_                     [@../../libs/iterator/doc/index.html Boost.Iterator]]

[section:introduction Introduction 简介]

[:["Make simple things easy. 把简单的事情容易化。]\n[*['-- Larry Wall]]]

[h2 What is _foreach_?  _foreach_是什么？]

In C++, writing a loop that iterates over a sequence is tedious. We can either
use iterators, which requires a considerable amount of boiler-plate, or we can
use the `std::for_each()` algorithm and move our loop body into a predicate, which
requires no less boiler-plate and forces us to move our logic far from where
it will be used. In contrast, some other languages, like Perl, provide a dedicated
"foreach" construct that automates this process. _foreach_ is just such a construct
for C++. It iterates over sequences for us, freeing us from having to deal directly
with iterators or write predicates.\n
在C++中，写一个循环去迭代一个序列是很单调的。我们可以用迭代器，这需要相当大量的代码，
或者可以用 `std::for_each()` 算法，将我们的循环体移到一个谓词中，这样并没有减少代码量，
还使得我们的逻辑远离于使用的地点。作为对比，其它一些语言，如 Perl，就提供了专门的 
"foreach" 结构来自动进行这一过程。_foreach_ 正是在C++中的一个同样作用的结构。
它为我们迭代一个序列，不需要我们来直接处理迭代器或编写谓词。

_foreach_ is designed for ease-of-use and efficiency. It does no dynamic allocations,
makes no virtual function calls or calls through function pointers, and makes no calls
that are not transparent to the compiler's optimizer. This results in near-optimal code
generation; the performance of _foreach_ is usually within a few percent of the
equivalent hand-coded loop. And although _foreach_ is a macro, it is a remarkably
well-behaved one. It evaluates its arguments exactly once, leading to no nasty surprises.\n
_foreach_ 是为了易用性和高效性而设计的。它不进行动态的内存分配，没有虚拟函数调用或通过函数指针的调用，
也没有令编译器的优化器无法处理的调用。这样可以生成近似于最优化的代码；_foreach_ 
的性能通常只比手工编写的循环差几个百分点。而且虽然 _foreach_ 是一个宏，但它是有良好行为的。
它只会对其参数进行一次求值，不会有令人讨厌的问题。

[h2 Hello, world!]

Below is a sample program that uses _foreach_ to loop over the contents of
a `std::string`.\n
以下是一个例子，使用了 _foreach_ 来迭代一个 `std::string` 的内容。

    #include <string>
    #include <iostream>
    #include <boost/foreach.hpp>

    int main()
    {
        std::string hello( "Hello, world!" );
        
        BOOST_FOREACH( char ch, hello )
        {
            std::cout << ch;
        }

        return 0;
    }

This program outputs the following:\n
程序的输出如下：

[pre
Hello, world!
]

[h2 Supported Sequence Types 支持的序列类型]

_foreach_ iterates over sequences. But what qualifies as a sequence, exactly? Since
_foreach_ is built on top of _range_, it automatically supports those types which
_range_ recognizes as sequences. Specifically, _foreach_ works with types that satisfy
the _single_pass_range_concept_. For example, we can use _foreach_ with:\n
_foreach_ 用于迭代某个序列。但是这个序列有什么要求呢？由于 _foreach_ 是构建在 _range_ 之上的，
所以它自动支持了那些被 _range_ 认可的序列。特定地，_foreach_ 可用于满足 _single_pass_range_concept_ 的类型。
例如，我们可以将 _foreach_ 用于：

* STL containers\nSTL 容器 
* arrays\n数组
* Null-terminated strings (`char` and `wchar_t`)\nNull-结尾的字符串(`char` 和 `wchar_t`)
* std::pair of iterators\n由迭代器组成的 std::pair

[note The support for STL containers is very general; anything that looks like
an STL container counts. If it has nested `iterator` and `const_iterator` types and `begin()`
and `end()` member functions, _foreach_ will automatically know how to iterate over
it. It is in this way that _iterator_range_ and _sub_range_ work with _foreach_.\n
对 STL 容器的支持是非常全面的；任何类似于 STL 的容器都可算在内。只要它有嵌套的 `iterator` 
和 `const_iterator` 类型以及 `begin()` 和 `end()` 成员函数，_foreach_ 就可以自动得知如何迭代它。
这正是 _foreach_ 可用于 _iterator_range_ 和 _sub_range_ 的原因。]

See the section on [link foreach.extensibility Extensibility] to find
out how to make _foreach_ work with other types.\n
关于如何将 _foreach_ 用于其它类型，请见 [link foreach.extensibility 可扩展性] 一节。

[h2 Examples 例子]

Below are some examples that demonstrate all the different ways we can use _foreach_.\n
以下是一些例子，示范了我们使用 _foreach_ 的几种不同方式。

Iterate over an STL container:\n
迭代一个 STL 容器：

    std::list<int> list_int( /*...*/ );
    BOOST_FOREACH( int i, list_int )
    {
        // do something with i  用i执行某些操作
    }

Iterate over an array, with covariance (i.e., the type of the iteration variable is
not exactly the same as the element type of the container):\n
迭代一个数组，具有协变性(即迭代变量的类型与容器的元素类型不完全相同)：

    short array_short[] = {1,2,3};
    BOOST_FOREACH( int i, array_short )
    {
        // The short was implicitly converted to an int  short被隐式转换为int
    }

Predeclare the loop variable, and use `break`, `continue`, and `return` in the loop body:\n
预先声明循环变量，并在循环体中使用 `break`, `continue`, 和 `return` ：

    std::deque<int> deque_int( /*...*/ );
    int i = 0;
    BOOST_FOREACH( i, deque_int )
    {
        if( i == 0 ) return;
        if( i == 1 ) continue;
        if( i == 2 ) break;
    }

Iterate over a sequence by reference, and modify the underlying sequence:\n
以引用方式迭代一个序列，并修改底层序列：

    short array_short[] = { 1, 2, 3 };
    BOOST_FOREACH( short & i, array_short )
    {
        ++i;
    }
    // array_short contains {2,3,4} here  现在 array_short 包含 {2,3,4}

Iterate over a vector of vectors with nested _foreach_ loops. In this
example, notice that braces around the loop body are not necessary:\n
用嵌套的 _foreach_ 循环迭代一个 vector 的 vector. 在这个例子中，
注意并不需要在循环体外面使用括号：

    std::vector<std::vector<int> > matrix_int;
    BOOST_FOREACH( std::vector<int> & row, matrix_int )
        BOOST_FOREACH( int & i, row )
            ++i;

Iterate over an expression that returns a sequence by value (i.e. an rvalue):\n
迭代一个以值方式(即右值)返回一个序列的函数：

    extern std::vector<float> get_vector_float();
    BOOST_FOREACH( float f, get_vector_float() )
    {
        // Note: get_vector_float() will be called exactly once
        // 注: get_vector_float() 只会被调用一次
    }    

Iterate in reverse:\n
以反序遍历：

    std::list<int> list_int( /*...*/ );
    BOOST_REVERSE_FOREACH( int i, list_int )
    {
        // do something with i  用i来做一些操作
    }

Iterating over rvalues doesn't work on some older compilers. Check the 
[link foreach.portability Portability] section to see whether your
compiler supports this.\n
在一些旧的编译器上，不能对右值进行迭代。请查看 [link foreach.portability 可移植性] 一节，
看看你的编译器是否支持。

[h2 Making _foreach_ Prettier  让 _foreach_ 更漂亮]

People have complained about the name _foreach_. It's too long. `ALL CAPS` can
get tiresome to look at. That may be true, but _foreach_ is merely following
the [@http://www.boost.org/more/lib_guide.htm Boost Naming Convention]. That
doesn't mean you're stuck with it, though. If you would like to use a different
identifier (`foreach`, perhaps), you can simply do:\n
有的人对 _foreach_ 的名字有意见。它太长了。而且大写字母看起来有点烦人。这可能是真的，
但 _foreach_ 不过是遵从了 [@http://www.boost.org/more/lib_guide.htm Boost 名字规则]。
但是这并不意味着你必须用它。如果你想使用一个不同的标识符(可能是 `foreach`)，你只要：

    #define foreach         BOOST_FOREACH
    #define reverse_foreach BOOST_REVERSE_FOREACH

Only do this if you are sure that the identifier you choose will not cause
name conflicts in your code.\n
你唯一要保证的是，你选用的标识符不会在你的代码中引起名字冲突。

[note Do not use `#define foreach(x,y) BOOST_FOREACH(x,y)`.
 This can be problematic if the arguments are macros themselves. This would
 result in an additional expansion of these macros. Instead, use the 
 form shown above.\n
 不要用 `#define foreach(x,y) BOOST_FOREACH(x,y)`. 如果参数本身也是宏的话，这会有问题。
 它会引起这些宏的额外扩展。你应该使用前面所说的形式。]

[endsect]

[section:extensibility Extensibility 可扩展性]

If we want to use _foreach_ to iterate over some new collection type, we must
"teach" _foreach_ how to interact with our type. Since _foreach_ is built on top
of _range_, we must extend _range_ in order to extend _foreach_. The section
_extending_range_ explores this topic in detail.\n
如果我们想用 _foreach_ 来迭代某些新的集合类型，我们必须 "教会" _foreach_ 如何与我们的类型交互。
因为 _foreach_ 是构建于 _range_ 之上的，所以我们必须扩展 _range_ 以扩展 _foreach_. 
_extending_range_ 详细解释了这个话题。

Below is an example for extending _foreach_ to iterate over a sub-string type,
which contains two iterators into a `std::string`.\n
以下是一个扩展 _foreach_ 的例子，它迭代一个子串类型，该类型包含了两个指向同一个 
`std::string` 的迭代器。

    namespace my
    {
        // sub_string: part of a string, as delimited by a pair
        // of iterators
        // sub_string: 字符串的一部分，以一对迭代器来界定
        struct sub_string
        {
            std::string::iterator begin;
            std::string::iterator end;
            
            /* ... implementation 实现 ... */
        };

        // Add overloads of range_begin() and range_end() in the
        // same namespace as sub_string, to be found by Argument-Dependent Lookup.
        // 在 sub_string 的同一个名字空间中增加 boost_range_begin() 和    
        // boost_range_end() 的重载，才可以被ADL(Argument-Dependent Lookup)查找到。

        inline std::string::iterator range_begin( sub_string & x )
        {
            return x.begin;
        }

        inline std::string::iterator range_end( sub_string & x )
        {
            return x.end;
        }

        // Also add overloads for const sub_strings. Note we use the conversion
        // from string::iterator to string::const_iterator here.
        // 再增加对 const sub_strings 的重载。注意我们在这里使用了从     
        // string::iterator 到 string::const_iterator 的转换。

        inline std::string::const_iterator range_begin( sub_string const & x )
        {
            return x.begin;
        }

        inline std::string::const_iterator range_end( sub_string const & x )
        {
            return x.end;
        }
    }

    namespace boost
    {
        // specialize range_mutable_iterator and range_const_iterator in namespace boost
        // 在名字空间 boost 中特化 rannge_iterator 和 range_const_iterator
        template<>
        struct range_mutable_iterator< my::sub_string >
        {
            typedef std::string::iterator type;
        };

        template<>
        struct range_const_iterator< my::sub_string >
        {
            typedef std::string::const_iterator type;
        };
    }

Now that we have taught _range_ (and hence _foreach_) about our type, we
can now use _foreach_ to iterate over our sub_string type.\n
现在我们已经教会了 _range_ (也就教会了 _foreach_)关于我们的类型的知识，
我们现在可以用 _foreach_ 来迭代我们的 sub_string 类型了。

    my::sub_string substr;
    BOOST_FOREACH( char ch, substr )
    {
        // Woo-hoo!
    }

There are some portability issues we should be aware of when extending _foreach_. Be sure
to check out the [link foreach.portability Portability] section. In particular, if your
compiler does not support Argument-Dependent Lookup, the _range_portability_ section
offers some suggested work-arounds.\n
我们已经知道在扩展 _foreach_ 时有一些移植性的问题。请查看 [link foreach.portability 可移植性]
一节进行确认。特定地，如果你的编译器不支持 Argument-Dependent Lookup,  _range_portability_ 
一节提供了一些变通的办法。

[h2 Making _foreach_ Work with Non-Copyable Sequence Types  将 _foreach_ 用于不可复制的序列类型]

For sequence types that are non-copyable, we will need to tell _foreach_ to
not try to make copies. If our type inherits from _noncopyable_, no further action is
required. If not, we must specialize the `boost::foreach::is_noncopyable<>` template, as
follows:\n
对于不可复制的序列类型，我们需要告诉 _foreach_ 不要试图去进行复制。如果我们的类型派生自 _noncopyable_, 
则不需要任何动作。如果不是的话，我们就必须特化 `boost::foreach::is_noncopyable<>` 模板，如下：

    class noncopy_vector
    {
        // ...
    private:
        noncopy_vector( noncopy_vector const & ); // non-copyable!  不可复制！
    };
    
    namespace boost { namespace foreach
    {
        template<>
        struct is_noncopyable< noncopy_vector >
          : mpl::true_
        {
        };
    }}

Another way to achieve the same effect is to override the global `boost_foreach_is_noncopyable()`
function. Doing it this way has the advantage of being portable to older compilers.\n
另一个有同样作用的方法是覆盖全局的 `boost_foreach_is_noncopyable()` 函数。
这一方法的好处是可以移植到老的编译器。

    // At global scope...  在全局作用域中...
    inline boost::mpl::true_ *
    boost_foreach_is_noncopyable( noncopy_vector *&, boost::foreach::tag )
    {
        return 0;
    }

[tip Even though we have to tell _foreach_ that our type is non-copyable, that
doesn't mean that _foreach_ always makes a copy of our sequence type. Obviously, doing so
would be expensive and even wrong in some cases. _foreach_ is quite smart about when to
make a copy and when not to. The `is_noncopyable<>` trait is needed to elide the copy, which
is on a branch that might never get taken.\n
虽然我们必须告诉 _foreach_ 我们的类型是不可复制的，但这并不意味着 _foreach_ 总是对我们的序列类型进行复制。
显然，这样做是代价昂贵的，而且在某些情况下还是错误的。_foreach_ 非常聪明，知道何时应该复制，
何时不该。`is_noncopyable<>` trait 用于取消复制，复制的分枝将不会被执行。]

[h2 Optimizing _foreach_ for Lightweight Proxy Sequence Types 为轻量级代理序列类型优化 _foreach_]

On some compilers, _foreach_ must occasionally take a slightly slower code path to guarantee
correct handling of sequences stored in temporary objects. It asks itself, "Should I make
a copy of this object?" and later, "Did I make a copy or not?" For some types of sequences,
this is overkill. Consider a sequence which is a simple pair of iterators. Jumping through
hoops of fire to avoid copying it doesn't make sense because copying it is so cheap.\n
在一些编译器上，_foreach_ 有时需要选择一条稍微慢一点的代码路径以保证正确地处理保存临时对象的序列。
它问自己，"我应该复制这个对象吗？"，稍后又问，"我复制了这个对象吗？ "。对于某些序列类型，这是多余的。
考虑由一对迭代器所组成的序列。并不值得为了避免复制而进行这些跳转，因为它的复制代价是非常小的。

A pair of iterators is an example of a lightweight proxy. It does not store the values of
the sequence; rather, it stores iterators to them. This means that iterating over a copy of
the proxy object will give the same results as using the object itself. For such types,
_foreach_ provides a hook that lets us tell it not to worry about the expense of making a
copy. This can result in slightly faster loop execution. Simply specialize the
`boost::foreach::is_lightweight_proxy<>` trait, as follows:\n
这样的一对迭代器就是轻量级代理的例子。它并不保存序列中的值；而是保存它们的迭代器。
这意味着对这个代理对象的拷贝进行迭代与使用对象本身是同样的效果。对于这种类型，
_foreach_ 提供了一个钩子让我们告诉它不需要关心复制的开销。这样可以生成更快的循环执行。
只需要象下面这样特化 `boost::foreach::is_lightweight_proxy<>` trait 就可以了：

    struct sub_string
      : boost::iterator_range< std::string::iterator >
    {
        // ...
    };
    
    namespace boost { namespace foreach
    {
        template<>
        struct is_lightweight_proxy< sub_string >
          : mpl::true_
        {
        };
    }}

Alternately, we could achieve the same effect by overriding the global
`boost_foreach_is_lightweight_proxy()` function, as follows:\n
另一种有相同作用的方法是覆盖全局的 `boost_foreach_is_lightweight_proxy()` 函数，如下：

    // At global scope...  在全局作用域中...
    inline boost::mpl::true_ *
    boost_foreach_is_lightweight_proxy( sub_string *&, boost::foreach::tag )
    {
        return 0;
    }

This method is portable to older compilers.\n
这个方法可移植到老的编译器。

[endsect]

[section:portability Portability 可移植性]

_foreach_ uses some fairly sophisticated techniques that not all compilers support. Depending
on how compliant your compiler is, you may not be able to use _foreach_ in some scenarios. Since
_foreach_ uses _range_, it inherits _range_'s portability issues. You can read about those
issues in the _range_portability_ section.\n
_foreach_ 使用了一些相当复杂的技巧，不是所有编译器都可以支持。取决于你的编译器对标准的兼容度，
你有可能在某些情形下不能使用 _foreach_。由于 _foreach_ 使用了 _range_, 所以它继承了 _range_ 
的可移植性问题。你可以在 _range_portability_ 一节中看到这些问题。

In addition to the demands placed on the compiler by _range_, _foreach_ places additional demands
in order to handle rvalue sequences properly. (Recall that an rvalue is an unnamed object, so
an example of an rvalue sequence would be a function that returns a `std::vector<>` by value.) Compilers
vary in their handling of rvalues and lvalues. To cope with the situation _foreach_ defines three
levels of compliance, described below:\n
除了 _range_ 对编译器的要求以外，_foreach_ 还有其它的要求以正确处理右值序列(右值是一个匿名对象，
右值序列的一个例子就是以值方式返回一个 `std::vector<>` 的函数)。编译器在处理右值和左值时是有所不同的。
为了应付这种情况，_foreach_ 定义了三个兼容度级别，描述如下：

[table BOOST_FOREACH Compliance Levels
  [[Level 级别]     [Meaning 意义]]
  [[*Level 0*] [['[_Highest level of compliance]]\n
                _foreach_ works with lvalues, rvalues and const-qualified rvalues.\n
                ['[_最高兼容度级别]]\n
                _foreach_ 可用于左值、右值和 const-限定的右值。]]
  [[*Level 1*] [['[_Moderate level of compliance]]\n
                _foreach_ works with lvalues and plain rvalues, but not const-qualified rvalues.\n
                `BOOST_FOREACH_NO_CONST_RVALUE_DETECTION` is defined in this case.\n
                ['[_中等兼容度级别]]\n
                _foreach_ 可用于左值和简单右值，但不可用于 const-限定的右值。\n
                这种情况下定义了 `BOOST_FOREACH_NO_CONST_RVALUE_DETECTION`.]]
  [[*Level 2*] [['[_Lowest level of compliance]]\n
                _foreach_ works with lvalues only, not rvalues.\n
                `BOOST_FOREACH_NO_RVALUE_DETECTION` is defined in this case.\n
                ['[_最低兼容度级别]]\n
                _foreach_ 只可用于左值，不可用于右值。\n
                这种情况下定义了 `BOOST_FOREACH_NO_RVALUE_DETECTION`.]]
]

Below are the compilers with which _foreach_ has been tested, and the compliance level _foreach_
provides for them.\n
以下是 _foreach_ 已经测试过的编译器，以及它们对于 _foreach_ 的兼容度级别。

[table Compiler Compliance Level 编译器兼容度级别
  [[Compiler 编译器]                [Compliance Level 兼容度级别]]
  [[Visual C++ 8.0]          [Level 0]]
  [[Visual C++ 7.1]          [Level 0]]
  [[Visual C++ 7.0]          [Level 2]]
  [[Visual C++ 6.0]          [Level 2]]
  [[gcc 4.0]                 [Level 0]]
  [[gcc 3.4]                 [Level 0]]
  [[gcc 3.3]                 [Level 0]]
  [[mingw 3.4]               [Level 0]]
  [[Intel for Linux 9.0]     [Level 0]]
  [[Intel for Windows 9.0]   [Level 0]]
  [[Intel for Windows 8.0]   [Level 1]]
  [[Intel for Windows 7.0]   [Level 2]]
  [[Comeau 4.3.3]            [Level 0]]
  [[Borland 5.6.4]           [Level 2]]
  [[Metrowerks 9.5]          [Level 1]]
  [[Metrowerks 9.4]          [Level 1]]
  [[SunPro 5.8]              [Level 2]]
  [[qcc 3.3]                 [Level 0]]
  [[tru64cxx 65]             [Level 2]]
  [[tru64cxx 71]             [Level 2]]
]

[endsect]

[section:pitfalls Pitfalls 缺陷]

This section describes some common pitfalls with _foreach_.\n
本节描述 _foreach_ 中的一些常见的缺陷。

[h2 Types With Commas 带逗号的类型]

Since _foreach_ is a macro, it must have exactly two arguments, with exactly one
comma separating them. That's not always convenient, especially when the type of the
loop variable is a template. Consider trying to iterate over a `std::map`:\n
由于 _foreach_ 是一个宏，它必须刚好有两个参数，并以一个逗号分隔它们。这并不总是很方便，
尤其当循环变量的类型是一个模板的时候。考虑一下对 `std::map` 进行迭代：

    std::map<int,int> m;

    // ERROR! Too many arguments to BOOST_FOREACH macro.
    // 错误！BOOST_FOREACH 宏参数过多。
    BOOST_FOREACH(std::pair<int,int> p, m) // ...

One way to fix this is with a typedef.\n
一个解决方法是使用 typedef. 

    std::map<int,int> m;
    typedef std::pair<int,int> pair_t;

    BOOST_FOREACH(pair_t p, m) // ...

Another way to fix it is to predeclare the loop variable:\n
另一个解决方法是预先声明循环变量：

    std::map<int,int> m;
    std::pair<int,int> p;

    BOOST_FOREACH(p, m) // ...

[h2 Hoisting and Iterator Invalidation  Hoisting和无效迭代器]

Under the covers, _foreach_ uses iterators to traverse the element
sequence. Before the loop is executed, the end iterator is cached
in a local variable. This is called ['hoisting], and it is an
important optimization. It assumes, however, that the end iterator
of the sequence is stable. It usually is, but if we modify the
sequence by adding or removing elements while we are iterating
over it, we may end up hoisting ourselves on our own petard.\n
在内部，_foreach_ 使用了迭代器来遍历序列的元素。在循环执行之前，
结束迭代器会缓存到一个局部变量中。这被称为 hoisting, 它是一个重要的优化。
但是它假设该序列的结束迭代器是稳定的。通常也是这样，
但如果我们在迭代序列时增加或删除了序列的元素，我们就可能自己破坏了 hoisting.

Consider the following code:\n
考虑以下代码：

    std::vector<int> vect(4, 4);
    BOOST_FOREACH(int i, vect)
    {
        vect.push_back(i + 1);
    }

This code will compile, but it has undefined behavior. That is because
it is logically equivalent to the following:\n
这段代码可以编译，但它具有未定义行为。这是因为它在逻辑上等同于以下代码：

    std::vector<int> vect(4, 4);
    for(std::vector<int>::iterator it1 = vect.begin(), it2 = vect.end();
        it1 != it2; ++it1)
    {
        int i = *it1;
        vect.push_back(i + 1); // Oops! This invalidates it1 and it2! 这使得 it1 和 it2 无效！
    }

The call to `vect.push_back()` will cause all iterators into `vect` to
become invalid, including `it1` and `it2`. The next iteration through
the loop will cause the invalid iterators to be used. That's bad news.\n
对 `vect.push_back()` 的调用会导致 `vect` 中的所有迭代器变为无效，
包括 `it1` 和 `it2`. 循环的下一次迭代会使用这些无效迭代器。这可是坏消息。

The moral of the story is to think twice before adding and removing
elements from the sequence over which you are iterating. If doing
so could cause iterators to become invalid, don't do it. Use a regular
`for` loop instead.\n
正确的做法是，在迭代中增加或删除序列中的元素一定要三思。
如果这样做会导致迭代器变为无效，就不要这样做。用一个普通的 `for` 循环来替代。

[endsect]

[section:history_and_acknowledgements History and Acknowledgements 历史和鸣谢]

[h2 History 历史]

The ideas for _foreach_ began life in the Visual C++ group at Microsoft during the early phases of
the design for C++\/CLI. Whether to add a dedicated "foreach" looping construct to the language was
an open question at the time. As a mental exercise, Anson Tsao sent around some proof-of-concept
code which demonstrated that a pure library solution might be possible. The code was written in the
proposed C++\/CLI dialect of the time, for which there was no compiler as of yet. I was intrigued by
the possibility, and I ported his code to Managed C++ and got it working. We worked together to
refine the idea and eventually published an article about it in the November 2003 issue of the
[@http://www.cuj.com CUJ].

After leaving Microsoft, I revisited the idea of a looping construct. I reimplemented the macro
from scratch in standard C++, corrected some shortcomings of the CUJ version and rechristened it
_foreach_. In October of 2003 I began a discussion about it on the Boost developers list, where
it met with a luke-warm reception. I dropped the issue until December 2004, when I reimplemented
_foreach_ yet again. The new version only evaluated its sequence expression once and correctly
handled both lvalue and rvalue sequence expressions. It was built on top of the recently
accepted _range_ library, which increased its portability. This was the version that, on Dec. 12 2004,
I finally submitted to Boost for review. It was accepted into Boost on May 5, 2005.

[h2 Acknowledgements 鸣谢]

Thanks go out to Anson Tsao of Microsoft for coming up with the idea and demonstrating its feasibility.
I would also like to thank [@http://boost.org/people/thorsten_ottosen.html Thorsten Ottosen] for
the _range_ library, on which the current version of _foreach_ is built. Finally, I'd like to thank
Russell Hind, Alisdair Meredith and Stefan Slapeta for their help porting to various compilers.

[h2 Further Reading 进一步阅读]

For more information about how _foreach_ works, you may refer to the article
[@http://www.artima.com/cppsource/foreach.html ["Conditional Love]] at
[@http://www.artima.com/cppsource/ The C++ Source].

[endsect]
