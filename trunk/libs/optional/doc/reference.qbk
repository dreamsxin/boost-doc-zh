[/
    Boost.Optional

    Copyright (c) 2003-2007 Fernando Luis Cacciola Carballal

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
]


[section:synopsis Synopsis 摘要]

    namespace boost {

    template<class T>
    class optional
    {
        public :

        // (If T is of reference type, the parameters and results by reference are by value)
        // (如果 T 是引用类型，则以引用传递的参数和结果变为以值传递)

        optional () ; ``[link reference_optional_constructor __GO_TO__]``

        optional ( none_t ) ; ``[link reference_optional_constructor_none_t __GO_TO__]``

        optional ( T const& v ) ; ``[link reference_optional_constructor_value __GO_TO__]``

        // [new in 1.34]
        // [1.34版本中新增]
        optional ( bool condition, T const& v ) ; ``[link reference_optional_constructor_bool_value __GO_TO__]`` 

        optional ( optional const& rhs ) ; ``[link reference_optional_constructor_optional __GO_TO__]``

        template<class U> explicit optional ( optional<U> const& rhs ) ; ``[link reference_optional_constructor_other_optional __GO_TO__]``

        template<class InPlaceFactory> explicit optional ( InPlaceFactory const& f ) ; ``[link reference_optional_constructor_factory __GO_TO__]``

        template<class TypedInPlaceFactory> explicit optional ( TypedInPlaceFactory const& f ) ; ``[link reference_optional_constructor_factory __GO_TO__]``

        optional& operator = ( none_t ) ; ``[/[link reference_optional_operator_equal_none_t __GO_TO__]]``

        optional& operator = ( T const& v ) ; ``[link reference_optional_operator_equal_value __GO_TO__]``

        optional& operator = ( optional const& rhs ) ; ``[link reference_optional_operator_equal_optional __GO_TO__]``

        template<class U> optional& operator = ( optional<U> const& rhs ) ; ``[link reference_optional_operator_equal_other_optional __GO_TO__]``

        template<class InPlaceFactory> optional& operator = ( InPlaceFactory const& f ) ; ``[/[link reference_optional_operator_equal_factory __GO_TO__]]``

        template<class TypedInPlaceFactory> optional& operator = ( TypedInPlaceFactory const& f ) ; ``[/[link reference_optional_operator_equal_factory __GO_TO__]]``

        T const& get() const ; ``[link reference_optional_get __GO_TO__]``
        T&       get() ; ``[link reference_optional_get __GO_TO__]``

        // [new in 1.34]
        // [1.34版本中新增]
        T const& get_value_or( T const& default ) const ; ``[link reference_optional_get_value_or_value __GO_TO__]`` 

        T const* operator ->() const ; ``[link reference_optional_operator_arrow __GO_TO__]``
        T*       operator ->() ; ``[link reference_optional_operator_arrow __GO_TO__]``

        T const& operator *() const ; ``[link reference_optional_get __GO_TO__]``
        T&       operator *() ; ``[link reference_optional_get __GO_TO__]``

        T const* get_ptr() const ; ``[link reference_optional_get_ptr __GO_TO__]``
        T*       get_ptr() ; ``[link reference_optional_get_ptr __GO_TO__]``

        operator unspecified-bool-type() const ; ``[link reference_optional_operator_bool __GO_TO__]``

        bool operator!() const ; ``[link reference_optional_operator_not __GO_TO__]``

        // deprecated methods
        // 停用的方法

        // (deprecated)
        void reset() ; ``[link reference_optional_reset __GO_TO__]``

        // (deprecated)
        void reset ( T const& ) ; ``[link reference_optional_reset_value __GO_TO__]``

        // (deprecated)
        bool is_initialized() const ; ``[link reference_optional_is_initialized __GO_TO__]``

    };

    template<class T> inline bool operator == ( optional<T> const& x, optional<T> const& y ) ; ``[link reference_operator_compare_equal_optional_optional __GO_TO__]``

    template<class T> inline bool operator != ( optional<T> const& x, optional<T> const& y ) ; ``[link reference_operator_compare_not_equal_optional_optional __GO_TO__]``

    template<class T> inline bool operator <  ( optional<T> const& x, optional<T> const& y ) ; ``[link reference_operator_compare_less_optional_optional __GO_TO__]``

    template<class T> inline bool operator >  ( optional<T> const& x, optional<T> const& y ) ; ``[link reference_operator_compare_greater_optional_optional __GO_TO__]``

    template<class T> inline bool operator <= ( optional<T> const& x, optional<T> const& y ) ; ``[link reference_operator_compare_less_or_equal_optional_optional __GO_TO__]``

    template<class T> inline bool operator >= ( optional<T> const& x, optional<T> const& y ) ; ``[link reference_operator_compare_greater_or_equal_optional_optional __GO_TO__]``

    // [new in 1.34]
    // [1.34版本中新增]
    template<class T> inline optional<T> make_optional ( T const& v ) ; ``[link reference_make_optional_value __GO_TO__]``

    // [new in 1.34]
    // [1.34版本中新增]
    template<class T> inline optional<T> make_optional ( bool condition, T const& v ) ; ``[link reference_make_optional_bool_value __GO_TO__]``

    // [new in 1.34]
    // [1.34版本中新增]
    template<class T> inline T const& get_optional_value_or ( optional<T> const& opt, T const& default ) ; ``[link reference_optional_get_value_or_value __GO_TO__]`` 

    template<class T> inline T const& get ( optional<T> const& opt ) ; ``[link reference_optional_get __GO_TO__]``

    template<class T> inline T& get ( optional<T> & opt ) ; ``[link reference_optional_get __GO_TO__]``

    template<class T> inline T const* get ( optional<T> const* opt ) ; ``[link reference_optional_get __GO_TO__]``

    template<class T> inline T* get ( optional<T>* opt ) ; ``[link reference_optional_get __GO_TO__]``

    template<class T> inline T const* get_pointer ( optional<T> const& opt ) ; ``[link reference_optional_get_ptr __GO_TO__]``

    template<class T> inline T* get_pointer ( optional<T> & opt ) ; ``[link reference_optional_get_ptr __GO_TO__]``

    template<class T> inline void swap( optional<T>& x, optional<T>& y ) ; ``[link reference_swap_optional_optional __GO_TO__]``

    } // namespace boost


[endsect]

[section:detailed_semantics Detailed Semantics 详细语义]

Because `T` might be of reference type, in the sequel, those entries whose
semantic depends on `T` being of reference type or not will be distinguished
using the following convention:\n
因为 `T` 可能是引用类型，所以，那些语义与 `T` 的类型是否为引用相关的项，将使用以下约定：

* If the entry reads: `optional<T`['(not a ref)]`>`, the description
corresponds only to the case where `T` is not of reference type.\n
  如果该项为：`optional<T`['(非引用)]`>`, 则对应的描述仅适作于 `T` 不是引用类型时的情况。
* If the entry reads: `optional<T&>`, the description corresponds only to
the case where `T` is of reference type.\n
  如果该项为：`optional<T&>`, 则对应的描述仅适用于 `T` 是引用类型时的情况。
* If the entry reads: `optional<T>`, the description is the same for both
cases.\n
  如果该项为：`optional<T>`, 则对应的描述适用于两种情况。

[note
The following section contains various `assert()` which are used only to show
the postconditions as sample code. It is not implied that the type `T` must
support each particular expression but that if the expression is supported,
the implied condition holds.\n
以下章节中包含多个 `assert()`，仅用于示范后续条件的例子代码。
它并不意味着类型 `T` 必须支持每个单独的表达式，但是如果它支持某个表达式，则满足相应的条件。
]

__SPACE__

[heading optional class member functions  optional类的成员函数]

__SPACE__

[#reference_optional_constructor]

[: `optional<T>::optional();`]

* [*Effect:] Default-Constructs an `optional`.\n
  [*作用：]缺省构造一个 `optional`.
* [*Postconditions:] `*this` is [_uninitialized].\n
  [*后续条件：]`*this` 为 [_未初始化的]。
* [*Throws:] Nothing.\n
  [*抛出：]无。
* Notes: T's default constructor [_is not] called.\n
  [*说明：]T 的缺省构造函数[_未被]调用。
* [*Example:]\n
  [*例子：]
``
optional<T> def ;
assert ( !def ) ;
``

__SPACE__

[#reference_optional_constructor_none_t]

[: `optional<T>::optional( none_t );`]

* [*Effect:] Constructs an `optional` uninitialized.\n
  [*作用：]构造一个未初始化的 `optional`. 
* [*Postconditions:] `*this` is [_uninitialized].\n
  [*后续条件：]`*this` 为 [_未初始化的]。
* [*Throws:] Nothing.\n
  [*抛出：]无。
* [*Notes:] `T`'s default constructor [_is not] called. The expression
`boost::none` denotes an instance of `boost::none_t` that can be used as
the parameter.\n
  [*说明：]`T` 的缺省构造函数[_未被]调用。表达式 `boost::none` 表示一个 `boost::none_t` 实例，可用作本构造函数的参数。
* [*Example:]\n
  [*例子：]
``
#include <boost/none.hpp>
optional<T> n(none) ;
assert ( !n ) ;
``

__SPACE__

[#reference_optional_constructor_value]

[: `optional<T `['(not a ref)]`>::optional( T const& v )`]

* [*Effect:] Directly-Constructs an `optional`.\n
  [*作用：]直接构造一个 `optional`.
* [*Postconditions:] `*this` is [_initialized] and its value is a['copy]
of `v`.\n
  [*后续条件：]`*this` 为 [_已初始化的]，它的值为 `v` 的['拷贝]。
* [*Throws:] Whatever `T::T( T const& )` throws.\n
  [*抛出：]`T::T( T const& )` 所抛出的任何异常。
* [*Notes: ] `T::T( T const& )` is called.\n
  [*说明：]调用 `T::T( T const& )`. 
* [*Exception Safety:] Exceptions can only be thrown during
`T::T( T const& );` in that case, this constructor has no effect.\n
  [*异常安全性：]仅会在 `T::T( T const& );` 中抛出异常，这时构造函数无效。
* [*Example:]\n
  [*例子：]
``
T v;
optional<T> opt(v);
assert ( *opt == v ) ;
``

__SPACE__

[: `optional<T&>::optional( T& ref )`]

* [*Effect:] Directly-Constructs an `optional`.\n
  [*作用：]直接构造一个 `optional`.
* [*Postconditions:] `*this` is [_initialized] and its value is an instance
of an internal type wrapping the reference `ref`.\n
  [*后续条件：]`*this` 为 [_已初始化的]，它的值为某个内部类型的实例，包装了引用 `ref`. 
* [*Throws:] Nothing.\n
  [*抛出：]无。
* [*Example:]\n
  [*例子：]
``
T v;
T& vref = v ;
optional<T&> opt(vref);
assert ( *opt == v ) ;
++ v ; // mutate referee
assert (*opt == v);
``

__SPACE__

[#reference_optional_constructor_bool_value]

[: `optional<T` ['(not a ref)]`>::optional( bool condition, T const& v ) ;` ]
[: `optional<T&>           ::optional( bool condition, T&       v ) ;` ]

* If condition is true, same as:\n
  如果 condition 为 true, 则相当于：

[: `optional<T` ['(not a ref)]`>::optional( T const& v )`]
[: `optional<T&>           ::optional( T&       v )`]

* otherwise, same as:\n
  否则相当于：

[: `optional<T ['(not a ref)]>::optional()`]
[: `optional<T&>           ::optional()`]

__SPACE__

[#reference_optional_constructor_optional]

[: `optional<T `['(not a ref)]`>::optional( optional const& rhs );`]

* [*Effect:] Copy-Constructs an `optional`.\n
  [*作用：]复制构造一个 `optional`.
* [*Postconditions:] If rhs is initialized, `*this` is initialized and
its value is a ['copy] of the value of `rhs`; else `*this` is uninitialized.\n
  [*后续条件：]如果 `rhs` 是已初始化的，则 `*this` 为已初始化的，且值为 `rhs` 的值的['拷贝]；否则 `*this` 为未初始化的。
* [*Throws:] Whatever `T::T( T const& )` throws.\n
  [*抛出：]`T::T( T const& )` 所抛出的任何异常。
* [*Notes:] If rhs is initialized, `T::T(T const& )` is called.\n
  [*说明：]如果 `rhs` 是已初始化的，则调用 `T::T(T const& )` .
* [*Exception Safety:] Exceptions can only be thrown during
`T::T( T const& );` in that case, this constructor has no effect.\n
  [*异常安全性：]仅会在 `T::T( T const& );` 中抛出异常，这时构造函数无效。
* [*Example:]\n
  [*例子：]
``
optional<T> uninit ;
assert (!uninit);

optional<T> uinit2 ( uninit ) ;
assert ( uninit2 == uninit );

optional<T> init( T(2) );
assert ( *init == T(2) ) ;

optional<T> init2 ( init ) ;
assert ( init2 == init ) ;
``

__SPACE__

[: `optional<T&>::optional( optional const& rhs );`]

* [*Effect:] Copy-Constructs an `optional`.\n
  [*作用：]复制构造一个 `optional`. 
* [*Postconditions:] If `rhs` is initialized, `*this` is initialized and its
value is another reference to the same object referenced by `*rhs`; else
`*this` is uninitialized.\n
  [*后续条件：]如果 `rhs` 是已初始化的，则 `*this` 为已初始化的，且值为 `*rhs` 所引用的同一个对象的另一个引用；否则 `*this` 为未初始化的。
* [*Throws:] Nothing.\n
  [*抛出：]无。
* [*Notes:] If `rhs` is initialized, both `*this` and `*rhs` will reefer to the
same object (they alias).\n
  [*说明：]如果 `rhs` 是已初始化的，则 `*this` 与 `*rhs` 均引向同一个对象(它们互为别名)。
* [*Example:]\n
  [*例子：]
``
optional<T&> uninit ;
assert (!uninit);

optional<T&> uinit2 ( uninit ) ;
assert ( uninit2 == uninit );

T v = 2 ; T& ref = v ;
optional<T> init(ref);
assert ( *init == v ) ;

optional<T> init2 ( init ) ;
assert ( *init2 == v ) ;

v = 3 ;

assert ( *init  == 3 ) ;
assert ( *init2 == 3 ) ;
``

__SPACE__

[#reference_optional_constructor_other_optional]

[: `template<U> explicit optional<T` ['(not a ref)]`>::optional( optional<U> const& rhs );`]

* [*Effect:] Copy-Constructs an `optional`.\n
  [*作用：]复制构造一个 `optional`. 
* [*Postconditions:] If `rhs` is initialized, `*this` is initialized and its
value is a ['copy] of the value of rhs converted to type `T`; else `*this` is
uninitialized.\n
  [*后续条件：]如果 `rhs` 是已初始化的，则 `*this` 为已初始化的，且值为 `rhs` 转换为类型T的值的拷贝；否则 `*this` 为未初始化的。
* [*Throws:] Whatever `T::T( U const& )` throws.\n
  [*抛出：]`T::T( U const& )` 所抛出的任何异常。
* [*Notes: ] `T::T( U const& )` is called if `rhs` is initialized, which requires a
valid conversion from `U` to `T`.\n
  [*说明：]如果 `rhs` 已初始化，则调用 `T::T( U const& )`, 要求有从 `U` 到 `T` 的有效转换。
* [*Exception Safety:] Exceptions can only be thrown during `T::T( U const& );`
in that case, this constructor has no effect.\n
  [*异常安全性：]仅会在 `T::T( U const& );` 中抛出异常，这时构造函数无效。
* [*Example:]\n
  [*例子：]
``
optional<double> x(123.4);
assert ( *x == 123.4 ) ;

optional<int> y(x) ;
assert( *y == 123 ) ;
``

__SPACE__

[#reference_optional_constructor_factory]

[: `template<InPlaceFactory> explicit optional<T` ['(not a ref)]`>::optional( InPlaceFactory const& f );`]
[: `template<TypedInPlaceFactory> explicit optional<T` ['(not a ref)]`>::optional( TypedInPlaceFactory const& f );`]

* [*Effect:] Constructs an `optional` with a value of `T` obtained from the
factory.\n
  [*作用：]构造一个 `optional`，`T` 的值从工厂获得。
* [*Postconditions: ] `*this` is [_initialized] and its value is ['directly given]
from the factory `f` (i.e., the value [_is not copied]).\n
  [*后续条件：]`*this` [_已初始化] 且其值['直接]由工厂 `f` 取得(即该值[_不是复制的])。
* [*Throws:] Whatever the `T` constructor called by the factory throws.\n
  [*抛出：]由工厂所调用的 `T` 构造函数所抛出的任何异常。
* [*Notes:] See [link boost_optional.in_place_factories In-Place Factories]\n
  [*说明：]请见 [link boost_optional.in_place_factories 就地创建] 
* [*Exception Safety:] Exceptions can only be thrown during the call to
the `T` constructor used by the factory; in that case, this constructor has
no effect.\n
  [*异常安全性：]仅会在工厂调用 `T` 的构造函数时抛出异常，这时构造函数无效。
* [*Example:]\n
  [*例子：]
``
class C { C ( char, double, std::string ) ; } ;

C v('A',123.4,"hello");

optional<C> x( in_place   ('A', 123.4, "hello") ); // InPlaceFactory used
optional<C> y( in_place<C>('A', 123.4, "hello") ); // TypedInPlaceFactory used

assert ( *x == v ) ;
assert ( *y == v ) ;
``

__SPACE__

[#reference_optional_operator_equal_value]

[: `optional& optional<T` ['(not a ref)]`>::operator= ( T const& rhs ) ;`]

* [*Effect:] Assigns the value `rhs` to an `optional`.\n
  [*作用：]将值 `rhs` 赋给一个 `optional`.
* [*Postconditions: ] `*this` is initialized and its value is a ['copy] of `rhs`.\n
  [*后续条件：]`*this` 为已初始化的，其值为 `rhs` 的['拷贝]。
* [*Throws:] Whatever `T::operator=( T const& )` or `T::T(T const&)` throws.\n
  [*抛出：]由 `T::operator=( T const& )` 或 `T::T(T const&)` 抛出的任何异常。
* [*Notes:] If `*this` was initialized, `T`'s assignment operator is used,
otherwise, its copy-constructor is used.\n
  [*说明：]如果 `*this` 是已初始化的，则使用 `T` 的赋值操作符，否则使用它的复制构造函数。
* [*Exception Safety:] In the event of an exception, the initialization
state of `*this` is unchanged and its value unspecified as far as `optional`
is concerned (it is up to `T`'s `operator=()`). If `*this` is initially
uninitialized and `T`'s ['copy constructor] fails, `*this` is left properly
uninitialized.\n
  [*异常安全性：]如果发生异常，`*this` 的初始化状态不会改变，它的值是不确定的直至 `optional` 被关联(由 `T` 的 `operator=()` 进行)。
  如 `*this` 原来是未初始化的，且 `T` 的['复制构造函数] 失败了，则 `*this` 仍为未初始化的。
* [*Example:]\n
  [*例子：]
``
T x;
optional<T> def ;
optional<T> opt(x) ;

T y;
def = y ;
assert ( *def == y ) ;
opt = y ;
assert ( *opt == y ) ;
``

__SPACE__

[: `optional<T&>& optional<T&>::operator= ( T& const& rhs ) ;`]

* [*Effect:] (Re)binds thee wrapped reference.\n
  [*作用：](重)绑定被包装的引用。
* [*Postconditions: ] `*this` is initialized and it references the same
object referenced by `rhs`.\n
  [*后续条件：]`*this` 已初始化且引向由 `rhs` 所引向的对象。
* [*Notes:] If `*this` was initialized, is is ['rebound] to the new object.
See [link boost_optional.rebinding_semantics_for_assignment_of_optional_references here] for details on this behavior.\n
  [*说明：]如果 `*this` 已初始化，则['重绑定]到新的对象。有关细节请见 
  [link boost_optional.rebinding_semantics_for_assignment_of_optional_references 这里]。
* [*Example:]\n
  [*例子：]
``
int a = 1 ;
int b = 2 ;
T& ra = a ;
T& rb = b ;
optional<int&> def ;
optional<int&> opt(ra) ;

def = rb ; // binds 'def' to 'b' through 'rb'
assert ( *def == b ) ;
*def = a ; // changes the value of 'b' to a copy of the value of 'a'
assert ( b == a ) ;
int c = 3;
int& rc = c ;
opt = rc ; // REBINDS to 'c' through 'rc'
c = 4 ;
assert ( *opt == 4 ) ;
``

__SPACE__

[#reference_optional_operator_equal_optional]

[: `optional& optional<T` ['(not a ref)]`>::operator= ( optional const& rhs ) ;`]

* [*Effect:] Assigns another `optional` to an `optional`.\n
  [*作用：]将另一个 `optional` 赋值给一个 `optional`.
* [*Postconditions:] If `rhs` is initialized, `*this` is initialized and
its value is a ['copy] of the value of `rhs`; else `*this` is uninitialized.\n
  [*后续条件：]如果 `rhs` 已初始化，则 `*this` 为已初始化且其值为 `rhs` 值的['拷贝]；否则 `*this` 为未初始化。
* [*Throws:] Whatever `T::operator( T const&)` or  `T::T( T const& )` throws.\n
  [*抛出：]由 `T::operator( T const&)` 或 `T::T( T const& )` 抛出的任何异常。
* [*Notes:] If both `*this` and `rhs` are initially initialized, `T`'s
['assignment operator] is used. If `*this` is initially initialized but `rhs` is
uninitialized, `T`'s [destructor] is called. If `*this` is initially uninitialized
but `rhs` is initialized, `T`'s ['copy constructor] is called.\n
  [*说明：]如果 `*this` 和 `rhs` 均已初始化，则使用 `T` 的 ['赋值操作符]。
  如果 `*this` 已初始化而 `rhs` 未初始化，则调用 `T` 的 ['析构函数]。
  如果 `*this` 未初始化而 `rhs` 已初始化，则调用 `T` 的 ['复制构造函数]。
* [*Exception Safety:] In the event of an exception, the initialization state of
`*this` is unchanged and its value unspecified as far as optional is concerned
(it is up to `T`'s `operator=()`). If `*this` is initially uninitialized and
`T`'s ['copy constructor] fails, `*this` is left properly uninitialized.\n
  [*异常安全性：]发生异常时，`*this` 的初始化状态不改变，其值是不确定的直至 `optional` 被关联(由 T 的 `operator=()` 进行)。
  如果 `*this` 原来是未初始化的而且 `T` 的 ['复制构造函数] 失败，则 `*this` 保持为未初始化] 
* [*Example:]\n
  [*例子：]
``
T v;
optional<T> opt(v);
optional<T> def ;

opt = def ;
assert ( !def ) ;
// previous value (copy of 'v') destroyed from within 'opt'.
// 'opt'的原值('v'的拷贝)被销毁
``

__SPACE__

[: `optional<T&> & optional<T&>::operator= ( optional<T&> const& rhs ) ;`]

* [*Effect:] (Re)binds thee wrapped reference.\n
  [*作用：](重)绑定被包装的引用。
* [*Postconditions:] If `*rhs` is initialized, `*this` is initialized and it
references the same object referenced by `*rhs`; otherwise, `*this` is
uninitialized (and references no object).\n
  [*后续条件：]如果 `*rhs` 已初始化，则 `*this` 为已初始化的且引向且引向由 `*rhs` 所引向的对象；否则 `*this` 为未初始化(不引向任何对象)。 
* [*Notes:] If `*this` was initialized and so is *rhs, this is is ['rebound] to
the new object. See [link boost_optional.rebinding_semantics_for_assignment_of_optional_references here] for details on this behavior.\n
  [*说明：]如果 `*this` 已初始化且 `*rhs` 也是，则['重绑定]到新的对象。有关细节请见 
  [link boost_optional.rebinding_semantics_for_assignment_of_optional_references 这里]。
* [*Example:]\n
  [*例子：]
``
int a = 1 ;
int b = 2 ;
T& ra = a ;
T& rb = b ;
optional<int&> def ;
optional<int&> ora(ra) ;
optional<int&> orb(rb) ;

def = orb ; // binds 'def' to 'b' through 'rb' wrapped within 'orb'
assert ( *def == b ) ;
*def = ora ; // changes the value of 'b' to a copy of the value of 'a'
assert ( b == a ) ;
int c = 3;
int& rc = c ;
optional<int&> orc(rc) ;
ora = orc ; // REBINDS ora to 'c' through 'rc'
c = 4 ;
assert ( *ora == 4 ) ;
``

__SPACE__

[#reference_optional_operator_equal_other_optional]

[: `template<U> optional& optional<T` ['(not a ref)]`>::operator= ( optional<U> const& rhs ) ;`]

* [*Effect:] Assigns another convertible optional to an optional.\n
  [*作用：]将另一个可转换的 `optional` 赋值给一个 `optional`. 
* [*Postconditions:] If `rhs` is initialized, `*this` is initialized and
its value is a ['copy] of the value of `rhs` ['converted] to type `T`; else
`*this` is uninitialized. \n
  [*后续条件：]如果 `rhs` 已初始化，则 `*this` 也是已初始化的，且其值为 `rhs` ['转换]为类型 `T` 后的值的['拷贝]；否则 `*this` 为未初始化。
* [*Throws:] Whatever `T::operator=( U const& )` or `T::T( U const& )` throws.\n
  [*抛出：]由 `T::operator=( U const& )` 或 `T::T( U const& )` 抛出的任何异常。
* [*Notes:] If both `*this` and rhs are initially initialized, `T`'s
['assignment operator] (from `U`) is used. If `*this` is initially initialized
but `rhs` is uninitialized, `T`'s ['destructor] is called. If `*this` is
initially uninitialized but rhs is initialized, `T`'s ['converting constructor]
(from `U`) is called.\n
  [*说明：]如果 `*this` 和 `rhs` 均已初始化，则使用 `T` 的 ['赋值操作符] (赋值自 `U`)。
  如果 `*this` 已初始化而 `rhs` 未初始化，则调用 `T` 的 ['析构函数]。
  如果 `*this` 未初始化而 `rhs` 已初始化，则调用 `T` 的 ['转换构造函数] (转换自 `U`)。 
* [*Exception Safety:] In the event of an exception, the initialization state
of `*this` is unchanged and its value unspecified as far as optional is
concerned (it is up to `T`'s `operator=()`). If `*this` is initially
uninitialized and `T`'s converting constructor fails, `*this` is left properly
uninitialized.\n
  [*异常安全性：]发生异常时，`*this` 的初始化状态不改变，其值是不确定的直至 `optional` 被关联(由 T 的 `operator=()` 进行)。
  如果 `*this` 原来是未初始化的而且 `T` 的 转换构造函数 失败，则 `*this` 保持为未初始化。
* [*Example:]\n
  [*例子：]
``
T v;
optional<T> opt0(v);
optional<U> opt1;

opt1 = opt0 ;
assert ( *opt1 == static_cast<U>(v) ) ;
``

__SPACE__

[#reference_optional_reset_value]

[: `void optional<T` ['(not a ref)]`>::reset( T const& v ) ;`]
* [*Deprecated:] same as `operator= ( T const& v) ;`\n
  [*不建议使用：]相当于 `operator= ( T const& v) ;` 

__SPACE__

[#reference_optional_reset]

[: `void optional<T>::reset() ;`]
* [*Deprecated:] Same as `operator=( detail::none_t );`\n
  [*不建议使用：]相当于 `operator=( detail::none_t );`

__SPACE__

[#reference_optional_get]

[: `T const& optional<T` ['(not a ref)]`>::operator*() const ;`]
[: `T&       optional<T` ['(not a ref)]`>::operator*();`]
[: `T const& optional<T` ['(not a ref)]`>::get() const ;`]
[: `T&       optional<T` ['(not a ref)]`>::get() ;`]

[: `inline T const& get ( optional<T` ['(not a ref)]`> const& ) ;`]
[: `inline T&       get ( optional<T` ['(not a ref)]`> &) ;`]

* [*Requirements:] `*this` is initialized\n
  [*要求：]`*this` 已初始化。
* [*Returns:] A reference to the contained value\n
  [*返回：]所含值的引用。
* [*Throws:] Nothing.\n
  [*抛出：]无。
* [*Notes:] The requirement is asserted via `BOOST_ASSERT()`.\n
  [*说明：]以 `BOOST_ASSERT()` 对前提条件进行断言。
* [*Example:]\n
  [*例子：]
``
T v ;
optional<T> opt ( v );
T const& u = *opt;
assert ( u == v ) ;
T w ;
*opt = w ;
assert ( *opt == w ) ;
``

__SPACE__

[#reference_optional_get_value_or_value]

[: `T const& optional<T` ['(not a ref)]`>::get_value_or( T const& default) const ;`]
[: `T&       optional<T` ['(not a ref)]`>::get_value_or( T&       default ) ;`]

[: `inline T const& get_optional_value_or ( optional<T` ['(not a ref)]`> const& o, T const& default ) ;`]
[: `inline T&       get_optional_value_or ( optional<T` ['(not a ref)]`>&       o, T&       default ) ;`]

* [*Returns:] A reference to the contained value, if any, or `default`.\n
  [*返回：]如果有，则返回所含值(本身可以是引用)的引用, 否则返回 `default`. 
* [*Throws:] Nothing.\n
  [*抛出：]无。
* [*Example:]\n
  [*例子：]
``
T v, z ;
optional<T> def;
T const& y = def.get_value_or(z);
assert ( y == z ) ;

optional<T> opt ( v );
T const& u = get_optional_value_or(opt,z);
assert ( u == v ) ;
assert ( u != z ) ;
``

__SPACE__

[: `T const& optional<T&>::operator*() const ;`]
[: `T      & optional<T&>::operator*();`]
[: `T const& optional<T&>::get() const ;`]
[: `T&       optional<T&>::get() ;`]

[: `inline T const& get ( optional<T&> const& ) ;`]
[: `inline T&       get ( optional<T&> &) ;`]

* [*Requirements: ] `*this` is initialized\n
  [*要求：]`*this` 已初始化。
* [*Returns:] [_The] reference contained.\n
  [*返回：]所包含的引用。
* [*Throws:] Nothing.\n
  [*抛出：]无。
* [*Notes:] The requirement is asserted via `BOOST_ASSERT()`.\n
  [*说明：]以 `BOOST_ASSERT()` 对前提条件进行断言。
* [*Example:]\n
  [*例子：]
``
T v ;
T& vref = v ;
optional<T&> opt ( vref );
T const& vref2 = *opt;
assert ( vref2 == v ) ;
++ v ;
assert ( *opt == v ) ;
``

__SPACE__

[#reference_optional_get_ptr]

[: `T const* optional<T` ['(not a ref)]`>::get_ptr() const ;`]
[: `T*       optional<T` ['(not a ref)]`>::get_ptr() ;`]

[: `inline T const* get_pointer ( optional<T` ['(not a ref)]`> const& ) ;`]
[: `inline T*       get_pointer ( optional<T` ['(not a ref)]`> &) ;`]

* [*Returns:] If `*this` is initialized, a pointer to the contained value;
else `0` (['null]).\n
  [*返回：]如果 `*this` 已初始化，则返回所含值的指针；否则返回 `0` (['null]).
* [*Throws:] Nothing.\n
  [*抛出：]无。
* [*Notes:] The contained value is permanently stored within `*this`, so you
should not hold nor delete this pointer\n
  [*说明：]所含值被 `*this` 永久保留，所以你不能持有或删除该指针。
* [*Example:]\n
  [*例子：]
``
T v;
optional<T> opt(v);
optional<T> const copt(v);
T* p = opt.get_ptr() ;
T const* cp = copt.get_ptr();
assert ( p == get_pointer(opt) );
assert ( cp == get_pointer(copt) ) ;
``

__SPACE__

[#reference_optional_operator_arrow]

[: `T const* optional<T` ['(not a ref)]`>::operator ->() const ;`]
[: `T*       optional<T` ['(not a ref)]`>::operator ->()       ;`]

* [*Requirements: ] `*this` is initialized.\n
  [*要求：]`*this` 已初始化。
* [*Returns:] A pointer to the contained value.\n
  [*返回：]所含值的指针。
* [*Throws:] Nothing.\n
  [*抛出：]无。
* [*Notes:] The requirement is asserted via `BOOST_ASSERT()`.\n
  [*说明：]以 `BOOST_ASSERT()` 对前提条件进行断言。
* [*Example:]\n
  [*例子：]
``
struct X { int mdata ; } ;
X x ;
optional<X> opt (x);
opt->mdata = 2 ;
``

__SPACE__

[#reference_optional_operator_bool]

[: `optional<T>::operator `['unspecified-bool-type]`() const ;`]

* [*Returns:] An unspecified value which if used on a boolean context
is equivalent to (`get() != 0`)\n
  [*返回：]一个未明确规定的值，该值可用于布尔上下文中，等同于 `(get() != 0)` 
* [*Throws:] Nothing.\n
  [*抛出：]无。
* [*Example:]\n
  [*例子：]
``
optional<T> def ;
assert ( def == 0 );
optional<T> opt ( v ) ;
assert ( opt );
assert ( opt != 0 );
``

__SPACE__

[#reference_optional_operator_not]

[: `bool optional<T>::operator!() ;`]

* [*Returns:] If `*this` is uninitialized, `true`; else `false`.\n
  [*返回：]如果 `*this` 未初始化，则返回 `true`; 否则返回 `false`. 
* [*Throws:] Nothing.\n
  [*抛出：]无。
* [*Notes:] This operator is provided for those compilers which can't
use the ['unspecified-bool-type operator] in certain boolean contexts.\n
  [*说明：]该操作提供给那些不能在布尔上下文中使用 ['unspecified-bool-type 操作符] 的编译器使用。
* [*Example:]\n
  [*例子：]
``
optional<T> opt ;
assert ( !opt );
*opt = some_T ;

// Notice the "double-bang" idiom here.
// 注意这里的 "double-bang" 用法。
assert ( !!opt ) ;
``

__SPACE__

[#reference_optional_is_initialized]

[: `bool optional<T>::is_initialized() const ;`]

* [*Returns: ] `true` if the `optional` is initialized, `false` otherwise.\n
  [*返回：]`true` 如果 `optional` 已初始化，否则 `false`.
* [*Throws:] Nothing.\n
  [*抛出：]无。
* [*Example:]\n
  [*例子：]
``
optional<T> def ;
assert ( !def.is_initialized() );
optional<T> opt ( v ) ;
assert ( opt.is_initialized() );
``

__SPACE__

[heading Free functions]

__SPACE__

[#reference_make_optional_value]

[: `optional<T` ['(not a ref)]`> make_optional( T const& v )`]

* [*Returns: ] `optional<T>(v)` for the ['deduced] type `T` of `v`.\n
  [*返回：]`optional<T>(v)`，从 `v` ['推断]类型 `T` . 
* [*Example:]\n
  [*例子：]
``
template<class T> void foo ( optional<T> const& opt ) ;

foo ( make_optional(1+1) ) ; // Creates an optional<int>
``

__SPACE__

[#reference_make_optional_bool_value]

[: `optional<T` ['(not a ref)]`> make_optional( bool condition, T const& v )`]

* [*Returns: ] `optional<T>(condition,v)` for the ['deduced] type `T` of `v`.\n
  [*返回：]`optional<T>(condition,v)`，从 `v` ['推断]类型 `T`. 
* [*Example:]\n
  [*例子：]
``
optional<double> calculate_foo()
{
  double val = compute_foo();
  return make_optional(is_not_nan_and_finite(val),val);
}

optional<double> v = calculate_foo();
if ( !v )
  error("foo wasn't computed");
``

__SPACE__

[#reference_operator_compare_equal_optional_optional]

[: `bool operator == ( optional<T> const& x, optional<T> const& y );`]

* [*Returns:] If both `x` and `y` are initialized, `(*x == *y)`. If only
`x` or `y` is initialized, `false`. If both are uninitialized, `true`.\n
  [*返回：]如果 `x` 和 `y` 均已初始化，则返回 `(*x == *y)`. 如果只有 `x` 或 `y` 已初始化，则返回 `false`. 如果均未初始化，则返回 `true`. 
* [*Throws:] Nothing.\n
  [*抛出：]无。
* [*Notes:] Pointers have shallow relational operators while `optional` has
deep relational operators. Do not use `operator ==` directly in generic
code which expect to be given either an `optional<T>` or a pointer; use
__FUNCTION_EQUAL_POINTEES__ instead\n
  [*说明：]指针的比较操作符是"浅比较"的，而 `optional` 是"深比较"的。
  不要在使用 `optional<T>` 或指针的泛型代码中直接使用 `operator ==`；应使用 __FUNCTION_EQUAL_POINTEES__ 来替代。
* [*Example:]\n
  [*例子：]
``
T x(12);
T y(12);
T z(21);
optional<T> def0 ;
optional<T> def1 ;
optional<T> optX(x);
optional<T> optY(y);
optional<T> optZ(z);

// Identity always hold 总是保持同一性
assert ( def0 == def0 );
assert ( optX == optX );

// Both uninitialized compare equal 未初始化的对象是相等的
assert ( def0 == def1 );

// Only one initialized compare unequal. 只有一个初始化对象则是不等的
assert ( def0 != optX );

// Both initialized compare as (*lhs == *rhs) 已初始化的对象则要比较 (*lhs == *rhs)
assert ( optX == optY ) ;
assert ( optX != optZ ) ;
``

__SPACE__

[#reference_operator_compare_less_optional_optional]

[: `bool operator < ( optional<T> const& x, optional<T> const& y );`]

* [*Returns:] If `y` is not initialized, `false`. If `y` is initialized
and `x` is not initialized, `true`. If both `x` and `y` are initialized,
`(*x < *y)`.\n
  [*返回：]如果 `y` 未初始化，则返回 `false`. 如果 `y` 已初始而 `x` 未初始化，则返回 `true`. 
  如果 `x` 和 `y` 均已初始化，则返回 `(*x < *y)`. 
* [*Throws:] Nothing.\n
  [*抛出：]无。
* [*Notes:] Pointers have shallow relational operators while `optional` has
deep relational operators. Do not use `operator <` directly in generic code
which expect to be given either an `optional<T>` or a pointer; use __FUNCTION_LESS_POINTEES__ instead.\n
  [*说明：]指针的比较操作符是"浅比较"的，而 `optional` 是"深比较"的。
  不要在使用 `optional<T>` 或指针的泛型代码中直接使用 `operator <`；应使用 __FUNCTION_LESS_POINTEES__ 来替代。
* [*Example:]\n
  [*例子：]
``
T x(12);
T y(34);
optional<T> def ;
optional<T> optX(x);
optional<T> optY(y);

// Identity always hold 总是保持同一性
assert ( !(def < def) );
assert ( optX == optX );

// Both uninitialized compare equal 两个未初始化对象是相等的
assert ( def0 == def1 );

// Only one initialized compare unequal. 只有一个已初始化对象则是不等的
assert ( def0 != optX );

// Both initialized compare as (*lhs == *rhs) 两个已初始化对象则要比较 (*lhs == *rhs)
assert ( optX == optY ) ;
assert ( optX != optZ ) ;
``

__SPACE__

[#reference_operator_compare_not_equal_optional_optional]

[: `bool operator != ( optional<T> const& x, optional<T> const& y );`]

* [*Returns: ] `!( x == y );`\n
  [*返回：]`!( x == y );`
* [*Throws:] Nothing.\n
  [*抛出：]无。

__SPACE__

[#reference_operator_compare_greater_optional_optional]

[: `bool operator > ( optional<T> const& x, optional<T> const& y );`]

* [*Returns: ] `( y < x );`\n
  [*返回：]`( y < x );`
* [*Throws:] Nothing.\n
  [*抛出：]无。

__SPACE__

[#reference_operator_compare_less_or_equal_optional_optional]

[: `bool operator <= ( optional<T> const& x, optional<T> const& y );`]

* [*Returns: ] `!( y<x );`\n
  [*返回：]`!( y<x );`
* [*Throws:] Nothing.\n
  [*抛出：]无。

__SPACE__

[#reference_operator_compare_greater_or_equal_optional_optional]

[: `bool operator >= ( optional<T> const& x, optional<T> const& y );`]

* [*Returns: ] `!( x<y );`\n
  [*返回：]`!( x<y );`
* [*Throws:] Nothing.\n
  [*抛出：]无。

__SPACE__

[#reference_swap_optional_optional]

[: `void swap ( optional<T>& x, optional<T>& y );`]

* [*Effect:] If both `x` and `y` are initialized, calls `swap(*x,*y)`
using `std::swap`. If only one is initialized, say `x`, calls:
`y.reset(*x); x.reset();` If none is initialized, does nothing.\n
  [*作用：]如果 `x` 和 `y` 均已初始化，则调用 `swap(*x,*y)`，使用 `std::swap`. 
  如果只有一个已初始化，如 `x`, 则调用：`y.reset(*x); x.reset();`. 如果均未初始化，则为空操作。
* [*Postconditions:] The states of `x` and `y` interchanged.\n
  [*后续条件：]`x` 和 `y` 的状态被交换。
* [*Throws:] If both are initialized, whatever `swap(T&,T&)` throws. If only
one is initialized, whatever `T::T ( T const& )` throws.\n
  [*抛出：]如果均已初始化，则抛出 `swap(T&,T&)` 所抛出的任何异常。如果只有一个已初始化，则抛出 `T::T ( T const& )` 所抛出的任何异常。
* [*Notes:] If both are initialized, `swap(T&,T&)` is used unqualified but
with `std::swap` introduced in scope.
If only one is initialized, `T::~T()` and `T::T( T const& )` is called.\n
  [*说明：]如果均已初始化，则使用未限定的 `swap(T&,T&)`，不过 `std::swap` 被引入到当前域中。
  如果只有一个已初始化，则调用 `T::~T()` 和 `T::T( T const& )` .
* [*Exception Safety:] If both are initialized, this operation has the
exception safety guarantees of `swap(T&,T&)`.
If only one is initialized, it has the same basic guarantee as
`optional<T>::reset( T const& )`.\n
  [*异常安全性：]如果均已初始化，则该操作具有 `swap(T&,T&)` 的异常安全性保证。
  如果只有一个已初始化，则该操作具有和 `optional<T>::reset( T const& )` 一样的基本保证。
* [*Example:]\n
  [*例子：]
``
T x(12);
T y(21);
optional<T> def0 ;
optional<T> def1 ;
optional<T> optX(x);
optional<T> optY(y);

boost::swap(def0,def1); // no-op

boost::swap(def0,optX);
assert ( *def0 == x );
assert ( !optX );

boost::swap(def0,optX); // Get back to original values

boost::swap(optX,optY);
assert ( *optX == y );
assert ( *optY == x );
``

[endsect]
