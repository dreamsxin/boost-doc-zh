[/
    Boost.Optional

    Copyright (c) 2003-2007 Fernando Luis Cacciola Carballal

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
]


[section:examples Examples 例子]

[section:optional_return_values Optional return values  Optional返回值]

    optional<char> get_async_input()
    {
        if ( !queue.empty() )
            return optional<char>(queue.top());
        else return optional<char>(); // uninitialized 未初始化 
    }

    void receive_async_message()
    {
        optional<char> rcv ;
        // The safe boolean conversion from 'rcv' is used here. 
        // 此处使用了从 'rcv' 到布尔值的安全转换。
        while ( (rcv = get_async_input()) && !timeout() )
            output(*rcv);
    }

[endsect]

[section:optional_local_variables Optional local variables  Optional局部变量]

    optional<string> name ;
    if ( database.open() )
    {
        name.reset ( database.lookup(employer_name) ) ;
    }
    else
    {
        if ( can_ask_user )
            name.reset ( user.ask(employer_name) ) ;
    }

    if ( name )
        print(*name);
    else print("employer's name not found!");

[endsect]

[section:optional_data_members Optional data members  Optional数据成员]

    class figure
    {
        public:

        figure()
        {
            // data member 'm_clipping_rect' is uninitialized at this point.
            // 此处数据成员 'm_clipping_rect' 未初始化。
        }

        void clip_in_rect ( rect const& rect )
        {
            ....
            m_clipping_rect.reset ( rect ) ; // initialized here. 此处初始化。
        }

        void draw ( canvas& cvs )
        {
            if ( m_clipping_rect )
                do_clipping(*m_clipping_rect);

            cvs.drawXXX(..);
        }

        // this can return NULL.  可以返回 NULL.
        rect const* get_clipping_rect() { return get_pointer(m_clipping_rect); }

        private :

        optional<rect> m_clipping_rect ;

    };

[endsect]

[section:bypassing_expensive_unnecessary_default_construction Bypassing expensive unnecessary default construction 
避免不必要的昂贵的缺省构造]

    class ExpensiveCtor { ... } ;
    class Fred
    {
        Fred() : mLargeVector(10000) {}

        std::vector< optional<ExpensiveCtor> > mLargeVector ;
    } ;

[endsect]

[endsect]

 
