<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
"http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">


<!-- Copyright (c) 2002-2006 Pavol Droba.
     Subject to the Boost Software License, Version 1.0. 
     (See accompanying file LICENSE_1_0.txt or  http://www.boost.org/LICENSE_1_0.txt)
-->


<section id="string_algo.usage" last-revision="$Date: 2010-04-21 19:00:35 -0400 (Wed, 21 Apr 2010) $">
    <title>Usage 用法</title>

    <using-namespace name="boost"/>
    <using-namespace name="boost::algorithm"/>


    <section>
        <title>First Example 第一个例子</title>
        
        <para>
            Using the algorithms is straightforward. Let us have a look at the first example:<sbr/>
            使用这些算法简单易懂。我们来看看第一个例子：
        </para>
        <programlisting>
    #include &lt;boost/algorithm/string.hpp&gt;
    using namespace std;
    using namespace boost;
    
    // ...

    string str1(" hello world! ");
    to_upper(str1);  // str1 == " HELLO WORLD! "
    trim(str1);      // str1 == "HELLO WORLD!"

    string str2=
       to_lower_copy(
          ireplace_first_copy(
             str1,"hello","goodbye")); // str2 == "goodbye world!"
        </programlisting>
        <para>
            This example converts str1 to upper case and trims spaces from the start and the end
            of the string. str2 is then created as a copy of str1 with "hello" replaced with "goodbye".
            This example demonstrates several important concepts used in the library:<sbr/>
            这个例子将 str1 转换为大写，并修剪 string 头尾的空格。然后，以 str1 的拷贝的方式创建 str2，
            并用 "goodbye" 替换 "hello"。这个例子示范了本库使用的几个重要概念：
        </para>
        <itemizedlist>
            <listitem>
                <para><emphasis role="bold">Container parameters:</emphasis>
                    Unlike in the STL algorithms, parameters are not specified only in the form
                    of iterators. The STL convention allows for great flexibility,
                    but it has several limitations. It is not possible to <emphasis>stack</emphasis> algorithms together, 
                    because a container is passed in two parameters. Therefore it is not possible to use 
                    a return value from another algorithm. It is considerably easier to write
                    <code>to_lower(str1)</code>, than <code>to_lower(str1.begin(), str1.end())</code>.<sbr/>
                    <emphasis role="bold">容器参数：</emphasis>与 STL 算法不同，参数并不一定要用迭代器的方式指定。
                    STL 的惯例具有很大的灵活性，但也有几个限制。它不可能将算法 <emphasis>套叠</emphasis>在一起，
                    因为一个容器需要用两个参数传递。因此它就不可能使用另一个算法的返回值。写成 <code>to_lower(str1)</code>，
                    比 <code>to_lower(str1.begin(), str1.end())</code> 要简单得多。
                </para>
                <para>
                    The magic of <ulink url="../../libs/range/index.html">Boost.Range</ulink> 
                    provides a uniform way of handling different string types. 
                    If there is a need to pass a pair of iterators, 
                    <ulink url="../../libs/range/doc/html/range/utilities/iterator_range.html"><code>boost::iterator_range</code></ulink>
                    can be used to package iterators into a structure with a compatible interface.<sbr/>
                    <ulink url="../../libs/range/index.html">Boost.Range</ulink> 的魔力提供了处理不同 string 类型的统一方法。
                    如果需要传递一对迭代器，就可以用 
                    <ulink url="../../libs/range/doc/html/range/utilities/iterator_range.html"><code>boost::iterator_range</code></ulink> 
                    将迭代器打包到一个具有可兼容接口的结构中。
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Copy vs. Mutable:</emphasis>
                    Many algorithms in the library are performing a transformation of the input. 
                    The transformation can be done in-place, mutating the input sequence, or a copy 
                    of the transformed input can be created, leaving the input intact. None of 
                    these possibilities is superior to the other one and both have different 
                    advantages and disadvantages. For this reason, both are provided with the library. <sbr/>
                    <emphasis role="bold">拷贝 vs. 变化：</emphasis>本库很多算法对输入执行某种转换。
                    这种转换可以在原地进行，改变输入序列，也可以创建一个转换后的输入的拷贝，而保持原始输入不变。
                    这些可能性中并没有一种比另一种更加优越，而且各有利弊。因此，本库同时提供了这两种方式。
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Algorithm stacking:</emphasis>
                    Copy versions return a transformed input as a result, thus allow a simple chaining of
                    transformations within one expression (i.e. one can write <code>trim_copy(to_upper_copy(s))</code>). 
                    Mutable versions have <code>void</code> return, to avoid misuse.<sbr/>
                    <emphasis role="bold">算法套叠：</emphasis>拷贝版本返回一个转换后的输入作为结果，
                    这样就允许将转换简单地串接在一个表达式中（例如，我们可以这样写 <code>trim_copy(to_upper_copy(s))</code>）。
                    可变版本返回 <code>void</code>，以避免误用。
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Naming:</emphasis>
                    Naming follows the conventions from the Standard C++ Library. If there is a 
                    copy and a mutable version of the same algorithm, the mutable version has no suffix 
                    and the copy version has the suffix <emphasis>_copy</emphasis>. 
                    Some algorithms have the prefix <emphasis>i</emphasis> 
                    (e.g. <functionname>ifind_first()</functionname>).
                    This prefix identifies that the algorithm works in a case-insensitive manner.<sbr/>
                    <emphasis role="bold">命名：</emphasis>命名遵循来自于标准 C++ 库的管理。
                    如果同一个算法有拷贝和可变两个版本，则可变版本没有后缀，而拷贝版本有后缀 <emphasis>_copy</emphasis>。
                    有些算法有前缀 <emphasis>i</emphasis>（比如 <functionname>ifind_first()</functionname>）。
                    这个前缀表明这个算法以大小写无关方式工作。
                </para>
            </listitem>
        </itemizedlist>
        <para>
            To use the library, include the <headername>boost/algorithm/string.hpp</headername> header. 
            If the regex related functions are needed, include the 
            <headername>boost/algorithm/string_regex.hpp</headername> header.<sbr/>
            为使用本库，需要包含 <headername>boost/algorithm/string.hpp</headername> 头文件。
            如果需要与 regex 相关的函数，则包含 <headername>boost/algorithm/string_regex.hpp</headername> 头文件。
        </para>
    </section>
    <section>
        <title>Case conversion 大小写转换</title>
        
        <para>
            STL has a nice way of converting character case. Unfortunately, it works only
            for a single character and we want to convert a string, <sbr/>
            STL 有一个转换字符大小写的不错的方法。不幸的是，它只对单个的字符有效，而我们要转换一个 string，
        </para>
        <programlisting>
    string str1("HeLlO WoRld!");
    to_upper(str1); // str1=="HELLO WORLD!"
        </programlisting>
        <para>
            <functionname>to_upper()</functionname> and <functionname>to_lower()</functionname> convert the case of 
            characters in a string using a specified locale.<sbr/>
            <functionname>to_upper()</functionname> 和 <functionname>to_lower()</functionname> 
            使用一个指定的地区设置转换一个 string 中的 characters 的大小写。
        </para>
        <para>
            For more information see the reference for <headername>boost/algorithm/string/case_conv.hpp</headername>.<sbr/>
            关于更多的信息请参见 <headername>boost/algorithm/string/case_conv.hpp</headername> 的参考。
        </para>
    </section>
    <section>
        <title>Predicates and Classification 判断式与分类</title>
        <para>
            A part of the library deals with string related predicates. Consider this example:<sbr/>
            本库的一部分用于处理和 string 相关的判断式。考虑这个例子：
        </para>
        <programlisting>
    bool is_executable( string&amp; filename )
    {
        return 
            iends_with(filename, ".exe") ||
            iends_with(filename, ".com");
    }

    // ...
    string str1("command.com");
    cout 
        &lt;&lt; str1
        &lt;&lt; (is_executable("command.com")? "is": "is not") 
        &lt;&lt; "an executable" 
        &lt;&lt; endl; // prints "command.com is an executable"
    
    //..
    char text1[]="hello world!";
    cout 
        &lt;&lt; text1 
        &lt;&lt; (all( text1, is_lower() )? "is": "is not")
        &lt;&lt; " written in the lower case" 
        &lt;&lt; endl; // prints "hello world! is written in the lower case"
        </programlisting>
        <para>
            The predicates determine whether if a substring is contained in the input string
            under various conditions. The conditions are: a string starts with the substring, 
            ends with the substring, 
            simply contains the substring or if both strings are equal. See the reference for 
            <headername>boost/algorithm/string/predicate.hpp</headername> for more details. <sbr/>
            判断式用于判定在各种条件下，一个 substring 是否包含于输入 string。条件为：
            一个 string 以这个 substring 开始，以这个 substring 结尾，直接包含这个 substring 以及两个 string 是否相等。
            更多的细节请参见 <headername>boost/algorithm/string/predicate.hpp</headername> 的参考。
        </para>
        <para>  
            In addition the algorithm <functionname>all()</functionname> checks
            all elements of a container to satisfy a condition specified by a predicate. 
            This predicate can be any unary predicate, but the library provides a bunch of 
            useful string-related predicates and combinators ready for use.
            These are located in the <headername>boost/algorithm/string/classification.hpp</headername> header.
            Classification predicates can be combined using logical combinators to form
            a more complex expressions. For example: <code>is_from_range('a','z') || is_digit()</code><sbr/>
            另外，算法 <functionname>all()</functionname> 检查一个容器中的所有元素是否满足由一个判断式指定的条件。
            这个判断式可以是任何一元判断式，但是本库提供了一系列有用的 string 相关的判断式和连接符备用。
            它们位于 <headername>boost/algorithm/string/classification.hpp</headername> 头文件。
            分类判断式可以用逻辑连接符连接起来形成一个更复杂的表达式。例如：<code>is_from_range('a','z') || is_digit()</code>。
        </para>
    </section>
    <section>
        <title>Trimming 修剪</title>
        
        <para>
            When parsing the input from a user, strings usually have unwanted leading or trailing 
            characters. To get rid of them, we need trim functions:<sbr/>
            在解析来自用户的输入时，strings 中通常会有不需要的开头或拖尾字符。为了去掉它们，我们需要修剪函数：
        </para>
        <programlisting>
    string str1="     hello world!     ";
    string str2=trim_left_copy(str1);   // str2 == "hello world!     "
    string str3=trim_right_copy(str2);  // str3 == "     hello world!"
    trim(str1);                         // str1 == "hello world!"

    string phone="00423333444";
    // remove leading 0 from the phone number
    trim_left_if(phone,is_any_of("0")); // phone == "423333444"
        </programlisting>
        <para>
            It is possible to trim the spaces on the right, on the left or on both sides of a string.
            And for those cases when there is a need to remove something else than blank space, there
            are <emphasis>_if</emphasis> variants. Using these, a user can specify a functor which will 
            select the <emphasis>space</emphasis> to be removed. It is possible to use classification 
            predicates like <functionname>is_digit()</functionname> mentioned in the previous paragraph.
            See the reference for the <headername>boost/algorithm/string/trim.hpp</headername>.<sbr/>
            它可以修剪一个 string 右边的，左边的或两边的空格。而且，为了应付移除某些空格以外的东西的需要，
            有一个 <emphasis>_if</emphasis> 变量，用户可以指定一个仿函数用来选择要被移除的 <emphasis>space</emphasis>。
            它可能使用我们前面提到过的类似 <functionname>is_digit()</functionname> 这样的分类判断式。
            请参见 <headername>boost/algorithm/string/trim.hpp</headername> 的参考。
        </para>
    </section>
    <section>
        <title>Find algorithms 查找算法</title>
        
        <para>
            The library contains a set of find algorithms. Here is an example:<sbr/>
            本库包含一套查找算法。如下例：
        </para>
        <programlisting>
    char text[]="hello dolly!";
    iterator_range&lt;char*&gt; result=find_last(text,"ll");

    transform( result.begin(), result.end(), result.begin(), bind2nd(plus&lt;char&gt;(), 1) );
    // text = "hello dommy!"            

    to_upper(result); // text == "hello doMMy!"

    // iterator_range is convertible to bool
    if(find_first(text, "dolly"))
    {
        cout &lt;&lt; "Dolly is there" &lt;&lt; endl;
    }
        </programlisting>
        <para>
            We have used <functionname>find_last()</functionname> to search the <code>text</code> for "ll".
            The result is given in the <ulink url="../../libs/range/doc/html/range/utilities/iterator_range.html"><code>boost::iterator_range</code></ulink>. 
            This range delimits the
            part of the input which satisfies the find criteria. In our example it is the last occurrence of "ll".
            
            As we can see, input of the <functionname>find_last()</functionname> algorithm can be also 
            char[] because this type is supported by 
            <ulink url="../../libs/range/index.html">Boost.Range</ulink>.

            The following lines transform the result. Notice that 
            <ulink url="../../libs/range/doc/html/range/utilities/iterator_range.html"><code>boost::iterator_range</code></ulink> has familiar 
            <code>begin()</code> and <code>end()</code> methods, so it can be used like any other STL container.
            Also it is convertible to bool therefore it is easy to use find algorithms for a simple containment checking.<sbr/>
            我们使用 <functionname>find_last()</functionname> 在 <code>text</code> 中查找 "ll"。
            结果以 <ulink url="../../libs/range/doc/html/range/utilities/iterator_range.html"><code>boost::iterator_range</code></ulink> 的形式给出。
            这个范围限定了输入中符合查找规则的部分。在我们的例子中就是最后一次出现的 "ll"。就像我们看到的，
            <functionname>find_last()</functionname> 算法的输入也可以是 char[]，
            因为这个类型也被 <ulink url="../../libs/range/index.html">Boost.Range</ulink> 所支持。
            接下来的代码行转换这个结果。注意 
            <ulink url="../../libs/range/doc/html/range/utilities/iterator_range.html"><code>boost::iterator_range</code></ulink> 具有通常的 
            <code>begin()</code> 和 <code>end()</code> 方法，所以它可以像任何其它 STL 容器一样使用。
            它也可以转换为 bool，因此它可以很容易地使用查找算法做一个简单的包含检查。
        </para>
        <para>
            Find algorithms are located in <headername>boost/algorithm/string/find.hpp</headername>.<sbr/>
            查找算法位于 <headername>boost/algorithm/string/find.hpp</headername> 中。
        </para>
    </section>
    <section>
        <title>Replace Algorithms 替换算法</title>
        <para>
            Find algorithms can be used for searching for a specific part of string. Replace goes one step
            further. After a matching part is found, it is substituted with something else. The substitution is computed
            from the original, using some transformation. <sbr/>
            查找算法可以用于搜索 string 的一个指定部分。替换则又向前走了一步。在找到一个匹配部分后，
            用其它东西来取代它。取代的部分根据原始文本计算，并使用了某些转换。
        </para>
        <programlisting>
    string str1="Hello  Dolly,   Hello World!"
    replace_first(str1, "Dolly", "Jane");      // str1 == "Hello  Jane,   Hello World!"
    replace_last(str1, "Hello", "Goodbye");    // str1 == "Hello  Jane,   Goodbye World!"
    erase_all(str1, " ");                      // str1 == "HelloJane,GoodbyeWorld!"
    erase_head(str1, 6);                       // str1 == "Jane,GoodbyeWorld!"
        </programlisting>
        <para>
            For the complete list of replace and erase functions see the 
            <link linkend="string_algo.reference">reference</link>.
            There is a lot of predefined function for common usage, however, the library allows you to 
            define a custom <code>replace()</code> that suits a specific need. There is a generic <functionname>find_format()</functionname> 
            function which takes two parameters.
            The first one is a <link linkend="string_algo.finder_concept">Finder</link> object, the second one is 
            a <link linkend="string_algo.formatter_concept">Formatter</link> object. 
            The Finder object is a functor which performs the searching for the replacement part. The Formatter object
            takes the result of the Finder (usually a reference to the found substring) and creates a 
            substitute for it. Replace algorithm puts these two together and makes the desired substitution. <sbr/>
            关于替换和删除函数的完整列表，请参见 <link linkend="string_algo.reference">参考</link>。
            有很多预定义的函数用于通常用法，本库还允许你定义一个定制化的 <code>replace()</code> 来适应一个指定的要求。
            有一个通用的持有两个参数的 <functionname>find_format()</functionname> 函数。第一个参数是一个 
            <link linkend="string_algo.finder_concept">Finder</link> 对象，第二个参数是一个 
            <link linkend="string_algo.formatter_concept">Formatter</link> 对象。
            Finder 对象是一个用于执行搜索替换部分的仿函数。Formatter 对象持有 Finder 的结果
            （通常是对所找到的子串的一个引用）并为它创建一个取代。替换算法将两者结合起来得到想要的取代。
        </para>
        <para>
            Check <headername>boost/algorithm/string/replace.hpp</headername>, <headername>boost/algorithm/string/erase.hpp</headername> and
            <headername>boost/algorithm/string/find_format.hpp</headername> for reference.<sbr/>
            参见 <headername>boost/algorithm/string/replace.hpp</headername>，
            <headername>boost/algorithm/string/erase.hpp</headername> 和 
            <headername>boost/algorithm/string/find_format.hpp</headername> 中的参考。
        </para>
    </section>
    <section>
        <title>Find Iterator 查找迭代器</title>

        <para>
            An extension to find algorithms it the Find Iterator. Instead of searching for just a one part of a string, 
            the find iterator allows us to iterate over the substrings matching the specified criteria.
            This facility is using the <link linkend="string_algo.finder_concept">Finder</link> to incrementally
            search the string. 
            Dereferencing a find iterator yields an <ulink url="../../libs/range/doc/html/range/utilities/iterator_range.html"><code>boost::iterator_range</code></ulink> 
            object, that delimits the current match.<sbr/>
            查找迭代器是对查找算法的一种扩展。不仅仅是找到一个 string 的一个部分。
            查找迭代器允许我们迭代遍历匹配指定规则的全部 substring。这个部件使用 
            <link linkend="string_algo.finder_concept">Finder</link> 来增量式地搜索 string。解引用一个查找迭代器产生一个
            <ulink url="../../libs/range/doc/html/range/utilities/iterator_range.html"><code>boost::iterator_range</code></ulink> 对象，
            它限定了当前的匹配范围。
        </para>
        <para>
            There are two iterators provided <classname>find_iterator</classname> and 
            <classname>split_iterator</classname>. The former iterates over substrings that are found using the specified
            Finder. The latter iterates over the gaps between these substrings.<sbr/>
            有两个提供的迭代器是 <classname>find_iterator</classname> 和 <classname>split_iterator</classname>。
            前者迭代遍历用指定 Finder 找到的全部 substrings。后者迭代遍历这些 substraings 之间的间隔。
        </para>
        <programlisting>
    string str1("abc-*-ABC-*-aBc");
    // Find all 'abc' substrings (ignoring the case)
    // Create a find_iterator
    typedef find_iterator&lt;string::iterator&gt; string_find_iterator;
    for(string_find_iterator It=
            make_find_iterator(str1, first_finder("abc", is_iequal()));
        It!=string_find_iterator();
        ++It)
    {
        cout &lt;&lt; copy_range&lt;std::string&gt;(*It) &lt;&lt; endl;
    }

    // Output will be:
    // abc
    // ABC
    // aBC
    
    typedef split_iterator&lt;string::iterator&gt; string_split_iterator;
    for(string_split_iterator It=
        make_split_iterator(str1, first_finder("-*-", is_iequal()));
        It!=string_split_iterator();
        ++It)
    {
        cout &lt;&lt; copy_range&lt;std::string&gt;(*It) &lt;&lt; endl;
    }

    // Output will be:
    // abc
    // ABC
    // aBC
        </programlisting>
        <para>
            Note that the find iterators have only one template parameter. It is the base iterator type.
            The Finder is specified at runtime. This allows us to typedef a find iterator for
            common string types and reuse it. Additionally make_*_iterator functions help
            to construct a find iterator for a particular range.<sbr/>
            注意查找迭代器只有一个模板参数。它是基本的迭代器类型。Finder 在运行时指定。
            这允许我们为通常的 string 类型 typedef 一个查找迭代器并复用它。
            另外 make_*_iterator 函数帮助我们为某个特定的范围创建一个查找迭代器。
        </para>
        <para>
            See the reference in <headername>boost/algorithm/string/find_iterator.hpp</headername>.<sbr/>
            请参见 <headername>boost/algorithm/string/find_iterator.hpp</headername> 中的参考。
        </para>
    </section>
    <section>
        <title>Split 分割</title>

        <para>
            Split algorithms are an extension to the find iterator for one common usage scenario.
            These algorithms use a find iterator and store all matches into the provided
            container. This container must be able to hold copies (e.g. <code>std::string</code>) or 
            references (e.g. <code>iterator_range</code>) of the extracted substrings.<sbr/>
            分割算法是查找迭代器为一种常用的使用方案所做的扩展。这些算法使用一个查找迭代器并将全部匹配项存储在提供的容器中。
            这个容器必须能够持有被选取的 substrings 的拷贝（比如 <code>std::string</code>）或引用
            （比如 <code>iterator_range</code>）。
        </para>
        <para>
            Two algorithms are provided. <functionname>find_all()</functionname> finds all copies
            of a string in the input. <functionname>split()</functionname> splits the input into parts.<sbr/>
            提供了两个算法。<functionname>find_all()</functionname> 在输入中查找一个 string 的所有拷贝。
            <functionname>split()</functionname> 将输入分割为若干个部分。
        </para>

        <programlisting>
    string str1("hello abc-*-ABC-*-aBc goodbye");

    typedef vector&lt; iterator_range&lt;string::iterator&gt; &gt; find_vector_type;
    
    find_vector_type FindVec; // #1: Search for separators
    ifind_all( FindVec, str1, "abc" ); // FindVec == { [abc],[ABC],[aBc] }

    typedef vector&lt; string &gt; split_vector_type;
    
    split_vector_type SplitVec; // #2: Search for tokens
    split( SplitVec, str1, is_any_of("-*") ); // SplitVec == { "hello abc","ABC","aBc goodbye" }
        </programlisting>
        <para>
            <code>[hello]</code> designates an <code>iterator_range</code> delimiting this substring.  <sbr/>
            <code>[hello]</code> 表示一个限定这个子串的 <code>iterator_range</code>。            
        </para>
        <para>
            First example show how to construct a container to hold references to all extracted
            substrings. Algorithm <functionname>ifind_all()</functionname> puts into FindVec references
            to all substrings that are in case-insensitive manner equal to "abc".<sbr/>
            第一个例子展示如何创建一个持有全部被选取的子串的容器。算法 <functionname>ifind_all()</functionname> 
            将全部以大小写无关方式等于 "abc" 的 substring 的引用放入 FindVec 中。
        </para>
        <para>
            Second example uses <functionname>split()</functionname> to split string str1 into parts
            separated by characters '-' or '*'. These parts are then put into the SplitVec.
            It is possible to specify if adjacent separators are concatenated or not.<sbr/>
            第二个例子使用 <functionname>split()</functionname> 将 string str1 分割成以字符 '-' 或 '*' 分隔的若干个部分。
            然后将这些部分放入 SplitVec 中。它还可以指定是否将相邻的分隔符连接在一起。
        </para>
        <para>
            More information can be found in the reference: <headername>boost/algorithm/string/split.hpp</headername>.<sbr/>
            更多信息可以在参考 <headername>boost/algorithm/string/split.hpp</headername> 中找到。
        </para>
   </section>
</section>
