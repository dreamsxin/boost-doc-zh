<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
"http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">

<!-- Copyright (c) 2002-2006 Pavol Droba.
     Subject to the Boost Software License, Version 1.0. 
     (See accompanying file LICENSE_1_0.txt or  http://www.boost.org/LICENSE_1_0.txt)
-->

<section id="string_algo.concept" last-revision="$Date: 2008-06-19 08:07:24 -0400 (Thu, 19 Jun 2008) $">
    <title>Concepts 概念</title>

    <using-namespace name="boost"/>
    <using-namespace name="boost::algorithm"/>

    <section>   
        <title>Definitions 定义</title>
        
        <table>
            <title>Notation 符号</title>
            <tgroup cols="2" align="left">
                <tbody>
                    <row>
                        <entry><code>F</code></entry>
                        <entry>A type that is a model of Finder<sbr/>
                        可作为 Finder 的模型的类型</entry>
                    </row>
                    <row>
                        <entry><code>Fmt</code></entry>
                        <entry>A type that is a model of Formatter<sbr/>
                        可作为 Formatter 的模型的类型</entry>
                    </row>
                    <row>
                        <entry><code>Iter</code></entry>
                        <entry>
                            Iterator Type<sbr/>
                            迭代器类型
                        </entry>
                    </row>
                    <row>
                        <entry><code>f</code></entry>
                        <entry>Object of type <code>F</code><sbr/>
                        类型 <code>F</code> 的对象</entry>
                    </row>
                    <row>
                        <entry><code>fmt</code></entry>
                        <entry>Object of type <code>Fmt</code><sbr/>
                        类型 <code>Fmt</code> 的对象</entry>
                    </row>
                    <row>
                        <entry><code>i,j</code></entry>
                        <entry>Objects of type <code>Iter</code><sbr/>
                        类型 <code>Iter</code> 的对象</entry>
                    </row>
                    </tbody>
            </tgroup>
        </table>
    </section>

    <section id="string_algo.finder_concept">
        <title>Finder Concept 查找器概念</title>

        <para>
            Finder is a functor which searches for an arbitrary part of a container. 
            The result of the search is given as an <classname>iterator_range</classname> 
            delimiting the selected part.<sbr/>
            Finder 是一个搜索某个容器的任意部分的仿函数。搜索的结果以一个限定所选择的部分的 
            <classname>iterator_range</classname> 的形式给出。
        </para>

        <table>             
            <title>Valid Expressions 合法表达式</title>
            <tgroup cols="3" align="left">
                <thead>
                    <row>   
                        <entry>Expression 表达式 </entry>
                        <entry>Return Type 返回类型</entry>
                        <entry>Effects 效果</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><code>f(i,j)</code></entry>
                        <entry>Convertible to <code>iterator_range&lt;Iter&gt;</code><sbr/>
                        可转换为 <code>iterator_range&lt;Iter&gt;</code><Iter> </entry>
                        <entry>Perform the search on the interval [i,j) and returns the result of the search<sbr/>
                        在区间 [i,j) 上执行搜索并返回搜索的结果</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <para>
            Various algorithms need to perform a search in a container and a Finder is a generalization of such
            search operations that allows algorithms to abstract from searching. For instance, generic replace
            algorithms can replace any part of the input, and the Finder is used to select the desired one.<sbr/>
            许多算法都需要在一个容器上执行搜索操作，而一个 Finder 就是这种搜索操作的一个泛化，它允许算法从搜索中抽象出来。
            例如，通用的替换算法可以替换输入的任何部分，而 Finder 就用来选择需要的那部分。
        </para>
        <para>
            Note, that it is only required that the finder works with a particular iterator type. However,
            a Finder operation can be defined as a template, allowing the Finder to work with any iterator.<sbr/>
            注意，Finder 和一种特定的迭代器类型一起工作是仅有的必要条件。然而，一个 Finder 操作可以定义成一个模板，
            这样就允许 Finder 可以和任何迭代器一个工作。
        </para>
        <para>
            <emphasis role="bold">Examples 示例 </emphasis>
        </para>
        <para> 
            <itemizedlist>
                <listitem>
                    Finder implemented as a class. This Finder always returns the whole input as a match. <code>operator()</code>
                    is templated, so that the finder can be used on any iterator type.<sbr/>
                    Finder 实现为一个类。这个 Finder 总是将整个输入作为一个匹配项返回。
                    <code>operator()</code>是模板化的，所以这个 Finder 能够用于任何迭代器类型
                    
                    <programlisting>
struct simple_finder
{
    template&lt;typename ForwardIteratorT&gt;
    boost::iterator_range&lt;ForwardIteratorT&gt; operator()(
        ForwardIteratorT Begin,
        ForwardIteratorT End )
    {
        return boost::make_range( Begin, End );
    }
};
        </programlisting>
                </listitem>
                <listitem>
                    Function Finder. Finder can be any function object. That is, any ordinary function with the
                    required signature can be used as well. However, such a function can be used only for
                    a specific iterator type. <sbr/>
                    函数 Finder。Finder 可以成为任何函数对象。也就是说，和任何带有必要的识别标识的普通函数一样可以使用。
                    然而，这样一个函数只能用于一种特定的迭代器类型。
                    
                    <programlisting>
boost::iterator_range&lt;std::string&gt; simple_finder(
    std::string::const_iterator Begin,
    std::string::const_iterator End )
{
    return boost::make_range( Begin, End );
}
        </programlisting>
                </listitem>
            </itemizedlist>
        </para> 
    </section>
    <section id="string_algo.formatter_concept">
        <title>Formatter concept 格式化器概念</title>

        <para>
            Formatters are used by <link linkend="string_algo.replace">replace algorithms</link>.
            They are used in close combination with finders.
            A formatter is a functor, which takes a result from a Finder operation and transforms it in a specific way. 
            The operation of the formatter can use additional information provided by a specific finder,
            for example <functionname>regex_formatter()</functionname> uses the match information from
            <functionname>regex_finder()</functionname> to format the result of formatter operation.<sbr/>
            Formatters 用于 <link linkend="string_algo.replace">替换算法</link>。它们通常和 Finder 紧密结合在一起。
            一个 Formatter 是一个仿函数，它持有一个来自 Finder 的结果并按照指定的方式对它执行转换。
            Formatter 的运作可以使用由一个指定的 Finder 提供的额外信息，比如 <functionname>regex_formatter()</functionname> 
            使用来自 <functionname>regex_finder()</functionname> 的匹配信息来格式化 Formatter 操作的结果。
        </para>
    
        <table>
            <title>Valid Expressions 合法表达式</title>
            <tgroup cols="3" align="left">
                <thead>
                    <row>   
                        <entry>Expression 表达式 </entry>
                        <entry>Return Type 返回类型</entry>
                        <entry>Effects 效果</entry>
                    </row>
                </thead>
                <tbody>
                   <row>
                        <entry><code>fmt(f(i,j))</code></entry>
                        <entry>A container type, accessible using container traits<sbr/>
                        一个容器类型，可使用容器特有的方式访问</entry>
                        <entry>Formats the result of the finder operation<sbr/>
                        格式化 Finder 操作的结果</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <para>
            Similarly to finders, formatters generalize format operations. When a finder is used to 
            select a part of the input, formatter takes this selection and performs some formating
            on it. Algorithms can abstract from formating using a formatter.<sbr/>
            和 Finders 类似，Formatters 泛化了格式化操作。一个 Finder 用于选择输入的一个部分，
            Formatter 持有这个被选择的部分并对它执行某些格式化操作。使用一个 Formatter 可以将算法从格式化中抽象出来。
        </para>
        <para>
            <emphasis role="bold">Examples 示例 </emphasis>
        </para>
        <para> 
            <itemizedlist>
                <listitem>
                    Formatter implemented as a class. This Formatter does not perform any formating and 
                    returns the match, repackaged. <code>operator()</code>
                    is templated, so that the Formatter can be used on any Finder type.<sbr/>
                    Formatter 实现为一个类。这个 Formatter不执行任何格式化只返回匹配项并重新打包。
                    <code>operator()</code> 是模板化的，所以这个 Formatter 能够用于任何 Finder 类型。
                    
                    <programlisting>
struct simple_formatter
{
    template&lt;typename FindResultT&gt;
    std::string operator()( const FindResultT&amp; Match )
    {
        std::string Temp( Match.begin(), Match.end() );
        return Temp;
    }
};
                </programlisting>
                </listitem>
                <listitem>
                    Function Formatter. Similarly to Finder, Formatter can be any function object. 
                    However, as a function, it can be used only with a specific Finder type. <sbr/>
                    函数 Formatter。和 Finder 类似，Formatter 可以成为任何函数对象。然而，作为一个函数，
                    它只能用于一种特定的 Finder 类型。
                  
                    <programlisting>
std::string simple_formatter( boost::iterator_range&lt;std::string::const_iterator&gt;&amp; Match )
{
    std::string Temp( Match.begin(), Match.end() );
    return Temp;
}
                    </programlisting>
                </listitem>
            </itemizedlist>
        </para> 
     </section>
</section>
