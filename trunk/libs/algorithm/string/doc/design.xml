<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
"http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">


<!-- Copyright (c) 2002-2006 Pavol Droba.
     Subject to the Boost Software License, Version 1.0. 
     (See accompanying file LICENSE_1_0.txt or  http://www.boost.org/LICENSE_1_0.txt)
-->

<section id="string_algo.design" last-revision="$Date: 2008-02-27 15:00:24 -0500 (Wed, 27 Feb 2008) $">
    <title>Design Topics 设计话题</title>

    <using-namespace name="boost"/>
    <using-namespace name="boost::algorithm"/>

    <section id="string_algo.string">
        <title>String Representation 字符串表示法</title>

        <para>
            As the name suggest, this library works mainly with strings. However, in the context of this library,
            a string is not restricted to any particular implementation (like <code>std::basic_string</code>),
            rather it is a concept. This allows the algorithms in this library to be reused for any string type,
            that satisfies the given requirements.<sbr/>
            顾名思义，本库主要是和 strings 一起工作的。然而，在本库的语境中，一个 string 并不局限于任何特定的实现
            （比如 <code>std::basic_string</code>），而是一个概念。这就允许本库的算法为任何满足给定要求的 string 类型所复用。
        </para>
        <para>
            <emphasis role="bold">Definition:</emphasis> A string is a 
            <ulink url="../../libs/range/doc/range.html">range</ulink> of characters accessible in sequential
            ordered fashion. Character is any value type with "cheap" copying and assignment.  <sbr/>
            <emphasis role="bold">定义：</emphasis>一个 string 就是一个可以用连续有序方式访问的 characters 的 
            <ulink url="../../libs/range/doc/range.html">range</ulink>。Character 是任何带有“廉价”拷贝和赋值操作的值类型。
        </para>
        <para>
            First requirement of string-type is that it must accessible using 
            <ulink url="../../libs/range/index.html">Boost.Range</ulink>. This facility allows to access
            the elements inside the string in a uniform iterator-based fashion. 
            This is sufficient for our library<sbr/>
            string-type 的第一个要求是必须可以用 <ulink url="../../libs/range/index.html">Boost.Range</ulink> 访问。
            这一便利条件允许以一种统一的基于迭代器的方式访问 string 中的元素。这对于我们的库来说已经足够了。
        </para>
        <para>            
            Second requirement defines the way in which the characters are stored in the string. Algorithms in 
            this library work with an assumption that copying a character is cheaper then allocating extra 
            storage to cache results. This is a natural assumption for common character types. Algorithms will 
            work even if this requirement is not satisfied, however at the cost of performance degradation.<sbr/>
            第二个要求清楚地规定了 characters 存储在 string 中的方法。本库中的算法在工作时假设拷贝一个 character 是比较廉价的，
            并因此分配额外的存储空间以缓存结果。对于常见的 character 类型来说这是一个正常的假设。
            即使这个要求没有被满足，算法也可以工作，但要付出性能降低的代价。
        <para>
        </para>
            In addition some algorithms have additional requirements on the string-type. Particularly, it is required
            that an algorithm can create a new string of the given type. In this case, it is required that
            the type satisfies the sequence (Std &sect;23.1.1) requirements.<sbr/>
            另外，有些算法对 string-type 有额外的要求。特别是，那些可以创建一个给定类型的新 string 的算法。
            在这种情况下，它要求这个类型满足序列 (Std §23.1.1) 要求。
        </para>
        <para>
            In the reference and also in the code, requirement on the string type is designated by the name of
            template argument. <code>RangeT</code> means that the basic range requirements must hold.
            <code>SequenceT</code> designates extended sequence requirements.<sbr/>
            在参考和代码中，对 string 类型的要求通过模板参数的名字表现出来。<code>RangeT</code> 
            意味着基本的 range 要求必须有效。<code>SequenceT</code> 表明扩展的序列要求。
        </para>
    </section>
    
    <section id="string_algo.sequence_traits">
        <title>Sequence Traits 序列特征</title>

        <para>
            The major difference between <code>std::list</code> and <code>std::vector</code> is not in the interfaces
            they provide, but rather in the inner details of the class and the way how it performs 
            various operations. The problem is that it is not possible to infer this difference from the 
            definitions of classes without some special mechanism.
            However, some algorithms can run significantly faster with the knowledge of the properties
            of a particular container.<sbr/>
            <code>std::list</code> 和 <code>std::vector</code> 的最大不同不在于它们提供的接口，
            而在于类的内部细节以及它执行各种操作的方法。问题是不依靠任何特殊机制而仅仅通过类的定义不可能推断出这些不同。
            但是，有些算法在了解了特定容器的性质后运行速度会有大幅度的提升。
        </para>
        <para>
            Sequence traits allow one to specify additional properties of a sequence container (see Std.&sect;32.2).
            These properties are then used by algorithms to select optimized handling for some operations.
            The sequence traits are declared in the header 
            <headername>boost/algorithm/string/sequence_traits.hpp</headername>.<sbr/>
            序列特征允许开发者指定一个序列容器的额外性质（参见 Std §23.2）。因此这些性质可以被算法用来为某些操作选择优化处理。
            这些序列特性声明在头文件 <headername>boost/algorithm/string/sequence_traits.hpp</headername> 中。
        </para>

        <para>
            In the table C denotes a container and c is an object of C.<sbr/>
            在下表中，C 表示一个容器，而 c 是 C 的一个对象。
        </para>
        <table>
            <title>Sequence Traits 序列特征</title>
            <tgroup cols="2" align="left">
                <thead>
                    <row>   
                        <entry>Trait 特征 </entry>
                        <entry>Description 说明</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><classname>has_native_replace&lt;C&gt;</classname>::value</entry>
                        <entry>Specifies that the sequence has std::string like replace method<sbr/>
                        表明这个序列具有类似 std::string 的替换方法。</entry>
                    </row>
                    <row>
                        <entry><classname>has_stable_iterators&lt;C&gt;</classname>::value</entry>
                        <entry>
                            Specifies that the sequence has stable iterators. It means,
                            that operations like <code>insert</code>/<code>erase</code>/<code>replace</code> 
                            do not invalidate iterators.<sbr/>
                            表明这个序列具有稳定的迭代器。这也就意味着，像 
                            <code>insert</code>/<code>erase</code>/<code>replace</code> 这样的操作不会导致迭代器失效。
                        </entry>
                    </row>
                    <row>
                        <entry><classname>has_const_time_insert&lt;C&gt;</classname>::value</entry>
                        <entry>
                            Specifies that the insert method of the sequence has 
                            constant time complexity.<sbr/>
                            表明序列的 insert 方法具有常量时间复杂度。
                        </entry>
                    </row>
                    <row>
                        <entry><classname>has_const_time_erase&lt;C&gt;</classname>::value</entry>
                        <entry>
                            Specifies that the erase method of the sequence has constant time complexity<sbr/>
                            表明序列的 erase 方法具有常量时间复杂度。
                        </entry>
                    </row>
                    </tbody>
            </tgroup>
        </table>
        
        <para>
            Current implementation contains specializations for std::list&lt;T&gt; and
            std::basic_string&lt;T&gt; from the standard library and SGI's std::rope&lt;T&gt; and std::slist&lt;T&gt;.<sbr/>
            当前实现中包含针对标准库中的 std::list&lt;T&gt; 和 std::basic_string&lt;T&gt; 
            以及 SGI 的 std::rope&lt;T&gt; 和 std::slist&lt;T&gt; 的特化。
        </para>
    </section>
    <section id="string_algo.find">
        <title>Find Algorithms 查找算法</title>

        <para>
            Find algorithms have similar functionality to <code>std::search()</code> algorithm. They provide a different 
            interface which is more suitable for common string operations. 
            Instead of returning just the start of matching subsequence they return a range which is necessary 
            when the length of the matching subsequence is not known beforehand. 
            This feature also allows a partitioning of  the input sequence into three 
            parts: a prefix, a substring and a suffix. <sbr/>
            查找算法具有与 <code>std::search()</code> 算法类似的功能。它们提供了一个不同的接口，更适合常用的 string 操作。
            它们不再仅仅返回匹配子序列的开始位置，而是返回一个 range，这在事先不知道匹配子序列的长度时是非常必要的。
            这个特性也允许将输入序列分割为三个部分：一个前缀，一个 substring 和一个后缀。
        </para>
        <para>
            Another difference is an addition of various searching methods besides find_first, including find_regex. <sbr/>
            另一个不同是在 find_first 之外又增加了很多搜索方法，包括 find_regex。
        </para>
        <para>
            It the library, find algorithms are implemented in terms of 
            <link linkend="string_algo.finder_concept">Finders</link>. Finders are used also by other facilities 
            (replace,split).
            For convenience, there are also function wrappers for these finders to simplify find operations.<sbr/>
            在本库中，查找算法是实现为 <link linkend="string_algo.finder_concept">Finders</link> 的。
            Finders 也被其它部件 (replace, split) 使用。为便于使用，还有函数将这些 Finders 包装成简单的查找操作。
        </para>
        <para>
            Currently the library contains only naive implementation of find algorithms with complexity 
            O(n * m) where n is the size of the input sequence and m is the size of the search sequence. 
            There are algorithms with complexity O(n), but for smaller sequence a constant overhead is 
            rather big. For small m &lt;&lt; n (m by magnitude smaller than n) the current implementation 
            provides acceptable efficiency. 
            Even the C++ standard defines the required complexity for search algorithm as O(n * m). 
            It is possible that a future version of library will also contain algorithms with linear 
            complexity as an option<sbr/>
            当前本库只包含了复杂度为 O(n * m) 的查找算法的初级实现，这里的 n 是输入序列的大小，而 m 是搜索序列的大小。
            要不是因为对于较小的序列来说，常量成本都是相当大的，算法本来可以带有 O(n) 复杂度。
            对于小的 m &lt;&lt; n（m 在数量级上比 n 小），当前实现提供了可以接受的性能。
            即使在 C++ 标准中为查找算法定义的必要复杂度都是 O(n * m)。在库的未来版本中，可能会包含可选的线性复杂度的算法。
        </para>
    </section>
    <section id="string_algo.replace">
        <title>Replace Algorithms 替换算法</title>

        <para>
            The implementation of replace algorithms follows the layered structure of the library. The 
            lower layer implements generic substitution of a range in the input sequence. 
            This layer takes a <link linkend="string_algo.finder_concept">Finder</link> object and a 
            <link linkend="string_algo.formatter_concept">Formatter</link> object as an input. These two 
            functors define what to replace and what to replace it with. The upper layer functions 
            are just wrapping calls to the lower layer. Finders are shared with the find and split facility. <sbr/>
            替换算法的实现遵循了本库的分层结构。较低的层次实现了通用的对输入序列中的一个 range 的置换。
            这个层次用一个 <link linkend="string_algo.finder_concept">Finder</link> 对象和一个 
            <link linkend="string_algo.formatter_concept">Formatter</link> 对象作为输入。
            这两个仿函数规定什么被替换以及用什么来替换。Finders 被查找和分割部件共享。
        </para>
        <para>
            As usual, the implementation of the lower layer is designed to work with a generic sequence while
            taking advantage of specific features if possible 
            (by using <link linkend="string_algo.sequence_traits">Sequence traits</link>)<sbr/>
            照常，较低层次的实现在尽可能利用特定特性（通过使用 <link linkend="string_algo.sequence_traits">序列特性</link>）
            的情况下，针对通用序列进行设计。
        </para>         
    </section>
    <section id="string_algo.split">
        <title>Find Iterators &amp; Split Algorithms 查找迭代器与分割算法</title>

        <para>
            Find iterators are a logical extension of the <link linkend="string_algo.find">find facility</link>.
            Instead of searching for one match, the whole input can be iteratively searched for multiple matches.
            The result of the search is then used to partition the input. It depends on the algorithms which parts 
            are returned as the result. They can be the matching parts (<classname>find_iterator</classname>) of the parts in
            between (<classname>split_iterator</classname>). <sbr/>
            查找迭代器是 <link linkend="string_algo.find">查找部件</link> 的合理扩展。它不是仅搜索一个匹配项，
            而是迭代地搜索整个输入，以找到多个匹配项。搜索的结果被用来将输入分割为若干部分。它们可以是匹配的部分 
            (<classname>find_iterator</classname>) 也可以是各匹配项之间部分 (<classname>split_iterator</classname>)。
            这取决于返回这些部分作为结果的那个算法。
        </para>
        <para>
            In addition the split algorithms like <functionname>find_all()</functionname> and <functionname>split()</functionname>
            can simplify the common operations. They use a find iterator to search the whole input and copy the 
            matches they found into the supplied container.<sbr/>
            另外，像 <functionname>find_all()</functionname> 和 <functionname>split()</functionname> 
            这样的分割算法可以简化常用的操作。它们使用一个查找迭代器去搜索整个输入并将找到的匹配项拷贝到已提供好的容器中。
        </para>
    </section>
    <section id="string_algo.exception">
        <title>Exception Safety 异常安全</title>

        <para>
            The library requires that all operations on types used as template
            or function arguments provide the <emphasis>basic exception-safety guarantee</emphasis>. 
            In turn, all functions and algorithms in this library, except where stated
            otherwise, will provide the <emphasis>basic exception-safety guarantee</emphasis>.
            In other words:
            The library maintains its invariants and does not leak resources in
            the face of exceptions.  Some library operations give stronger
            guarantees, which are documented on an individual basis.<sbr/>
            本库要求对用作模板或函数参数的所有项目提供 <emphasis>基本异常安全保证</emphasis>。
            反过来，本库中的所有函数和算法，除非另有说明，都将提供 <emphasis>基本异常安全保证</emphasis>。
            换句话说：本库在面对异常时，它将保持它的不变量且不泄漏资源。某些库操作给出更强的保证，
            这些都被记录到个别的文档中。
        </para>
        
        <para>
            Some functions can provide the <emphasis>strong exception-safety guarantee</emphasis>.
            That means that following statements are true:    <sbr/>
            某些函数可以提供 <emphasis>强异常安全保证</emphasis>。这意味着以下描述成立：
            <itemizedlist>
                <listitem>
                    If an exception is thrown, there are no effects other than those
                    of the function <sbr/>
                    如果抛出一个异常，不会对函数以外产生影响
                </listitem>
                <listitem>
                    If an exception is thrown other than by the function, there are no effects<sbr/>
                    如果一个异常不是由这个函数抛出的，则没有影响
                </listitem>
            </itemizedlist>
            This guarantee can be provided under the condition that the operations 
            on the types used for arguments for these functions either
            provide the strong exception guarantee or do not alter the global state .<sbr/>
            这种保证在这种条件下才会提供：这个操作所针对的类型用作既提供强异常保证又不改变全局状态的函数的参数。
         </para>
        <para>
            In the reference, under the term <emphasis>strong exception-safety guarantee</emphasis>, we mean the
            guarantee as defined above.   <sbr/>
            在参考中，术语 <emphasis>强异常安全保证</emphasis>，就意味着上面的定义。
        </para>
        <para>
            For more information about the exception safety topics, follow this 
            <ulink url="http://www.boost.org/more/generic_exception_safety.html">link</ulink><sbr/>
            关于异常安全话题的更多信息，请参考这个 
            <ulink url="http://www.boost.org/more/generic_exception_safety.html">连接</ulink>
        </para>        
    </section>
</section>
