<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
"http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">

<!-- Copyright (c) 2002-2006 Pavol Droba.
     Subject to the Boost Software License, Version 1.0. 
     (See accompanying file LICENSE_1_0.txt or  http://www.boost.org/LICENSE_1_0.txt)
-->

<section id="string_algo.rationale" last-revision="$Date: 2008-02-27 15:00:24 -0500 (Wed, 27 Feb 2008) $">
    <title>Rationale 一些解释</title>

    <using-namespace name="boost"/>
    <using-namespace name="boost::algorithm"/>
    
   <section it="string_algo.locale">
        <title>Locales 地区设置</title>

        <para>
            Locales have a very close relation to string processing. They contain information about
            the character sets and are used, for example, to change the case of characters and 
            to classify the characters. <sbr/>
            地区设置和 string 处理有非常密切的关系。它们包括关于字符集的信息，
            还包括，比如说，字符的大小写转换和字符的分类等信息。
        </para>
        <para>
            C++ allows to work with multiple different instances of locales at once. If an algorithm
            manipulates some data in a way that requires the usage of locales, there must be a way
            to specify them. However, one instance of locales is sufficient for most of the applications,
            and for a user it could be very tedious to specify which locales to use at every place 
            where it is needed. <sbr/>
            C++ 允许同时工作在多个不同的地区设置实例上。如果一个算法需要按照地区习惯的方法来处理某些数据，
            就必须有一种指定它们的方法。然而，对与大多数应用程序来说一个地区设置实例已经足够了，
            在每一需要的地方指定使用哪一个地区，对于用户来说，这是非常单调乏味的。
        </para> 
        <para>
            Fortunately, the C++ standard allows to specify the <emphasis>global</emphasis> locales (using static member
            function <code>std:locale::global()</code>). When instantiating an
            <code>std::locale</code> class without explicit information, the instance will 
            be initialized with the <emphasis>global</emphasis> locale. This implies, that if an algorithm needs a locale,
            it should have an <code>std::locale</code> parameter defaulting to  <code>std::locale()</code>.
            If a user needs to specify locales explicitly, she can do so. Otherwise the <emphasis>global</emphasis>
            locales are used.<sbr/>
            幸运的时，C++ 标准允许指定 <emphasis>全局</emphasis> 地区设置（使用静态成员函数 <code>std:locale::global()</code>）。
            在不使用显式信息实例化一个 <code>std::locale</code> 类时，就使用 <emphasis>全局</emphasis> 地区设置初始化这个实例。
            这就意味着，如果一个算法需要地区设置，它就应该有一个缺省为 <code>std::locale()</code> 的参数。
            如果一个用户需要显式指定地区设置时，她就可以这样做。否则，就使用 <emphasis>全局</emphasis> 地区设置。
        </para>
    </section>
    <section id="string_algo.regex">
        <title>Regular Expressions 正则表达式</title>

        <para>
            Regular expressions are an essential part of text processing. For this reason, the library 
            also provides regex variants of some algorithms. The library does not attempt to replace
            <libraryname>Boost.Regex</libraryname>; it merely wraps its functionality in a new interface.
            As a part of this library, regex algorithms integrate smoothly with other components, which 
            brings additional value.<sbr/>
            正则表达式时文本处理的精髓部分。因此，本库也提供了某些算法的 regex 变体。本库并不打算取代 
            <libraryname>Boost.Regex</libraryname>，它只不过将前者的功能外面包装在一个新的接口中。
            作为本库的一部分，regex 算法和其它组件无缝地结合在一起，产生了额外的价值。
        </para>
    </section>
</section>
