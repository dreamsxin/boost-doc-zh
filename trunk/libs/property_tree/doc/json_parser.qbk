[/
 / Copyright (c) 2008 Marcin Kalicinski (kalita <at> poczta dot onet dot pl)
 / Copyright (c) 2009 Sebastian Redl (sebastian dot redl <at> getdesigned dot at)
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]
[section JSON Parser  JSON分析器]
[def __json__ [@http://en.wikipedia.org/wiki/JSON JSON format]]
The __json__ is a data interchange format derived from the object literal
notation of JavaScript. (JSON stands for JavaScript Object Notation.)
JSON is a simple, compact format for loosely structured node trees of any depth,
very similar to the property tree dataset. It is less stuctured than XML and has
no schema support, but has the advantage of being simpler, smaller and typed
without the need for a complex schema.

__json__ 是派生自 JavaScript 的对象文字记法的一种数据交换格式(JSON 意为 JavaScript Object Notation)。
JSON 是针对松散结构的、任意深度的节点树的一种简单、紧凑的格式，非常类似于属性树数据集。
与XML相比，它具有更少的结构性，且不支持schema，但却具有更简单、更小、带类型、
不需要复杂schema的优点。

The property tree dataset is not typed, and does not support arrays as such.
Thus, the following JSON / property tree mapping is used:

属性树数据集是无类型的，且不支持数组。因此，要用到以下JSON/属性树映射：

* JSON objects are mapped to nodes. Each property is a child node.[br]
  JSON 对象映射至节点。每个属性是一个子节点。
* JSON arrays are mapped to nodes. Each element is a child node with an empty
  name. If a node has both named and unnamed child nodes, it cannot be mapped
  to a JSON representation.[br]
  JSON 数组映射至节点。每个元素是一个无名的子节点。如果一个节点既有命名的子节点，
  也有无名的子节点，则它不能被映射至JSON表示法。
* JSON values are mapped to nodes containing the value. However, all type
  information is lost; numbers, as well as the literals "null", "true" and
  "false" are simply mapped to their string form.[br]
  JSON 值被映射至含有值的节点。但是，所有类型信息会丢失；数字以及字面值 "null", 
  "true" 和 "false" 被映射至它们的字符串形式。
* Property tree nodes containing both child nodes and data cannot be mapped.[br]
  属性树节点同时包含子节点和不能被映射的数据。

JSON round-trips, except for the type information loss.

JSON 是可循环的，除了类型信息会丢失。

For example this JSON:

例如，以下JSON：

 {
    "menu": 
    {
       "foo": true,
       "bar": "true",
       "value": 102.3E+06,
       "popup": 
       [
          {"value": "New", "onclick": "CreateNewDoc()"},
          {"value": "Open", "onclick": "OpenDoc()"},
       ]
    }
 }

will be translated into the following property tree:

将被翻译为如下属性树：

 menu
 {
    foo true
    bar true
    value 102.3E+06
    popup
    {
       ""
       {
          value New
          onclick CreateNewDoc()
       }
       ""
       {
          value Open
          onclick OpenDoc()
       }
    }
 }

[endsect] [/json_parser]
