[/
 / Copyright (c) 2008 Marcin Kalicinski (kalita <at> poczta dot onet dot pl)
 / Copyright (c) 2009 Sebastian Redl (sebastian dot redl <at> getdesigned dot at)
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]
[template ptree2codeImage[] [$images/ptree2code.png]]
[section:intro What is Property Tree? 属性树是什么？]
The Property Tree library provides a data structure that stores an arbitrarily
deeply nested tree of values, indexed at each level by some key. Each node of
the tree stores its own value, plus an ordered list of its subnodes and their
keys. The tree allows easy access to any of its nodes by means of a path, which
is a concatenation of multiple keys.

Property Tree库提供了一种数据结构，用于保存任意嵌套层数的由值组成的树，每一层以
某个键值来索引。树的每个节点保存了它本身的值，以及一个由该节点的子节点及其键值
组成的有序列表。这种树可以通过类似于路径的方式很方便地访问任一节点，这个路径由
多个键值串接而成。

In addition, the library provides parsers and generators for a number of data
formats that can be represented by such a tree, including XML, INI, and JSON.

此外，这个库还提供了一些分析器和生成器，对应于多种可用于表示一棵树的数据格式，
如 XML, INI 和 JSON。

Property trees are versatile data structures, but are particularly suited for
holding configuration data. The tree provides its own, tree-specific interface,
and each node is also an STL-compatible Sequence for its child nodes.

属性树是多功能的数据结构，尤其适合用于保存配置数据。该树提供了它自己本身、树专用
的接口，而且每个节点都是其子节点的一个STL兼容序列。

Conceptually, then, a node can be thought of as the following structure:

在概念上，一个节点可以想象为以下结构：

   struct ptree
   {
      data_type data;                         // data associated with the node 与节点相关联的数据
      list< pair<key_type, ptree> > children; // ordered list of named children 命名子节点的有序列表
   };

Both key_type and data_type are configurable, but will usually be std::string.

key_type 和 data_type 都是可配置的，但通常都是 std::string。

Many software projects develop a similar tool at some point of their lifetime,
and property tree originated the same way.  We hope the library can save many
from reinventing the wheel.

许多软件项目都在它们生命周期中的某个时候开发过类似的工具，属性树正源自于此。
我们希望这个库可以节省重复发明轮子的时间。
[endsect] [/intro]
