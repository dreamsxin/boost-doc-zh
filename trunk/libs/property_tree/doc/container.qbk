[/
 / Copyright (c) 2008 Marcin Kalicinski (kalita <at> poczta dot onet dot pl)
 / Copyright (c) 2009 Sebastian Redl (sebastian dot redl <at> getdesigned dot at)
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]
[section:container Property Tree as a Container 作为容器的属性树]
[/ __ptree_*__ macros expected from property_tree.qbk]
Every property tree node models the ReversibleSequence concept, providing
access to its immediate children. This means that iterating over a __ptree__
(which is the same as its root node - every __ptree__ node is also the
subtree it starts) iterates only a single level of the hierarchy. There is no
way to iterate over the entire tree.

每一个属性树节点都符合可逆序列概念，提供对其直接子节点的访问。这意味着遍历一个
__ptree__ (与根节点一样 - 每个 __ptree__ 节点同时也是从它开始的子树)只是遍历单个层级。
没有方法直接遍历整棵树。

It is very important to remember that the property sequence is *not* ordered by
the key. It preserves the order of insertion. It closely resembles a std::list.
Fast access to children by name is provided via a separate lookup structure. Do not
attempt to use algorithms that expect an ordered sequence (like binary_search)
on a node's children.

有一点很重要必须要记住，属性序列*并不是*按其键值排序的。它保留了插入的顺序。
它更接近于 std::list。按名字对子节点的快速访问，是通过一个独立的查找结构来提供的。
不要试图对一个节点的子节点使用那些要求有序序列的算法(如 binary_search)。

There may be multiple children with the same key value in a node. However, these
children are not necessarily sequential. The iterator returned by __ptree_find__
may refer to any of these, and there are no guarantees about the relative
position of the other equally named children.

一个节点中可能会有多个子节点带有相同的键值。但是这些子节点间是没有先后顺序的。
__ptree_find__ 所返回的迭代器可能指向它们中的任意一个，而且对于其它相同名字的
子节点的相对位置，也是没有保证的。
[endsect] [/container]
