<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
  "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<section id="variant.tutorial.basic">
  <title>Basic Usage 基本用法</title>

<using-namespace name="boost"/>
<using-class name="boost::variant"/>

<para>A discriminated union container on some set of types is defined by
  instantiating the <code><classname>boost::variant</classname></code> class
  template with the desired types. These types are called
  <emphasis role="bold">bounded types</emphasis> and are subject to the
  requirements of the
  <link linkend="variant.concepts.bounded-type"><emphasis>BoundedType</emphasis></link>
  concept. Any number of bounded types may be specified, up to some
  implementation-defined limit (see 
  <code><macroname>BOOST_VARIANT_LIMIT_TYPES</macroname></code>).<sbr/>
  定义一个由多个类型组成的可识别联合容器时，要以所需要的类型来实例化 <code><classname>boost::variant</classname></code> 类模板。
  这些类型被称为 <emphasis role="bold">有界类型</emphasis>，它们要遵循 <link linkend="variant.concepts.bounded-type"><emphasis>
  BoundedType</emphasis></link> 概念的要求。可以指定任意数量的有界类型，数量的限制是实现定义的(请见 
  <code><macroname>BOOST_VARIANT_LIMIT_TYPES</macroname></code>)。</para>

<para>For example, the following declares a discriminated union container on
  <code>int</code> and <code>std::string</code>:<sbr/>
  例如，以下声明了一个由 <code>int</code> 和 <code>std::string</code> 组成的可识别联合容器：

<programlisting><classname>boost::variant</classname>&lt; int, std::string &gt; v;</programlisting>

</para>

<para>By default, a <code>variant</code> default-constructs its first
  bounded type, so <code>v</code> initially contains <code>int(0)</code>. If
  this is not desired, or if the first bounded type is not
  default-constructible, a <code>variant</code> can be constructed
  directly from any value convertible to one of its bounded types. Similarly,
  a <code>variant</code> can be assigned any value convertible to one of its
  bounded types, as demonstrated in the following:<sbr/>
  缺省地，一个 <code>variant</code> 会缺省构造其第一个有界类型，所以 <code>v</code> 开始会包含 <code>int(0)</code>. 
  如果这不是你想要的，或者如果第一个有界类型不是可缺省构造的，<code>variant</code> 
  也可以直接从某个可以转换为其任意一个有界类型的值来构造。
  同样，一个 <code>variant</code> 可以被赋值为任意一个可转换为某个有界类型的值，举例如下：

<programlisting>v = "hello";</programlisting>

</para>

<para>Now <code>v</code> contains a <code>std::string</code> equal to
  <code>"hello"</code>. We can demonstrate this by
  <emphasis role="bold">streaming</emphasis>&nbsp;<code>v</code> to standard
  output:<sbr/>
  现在 <code>v</code> 包含一个等于 <code>"hello"</code> 的 <code>std::string</code>. 我们可以示范将 <code>v</code> 输出到标准输出：

<programlisting>std::cout &lt;&lt; v &lt;&lt; std::endl;</programlisting>

</para>

<para>Usually though, we would like to do more with the content of a
  <code>variant</code> than streaming. Thus, we need some way to access the
  contained value. There are two ways to accomplish this:
  <code><functionname>apply_visitor</functionname></code>, which is safest
  and very powerful, and
  <code><functionname>get</functionname>&lt;T&gt;</code>, which is
  sometimes more convenient to use.<sbr/>
  通常，我们对 <code>variant</code> 的内容要做的不只是流的输入输出。
  因此，我们需要一些访问所含值的方法。有两种方法来实现这一点：
  <code><functionname>apply_visitor</functionname></code>, 这是最安全和最强大的；
  还有 <code><functionname>get</functionname>&lt;T&gt;</code>, 有时这更方便使用。</para>

<para>For instance, suppose we wanted to concatenate to the string contained
  in <code>v</code>. With <emphasis role="bold">value retrieval</emphasis>
  by <code><functionname>get</functionname></code>, this may be accomplished
  quite simply, as seen in the following:<sbr/>
  例如，假设我们想在 <code>v</code> 中的字符串后进行连接。通过 <code><functionname>get</functionname></code> 
  的 <emphasis role="bold">值取出</emphasis>，可以很简单地完成如下：

<programlisting>std::string&amp; str = <functionname>boost::get</functionname>&lt;std::string&gt;(v);
str += " world! ";</programlisting>

</para>

<para>As desired, the <code>std::string</code> contained by <code>v</code> now
  is equal to <code>"hello world! "</code>. Again, we can demonstrate this by
  streaming <code>v</code> to standard output:<sbr/>
  如你所想，<code>v</code> 中所包含的 <code>std::string</code> 现在为 <code>"hello world! "</code>. 
  我们可以再次将 <code>v</code> 输出到标准输出：

<programlisting>std::cout &lt;&lt; v &lt;&lt; std::endl;</programlisting>

</para>

<para>While use of <code>get</code> is perfectly acceptable in this trivial
  example, <code>get</code> generally suffers from several significant
  shortcomings. For instance, if we were to write a function accepting a
  <code>variant&lt;int, std::string&gt;</code>, we would not know whether
  the passed <code>variant</code> contained an <code>int</code> or a
  <code>std::string</code>. If we insisted upon continued use of
  <code>get</code>, we would need to query the <code>variant</code> for its
  contained type. The following function, which &quot;doubles&quot; the
  content of the given <code>variant</code>, demonstrates this approach:<sbr/>
  虽然在这种简单的例子中，使用 <code>get</code> 完全可以接受，但是通常来说 <code>get</code> 有几个明显的缺点。
  例如，如果我们要写一个以 <code>variant&lt;int, std::string&gt;</code> 为参数的函数，我们就不知道传入的 <code>variant</code> 
  究竟是包含了一个 <code>int</code> 抑或是一个 <code>std::string</code>. 
  如果我们还是继续使用 <code>get</code> 的话，我们就需要向 <code>variant</code> 询问它所含的类型。
  以下函数用于将给定的 <code>variant</code> 的内容进行"翻倍"，就示范了这种方法：

<programlisting>void times_two( boost::variant&lt; int, std::string &gt; &amp; operand )
{
    if ( int* pi = <functionname>boost::get</functionname>&lt;int&gt;( &amp;operand ) )
        *pi *= 2;
    else if ( std::string* pstr = <functionname>boost::get</functionname>&lt;std::string&gt;( &amp;operand ) )
        *pstr += *pstr;
}</programlisting>

</para>

<para>However, such code is quite brittle, and without careful attention will
  likely lead to the introduction of subtle logical errors detectable only at
  runtime. For instance, consider if we wished to extend
  <code>times_two</code> to operate on a <code>variant</code> with additional
  bounded types. Specifically, let's add
  <code>std::complex&lt;double&gt;</code> to the set. Clearly, we would need
  to at least change the function declaration:<sbr/>
  但是，这样的代码是非常脆弱的，如果不小心注意，很容易就会导致微妙的逻辑错误，且只能在运行期检测到。
  例如，如果我们想将 <code>times_two</code> 扩展为用于一个增加了其它有界类型的 <code>variant</code>. 
  具体地，我们将 <code>std::complex&lt;double&gt;</code> 增加到这个类型集中。显然，我们至少需要修改函数的声明：

<programlisting>void times_two( boost::variant&lt; int, std::string, std::complex&lt;double&gt; &gt; &amp; operand )
{
    // as above...?
}</programlisting>

</para>

<para>Of course, additional changes are required, for currently if the passed
  <code>variant</code> in fact contained a <code>std::complex</code> value,
  <code>times_two</code> would silently return -- without any of the desired
  side-effects and without any error. In this case, the fix is obvious. But in
  more complicated programs, it could take considerable time to identify and
  locate the error in the first place.<sbr/>
  当然，还需要更多的修改，现在如果传入的 <code>variant</code> 实际上含有一个 <code>std::complex</code> 值，
  <code>times_two</code> 就将静静地返回 -- 没做任何动作也没有任何错误。这种情况下，要做的修正是显而易见的。
  不过，在更复杂的程序中，就可能需要很长时间来识别和定位这个错误。</para>

<para>Thus, real-world use of <code>variant</code> typically demands an access
  mechanism more robust than <code>get</code>. For this reason,
  <code>variant</code> supports compile-time checked
  <emphasis role="bold">visitation</emphasis> via
  <code><functionname>apply_visitor</functionname></code>. Visitation requires
  that the programmer explicitly handle (or ignore) each bounded type. Failure
  to do so results in a compile-time error.<sbr/>
  因此，在真实世界中 <code>variant</code> 的使用需要一个比 <code>get</code> 更健壮的访问机制。
  由于这个原因，<code>variant</code> 通过 <code><functionname>apply_visitor</functionname></code> 
  提供带编译期检验的 <emphasis role="bold">访问方式</emphasis>。
  这种访问方式要求程序员显式处理(或忽略)每一个有界类型。不这样做将导致编译期错误。</para>

<para>Visitation of a <code>variant</code> requires a visitor object. The
  following demonstrates one such implementation of a visitor implementating
  behavior identical to <code>times_two</code>:<sbr/>
  访问一个 <code>variant</code> 需要一个访问者对象。下面示范了如何以访问者的方式来实现与 <code>times_two</code> 一样的功能：

<programlisting>class times_two_visitor
    : public <classname>boost::static_visitor</classname>&lt;&gt;
{
public:

    void operator()(int &amp; i) const
    {
        i *= 2;
    }

    void operator()(std::string &amp; str) const
    {
        str += str;
    }

};</programlisting>

</para>

<para>With the implementation of the above visitor, we can then apply it to
  <code>v</code>, as seen in the following:<sbr/>
  有了以上这样的访问者，我们就可以将它应用于 <code>v</code>, 如下所示：

<programlisting><functionname>boost::apply_visitor</functionname>( times_two_visitor(), v );</programlisting>

</para>

<para>As expected, the content of <code>v</code> is now a
  <code>std::string</code> equal to <code>"hello world! hello world! "</code>.
  (We'll skip the verification this time.)<sbr/>
  正象我们所期待的那样，现在 <code>v</code> 的内容将是一个等于 <code>"hello world! hello world! "</code> 的 
  <code>std::string</code>. (这次我们跳过了结果验证)。</para>

<para>In addition to enhanced robustness, visitation provides another
  important advantage over <code>get</code>: the ability to write generic
  visitors. For instance, the following visitor will &quot;double&quot; the
  content of <emphasis>any</emphasis>&nbsp;<code>variant</code> (provided its
  bounded types each support operator+=):<sbr/>
  除了健壮性的加强，访问方式还提供了另一个比 <code>get</code> 好的重要优势：可以编写泛型的访问者。
  例如，以下访问者将对<emphasis>任意</emphasis>&nbsp;<code>variant</code> 
  (只要它的每一个有界类型都支持 operator+=)的内容进行&quot;加倍&quot;： 

<programlisting>class times_two_generic
    : public <classname>boost::static_visitor</classname>&lt;&gt;
{
public:

    template &lt;typename T&gt;
    void operator()( T &amp; operand ) const
    {
        operand += operand;
    }

};</programlisting>

</para>

<para>Again, <code>apply_visitor</code> sets the wheels in motion:<sbr/>
同样，<code>apply_visitor</code> 让轮子转动起来：

<programlisting><functionname>boost::apply_visitor</functionname>( times_two_generic(), v );</programlisting>

</para>

<para>While the initial setup costs of visitation may exceed that required for
  <code>get</code>, the benefits quickly become significant. Before concluding
  this section, we should explore one last benefit of visitation with
  <code>apply_visitor</code>:
  <emphasis role="bold">delayed visitation</emphasis>. Namely, a special form
  of <code>apply_visitor</code> is available that does not immediately apply
  the given visitor to any <code>variant</code> but rather returns a function
  object that operates on any <code>variant</code> given to it. This behavior
  is particularly useful when operating on sequences of <code>variant</code>
  type, as the following demonstrates:<sbr/>
  虽然访问方式的初始化设置花费了比 <code>get</code> 更多的开销，但是它的好处也非常明显。
  在结束本节之前，我们再看一下 <code>apply_visitor</code> 的最后一个优点：<emphasis role="bold">延迟访问</emphasis>。
  即有一个特殊形式的 <code>apply_visitor</code>，它不是立即将给定的访问者应用于 <code>variant</code>，
  而是返回一个函数对象，该函数对象可以操作于任意给定的 <code>variant</code>. 
  这种行为在需要对一个 <code>variant</code> 类型的序列进行操作时非常有用，举例如下：

<programlisting>std::vector&lt; <classname>boost::variant</classname>&lt;int, std::string&gt; &gt; vec;
vec.push_back( 21 );
vec.push_back( "hello " );

times_two_generic visitor;
std::for_each(
      vec.begin(), vec.end()
   , <functionname>boost::apply_visitor</functionname>(visitor)
   );</programlisting>

</para>

</section>
