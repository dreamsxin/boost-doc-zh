<?xml version="1.0" encoding="utf-8" ?> 
<header name="boost/variant/variant_fwd.hpp">
  <using-namespace name="boost"/>

  <para>Provides forward declarations of the
    <code><classname>boost::variant</classname></code>,
    <code><classname>boost::make_variant_over</classname></code>,
    <code><classname>boost::make_recursive_variant</classname></code>, and
    <code><classname>boost::make_recursive_variant_over</classname></code>
    class templates and the <code>boost::recursive_variant_</code> tag type.
    Also defines several preprocessor symbols, as described below.<sbr/>
    提供 <code><classname>boost::variant</classname></code>,
    <code><classname>boost::make_variant_over</classname></code>,
    <code><classname>boost::make_recursive_variant</classname></code>, 和 
    <code><classname>boost::make_recursive_variant_over</classname></code> 类模板的前向声明以及 
    <code>boost::recursive_variant_</code> 类型。还定义了以下几个预处理器符号：</para>

  <macro name="BOOST_VARIANT_LIMIT_TYPES">
    <purpose>
      <simpara>Expands to the length of the
        template parameter list for
        <code><classname>variant</classname></code>.<sbr/>
        展开为 <code><classname>variant</classname></code> 的模板参数列表的长度。</simpara>
    </purpose>

    <description>
      <para><emphasis role="bold">Note</emphasis>: Conforming
        implementations of <code>variant</code> must allow at least ten
        template arguments. That is, BOOST_VARIANT_LIMIT_TYPES must be greater
        or equal to <code>10</code>.<sbr/>
        <emphasis role="bold">注</emphasis>：符合规范的 <code>variant</code> 实现必须至少支持十个模板参数。
        即 BOOST_VARIANT_LIMIT_TYPES 必须大于等于 <code>10</code>.</para>
    </description>
  </macro>

  <macro name="BOOST_VARIANT_ENUM_PARAMS" kind="functionlike">
    <macro-parameter name="param"/>

    <purpose>
      <simpara>Enumerate parameters for use with
        <code><classname>variant</classname></code>.<sbr/>
        用于列举 <code><classname>variant</classname></code> 的参数。</simpara>
    </purpose>

    <description>
      <para>Expands to a comma-separated sequence of length
        <code><macroname>BOOST_VARIANT_LIMIT_TYPES</macroname></code>, where
        each element in the sequence consists of the concatenation of
        <emphasis>param</emphasis> with its zero-based index into the
        sequence. That is,
        <code>param ## 0, param ## 1, ..., param ## BOOST_VARIANT_LIMIT_TYPES - 1</code>.<sbr/>
        展开为长度等于 <code><macroname>BOOST_VARIANT_LIMIT_TYPES</macroname></code> 的以逗号分隔的序列，
        序列中的每一个元素为 <emphasis>param</emphasis> 后跟一个索引，索引值从零起计。
        即 <code>param ## 0, param ## 1, ..., param ## BOOST_VARIANT_LIMIT_TYPES - 1</code>.</para>

      <para><emphasis role="bold">Rationale</emphasis>: This macro greatly
        simplifies for the user the process of declaring
        <code><classname>variant</classname></code> types
        in function templates or explicit partial specializations of class
        templates, as shown in the
        <link linkend="variant.tutorial.preprocessor">tutorial</link>.<sbr/>
        <emphasis role="bold">原理</emphasis>：该宏大大简化了用户在函数模板或类模板的显式偏特化中声明 
        <code><classname>variant</classname></code> 类型的过程，就象在 
        <link linkend="variant.tutorial.preprocessor">指南</link> 中所示范的那样。</para>
    </description>
  </macro>

  <macro name="BOOST_VARIANT_ENUM_SHIFTED_PARAMS" kind="functionlike">
    <macro-parameter name="param"/>

    <purpose>
      <simpara>Enumerate all but the first parameter for use with
        <code><classname>variant</classname></code>.<sbr/>
        用于列举 <code><classname>variant</classname></code> 除第一个参数以外的其它参数。</simpara>
    </purpose>

    <description>
      <para>Expands to a comma-separated sequence of length
        <code><macroname>BOOST_VARIANT_LIMIT_TYPES</macroname> - 1</code>,
        where each element in the sequence consists of the concatenation of
        <emphasis>param</emphasis> with its one-based index into the sequence.
        That is,
        <code>param ## 1, ..., param ## BOOST_VARIANT_LIMIT_TYPES - 1</code>.<sbr/>
        展开为长度等于 <code><macroname>BOOST_VARIANT_LIMIT_TYPES</macroname> - 1</code> 的以逗号分隔的序列，
        序列中的每个元素为 <emphasis>param</emphasis> 后跟一个索引，索引值从一起计。
        即 <code>param ## 1, ..., param ## BOOST_VARIANT_LIMIT_TYPES - 1</code>.

</para>

      <para><emphasis role="bold">Note</emphasis>: This macro results in the
        same expansion as
        <code><macroname>BOOST_VARIANT_ENUM_PARAMS</macroname></code> -- but
        without the first term.<sbr/>
        <emphasis role="bold">注</emphasis>：该宏的展开结果与 <code><macroname>BOOST_VARIANT_ENUM_PARAMS</macroname></code> 
        相同 -- 除了第一项。</para>
    </description>
  </macro>

  <macro name="BOOST_VARIANT_NO_REFERENCE_SUPPORT">
    <purpose>
      <simpara>Indicates <code><classname>variant</classname></code> does not
        support references as bounded types.<sbr/>
        表示 <code><classname>variant</classname></code> 不支持以引用作为有界类型。</simpara>
    </purpose>

    <description>
      <para>Defined only if <code><classname>variant</classname></code> does
        not support references as bounded types.<sbr/>
        仅在 <code><classname>variant</classname></code> 不支持以引用作为有界类型时定义。</para>
    </description>
  </macro>

  <macro name="BOOST_VARIANT_NO_TYPE_SEQUENCE_SUPPORT">
    <purpose>
      <simpara>Indicates absence of support for specifying the bounded types
        of a <code><classname>variant</classname></code> by the elements of a
        type sequence.<sbr/>
        表示不能支持以类型序列的元素来指定 <code><classname>variant</classname></code> 的有界类型。</simpara>
    </purpose>

    <description>
      <para>Defined only if
        <code><classname>make_variant_over</classname></code> and
        <code><classname>make_recursive_variant_over</classname></code>
        are not supported for some reason on the target compiler.<sbr/>
        仅当 <code><classname>make_variant_over</classname></code> 和
        <code><classname>make_recursive_variant_over</classname></code> 因为某种原因在目标编译器上不被支持时被定义。</para>
    </description>
  </macro>

  <macro name="BOOST_VARIANT_NO_FULL_RECURSIVE_VARIANT_SUPPORT">
    <purpose>
      <simpara>Indicates
        <code><classname>make_recursive_variant</classname></code> operates in
        an implementation-defined manner.<sbr/>
        表示 <code><classname>make_recursive_variant</classname></code> 以实现定义的方式来操作。</simpara>
    </purpose>

    <description>
      <para>Defined only if
        <code><classname>make_recursive_variant</classname></code> does not
        operate as documented on the target compiler, but rather in an
        implementation-defined manner.<sbr/>
        仅当 <code><classname>make_recursive_variant</classname></code> 不能在目标编译器上使用时定义，
        但可以以实现定义的方式来操作。</para>

      <para><emphasis role="bold">Implementation Note</emphasis>: If
        <code>BOOST_VARIANT_NO_FULL_RECURSIVE_VARIANT_SUPPORT</code> is
        defined for the target compiler, the current implementation uses the
        <libraryname>MPL</libraryname> lambda mechanism to approximate the
        desired behavior. (In most cases, however, such compilers do not have
        full lambda support either.)<sbr/>
        <emphasis role="bold">实现说明</emphasis>：如果 <code>BOOST_VARIANT_NO_FULL_RECURSIVE_VARIANT_SUPPORT</code> 
        在目标编译器上被定义，则当前实现使用 <libraryname>MPL</libraryname> lambda 机制来得到所需的行为。
        (但是在多数情况下，这些编译器也不能完全支持 lambda)</para>
    </description>
  </macro>
</header>