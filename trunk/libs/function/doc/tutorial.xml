<?xml version="1.0" encoding="utf-8"?>
<!--
   Copyright (c) 2002 Douglas Gregor <doug.gregor -at- gmail.com>
  
   Distributed under the Boost Software License, Version 1.0.
   (See accompanying file LICENSE_1_0.txt or copy at
   http://www.boost.org/LICENSE_1_0.txt)
  -->
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
  "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<section xmlns:xi="http://www.w3.org/2001/XInclude" id="function.tutorial"
         last-revision="$Date: 2009-07-12 12:13:35 -0400 (Sun, 12 Jul 2009) $">
<title>Tutorial</title>

<using-namespace name="boost"/>

<para> Boost.Function has two syntactical forms: the preferred form
and the portable form. The preferred form fits more closely with the
C++ language and reduces the number of separate template parameters
that need to be considered, often improving readability; however, the
preferred form is not supported on all platforms due to compiler
bugs. The compatible form will work on all compilers supported by
Boost.Function. Consult the table below to determine which syntactic
form to use for your compiler.<sbr/>
Boost.Function 有两种语法形式：首选形式和兼容形式。首选形式更接近于 C++ 
语言，并减少了需要被考虑的独立的模板参数的个数，通常会改进可读性，
但是，由于编译器的 bug 首选形式并不被所有的平台支持。兼容性是可以工作在所有被 
Boost.Function 支持的编译器上。参考下面的表格以确定在你的编译器上使用哪种语法形式。

  <informaltable>
    <tgroup cols="2" align="left">
      <thead>
        <row>
          <entry>Preferred syntax 首选语法</entry>
          <entry>Portable syntax 兼容语法</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            <itemizedlist spacing="compact">
              <listitem><simpara>GNU C++ 2.95.x, 3.0.x and later versions</simpara></listitem>
              <listitem><simpara>Comeau C++ 4.2.45.2</simpara></listitem>
              <listitem><simpara>SGI MIPSpro 7.3.0</simpara></listitem>
              <listitem><simpara>Intel C++ 5.0, 6.0</simpara></listitem>
              <listitem><simpara>Compaq's cxx 6.2</simpara></listitem>
	      <listitem><simpara>Microsoft Visual C++ 7.1 and later versions</simpara></listitem>
            </itemizedlist>
          </entry>
          <entry>
            <itemizedlist spacing="compact">
              <listitem><simpara><emphasis>Any compiler supporting the preferred syntax<sbr/>
                支持首选语法的任何编译器</emphasis></simpara></listitem>
              <listitem><simpara>Microsoft Visual C++ 6.0, 7.0</simpara></listitem>
              <listitem><simpara>Borland C++ 5.5.1</simpara></listitem>
              <listitem><simpara>Sun WorkShop 6 update 2 C++ 5.3</simpara></listitem>
              <listitem><simpara>Metrowerks CodeWarrior 8.1</simpara></listitem>
            </itemizedlist>
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

</para>

<para> If your compiler does not appear in this list, please try the preferred syntax and report your results to the Boost list so that we can keep this table up-to-date.<sbr/>
如果你的编译器没有出现在这个列表中，请试用首选语法并向 Boost 邮件列表报告你的结果，
以便我们可以保持这个表格的最新状态。</para>

<using-class name="boost::function"/>

<section>
<title>Basic Usage 基本用法</title> <para> A function wrapper is defined simply
by instantiating the <computeroutput>function</computeroutput> class
template with the desired return type and argument types, formulated
as a C++ function type. Any number of arguments may be supplied, up to
some implementation-defined limit (10 is the default maximum). The
following declares a function object wrapper
<computeroutput>f</computeroutput> that takes two
<computeroutput>int</computeroutput> parameters and returns a
<computeroutput>float</computeroutput>:<sbr/>
一个函数包装类可以简单地通过用想要的返回类型和参数类型来实例化 
<computeroutput>function</computeroutput> 类模板来定义，简称为 C++ 函数类型。
任何个数的参数都可以提供，直到某个实现定义的上限（10 是缺省的最大值）。
下面就是声明一个 function object wrapper（函数对象包装类）<computeroutput>f</computeroutput>，
它持有两个 <computeroutput>int</computeroutput> 参数并返回一个 <computeroutput>float</computeroutput>：

  <informaltable>
    <tgroup cols="2" align="left">
      <thead>
        <row>
          <entry>Preferred syntax 首选语法</entry>
          <entry>Portable syntax 兼容语法</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
<programlisting name="function.tutorial.arith.cxx98"><classname>boost::function</classname>&lt;float (int x, int y)&gt; f;</programlisting>
</entry>
<entry>
<programlisting name="function.tutorial.arith.portable"><classname alt="functionN">boost::function2</classname>&lt;float, int, int&gt; f;</programlisting>
</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
</para>

<para> By default, function object wrappers are empty, so we can create a 
function object to assign to <computeroutput>f</computeroutput>:<sbr/>
缺省情况下，函数对象包装类是空的，所以我们创建一个函数对象赋给 <computeroutput>f</computeroutput>：

<programlisting name="function.tutorial.int_div">struct int_div { 
  float operator()(int x, int y) const { return ((float)x)/y; }; 
};</programlisting>
<programlisting name="function.tutorial.use_int_div">f = int_div();</programlisting>
</para>

<para> Now we can use <computeroutput>f</computeroutput> to execute
the underlying function object
<computeroutput>int_div</computeroutput>:<sbr/>
现在我们可以用 <computeroutput>f</computeroutput> 来执行底层的函数对象 
<computeroutput>int_div</computeroutput>：

<programlisting name="function.tutorial.call_int_div">std::cout &lt;&lt; f(5, 3) &lt;&lt; std::endl;</programlisting>
</para>

<para> We are free to assign any compatible function object to
<computeroutput>f</computeroutput>. If
<computeroutput>int_div</computeroutput> had been declared to take two
<computeroutput>long</computeroutput> operands, the implicit
conversions would have been applied to the arguments without any user
interference. The only limit on the types of arguments is that they be
CopyConstructible, so we can even use references and arrays:<sbr/>
我们可以自由地赋任何函数对象给 <computeroutput>f</computeroutput>。
如果 <computeroutput>int_div</computeroutput> 被定义为持有两个 
<computeroutput>long</computeroutput> 操作数，隐式转换会在没有任何用户干预的情况下应用于参数。
对于参数类型的仅有的限制是它们是可拷贝构造的，所以我们甚至可以用引用或数组：

  <informaltable>
    <tgroup cols="1" align="left">
      <thead><row><entry>Preferred syntax 首选语法</entry></row></thead>
      <tbody>
        <row>
          <entry>
<programlisting name="function.tutorial.sum_avg_decl.cxx98"><classname>boost::function</classname>&lt;void (int values[], int n, int&amp; sum, float&amp; avg)&gt; sum_avg;</programlisting>
</entry>
        </row>
      </tbody>
    </tgroup> 
  </informaltable>
  <informaltable>
    <tgroup cols="1" align="left">
      <thead><row><entry>Portable syntax 兼容语法</entry></row></thead>
      <tbody>
        <row>
<entry>
<programlisting name="function.tutorial.sum_avg_decl.portable"><classname alt="functionN">boost::function4</classname>&lt;void, int*, int, int&amp;, float&amp;&gt; sum_avg;</programlisting>
</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

<programlisting name="function.tutorial.sum_avg">void do_sum_avg(int values[], int n, int&amp; sum, float&amp; avg)
{
  sum = 0;
  for (int i = 0; i &lt; n; i++)
    sum += values[i];
  avg = (float)sum / n;
}</programlisting>


<programlisting name="function.tutorial.use_sum_avg">sum_avg = &amp;do_sum_avg;</programlisting>
</para>

<para> Invoking a function object wrapper that does not actually
contain a function object is a precondition violation, much like
trying to call through a null function pointer, and will throw a <classname>bad_function_call</classname> exception). We can check for an
empty function object wrapper by using it in a boolean context (it evaluates <computeroutput>true</computeroutput> if the wrapper is not empty) or compare it against <computeroutput>0</computeroutput>. For instance:<sbr/>
调用一个实际上没有包含函数对象的函数对象包装类是一个 precondition violation（前提违例），
很像试图用一个空的函数指针调用函数，并抛出一个 <classname>bad_function_call</classname> 异常。
我们可以通过在一个布尔上下文中使用它（如果包装类不为空，将求值为 <computeroutput>true</computeroutput>）
或将它和 <computeroutput>0</computeroutput> 作比较来检查空函数对象包装类。例如：

<programlisting name="function.tutorial.check_empty">if (f)
  std::cout &lt;&lt; f(5, 3) &lt;&lt; std::endl;
else
  std::cout &lt;&lt; "f has no target, so it is unsafe to call" &lt;&lt; std::endl;</programlisting>
</para>

<para> Alternatively,
<computeroutput><methodname>empty</methodname>()</computeroutput>
method will return whether or not the wrapper is empty.<sbr/>
另一个可选方法是，<computeroutput><methodname>empty</methodname>()</computeroutput> 
方法可以返回这个包装类是否为空。</para>

<para> Finally, we can clear out a function target by assigning it to <computeroutput>0</computeroutput> or by calling the <computeroutput><methodname>clear</methodname>()</computeroutput> member function, e.g., <sbr/>
最后，我们可以通过为它赋值为 <computeroutput>0</computeroutput> 或调用 
<computeroutput><methodname>clear</methodname>()</computeroutput> 成员函数来清空一个函数目标，例如，
<programlisting name="function.tutorial.clear">f = 0;</programlisting>
</para>

</section>

<section>
  <title>Free functions 自由函数</title>
<para> Free function pointers can be considered singleton function objects with const function call operators, and can therefore be directly used with the function object wrappers: <sbr/>
自由函数指针被认为是带有 const 函数调用操作符的单例函数对象，并因此可以直接用于函数对象包装类：
<programlisting name="function.tutorial.mul_ints">float mul_ints(int x, int y) { return ((float)x) * y; }</programlisting>
<programlisting name="function.tutorial.use_mul_ints">f = &amp;mul_ints;</programlisting>
</para>

<para> Note that the <computeroutput>&amp;</computeroutput> isn't really necessary unless you happen to be using Microsoft Visual C++ version 6. <sbr/>
注意，<computeroutput>&amp;</computeroutput> 并不是真的必要，除非你使用 Microsoft Visual C++ 版本 6。</para>
</section>

<section>
  <title>Member functions 成员函数</title>

<para> In many systems, callbacks often call to member functions of a
particular object. This is often referred to as "argument binding",
and is beyond the scope of Boost.Function. The use of member functions
directly, however, is supported, so the following code is valid:<sbr/>
在很多系统中，回调通常是对一个特定对象的成员函数的调用。
这通常被认为是“参数绑定”，而且已经超出 Boost.Function 的范畴。
无论如何，直接调用成员函数是被支持的，所以下面的代码是合法的：

<programlisting name="function.tutorial.X">struct X {
  int foo(int);
};</programlisting>

  <informaltable>
    <tgroup cols="2" align="left">
      <thead>
        <row>
          <entry>Preferred syntax 首选语法</entry>
          <entry>Portable syntax 兼容语法</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
<programlisting name="function.tutorial.mem_fun.cxx98"><classname>boost::function</classname>&lt;int (X*, int)&gt; f;

f = &amp;X::foo;
  
X x;
f(&amp;x, 5);</programlisting>
</entry>
<entry>
<programlisting name="function.tutorial.mem_fun.portable"><classname alt="functionN">boost::function2</classname>&lt;int, X*, int&gt; f;

f = &amp;X::foo;
  
X x;
f(&amp;x, 5);</programlisting>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</para>

<para> Several libraries exist that support argument binding. Three such libraries are summarized below:<sbr/>
有几个支持参数绑定的库已经存在。下面概述三个这样的库：
<itemizedlist>
  <listitem> <para><libraryname>Bind</libraryname>. This library allows binding of
  arguments for any function object. It is lightweight and very
  portable.<sbr/>
  <libraryname>Bind</libraryname>。这个库允许任何函数对象的参数绑定。
  它是轻量级的而且可移植性好。</para></listitem>

  <listitem> <para>The C++ Standard library. Using
  <computeroutput>std::bind1st</computeroutput> and
  <computeroutput>std::mem_fun</computeroutput> together one can bind
  the object of a pointer-to-member function for use with
  Boost.Function:<sbr/>
  C++ 标准库。将 <computeroutput>std::bind1st</computeroutput> 和 
  <computeroutput>std::mem_fun</computeroutput> 合在一起使用，
  可以将一个指向成员函数的指针的对象绑定到 Boost.Function：

  <informaltable>
    <tgroup cols="2" align="left">
      <thead>
        <row>
          <entry>Preferred syntax 首选语法</entry>
          <entry>Portable syntax 兼容语法</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
<programlisting name="function.tutorial.std_bind.cxx98">  <classname>boost::function</classname>&lt;int (int)&gt; f;
X x;
f = std::bind1st(
      std::mem_fun(&amp;X::foo), &amp;x);
f(5); // Call x.foo(5)</programlisting>
</entry>
<entry>
<programlisting name="function.tutorial.std_bind.portable">  <classname alt="functionN">boost::function1</classname>&lt;int, int&gt; f;
X x;
f = std::bind1st(
      std::mem_fun(&amp;X::foo), &amp;x);
f(5); // Call x.foo(5)</programlisting>
</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
</para>
</listitem>

  <listitem><para>The <libraryname>Lambda</libraryname> library. This library provides a powerful composition mechanism to construct function objects that uses very natural C++ syntax. Lambda requires a compiler that is reasonably conformant to the C++ standard. <sbr/>
  <libraryname>Lambda</libraryname> 库。这个库提供一个强大的合成机制，利用非常自然的 C++ 语法去构造函数对象。
  lambda 需要一个相当符合 C++ 标准的编译器。</para></listitem>
</itemizedlist>
</para>

</section>

<section>
  <title>References to Function Objects 引向函数对象的引用</title> <para> In some cases it is
  expensive (or semantically incorrect) to have Boost.Function clone a
  function object. In such cases, it is possible to request that
  Boost.Function keep only a reference to the actual function
  object. This is done using the <computeroutput>ref</computeroutput>
  and <computeroutput>cref</computeroutput> functions to wrap a
  reference to a function object:<sbr/>
  在某些情况下，让 Boost.Function 克隆一个函数对象需要付出高昂的代价（或者是语义错误的）。
  在这样的情况下，要求 Boost.Function 只保留引向实际的函数对象的引用是有可能的。
  这可以通过使用 <computeroutput>ref</computeroutput> 和 <computeroutput>cref</computeroutput> 
  函数去包装一个引向函数对象的引用来做到：

  <informaltable>
    <tgroup cols="2" align="left">
      <thead>
        <row>
          <entry>Preferred syntax 首选语法</entry>
          <entry>Portable syntax 兼容语法</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
<programlisting name="function.tutorial.ref.cxx98">stateful_type a_function_object;
<classname>boost::function</classname>&lt;int (int)&gt; f;
f = <functionname>boost::ref</functionname>(a_function_object);

<classname>boost::function</classname>&lt;int (int)&gt; f2(f);</programlisting>
</entry>
<entry>
<programlisting name="function.tutorial.ref.portable">stateful_type a_function_object;
<classname alt="functionN">boost::function1</classname>&lt;int, int&gt; f;
f = <functionname>boost::ref</functionname>(a_function_object);

<classname alt="functionN">boost::function1</classname>&lt;int, int&gt; f2(f);</programlisting>
</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
</para>

<para> Here, <computeroutput>f</computeroutput> will not make a copy
of <computeroutput>a_function_object</computeroutput>, nor will
<computeroutput>f2</computeroutput> when it is targeted to
<computeroutput>f</computeroutput>'s reference to
<computeroutput>a_function_object</computeroutput>. Additionally, when
using references to function objects, Boost.Function will not throw
exceptions during assignment or construction.<sbr/>
这里，<computeroutput>f</computeroutput> 不会生成 <computeroutput>a_function_object</computeroutput> 
的一个拷贝，当 <computeroutput>f2</computeroutput> 以 <computeroutput>f</computeroutput> 
的引向 <computeroutput>a_function_object</computeroutput> 的引用为目标时，也不会生成这个拷贝。
另外，当使用引向函数对象的引用时，Boost.Function 在赋值和构造过程中不会抛出异常。
</para>
</section>

<section>
  <title>Comparing Boost.Function function objects 比较 Boost.Function 函数对象</title>

  <para>Function object wrappers can be compared via <code>==</code>
  or <code>!=</code> against any function object that can be stored
  within the wrapper. If the function object wrapper contains a
  function object of that type, it will be compared against the given
  function object (which must be either be
  <conceptname>EqualityComparable</conceptname> or have an overloaded <functionname>boost::function_equal</functionname>). For instance:<sbr/>
  函数对象包装类可以通过 <code>==</code> 或 <code>!=</code> 与任何能够存储在这个包装类内的函数对象进行比较。
  如果这个函数对象包装类包含一个某种类型的函数对象，它将和给定的函数对象（这个函数对象必须是 
  <conceptname>EqualityComparable</conceptname> 的，而且必须有一个 <functionname>boost::function_equal</functionname> 
  的重载）进行比较。例如：</para>
  
  <programlisting name="function.tutorial.compare">int compute_with_X(X*, int);

f = &amp;X::foo;
assert(f == &amp;X::foo);
assert(&amp;compute_with_X != f);</programlisting>

   <para>When comparing against an instance of
   <code><classname>reference_wrapper</classname></code>, the address
   of the object in the
   <code><classname>reference_wrapper</classname></code> is compared
   against the address of the object stored by the function object
   wrapper:<sbr/>
   当和一个 <code><classname>reference_wrapper</classname></code> 的实例进行比较时，
   <code><classname>reference_wrapper</classname></code> 
   中的对象的地址和函数对象包装类中存储的对象的地址进行比较：</para>

  <programlisting name="function.tutorial.compare-ref">a_stateful_object so1, so2;
f = <functionname>boost::ref</functionname>(so1);
assert(f == <functionname>boost::ref</functionname>(so1));
assert(f == so1); <emphasis>// Only if a_stateful_object is <conceptname>EqualityComparable</conceptname></emphasis>
assert(f != <functionname>boost::ref</functionname>(so2));</programlisting>

</section>

</section>

