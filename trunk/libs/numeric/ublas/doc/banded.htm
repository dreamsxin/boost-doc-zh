<!DOCTYPE html PUBLIC "-//W3C/utf-8XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="generator" content=
"HTML Tidy for Linux/x86 (vers 1st March 2004), see www.w3.org" />
<meta http-equiv="Content-Type" content=
"text/html; charset=UTF-8" />
<link href="ublas.css" type="text/css" />
<title>Banded Matrix</title>
</head>
<body>
<h1><img src="../../../../boost.png" align="middle" />
带状矩阵(Banded Matrix)</h1>
<h2><a name="banded_matrix" id="banded_matrix"></a>带状矩阵(Banded Matrix)</h2>
<h4>说明</h4>
<p>模板类<code>banded_matrix&lt;T, F, A&gt;</code> 是带状矩阵的基容器适配器( base container adaptor )。对于一个<em>(m x
n</em>)-维带状矩阵且有<em>l</em> 条下对角线和<em>u</em> 条上对角线且<em>0 &lt;= i &lt; m</em>, <em>0
&lt;= j &lt; n</em> ，如果 <em>i &gt; j + l</em> or <em>i &lt; j - u</em>，那么就满足<em>b</em><sub><em>i, j</em></sub> <em>=
0</em>。带状矩阵的存储是紧密的(packed)。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/banded.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    banded_matrix&lt;double&gt; m (3, 3, 1, 1);
    for (signed i = 0; i &lt; signed (m.size1 ()); ++ i)
        for (signed j = std::max (i - 1, 0); j &lt; std::min (i + 2, signed (m.size2 ())); ++ j)
            m (i, j) = 3 * i + j;
    std::cout &lt;&lt; m &lt;&lt; std::endl;
}
</pre>
<h4>定义</h4>
<p>定义在头文件 banded.hpp 中。</p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>T</code></td>
<td>存储在矩阵中的对象的类型。</td>
<td></td>
</tr>
<tr>
<td><code>F</code></td>
<td>描述存储组织的函数对象。 <a href=
"#banded_matrix_1">[1]</a></td>
<td><code>row_major</code></td>
</tr>
<tr>
<td><code>A</code></td>
<td>适配数组(adapted array)的类型。 <a href=
"#banded_matrix_2">[2]</a></td>
<td><code>unbounded_array&lt;T&gt;</code></td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="container_concept.htm#matrix">矩阵(Matrix)</a> 。 </p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href=
"container_concept.htm#matrix">矩阵(Matrix)</a> 所施加的类型要求。 </p>
<h4>公有基类(Public base classes)</h4>
<p><code>matrix_container&lt;banded_matrix&lt;T, F, A&gt;
&gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>banded_matrix ()</code></td>
<td>分配一个包含0行0个元素的未初始化的<code>banded_matrix</code>。</td>
</tr>
<tr>
<td><code>banded_matrix (size_type size1, size_type size2,
size_type lower = 0, size_type upper = 0)</code></td>
<td>分配一个包含未初始化的<code>size1</code>行
<code>size2</code>个元素的<code>banded_matrix</code>。在主对称角周围有<code>(lower + 1 + upper)</code>条对角线。</td>
</tr>
<tr>
<td><code>banded_matrix (const banded_matrix &amp;m)</code></td>
<td>拷贝构造函数。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
banded_matrix (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>扩展拷贝构造函数。</td>
</tr>
<tr>
<td><code>void resize (size_type size1, size_type size2, size_type
lower = 0, size_type upper = 0, bool preserve = true)</code></td>
<td>重新分配一个未初始化的<code>size1</code>行
<code>size2</code>个元素的<code>banded_matrix</code>。在主对称角周围有<code>(lower + 1 + upper)</code>条对角线。
如果指定，<code>banded_matrix</code>中已经存在的元素将会被保留。</td>
</tr>
<tr>
<td><code>size_type size1 () const</code></td>
<td>返回行数。</td>
</tr>
<tr>
<td><code>size_type size2 () const</code></td>
<td>返回列数。</td>
</tr>
<tr>
<td><code>size_type lower () const</code></td>
<td>返回在主对称线之下的对角线数。</td>
</tr>
<tr>
<td><code>size_type upper () const</code></td>
<td>返回在主对角线之上的对角线数。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i, size_type j)
const</code></td>
<td>返回第<code>i</code>-th行第<code>i</code>-th的元素的<code>const</code>引用。</td>
</tr>
<tr>
<td><code>reference operator () (size_type i, size_type
j)</code></td>
<td>返回第<code>i</code>-th行第<code>i</code>-th的元素的引用。</td>
</tr>
<tr>
<td><code>banded_matrix &amp;operator = (const banded_matrix
&amp;m)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>banded_matrix &amp;assign_temporary (banded_matrix
&amp;m)</code></td>
<td>赋值给一个临时变量。可能会改变带状矩阵<code>m</code>。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
banded_matrix &amp;operator = (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>扩展的赋值运算符。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
banded_matrix &amp;assign (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个矩阵表达式赋给一个带状矩阵。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
banded_matrix &amp;operator += (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个矩阵表达式加到一个带状矩阵。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
banded_matrix &amp;plus_assign (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个矩阵表达式加到一个带状矩阵。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
banded_matrix &amp;operator -= (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。从一个带状矩阵中减去一个矩阵表达式。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
banded_matrix &amp;minus_assign (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>从一个带状矩阵中减去一个矩阵表达式。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
banded_matrix &amp;operator *= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个带状矩阵乘以一个标量。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
banded_matrix &amp;operator /= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个带状矩阵除以一个标量。</td>
</tr>
<tr>
<td><code>void swap (banded_matrix &amp;m)</code></td>
<td>交换带状矩阵的内容。</td>
</tr>
<tr>
<td><code>void insert (size_type i, size_type j, const_reference
t)</code></td>
<td>将<code>t</code>插入到第<code>i</code>-th行
第<code>j</code>-th列。</td>
</tr>
<tr>
<td><code>void erase (size_type i, size_type j)</code></td>
<td>删除第<code>i</code>-th行第<code>j</code>-th列的元素。</td>
</tr>
<tr>
<td><code>void clear ()</code></td>
<td>清除矩阵。</td>
</tr>
<tr>
<td><code>const_iterator1 begin1 () const</code></td>
<td>返回指向<code>banded_matrix</code>开始处的<code>const_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_iterator1 end1 () const</code></td>
<td>返回指向<code>banded_matrix</code>终止处的<code>const_iterator1</code>。</td>
</tr>
<tr>
<td><code>iterator1 begin1 ()</code></td>
<td>返回指向<code>banded_matrix</code>开始处的<code>iterator1</code>。</td>
</tr>
<tr>
<td><code>iterator1 end1 ()</code></td>
<td>返回指向<code>banded_matrix</code>终止处的<code>iterator1</code>。</td>
</tr>
<tr>
<td><code>const_iterator2 begin2 () const</code></td>
<td>返回指向<code>banded_matrix</code>开始处的<code>const_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_iterator2 end2 () const</code></td>
<td>返回指向<code>banded_matrix</code>终止处的<code>const_iterator2</code>。</td>
</tr>
<tr>
<td><code>iterator2 begin2 ()</code></td>
<td>返回指向<code>banded_matrix</code>开始处的<code>iterator2</code>。</td>
</tr>
<tr>
<td><code>iterator2 end2 ()</code></td>
<td>返回指向<code>banded_matrix</code>终止处的<code>iterator2</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rbegin1 () const</code></td>
<td>返回指向反转的(reversed)<code>banded_matrix</code>开始处的<code>const_reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rend1 () const</code></td>
<td>返回指向反转的(reversed)<code>banded_matrix</code>终止处的<code>const_reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator1 rbegin1 ()</code></td>
<td>返回指向反转的(reversed)<code>banded_matrix</code>开始处的<code>reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator1 rend1 ()</code></td>
<td>返回指向反转的(reversed)<code>banded_matrix</code>终止处的<code>reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rbegin2 () const</code></td>
<td>返回指向反转的(reversed)<code>banded_matrix</code>开始处的<code>const_reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rend2 () const</code></td>
<td>返回指向反转的(reversed)<code>banded_matrix</code>终止处的<code>const_reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator2 rbegin2 ()</code></td>
<td>返回指向反转的(reversed)<code>banded_matrix</code>开始处的<code>reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator2 rend2 ()</code></td>
<td>返回指向反转的(reversed)<code>banded_matrix</code>终止处的<code>reverse_iterator2</code>。</td>
</tr>
</tbody>
</table>
<h4>注意</h4>
<p><a name="banded_matrix_1" id="banded_matrix_1">[1]</a> 对于存储组织所支持的参数是<code>row_major</code> 和
<code>column_major</code>。</p>
<p><a name="banded_matrix_2" id="banded_matrix_2">[2]</a> 对于适配数组(adapted array)所支持的参数是<code>unbounded_array&lt;T&gt;</code> ,
<code>bounded_array&lt;T&gt;</code> 和 <code>std::vector&lt;T&gt;</code> 。 </p>
<h2><a name="banded_adaptor" id="banded_adaptor"></a>带状适配器(Banded Adaptor)</h2>
<h4>说明</h4>
<p>模板类<code>banded_adaptor&lt;M&gt;</code> 是一个其它的矩阵的带状矩阵适配器(
banded matrix adaptor )。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/banded.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    matrix&lt;double&gt; m (3, 3);
    banded_adaptor&lt;matrix&lt;double&gt; &gt; ba (m, 1, 1);
    for (signed i = 0; i &lt; signed (ba.size1 ()); ++ i)
        for (signed j = std::max (i - 1, 0); j &lt; std::min (i + 2, signed (ba.size2 ())); ++ j)
            ba (i, j) = 3 * i + j;
    std::cout &lt;&lt; ba &lt;&lt; std::endl;
}
</pre>
<h4>定义</h4>
<p>定义在头文件 banded.hpp 中。 </p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>M</code></td>
<td>适配矩阵(adapted matrix)的类型。</td>
<td></td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="expression_concept.htm#matrix_expression">矩阵表达式(Matrix Expression)</a> 。
</p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href=
"expression_concept.htm#matrix_expression">矩阵表达式(Matrix Expression)</a> 所施加的类型要求。 </p>
<h4>公有基类(Public base classes)</h4>
<p><code>matrix_expression&lt;banded_adaptor&lt;M&gt;
&gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>banded_adaptor (matrix_type &amp;data, size_type lower =
0, size_type upper = 0)</code></td>
<td>分配一个在主对角线周围有<code>(lower + 1 + upper)</code>条对角线的<code>banded_adaptor</code>。</td>
</tr>
<tr>
<td><code>banded_adaptor (const banded_adaptor &amp;m)</code></td>
<td>拷贝构造函数。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
banded_adaptor (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>扩展拷贝构造函数。</td>
</tr>
<tr>
<td><code>size_type size1 () const</code></td>
<td>返回行数。</td>
</tr>
<tr>
<td><code>size_type size2 () const</code></td>
<td>返回列数。</td>
</tr>
<tr>
<td><code>size_type lower () const</code></td>
<td>返回在主对角线之下的对角线数。</td>
</tr>
<tr>
<td><code>size_type upper () const</code></td>
<td>返回在主对角线之上的对角线数。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i, size_type j)
const</code></td>
<td>返回指向第<code>i</code>行第<code>j</code>列的元素的<code>const</code>引用。</td>
</tr>
<tr>
<td><code>reference operator () (size_type i, size_type
j)</code></td>
<td>返回指向第<code>i</code>行第<code>j</code>列的元素的引用。</td>
</tr>
<tr>
<td><code>banded_adaptor &amp;operator = (const banded_adaptor
&amp;m)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>banded_adaptor &amp;assign_temporary (banded_adaptor
&amp;m)</code></td>
<td>赋值给一个临时变量。可能会改变带状矩阵
<code>m</code>。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
banded_adaptor &amp;operator = (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>扩展赋值运算符。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
banded_adaptor &amp;assign (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个矩阵表达式赋给一个带状适配器(banded adaptor)。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
banded_adaptor &amp;operator += (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个矩阵表达式加到一个带状矩阵中。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
banded_adaptor &amp;plus_assign (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个矩阵表达式加到一个带状矩阵中。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
banded_adaptor &amp;operator -= (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。从带状矩阵中减去一个矩阵表达式。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
banded_adaptor &amp;minus_assign (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>从带状适配器(banded adaptor)中减去一个矩阵表达式。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
banded_adaptor &amp;operator *= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。 将一个带状适配器(banded adaptor)乘以一个标量。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
banded_adaptor &amp;operator /= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。 将一个带状适配器(banded adaptor)除以一个标量。</td>
</tr>
<tr>
<td><code>void swap (banded_adaptor &amp;m)</code></td>
<td>交换带状适配器的内容。</td>
</tr>
<tr>
<td><code>const_iterator1 begin1 () const</code></td>
<td>返回指向<code>banded_adaptor</code>开始处的<code>const_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_iterator1 end1 () const</code></td>
<td>返回指向<code>banded_adaptor</code>终止处的<code>const_iterator1</code>。</td>
</tr>
<tr>
<td><code>iterator1 begin1 ()</code></td>
<td>返回指向<code>banded_adaptor</code>开始处的<code>iterator1</code>。</td>
</tr>
<tr>
<td><code>iterator1 end1 ()</code></td>
<td>返回指向<code>banded_adaptor</code>终止处的<code>iterator1</code>。</td>
</tr>
<tr>
<td><code>const_iterator2 begin2 () const</code></td>
<td>返回指向<code>banded_adaptor</code>开始处的<code>const_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_iterator2 end2 () const</code></td>
<td>返回指向<code>banded_adaptor</code>终止处的<code>const_iterator2</code>。</td>
</tr>
<tr>
<td><code>iterator2 begin2 ()</code></td>
<td>返回指向<code>banded_adaptor</code>开始处的<code>iterator2</code>。</td>
</tr>
<tr>
<td><code>iterator2 end2 ()</code></td>
<td>返回指向<code>banded_adaptor</code>终止处的<code>iterator2</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rbegin1 () const</code></td>
<td>返回指向反转的(reversed)<code>banded_adaptor</code>开始处的<code>const_reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rend1 () const</code></td>
<td>返回指向反转的(reversed)<code>banded_adaptor</code>终止处的<code>const_reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator1 rbegin1 ()</code></td>
<td>返回指向反转的(reversed)<code>banded_adaptor</code>开始处的<code>reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator1 rend1 ()</code></td>
<td>返回指向反转的(reversed)<code>banded_adaptor</code>终止处的<code>reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rbegin2 () const</code></td>
<td>返回指向反转的(reversed)<code>banded_adaptor</code>开始处的<code>const_reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rend2 () const</code></td>
<td>返回指向反转的(reversed)<code>banded_adaptor</code>终止处的<code>const_reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator2 rbegin2 ()</code></td>
<td>返回指向反转的(reversed)<code>banded_adaptor</code>开始处的<code>reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator2 rend2 ()</code></td>
<td>返回指向反转的(reversed)<code>banded_adaptor</code>终止处的<code>reverse_iterator2</code>。</td>
</tr>
</tbody>
</table>
<hr />
<p>Copyright (&copy;) 2000-2002 Joerg Walter, Mathias Koch<br />
   Use, modification and distribution are subject to the
   Boost Software License, Version 1.0.
   (See accompanying file LICENSE_1_0.txt
   or copy at <a href="http://www.boost.org/LICENSE_1_0.txt">
      http://www.boost.org/LICENSE_1_0.txt</a>).
</p>
</body>
</html>
