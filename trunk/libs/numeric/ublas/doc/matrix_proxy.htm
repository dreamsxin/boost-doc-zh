<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="generator" content=
"HTML Tidy for Linux/x86 (vers 1st March 2004), see www.w3.org" />
<meta http-equiv="Content-Type" content=
"text/html; charset=UTF-8" />
<link href="ublas.css" type="text/css" />
<title>Matrix Proxies</title>
</head>
<body>
<h1><img src="../../../../boost.png" align="middle" />
矩阵策略(Matrix Proxies)</h1>
<h2><a name="matrix_row" id="matrix_row"></a>矩阵行(Matrix Row)</h2>
<h4>说明 </h4>
<p>模板类 <code>matrix_row&lt;M&gt;</code> 允许定位(address)矩阵中的一行。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/matrix.hpp&gt;
#include &lt;boost/numeric/ublas/matrix_proxy.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    matrix&lt;double&gt; m (3, 3);
    for (unsigned i = 0; i &lt; m.size1 (); ++ i) {
        matrix_row&lt;matrix&lt;double&gt; &gt; mr (m, i);
        for (unsigned j = 0; j &lt; mr.size (); ++ j)
            mr (j) = 3 * i + j;
        std::cout &lt;&lt; mr &lt;&lt; std::endl;
    }
}
</pre>
<h4>定义</h4>
<p>定义在头文件 matrix_proxy.hpp 中。 </p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>M</code></td>
<td>被引用的矩阵的类型。</td>
<td></td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 。
</p>
<p>如果指定的行在矩阵的行下标范围之外，那么<code>matrix_row</code> 就不是合适的(well
formed)向量表达式(Vector Expression)。也就是说，访问矩阵之外的一个元素是<i>未定义的</i>。</p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href=
"expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 所施加的类型要求。 </p>
<h4>公有基类(Public base classes)</h4>
<p><code>vector_expression&lt;matrix_row&lt;M&gt; &gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>matrix_row (matrix_type &amp;data, size_type
i)</code></td>
<td>构造一个子向量。</td>
</tr>
<tr>
<td><code>size_type size () const</code></td>
<td>返回子向量的大小。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i)
const</code></td>
<td>返回第<code>i</code>-th 个元素值。</td>
</tr>
<tr>
<td><code>reference operator () (size_type i)</code></td>
<td>返回第<code>i</code>-th 个元素的引用。</td>
</tr>
<tr>
<td><code>matrix_row &amp;operator = (const matrix_row
&amp;mr)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>matrix_row &amp;assign_temporary (matrix_row
&amp;mr)</code></td>
<td>赋值给一个临时变量，可能会改变<code>矩阵mr</code>。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_row &amp;operator = (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>扩展赋值运算符。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_row &amp;assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个向量表达式增加到一个了向量中，赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_row &amp;operator += (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个向量表达式增加到一个子向量中。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_row &amp;plus_assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个向量增加到一个子向量中。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_row &amp;operator -= (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。从一个子向量中减去一个向量。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_row &amp;minus_assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>从一个子向量减去一个向量。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
matrix_row &amp;operator *= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将子向量乘以一个标量。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
matrix_row &amp;operator /= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个子向量除以一个标量。</td>
</tr>
<tr>
<td><code>void swap (matrix_row &amp;mr)</code></td>
<td>交换子向量的内容。</td>
</tr>
<tr>
<td><code>const_iterator begin () const</code></td>
<td>返回指向<code>matrix_row</code>开始处的<code>const_iterator</code> 。</td>
</tr>
<tr>
<td><code>const_iterator end () const</code></td>
<td>返回指向<code>matrix_row</code>终止处的<code>const_iterator</code> 。</td>
</tr>
<tr>
<td><code>iterator begin ()</code></td>
<td>返回指向<code>matrix_row</code>开始处的<code>iterator</code> 。</td>
</tr>
<tr>
<td><code>iterator end ()</code></td>
<td>返回指向<code>matrix_row</code>终止处的<code>iterator</code> 。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rbegin () const</code></td>
<td>返回指向反转的(reversed)<code>matrix_row</code>开始处的<code>const_reverse_iterator</code> 。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rend () const</code></td>
<td>返回指向反转的(reversed)<code>matrix_row</code>终止处的<code>const_reverse_iterator</code> 。</td>
</tr>
<tr>
<td><code>reverse_iterator rbegin ()</code></td>
<td>返回指向反转的(reversed)<code>matrix_row</code>开始处的<code>reverse_iterator</code> 。</td>
</tr>
<tr>
<td><code>reverse_iterator rend ()</code></td>
<td>返回指向反转的(reversed)<code>matrix_row</code>终止处的<code>reverse_iterator</code> 。</td>
</tr>
</tbody>
</table>
<h3>Projections</h3>
<h4>说明</h4>
<p>自由函数<code>row</code> 支持构造矩阵的行。</p>
<h4>原型</h4>
<pre><code>
    template&lt;class M&gt;
    matrix_row&lt;M&gt; row (M &amp;data, std::size_t i);
    template&lt;class M&gt;
    const matrix_row&lt;const M&gt; row (const M &amp;data, std::size_t i);
</code></pre>
<h4>定义</h4>
<p>定义在头文件 matrix_proxy.hpp 中。</p>
<h4>类型要求(Type requirements)</h4>
<ul>
<li><code>M</code>  是 <a href=
"expression_concept.htm#matrix_expression">矩阵表达式(Matrix Expression)</a> 模型。</li>
</ul>
<h4>复杂度(Complexity)</h4>
<p>依赖于行的大小的线性复杂度。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/matrix.hpp&gt;
#include &lt;boost/numeric/ublas/matrix_proxy.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    matrix&lt;double&gt; m (3, 3);
    for (unsigned i = 0; i &lt; m.size1 (); ++ i) {
        for (unsigned j = 0; j &lt; m.size2 (); ++ j)
            row (m, i) (j) = 3 * i + j;
        std::cout &lt;&lt; row (m, i) &lt;&lt; std::endl;
    }
}
</pre>
<h2><a name="matrix_column" id="matrix_column"></a>Matrix Column</h2>
<h4>说明</h4>
<p>模板类<code>matrix_column&lt;M&gt;</code> 允许定位(address)矩阵中的一列。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/matrix.hpp&gt;
#include &lt;boost/numeric/ublas/matrix_proxy.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    matrix&lt;double&gt; m (3, 3);
    for (unsigned j = 0; j &lt; m.size2 (); ++ j) {
        matrix_column&lt;matrix&lt;double&gt; &gt; mc (m, j);
        for (unsigned i = 0; i &lt; mc.size (); ++ i)
            mc (i) = 3 * i + j;
        std::cout &lt;&lt; mc &lt;&lt; std::endl;
    }
}
</pre>
<h4>定义</h4>
<p>定义在头文件 matrix_proxy.hpp 中。</p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>M</code></td>
<td>被引用的矩阵的类型。</td>
<td></td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 。</p>
<p>如果指定的列在矩阵的列下标范围之外，那么<code>matrix_column</code> 就不是合适的(well formed)向量表达式(Vector Expression)。也就是说，访问矩阵之外的一个元素是<i>未定义的</i>。</p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href=
"expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 所施加的类型要求。</p>
<h4>公有基类(Public base classes)</h4>
<p><code>vector_expression&lt;matrix_column&lt;M&gt;
&gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>matrix_column (matrix_type &amp;data, size_type
j)</code></td>
<td>构造一个子向量。</td>
</tr>
<tr>
<td><code>size_type size () const</code></td>
<td>返回子向量的大小。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i)
const</code></td>
<td>返回第<code>i</code>-th 个元素值。</td>
</tr>
<tr>
<td><code>reference operator () (size_type i)</code></td>
<td>返回第<code>i</code>-th 个元素的引用。</td>
</tr>
<tr>
<td><code>matrix_column &amp;operator = (const matrix_column
&amp;mc)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>matrix_column &amp;assign_temporary (matrix_column
&amp;mc)</code></td>
<td>赋值给一个临时变量，可能会改变矩阵列<code>mc</code> 。 </td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_column &amp;operator = (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>扩展赋值运算符。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_column &amp;assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个向量表达式增加到一个了向量中，赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_column &amp;operator += (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个向量表达式增加到一个子向量中。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_column &amp;plus_assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个向量增加到一个子向量中。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_column &amp;operator -= (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。从一个子向量中减去一个向量。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_column &amp;minus_assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>从一个子向量减去一个向量。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
matrix_column &amp;operator *= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将子向量乘以一个标量。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
matrix_column &amp;operator /= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个子向量除以一个标量。</td>
</tr>
<tr>
<td><code>void swap (matrix_column &amp;mc)</code></td>
<td>交换子向量的内容。</td>
</tr>
<tr>
<td><code>const_iterator begin () const</code></td>
<td>返回指向<code>matrix_column</code>开始处的<code>const_iterator</code> 。</td>
</tr>
<tr>
<td><code>const_iterator end () const</code></td>
<td>返回指向<code>matrix_column</code>终止处的<code>const_iterator</code> 。</td>
</tr>
<tr>
<td><code>iterator begin ()</code></td>
<td>返回指向<code>matrix_column</code>开始处的<code>iterator</code> 。</td>
</tr>
<tr>
<td><code>iterator end ()</code></td>
<td>返回指向<code>matrix_column</code>终止处的<code>iterator</code> 。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rbegin () const</code></td>
<td>返回指向反转的(reversed)<code>matrix_column</code>开始处的<code>const_reverse_iterator</code> 。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rend () const</code></td>
<td>返回指向反转的(reversed)<code>matrix_column</code>终止处的<code>const_reverse_iterator</code> 。</td>
</tr>
<tr>
<td><code>reverse_iterator rbegin ()</code></td>
<td>返回指向反转的(reversed)<code>matrix_column</code>开始处的<code>reverse_iterator</code> 。</td>
</tr>
<tr>
<td><code>reverse_iterator rend ()</code></td>
<td>返回指向反转的(reversed)<code>matrix_column</code>终止处的<code>reverse_iterator</code> 。</td>
</tr>
</tbody>
</table>
<h3>Projections</h3>
<h4>说明</h4>
<p>自由函数<code>column</code>支持构造矩阵的列。</p>
<h4>原型</h4>
<pre><code>
    template&lt;class M&gt;
    matrix_column&lt;M&gt; column (M &amp;data, std::size_t j);
    template&lt;class M&gt;
    const matrix_column&lt;const M&gt; column (const M &amp;data, std::size_t j);
</code></pre>
<h4>定义</h4>
<p>定义在头文件 matrix_proxy.hpp 中。</p>
<h4>类型要求(Type requirements)</h4>
<ul>
<li><code>M</code>  是 <a href=
"expression_concept.htm#matrix_expression">矩阵表达式(Matrix Expression)</a> 模型。</li>
</ul>
<h4>复杂度(Complexity)</h4>
<p>依赖于列大小的线性复杂度。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/matrix.hpp&gt;
#include &lt;boost/numeric/ublas/matrix_proxy.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    matrix&lt;double&gt; m (3, 3);
    for (unsigned j = 0; j &lt; m.size2 (); ++ j) {
        for (unsigned i = 0; i &lt; m.size1 (); ++ i)
            column (m, j) (i) = 3 * i + j;
        std::cout &lt;&lt; column (m, j) &lt;&lt; std::endl;
    }
}
</pre>
<h2><a name="vector_range" id="vector_range"></a>Vector Range</h2>
<h4>说明</h4>
<p>模板类<code>matrix_vector_range&lt;M&gt;</code>
允许定位(address)矩阵的一个子向量(sub vector)。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/matrix.hpp&gt;
#include &lt;boost/numeric/ublas/matrix_proxy.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    matrix&lt;double&gt; m (3, 3);
    for (unsigned i = 0; i &lt; m.size1 (); ++ i)
        for (unsigned j = 0; j &lt; m.size2 (); ++ j)
            m (i, j) = 3 * i + j;

    matrix_vector_range&lt;matrix&lt;double&gt; &gt; mvr (m, range (0, 3), range (0, 3));
    std::cout &lt;&lt; mvr &lt;&lt; std::endl;
}
</pre>
<h4>定义</h4>
<p>定义在头文件 matrix_proxy.hpp 中。</p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>M</code></td>
<td>被引用的矩阵的类型。</td>
<td></td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 。</p>
<p>如果指定的范围在矩阵的范围之外，那么<code>matrix_vector_range</code> 就不是合适的(well formed)向量表达式(Vector Expression)。也就是说，访问矩阵之外的一个元素是<i>未定义的</i>。</p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href=
"expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 所施加的类型要求。</p>
<h4>公有基类(Public base classes)</h4>
<p><code>vector_expression&lt;matrix_vector_range&lt;M&gt;
&gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>matrix_vector_range (matrix_type &amp;data,<br />
const range &amp;r1, const range &amp;r2)</code></td>
<td>构造一个子向量。</td>
</tr>
<tr>
<td><code>size_type size () const</code></td>
<td>返回子向量的大小。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i)
const</code></td>
<td>返回第<code>i</code>-th 个元素值。</td>
</tr>
<tr>
<td><code>reference operator () (size_type i)</code></td>
<td>返回第<code>i</code>-th 个元素的引用。</td>
</tr>
<tr>
<td><code>matrix_vector_range &amp;operator = (const
matrix_vector_range &amp;mvr)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>matrix_vector_range &amp;assign_temporary
(matrix_vector_range &amp;mvr)</code></td>
<td>赋值给一个临时变量，可能会改变矩阵向量范围<code>mvr</code>.</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_vector_range &amp;operator = (const
vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>扩展赋值运算符。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_vector_range &amp;assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个向量表达式增加到一个了向量中，赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_vector_range &amp;operator += (const
vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个向量表达式增加到一个子向量中。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_vector_range &amp;plus_assign (const
vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>将一个向量增加到一个子向量中。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_vector_range &amp;operator -= (const
vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。从一个子向量中减去一个向量。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_vector_range &amp;minus_assign (const
vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>从一个子向量减去一个向量。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
matrix_vector_range &amp;operator *= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将子向量乘以一个标量。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
matrix_vector_range &amp;operator /= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个子向量除以一个标量。</td>
</tr>
<tr>
<td><code>void swap (matrix_vector_range &amp;mvr)</code></td>
<td>Swaps the contents of the sub vectors.</td>
</tr>
<tr>
<td><code>const_iterator begin () const</code></td>
<td>返回指向<code>matrix_vector_range</code>开始处的<code>const_iterator</code> 。</td>
</tr>
<tr>
<td><code>const_iterator end () const</code></td>
<td>返回指向<code>matrix_vector_range</code>终止处的<code>const_iterator</code> 。</td>
</tr>
<tr>
<td><code>iterator begin ()</code></td>
<td>返回指向<code>matrix_vector_range</code>开始处的<code>iterator</code> 。</td>
</tr>
<tr>
<td><code>iterator end ()</code></td>
<td>返回指向<code>matrix_vector_range</code>终止处的<code>iterator</code> 。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rbegin () const</code></td>
<td>返回指向反转的(reversed)<code>matrix_vector_range</code>开始处的<code>const_reverse_iterator</code> 。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rend () const</code></td>
<td>返回指向反转的(reversed)<code>matrix_vector_range</code>终止处的<code>const_reverse_iterator</code> 。</td>
</tr>
<tr>
<td><code>reverse_iterator rbegin ()</code></td>
<td>返回指向反转的(reversed)<code>matrix_vector_range</code>开始处的<code>reverse_iterator</code> 。</td>
</tr>
<tr>
<td><code>reverse_iterator rend ()</code></td>
<td>返回指向反转的(reversed)<code>matrix_vector_range</code>终止处的<code>reverse_iterator</code> 。</td>
</tr>
</tbody>
</table>
<h2><a name="vector_slice" id="vector_slice"></a>向量切分(Vector Slice)</h2>
<h4>说明</h4>
<p>模板类<code>matrix_vector_slice&lt;M&gt;</code>
允许定位(address)一个矩阵中被切分的(sliced)一个子向量(sub vector)。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/matrix.hpp&gt;
#include &lt;boost/numeric/ublas/matrix_proxy.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    matrix&lt;double&gt; m (3, 3);
    for (unsigned i = 0; i &lt; m.size1 (); ++ i)
        for (unsigned j = 0; j &lt; m.size2 (); ++ j)
            m (i, j) = 3 * i + j;

    matrix_vector_slice&lt;matrix&lt;double&gt; &gt; mvs (m, slice (0, 1, 3), slice (0, 1, 3));
    std::cout &lt;&lt; mvs &lt;&lt; std::endl;
}
</pre>
<h4>定义</h4>
<p>定义在头文件 matrix_proxy.hpp 中。</p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>M</code></td>
<td>被引用的矩阵的类型。</td>
<td></td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 。</p>
<p>如果指定的矩阵切分(slices)在矩阵的范围之外，那么<code>matrix_vector_slice</code> 就不是合适的(well formed)向量表达式(Vector Expression)。也就是说，访问矩阵之外的一个元素是<i>未定义的</i>。</p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href=
"expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 所施加的类型要求。</p>
<h4>公有基类(Public base classes)</h4>
<p><code>vector_expression&lt;matrix_vector_slice&lt;M&gt;
&gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>matrix_vector_slice (matrix_type &amp;data,<br />
const slice &amp;s1, const slice &amp;s2)</code></td>
<td>构造一个子向量。</td>
</tr>
<tr>
<td><code>size_type size () const</code></td>
<td>返回子向量的大小。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i)
const</code></td>
<td>返回第<code>i</code>-th 个元素值。</td>
</tr>
<tr>
<td><code>reference operator () (size_type i)</code></td>
<td>返回第<code>i</code>-th 个元素的引用。</td>
</tr>
<tr>
<td><code>matrix_vector_slice &amp;operator = (const
matrix_vector_slice &amp;mvs)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>matrix_vector_slice &amp;assign_temporary
(matrix_vector_slice &amp;mvs)</code></td>
<td>赋值给一个临时变量，可能会改变矩阵向量分割(slice)<code>vs</code>.</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_vector_slice &amp;operator = (const
vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>扩展赋值运算符。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_vector_slice &amp;assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个向量表达式增加到一个了向量中，赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_vector_slice &amp;operator += (const
vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个向量表达式增加到一个子向量中。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_vector_slice &amp;plus_assign (const
vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>将一个向量增加到一个子向量中。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_vector_slice &amp;operator -= (const
vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。从一个子向量中减去一个向量。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_vector_slice &amp;minus_assign (const
vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>从一个子向量减去一个向量。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
matrix_vector_slice &amp;operator *= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将子向量乘以一个标量。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
matrix_vector_slice &amp;operator /= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个子向量除以一个标量。</td>
</tr>
<tr>
<td><code>void swap (matrix_vector_slice &amp;mvs)</code></td>
<td>Swaps the contents of the sub vectors.</td>
</tr>
<tr>
<td><code>const_iterator begin () const</code></td>
<td>返回指向<code>matrix_vector_slice</code>开始处的<code>const_iterator</code> 。</td>
</tr>
<tr>
<td><code>const_iterator end () const</code></td>
<td>返回指向<code>matrix_vector_slice</code>终止处的<code>const_iterator</code> 。</td>
</tr>
<tr>
<td><code>iterator begin ()</code></td>
<td>返回指向<code>matrix_vector_slice</code>开始处的<code>iterator</code> 。</td>
</tr>
<tr>
<td><code>iterator end ()</code></td>
<td>返回指向<code>matrix_vector_slice</code>终止处的<code>iterator</code> 。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rbegin () const</code></td>
<td>返回指向反转的(reversed)<code>matrix_vector_range</code>开始处的<code>const_reverse_iterator</code> 。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rend () const</code></td>
<td>返回指向反转的(reversed)<code>matrix_vector_range</code>终止处的<code>const_reverse_iterator</code> 。</td>
</tr>
<tr>
<td><code>reverse_iterator rbegin ()</code></td>
<td>返回指向反转的(reversed)<code>matrix_vector_range</code>开始处的<code>reverse_iterator</code> 。</td>
</tr>
<tr>
<td><code>reverse_iterator rend ()</code></td>
<td>返回指向反转的(reversed)<code>matrix_vector_range</code>终止处的<code>reverse_iterator</code> 。</td>
</tr>
</tbody>
</table>
<h2><a name="matrix_range" id="matrix_range"></a>Matrix Range</h2>
<h4>说明</h4>
<p>模板类<code>matrix_range&lt;M&gt;</code> 允许定位(address)一个矩阵的子矩阵(sub matrix)。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/matrix.hpp&gt;
#include &lt;boost/numeric/ublas/matrix_proxy.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    matrix&lt;double&gt; m (3, 3);
    matrix_range&lt;matrix&lt;double&gt; &gt; mr (m, range (0, 3), range (0, 3));
    for (unsigned i = 0; i &lt; mr.size1 (); ++ i)
        for (unsigned j = 0; j &lt; mr.size2 (); ++ j)
            mr (i, j) = 3 * i + j;
    std::cout &lt;&lt; mr &lt;&lt; std::endl;
}
</pre>
<h4>定义</h4>
<p>定义在头文件 matrix_proxy.hpp 中。</p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>M</code></td>
<td>被引用的矩阵的类型。</td>
<td></td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="expression_concept.htm#matrix_expression">矩阵表达式(Matrix Expression)</a> 。 </p>
<p>如果指定的范围在矩阵的下标范围之外，那么<code>matrix_range</code> 就不是合适的(well formed)矩阵表达式(Matrix Expression)。也就是说，访问矩阵之外的一个元素是<i>未定义的</i>。</p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href=
"expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 所施加的类型要求。</p>
<h4>公有基类(Public base classes)</h4>
<p><code>matrix_expression&lt;matrix_range&lt;M&gt; &gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>matrix_range (matrix_type &amp;data,<br />
const range &amp;r1, const range &amp;r2)</code></td>
<td>构造一个子矩阵。</td>
</tr>
<tr>
<td><code>size_type start1 () const</code></td>
<td>返回第一行的下标。</td>
</tr>
<tr>
<td><code>size_type size1 () const</code></td>
<td>返回行数。</td>
</tr>
<tr>
<td><code>size_type start2 () const</code></td>
<td>返回第一列的下标。</td>
</tr>
<tr>
<td><code>size_type size2 () const</code></td>
<td>返回列数。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i, size_type j)
const</code></td>
<td>返回第<code>i</code>-th行第<code>j</code>-th列的元素值。</td>
</tr>
<tr>
<td><code>reference operator () (size_type i, size_type
j)</code></td>
<td>返回第<code>i</code>-th行第<code>j</code>-th列的元素的引用。</td>
</tr>
<tr>
<td><code>matrix_range &amp;operator = (const matrix_range
&amp;mr)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>matrix_range &amp;assign_temporary (matrix_range
&amp;mr)</code></td>
<td>赋值给一个临时变量。可能会改变矩阵范围
<code>mr</code> .</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_range &amp;operator = (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>扩展赋值运算符。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_range &amp;assign (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个矩阵表达式赋给一个子矩阵。左边和右边的赋值应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_range &amp;operator += (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个矩阵表达式增加到一个子矩阵中。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_range &amp;plus_assign (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个矩阵增加到一个子矩阵中。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_range &amp;operator -= (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。从一个子矩阵中减去一个向量。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_range &amp;minus_assign (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>从一个子矩阵减去一个矩阵。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
matrix_range &amp;operator *= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将子矩阵乘以一个标量。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
matrix_range &amp;operator /= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个子矩阵除以一个标量。</td>
</tr>
<tr>
<td><code>void swap (matrix_range &amp;mr)</code></td>
<td>交换子矩阵的内容。</td>
</tr>
<tr>
<td><code>const_iterator1 begin1 () const</code></td>
<td>返回指向<code>matrix_range</code>开始处的<code>const_iterator1</code> 。</td>
</tr>
<tr>
<td><code>const_iterator1 end1 () const</code></td>
<td>返回指向<code>matrix_range</code>终止处的<code>const_iterator1</code> 。</td>
</tr>
<tr>
<td><code>iterator1 begin1 ()</code></td>
<td>返回指向<code>matrix_range</code>开始处的<code>iterator1</code> 。</td>
</tr>
<tr>
<td><code>iterator1 end1 ()</code></td>
<td>返回指向<code>matrix_range</code>开始处的<code>iterator1</code> 。</td>
</tr>
<tr>
<td><code>const_iterator2 begin2 () const</code></td>
<td>返回指向<code>matrix_range</code>开始处的<code>const_iterator2</code> 。</td>
</tr>
<tr>
<td><code>const_iterator2 end2 () const</code></td>
<td>返回指向<code>matrix_range</code>终止处的<code>const_iterator2</code> 。</td>
</tr>
<tr>
<td><code>iterator2 begin2 ()</code></td>
<td>返回指向<code>matrix_range</code>开始处的<code>iterator2</code> 。</td>
</tr>
<tr>
<td><code>iterator2 end2 ()</code></td>
<td>返回指向<code>matrix_range</code>开始处的<code>iterator2</code> 。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rbegin1 () const</code></td>
<td>返回指向反转的(reversed)<code>matrix_range</code>开始处的<code>const_reverse_iterator1</code> 。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rend1 () const</code></td>
<td>返回指向反转的(reversed)<code>matrix_range</code>终止处的<code>const_reverse_iterator1</code> 。</td>
</tr>
<tr>
<td><code>reverse_iterator1 rbegin1 ()</code></td>
<td>返回指向反转的(reversed)<code>matrix_range</code>开始处的<code>const_reverse_iterator1</code> 。</td>
</tr>
<tr>
<td><code>reverse_iterator1 rend1 ()</code></td>
<td>返回指向反转的(reversed)<code>matrix_range</code>终止处的<code>const_reverse_iterator1</code> 。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rbegin2 () const</code></td>
<td>返回指向反转的(reversed)<code>matrix_range</code>开始处的<code>const_reverse_iterator2</code> 。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rend2 () const</code></td>
<td>返回指向反转的(reversed)<code>matrix_range</code>终止处的<code>const_reverse_iterator2</code> 。</td>
</tr>
<tr>
<td><code>reverse_iterator2 rbegin2 ()</code></td>
<td>返回指向反转的(reversed)<code>matrix_range</code>开始处的<code>reverse_iterator2</code> 。</td>
</tr>
<tr>
<td><code>reverse_iterator2 rend2 ()</code></td>
<td>返回指向反转的(reversed)<code>matrix_range</code>终止处的<code>reverse_iterator2</code> 。</td>
</tr>
</tbody>
</table>
<h3>Simple Projections</h3>
<h4>说明</h4>
<p>自由函数<code>subrange</code> 支持构造矩阵的范围。</p>
<h4>原型</h4>
<pre><code>
    template&lt;class M&gt;
    matrix_range&lt;M&gt; subrange (M &amp;data,
       M::size_type start1, M::size_type stop1, M::size_type start2, M::size_type, stop2);
    template&lt;class M&gt;
    const matrix_range&lt;const M&gt; subrange (const M &amp;data,
       M::size_type start1, M::size_type stop1, M::size_type start2, M::size_type, stop2);
</code></pre>
<h3>Generic Projections</h3>
<h4>说明</h4>
<p>自由函数支持构造矩阵的范围(range)。已经存在的<code>matrix_range</code> 可以用其它的范围(range)来组成。结果范围(range)使用其它已经存在的范围(range)的<code>compose</code> 函数来计算。</p>
<h4>原型</h4>
<pre><code>
    template&lt;class M&gt;
    matrix_range&lt;M&gt; project (M &amp;data, const range &amp;r1, const range &amp;r2);
    template&lt;class M&gt;
    const matrix_range&lt;const M&gt; project (const M &amp;data, const range &amp;r1, const range &amp;r2);
    template&lt;class M&gt;
    matrix_range&lt;M&gt; project (matrix_range&lt;M&gt; &amp;data, const range &amp;r1, const range &amp;r2);
    template&lt;class M&gt;
    const matrix_range&lt;M&gt; project (const matrix_range&lt;M&gt; &amp;data, const range &amp;r1, const range &amp;r2);
</code></pre>
<h4>定义</h4>
<p>定义在头文件 matrix_proxy.hpp 中。</p>
<h4>类型要求(Type requirements)</h4>
<ul>
<li><code>M</code>  是 <a href=
"expression_concept.htm#matrix_expression">矩阵表达式(Matrix Expression)</a> 模型。</li>
</ul>
<h4>复杂度(Complexity)</h4>
<p>依赖于范围(range)大小的二次方复杂度。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/matrix.hpp&gt;
#include &lt;boost/numeric/ublas/matrix_proxy.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    matrix&lt;double&gt; m (3, 3);
    for (unsigned i = 0; i &lt; m.size1 (); ++ i)
        for (unsigned j = 0; j &lt; m.size2 (); ++ j)
            project (m, range (0, 3), range (0, 3)) (i, j) = 3 * i + j;
    std::cout &lt;&lt; project (m, range (0, 3), range (0, 3)) &lt;&lt; std::endl;
}
</pre>
<h2><a name="matrix_slice" id="matrix_slice"></a>Matrix Slice</h2>
<h4>说明</h4>
<p>模板类<code>matrix_slice&lt;M&gt;</code> 允许定位一个矩阵被切分的(sliced)的子矩阵(sub matrix)。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/matrix.hpp&gt;
#include &lt;boost/numeric/ublas/matrix_proxy.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    matrix&lt;double&gt; m (3, 3);
    matrix_slice&lt;matrix&lt;double&gt; &gt; ms (m, slice (0, 1, 3), slice (0, 1, 3));
    for (unsigned i = 0; i &lt; ms.size1 (); ++ i)
        for (unsigned j = 0; j &lt; ms.size2 (); ++ j)
            ms (i, j) = 3 * i + j;
    std::cout &lt;&lt; ms &lt;&lt; std::endl;
}
</pre>
<h4>定义</h4>
<p>定义在头文件 matrix_proxy.hpp 中。</p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>M</code></td>
<td>被引用的矩阵的类型。</td>
<td></td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="expression_concept.htm#matrix_expression">矩阵表达式(Matrix Expression)</a> 。</p>
<p>如果指定的切要范围位于矩阵的下标范围之外，那么<code>matrix_slice</code> 就不是合适的(well formed)矩阵表达式(
Matrix Expression)。也就是说，访问矩阵之外的元素是<i>未定义的</i>。</p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href=
"expression_concept.htm#vector_expression">向量表达式(Vector Expression)</a> 所施加的类型要求。</p>
<h4>公有基类(Public base classes)</h4>
<p><code>matrix_expression&lt;matrix_slice&lt;M&gt; &gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>matrix_slice (matrix_type &amp;data,<br />
const slice &amp;s1, const slice &amp;s2)</code></td>
<td>构造一个子矩阵。</td>
</tr>
<tr>
<td><code>size_type size1 () const</code></td>
<td>返回行数。</td>
</tr>
<tr>
<td><code>size_type size2 () const</code></td>
<td>返回列数。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i, size_type j)
const</code></td>
<td>返回第<code>i</code>-th行第<code>j</code>-th列的元素值。</td>
</tr>
<tr>
<td><code>reference operator () (size_type i, size_type
j)</code></td>
<td>返回第<code>i</code>-th行第<code>j</code>-th列的元素的引用。</td>
</tr>
<tr>
<td><code>matrix_slice &amp;operator = (const matrix_slice
&amp;ms)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>matrix_slice &amp;assign_temporary (matrix_slice
&amp;ms)</code></td>
<td>赋值给一个临时变量。可能会改变矩阵分割<code>ms</code> .</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_slice &amp;operator = (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>扩展赋值运算符。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_slice &amp;assign (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个矩阵表达式赋给一个子矩阵。左边和右边的赋值应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_slice &amp;operator += (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个矩阵表达式增加到一个子矩阵中。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_slice &amp;plus_assign (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个矩阵增加到一个子矩阵中。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_slice &amp;operator -= (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。从一个子矩阵中减去一个向量。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
matrix_slice &amp;minus_assign (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>从一个子矩阵减去一个矩阵。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
matrix_slice &amp;operator *= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将子矩阵乘以一个标量。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
matrix_slice &amp;operator /= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个子矩阵除以一个标量。</td>
</tr>
<tr>
<td><code>void swap (matrix_slice &amp;ms)</code></td>
<td>Swaps the contents of the sub matrices.</td>
</tr>
<tr>
<td><code>const_iterator1 begin1 () const</code></td>
<td>返回指向<code>matrix_slice</code>开始处的<code>const_iterator1</code> 。</td>
</tr>
<tr>
<td><code>const_iterator1 end1 () const</code></td>
<td>返回指向<code>matrix_slice</code>终止处的<code>const_iterator1</code> 。</td>
</tr>
<tr>
<td><code>iterator1 begin1 ()</code></td>
<td>返回指向<code>matrix_slice</code>开始处的<code>iterator1</code> 。</td>
</tr>
<tr>
<td><code>iterator1 end1 ()</code></td>
<td>返回指向<code>matrix_slice</code>终止处的<code>iterator1</code> 。</td>
</tr>
<tr>
<td><code>const_iterator2 begin2 () const</code></td>
<td>返回指向<code>matrix_slice</code>开始处的<code>const_iterator2</code> 。</td>
</tr>
<tr>
<td><code>const_iterator2 end2 () const</code></td>
<td>返回指向<code>matrix_slice</code>终止处的<code>const_iterator2</code> 。</td>
</tr>
<tr>
<td><code>iterator2 begin2 ()</code></td>
<td>返回指向<code>matrix_slice</code>开始处的<code>iterator2</code> 。</td>
</tr>
<tr>
<td><code>iterator2 end2 ()</code></td>
<td>返回指向<code>matrix_slice</code>终止处的<code>iterator2</code> 。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rbegin1 () const</code></td>
<td>返回指向反转的(reversed)<code>matrix_slice</code>开始处的<code>const_reverse_iterator1</code> 。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rend1 () const</code></td>
<td>返回指向反转的(reversed)<code>matrix_slice</code>终止处的<code>const_reverse_iterator1</code> 。</td>
</tr>
<tr>
<td><code>reverse_iterator1 rbegin1 ()</code></td>
<td>返回指向反转的(reversed)<code>matrix_slice</code>开始处的<code>reverse_iterator1</code> 。</td>
</tr>
<tr>
<td><code>reverse_iterator1 rend1 ()</code></td>
<td>返回指向反转的(reversed)<code>matrix_slice</code>终止处的<code>reverse_iterator1</code> 。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rbegin2 () const</code></td>
<td>返回指向反转的(reversed)<code>matrix_slice</code>开始处的<code>const_reverse_iterator2</code> 。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rend2 () const</code></td>
<td>返回指向反转的(reversed)<code>matrix_slice</code>终止处的<code>const_reverse_iterator2</code> 。</td>
</tr>
<tr>
<td><code>reverse_iterator2 rbegin2 ()</code></td>
<td>返回指向反转的(reversed)<code>matrix_slice</code>开始处的<code>reverse_iterator2</code> 。</td>
</tr>
<tr>
<td><code>reverse_iterator2 rend2 ()</code></td>
<td>返回指向反转的(reversed)<code>matrix_slice</code>终止处的<code>reverse_iterator2</code> 。</td>
</tr>
</tbody>
</table>
<h3>Simple Projections</h3>
<h4>说明</h4>
<p>自由函数<code>subslice</code> 支持构造矩阵的切分(slice)。</p>
<h4>原型</h4>
<pre><code>
    template&lt;class M&gt;
    matrix_slice&lt;M&gt; subslice (M &amp;data,
       M::size_type start1, M::difference_type stride1, M::size_type size1,
       M::size_type start2, M::difference_type stride2, M::size_type size2);
    template&lt;class M&gt;
    const matrix_slice&lt;const M&gt; subslice (const M &amp;data,
       M::size_type start1, M::difference_type stride1, M::size_type size1,
       M::size_type start2, M::difference_type stride2, M::size_type size2);
</code></pre>
<h3>Generic Projections</h3>
<h4>说明</h4>
<p>自由函数支持构造矩阵的切分(slice)。已经存在的<code>matrix_range</code> 可以用其它的范围(range)或切分(slice)来组成。结果切分(range)使用其它已经存在的切分(slice)的<code>compose</code> 函数来计算。</p>
<h4>原型</h4>
<pre><code>
    template&lt;class M&gt;
    matrix_slice&lt;M&gt; project (M &amp;data, const slice &amp;s1, const slice &amp;s2);
    template&lt;class M&gt;
    const matrix_slice&lt;const M&gt; project (const M &amp;data, const slice &amp;s1, const slice &amp;s2);
    template&lt;class M&gt;
    matrix_slice&lt;M&gt; project (matrix_slice&lt;M&gt; &amp;data, const range &amp;r1, const range &amp;r2);
    template&lt;class M&gt;
    const matrix_slice&lt;M&gt; project (const matrix_slice&lt;M&gt; &amp;data, const range &amp;r1, const range &amp;r2);
    template&lt;class M&gt;
    matrix_slice&lt;M&gt; project (matrix_slice&lt;M&gt; &amp;data, const slice &amp;s1, const slice &amp;s2);
    template&lt;class M&gt;
    const matrix_slice&lt;M&gt; project (const matrix_slice&lt;M&gt; &amp;data, const slice &amp;s1, const slice &amp;s2);
</code></pre>
<h4>定义</h4>
<p>定义在头文件 matrix_proxy.hpp 中。</p>
<h4>类型要求(Type requirements)</h4>
<ul>
<li><code>M</code> 是 <a href=
"expression_concept.htm#matrix_expression">矩阵表达式(Matrix Expression)</a> 模型。</li>
</ul>
<h4>复杂度(Complexity)</h4>
<p>依赖于切分(slice)大小的二次方的复杂度。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/matrix.hpp&gt;
#include &lt;boost/numeric/ublas/matrix_proxy.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    matrix&lt;double&gt; m (3, 3);
    for (unsigned i = 0; i &lt; m.size1 (); ++ i)
        for (unsigned j = 0; j &lt; m.size2 (); ++ j)
            project (m, slice (0, 1, 3), slice (0, 1, 3)) (i, j) = 3 * i + j;
    std::cout &lt;&lt; project (m, slice (0, 1, 3), slice (0, 1, 3)) &lt;&lt; std::endl;
}
</pre>
<hr />
<p>Copyright (&copy;) 2000-2002 Joerg Walter, Mathias Koch<br />
   Use, modification and distribution are subject to the
   Boost Software License, Version 1.0.
   (See accompanying file LICENSE_1_0.txt
   or copy at <a href="http://www.boost.org/LICENSE_1_0.txt">
      http://www.boost.org/LICENSE_1_0.txt
   </a>).
</p>
</body>
</html>
