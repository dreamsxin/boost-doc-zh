<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="generator" content=
"HTML Tidy for Linux/x86 (vers 1st March 2004), see www.w3.org" />
<meta http-equiv="Content-Type" content=
"text/html; charset=UTF-8" />
<link href="ublas.css" type="text/css" />
<title>Symmetric Matrix</title>
</head>
<body>
<h1><img src="../../../../boost.png" align="middle" />
对称矩阵(Symmetric Matrix)</h1>
<h2><a name="symmetric_matrix" id="symmetric_matrix"></a>对称矩阵(Symmetric Matrix)</h2>
<h4>说明</h4>
<p>模板类<code>symmetric_matrix&lt;T, F1, F2,
A&gt;</code> 是对称矩阵的基容器适配器(base container adaptor)。对于一个<em>(n x n</em> )-维对称矩阵且<em>0
&lt;= i &lt; n</em>, <em>0 &lt;= j &lt; n</em> ，满足<em>s</em><sub><em>i, j</em></sub> <em>= s</em><sub><em>j,
i</em></sub>。对称矩阵的存储是packed。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/symmetric.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    symmetric_matrix&lt;double, lower&gt; ml (3, 3);
    for (unsigned i = 0; i &lt; ml.size1 (); ++ i)
        for (unsigned j = 0; j &lt;= i; ++ j)
            ml (i, j) = 3 * i + j;
    std::cout &lt;&lt; ml &lt;&lt; std::endl;
    symmetric_matrix&lt;double, upper&gt; mu (3, 3);
    for (unsigned i = 0; i &lt; mu.size1 (); ++ i)
        for (unsigned j = i; j &lt; mu.size2 (); ++ j)
            mu (i, j) = 3 * i + j;
    std::cout &lt;&lt; mu &lt;&lt; std::endl;
}
</pre>
<h4>定义</h4>
<p>定义在头文件 symmetric.hpp 中。 </p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>T</code></td>
<td>存储在矩阵中的对象的类型。</td>
<td></td>
</tr>
<tr>
<td><code>F1</code></td>
<td>描述对称矩阵的类型的函数对象。<a name=
"#symmetric_matrix_1" id="#symmetric_matrix_1">[1]</a></td>
<td><code>lower</code></td>
</tr>
<tr>
<td><code>F2</code></td>
<td>描述存储组织的函数对象。<a name=
"#symmetric_matrix_2" id="#symmetric_matrix_2">[2]</a></td>
<td><code>row_major</code></td>
</tr>
<tr>
<td><code>A</code></td>
<td>适配数组(adapted array)的类型。<a name="#symmetric_matrix_3"
id="#symmetric_matrix_3">[3]</a></td>
<td><code>unbounded_array&lt;T&gt;</code></td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="container_concept.htm#matrix">矩阵(Matrix)</a> 。 </p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href=
"container_concept.htm#matrix">矩阵(Matrix)</a> 所施加的类型要求。</p>
<h4>公有基类(Public base classes)</h4>
<p><code>matrix_container&lt;symmetric_matrix&lt;T, F1, F2, A&gt;
&gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>symmetric_matrix (size_type size)</code></td>
<td>分配一个包含<code>size</code>行<code>size</code>个元素的未初始化的<code>symmetric_matrix</code>。</td>
</tr>
<tr>
<td><code>symmetric_matrix (const symmetric_matrix
&amp;m)</code></td>
<td>拷贝构造函数</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
symmetric_matrix (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>扩展拷贝构造函数。</td>
</tr>
<tr>
<td><code>void resize (size_type size, bool preserve =
true)</code></td>
<td>重新分配一个包含<code>size</code>行<code>size</code>个元素的<code>symmetric_matrix</code>。
如果指定，<code>symmetric_matrix</code>中已经存在的元素将会被保留。</td>
</tr>
<tr>
<td><code>size_type size1 () const</code></td>
<td>返回行数。</td>
</tr>
<tr>
<td><code>size_type size2 () const</code></td>
<td>返回列数。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i, size_type j)
const</code></td>
<td>返回第<code>i</code>行第<code>j</code>列的元素的<code>const</code>引用。</td>
</tr>
<tr>
<td><code>reference operator () (size_type i, size_type
j)</code></td>
<td>返回第<code>i</code>行第<code>j</code>列的元素的引用。</td>
</tr>
<tr>
<td><code>symmetric_matrix &amp;operator = (const symmetric_matrix
&amp;m)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>symmetric_matrix &amp;assign_temporary (symmetric_matrix
&amp;m)</code></td>
<td>赋值给一个临时变量。可能会改变对称矩阵
<code>m</code>。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
symmetric_matrix &amp;operator = (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>扩展的赋值运算符。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
symmetric_matrix &amp;assign (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个矩阵表达式赋给一个对称矩阵(symmetric matrix)。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
symmetric_matrix &amp;operator += (const
matrix_expression&lt;AE&gt; &amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个矩阵表达式加到一个对称矩阵中。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
symmetric_matrix &amp;plus_assign (const
matrix_expression&lt;AE&gt; &amp;ae)</code></td>
<td>将一个矩阵表达式加到一个对称矩阵中。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
symmetric_matrix &amp;operator -= (const
matrix_expression&lt;AE&gt; &amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。从一个对称矩阵中减去一个矩阵表达式。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
symmetric_matrix &amp;minus_assign (const
matrix_expression&lt;AE&gt; &amp;ae)</code></td>
<td>从一个对称矩阵中减去一个矩阵表达式。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
symmetric_matrix &amp;operator *= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。 将一个对称矩阵乘以一个标量。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
symmetric_matrix &amp;operator /= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个对称矩阵除以一个标量。</td>
</tr>
<tr>
<td><code>void swap (symmetric_matrix &amp;m)</code></td>
<td>交互对称矩阵的内容。</td>
</tr>
<tr>
<td><code>void insert (size_type i, size_type j, const_reference
t)</code></td>
<td>将<code>t</code>插入到第<code>i</code>-th行第
<code>j</code>-th列个元素。</td>
</tr>
<tr>
<td><code>void erase (size_type i, size_type j)</code></td>
<td>删除第<code>i</code>-th行第
<code>j</code>-th列个元素。</td>
</tr>
<tr>
<td><code>void clear ()</code></td>
<td>清除矩阵。</td>
</tr>
<tr>
<td><code>const_iterator1 begin1 () const</code></td>
<td>返回指向<code>symmetric_matrix</code>开始处的<code>const_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_iterator1 end1 () const</code></td>
<td>返回指向<code>symmetric_matrix</code>终止处的<code>const_iterator1</code>。</td>
</tr>
<tr>
<td><code>iterator1 begin1 ()</code></td>
<td>返回指向<code>symmetric_matrix</code>开始处的<code>iterator1</code>。</td>
</tr>
<tr>
<td><code>iterator1 end1 ()</code></td>
<td>返回指向<code>symmetric_matrix</code>终止处的<code>iterator1</code>。</td>
</tr>
<tr>
<td><code>const_iterator2 begin2 () const</code></td>
<td>返回指向<code>symmetric_matrix</code>开始处的<code>const_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_iterator2 end2 () const</code></td>
<td>返回指向<code>symmetric_matrix</code>终止处的<code>const_iterator2</code>。</td>
</tr>
<tr>
<td><code>iterator2 begin2 ()</code></td>
<td>返回指向<code>symmetric_matrix</code>开始处的<code>iterator2</code>。</td>
</tr>
<tr>
<td><code>iterator2 end2 ()</code></td>
<td>返回指向<code>symmetric_matrix</code>终止处的<code>iterator2</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rbegin1 () const</code></td>
<td>返回指向反转的(reversed)<code>symmetric_matrix</code>开始处的<code>const_reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rend1 () const</code></td>
<td>返回指向反转的(reversed)<code>symmetric_matrix</code>终止处的<code>const_reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator1 rbegin1 ()</code></td>
<td>返回指向反转的(reversed)<code>symmetric_matrix</code>开始处的<code>reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator1 rend1 ()</code></td>
<td>返回指向反转的(reversed)<code>symmetric_matrix</code>终止处的<code>reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rbegin2 () const</code></td>
<td>返回指向反转的(reversed)<code>symmetric_matrix</code>开始处的<code>const_reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rend2 () const</code></td>
<td>返回指向反转的(reversed)<code>symmetric_matrix</code>终止处的<code>const_reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator2 rbegin2 ()</code></td>
<td>返回指向反转的(reversed)<code>symmetric_matrix</code>开始处的<code>reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator2 rend2 ()</code></td>
<td>返回指向反转的(reversed)<code>symmetric_matrix</code>终止处的<code>reverse_iterator2</code>。</td>
</tr>
</tbody>
</table>
<h4>注意</h4>
<p><a name="symmetric_matrix_1" id="symmetric_matrix_1">[1]</a>
对于对称矩阵所支持的类型参数为<code>lower</code> 和 <code>upper</code>。</p>
<p><a name="symmetric_matrix_2" id="symmetric_matrix_2">[2]</a>
对于存储组织所支持的参数是<code>row_major</code> 和 <code>column_major</code>。</p>
<p><a name="symmetric_matrix_3" id="symmetric_matrix_3">[3]</a>
对于适配数组(adapted array)所支持的参数是<code>unbounded_array&lt;T&gt;</code> ,
<code>bounded_array&lt;T&gt;</code> 和 <code>std::vector&lt;T&gt;</code> 。 </p>
<h2><a name="symmetric_adaptor" id="symmetric_adaptor"></a>Symmetric Adaptor</h2>
<h4>说明</h4>
<p>模板类<code>symmetric_adaptor&lt;M, F&gt;</code>
是其它容器的对称矩阵适配器(symmetric matrix adaptor)。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/symmetric.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    matrix&lt;double&gt; m (3, 3);
    symmetric_adaptor&lt;matrix&lt;double&gt;, lower&gt; sal (m);
    for (unsigned i = 0; i &lt; sal.size1 (); ++ i)
        for (unsigned j = 0; j &lt;= i; ++ j)
            sal (i, j) = 3 * i + j;
    std::cout &lt;&lt; sal &lt;&lt; std::endl;
    symmetric_adaptor&lt;matrix&lt;double&gt;, upper&gt; sau (m);
    for (unsigned i = 0; i &lt; sau.size1 (); ++ i)
        for (unsigned j = i; j &lt; sau.size2 (); ++ j)
            sau (i, j) = 3 * i + j;
    std::cout &lt;&lt; sau &lt;&lt; std::endl;
}
</pre>
<h4>定义</h4>
<p>定义在头文件 symmetric.hpp 中。</p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>M</code></td>
<td>适配矩阵(adapted matrix)的类型。</td>
<td></td>
</tr>
<tr>
<td><code>F</code></td>
<td>描述对称适配器(symmetric adaptor)的函数对象。<a href=
"#symmetric_adaptor_1">[1]</a></td>
<td><code>lower</code></td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="expression_concept.htm#matrix_expression">矩阵表达式(Matrix Expression)</a> 。
</p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href=
"expression_concept.htm#matrix_expression">矩阵表达式(Matrix Expression)</a> 所施加的类型要求。 </p>
<h4>公有基类(Public base classes)</h4>
<p><code>matrix_expression&lt;symmetric_adaptor&lt;M, F&gt;
&gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>symmetric_adaptor ()</code></td>
<td>构造一个包含0行0个元素的<code>symmetric_adaptor</code>
。</td>
</tr>
<tr>
<td><code>symmetric_adaptor (matrix_type &amp;data)</code></td>
<td>构造一个矩阵的<code>symmetric_adaptor</code>。</td>
</tr>
<tr>
<td><code>symmetric_adaptor (const symmetric_adaptor
&amp;m)</code></td>
<td>拷贝构造函数。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
symmetric_adaptor (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>扩展拷贝构造函数。</td>
</tr>
<tr>
<td><code>size_type size1 () const</code></td>
<td>返回行数。</td>
</tr>
<tr>
<td><code>size_type size2 () const</code></td>
<td>返回列数。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i, size_type j)
const</code></td>
<td>返回第<code>i</code>-th行第<code>j</code>-th个元素的<code>const</code>引用。</td>
</tr>
<tr>
<td><code>reference operator () (size_type i, size_type
j)</code></td>
<td>返回第<code>i</code>-th行第<code>j</code>-th个元素的引用。</td>
</tr>
<tr>
<td><code>symmetric_adaptor &amp;operator = (const
symmetric_adaptor &amp;m)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>symmetric_adaptor &amp;assign_temporary
(symmetric_adaptor &amp;m)</code></td>
<td>赋值给一个临时变量。可能会改变对称适配器(symmetric adaptor)
<code>m</code>。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
symmetric_adaptor &amp;operator = (const
matrix_expression&lt;AE&gt; &amp;ae)</code></td>
<td>扩展赋值运算符。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
symmetric_adaptor &amp;assign (const matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个矩阵表达式赋给一个对称适配器(symmetric adaptor)。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
symmetric_adaptor &amp;operator += (const
matrix_expression&lt;AE&gt; &amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个矩阵表达式加到一个对称适配器(symmetric adaptor)中。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
symmetric_adaptor &amp;plus_assign (const
matrix_expression&lt;AE&gt; &amp;ae)</code></td>
<td>将一个矩阵表达式加到一个对称适配器(symmetric adaptor)中。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
symmetric_adaptor &amp;operator -= (const
matrix_expression&lt;AE&gt; &amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。从一个对称适配器(symmetric adaptor)中减去一个矩阵表达式。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
symmetric_adaptor &amp;minus_assign (const
matrix_expression&lt;AE&gt; &amp;ae)</code></td>
<td>从一个对称适配器(symmetric adaptor)中减去一个矩阵表达式。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
symmetric_adaptor &amp;operator *= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。 将一个对称适配器(symmetric adaptor)乘以一个标量。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
symmetric_adaptor &amp;operator /= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个对称适配器(symmetric adaptor)除以一个标量。</td>
</tr>
<tr>
<td><code>void swap (symmetric_adaptor &amp;m)</code></td>
<td>交换对称适配器(symmetric adaptor)的内容。</td>
</tr>
<tr>
<td><code>const_iterator1 begin1 () const</code></td>
<td>返回指向<code>symmetric_adaptor</code>开始处的<code>const_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_iterator1 end1 () const</code></td>
<td>返回指向<code>symmetric_adaptor</code>终止处的<code>const_iterator1</code>。</td>
</tr>
<tr>
<td><code>iterator1 begin1 ()</code></td>
<td>返回指向<code>symmetric_adaptor</code>开始处的<code>iterator1</code>。</td>
</tr>
<tr>
<td><code>iterator1 end1 ()</code></td>
<td>返回指向<code>symmetric_adaptor</code>终止处的<code>iterator1</code>。</td>
</tr>
<tr>
<td><code>const_iterator2 begin2 () const</code></td>
<td>返回指向<code>symmetric_adaptor</code>开始处的<code>const_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_iterator2 end2 () const</code></td>
<td>返回指向<code>symmetric_adaptor</code>终止处的<code>const_iterator2</code>。</td>
</tr>
<tr>
<td><code>iterator2 begin2 ()</code></td>
<td>返回指向<code>symmetric_adaptor</code>开始处的<code>iterator2</code>。</td>
</tr>
<tr>
<td><code>iterator2 end2 ()</code></td>
<td>返回指向<code>symmetric_adaptor</code>终止处的<code>iterator2</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rbegin1 () const</code></td>
<td>返回指向反转的(reversed)<code>symmetric_adaptor</code>开始处的<code>const_reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator1 rend1 () const</code></td>
<td>返回指向反转的(reversed)<code>symmetric_adaptor</code>终止处的<code>const_reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator1 rbegin1 ()</code></td>
<td>返回指向反转的(reversed)<code>symmetric_adaptor</code>开始处的<code>reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator1 rend1 ()</code></td>
<td>返回指向反转的(reversed)<code>symmetric_adaptor</code>终止处的<code>reverse_iterator1</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rbegin2 () const</code></td>
<td>返回指向反转的(reversed)<code>symmetric_adaptor</code>开始处的<code>const_reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator2 rend2 () const</code></td>
<td>返回指向反转的(reversed)<code>symmetric_adaptor</code>终止处的<code>const_reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator2 rbegin2 ()</code></td>
<td>返回指向反转的(reversed)<code>symmetric_adaptor</code>开始处的<code>reverse_iterator2</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator2 rend2 ()</code></td>
<td>返回指向反转的(reversed)<code>symmetric_adaptor</code>终止处的<code>reverse_iterator2</code>。</td>
</tr>
</tbody>
</table>
<h4>Notes</h4>
<p><a name="symmetric_adaptor_1" id="symmetric_adaptor_1">[1]</a>
对于对称适配器(symmetric adaptor)所支持的参数是<code>lower</code> 和 <code>upper</code>。</p>
<hr />
<p>Copyright (&copy;) 2000-2002 Joerg Walter, Mathias Koch<br />
   Use, modification and distribution are subject to the
   Boost Software License, Version 1.0.
   (See accompanying file LICENSE_1_0.txt
   or copy at <a href="http://www.boost.org/LICENSE_1_0.txt">
      http://www.boost.org/LICENSE_1_0.txt
   </a>).
</p>
</body>
</html>
