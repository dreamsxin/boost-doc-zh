<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="generator" content=
"HTML Tidy for Linux/x86 (vers 1st March 2004), see www.w3.org" />
<meta name="GENERATOR" content="Quanta Plus" />
<link href="ublas.css" type="text/css" />
<title>Types Overview</title>
</head>
<body>
<h1><img src="../../../../boost.png" align="middle" />
矩阵和向量类型概览</h1>

<dl>
<dt>内容：</dt>
<dd><a href="#vectors">向量(Vectors)</a></dd>
<dd><a href="#vector_proxies">向量代理(Vector Proxies)</a></dd>
<dd><a href="#matrices">矩阵(Matrices)</a></dd>
<dd><a href="#matrix_proxies">矩阵代理(Matrix Proxies)</a></dd>
<dd><a href="#storage_layout">特殊存储布局(Special Storage Layouts)</a></dd>
</dl>


<h3>记法(Notation):</h3>

<table style="border: none;" summary="notation">
<tr><td><code>T</code></td> 
<td>是数据类型。 对于一般的线性代数运算这个数据类型是实数类型。例如， <code>double</code>, ...</td></tr>
<tr><td><code>F</code></td> 
<td>是orientation type (函数对象), 可以是
<code>row_major</code> 或 <code>column_major</code></td></tr>
<tr><td><code>A, IA, TA</code></td> <td>是数级存储类型，例如，<code>std::vector,
bounded_array, unbounded_array, ...</code></td></tr>
<tr><td><code>TRI</code></td> 
<td>triangular functor: <code>lower,
unit_lower, strict_lower, upper, unit_upper,
strict_upper</code></td></tr>
<tr><td><code>M, N</code></td> 
<td>是无符号整数大小 
(<code>std::size_t</code>)</td></tr>
<tr><td><code>IB</code></td> 
<td>是索引基(index base)
(<code>std::size_t</code>)</td></tr>
<tr><td><code>VEC</code></td> 
<td>是任意的向量类型(vector type)</td></tr>
<tr><td><code>MAT</code> </td>
<td>是任意矩阵类型(matrix type)</td></tr>
<tr><td><code>[...]</code></td> 
<td>表示优化的参数(optional arguments) - 对于更多的细节参看 "存储布局(storage layout)"。</td></tr>
</table>

<h2><a name="vectors">向量(Vectors)</a></h2>
<table border="1" summary="vector types">
<thead>
<tr>
<th width="30%">定义</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>vector&lt;T [, A]&gt;<br />&nbsp;&nbsp; v(size);</code></td>
<td>一个可变以小的<code>T</code>类型的密集矩阵(dense matrix)。
可以指定存储类型<code>A</code>，缺省为<code>unbounded_array</code>。
元素由<code>A</code>构造, 不需要初始化自身的值。</td>

</tr>
<tr>
<td><code>bounded_vector&lt;T, N&gt;<br />&nbsp;&nbsp; v;</code></td>
<td>一个可变大小的<code>T</code>类型的密集向量(dense vector)，但最大大小为
<code>N</code>。缺省构造函数使用大小<code>N</code>来生成<code>v</code>
。
元素由存储类型<code>bounded_array</code>构造，不需要初始化自身的值。</td>
</tr>
<tr>
<td><code>c_vector&lt;T, M&gt;<br />&nbsp;&nbsp; v(size);</code></td>
<td>一个给定大小的<code>T</code>类型的密集向量。
数据存储为通常的C++ 数组<code>T
data_[M]</code>。</td>
</tr>
<tr>
<td><code>zero_vector&lt;T&gt;<br />&nbsp;&nbsp; v(size);</code></td>
<td>给定大小的<code>T</code>类型的零向量。</td>
</tr>
<tr>
<td><code>unit_vector&lt;T&gt;<br />&nbsp;&nbsp; v(size,&nbsp;index);</code></td>
<td>给定大小的<code>T</code>类型的单位向量(unit vector)。
这个向量是0而不是一个单一的指定元素。
<br/><code>index</code> 应当小于 <code>size</code>。</td>
</tr>
<tr>
<td><code>mapped_vector&lt;T [, S]&gt;<br />&nbsp;&nbsp; v(size);</code></td>
<td>可变大小的<code>T</code>类型的稀疏向量(sparse vector)。
存储类型<code>S</code>可以是 <code>std::map&lt;size_t,
T&gt;</code> 或 <code>map_array&lt;size_t, T&gt;</code>。</td>
</tr>
<tr>
<td><code>compressed_vector&lt;T [,IB, IA, TA]&gt;<br />&nbsp;&nbsp; v(size);</code></td>
<td>可变大小的<code>T</code>类型的压缩向量(compressed vector)。
非零值作为两个单独的数组存储 - 一个索引数组和一个值数组。索引数组是有序的并且对于每个索引至多有一个entry 。</td>
</tr>
<tr>
<td><code>coordinate_vector&lt;T [,IB, IA, TA]&gt;<br />&nbsp;&nbsp; v(size);</code></td>
<td>可变大小的<code>T</code>类型的稀疏矩阵(sparse matrix)。
非零值作为两个单独的数组存储 - 一个索引数组和一个值数组。对于每个向量每个有多个entries，这些数组是无序的。如果对于相同的
索引有多个值，这些值的和是一个实数值。</td>
</tr>
</tbody>
</table>
<p><em>注意:</em> 缺省类型定义在<code>boost/numeric/ublas/fwd.hpp</code>。</p>

<h2><a name="vector_proxies">向量代理(Vector Proxies)</a></h2>

<table border="1" summary="vector proxies">
<thead>
<tr>
<th width="30%">定义</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>vector_range&lt;VEC&gt;<br />&nbsp;&nbsp; vr(v, range);</code></td>
<td>一个向量引用向量<code>v</code>的连续子向量，包含被范围
<code>range</code>所指定的所有元素。</td>
</tr>
<tr>
<td><code>vector_slice&lt;VEC&gt;<br />&nbsp;&nbsp; vs(v, slice);</code></td>
<td>一个向量引用向量<code>v</code>的由<code>slice</code>所指定的非连续子向量的所有元素。
</td>
</tr>
<tr>
<td><code>matrix_row&lt;MAT&gt;<br />&nbsp;&nbsp; vr(m, index);</code></td>
<td>一个向量引用矩阵<code>m</code>的行<code>index</code>-th。
</td>
</tr>
<tr>
<td><code>matrix_column&lt;MAT&gt;<br />&nbsp;&nbsp; vc(m, index);</code></td>
<td>一个向量引用矩阵<code>m</code>的列<code>index</code>-th。
</td>
</tr>
</tbody>
</table>

<h2><a name="matrices">矩阵(Matrices)</a></h2>

<table border="1" summary="matrix types">
<thead>
<tr>
<th width="30%">定义</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>matrix&lt;T [, F, A]&gt;<br />&nbsp;&nbsp; m(size1, size2);</code></td>
<td>可变大小的<code>T</code>类型的密集矩阵(dense matrix)。
可以指定存储类型<code>A</code>，缺省为<code>unbounded_array</code>。
orientation functor <code>F</code> 缺省为
<code>row_major</code>。
元素由 <code>A</code>构造, 不需要初始化自由的值。</td>
</tr>
<tr>
<td><code>bounded_matrix&lt;T, M, N [, F]&gt;<br />&nbsp;&nbsp; m;</code></td>
<td>一个可变大小的<code>T</code>类型的密集矩阵(dense matrix)。最大大小为<code>M</code>-by-<code>N</code>。
orientation functor <code>F</code>
缺省为 <code>row_major</code>。缺省构造函数使用<code>M</code>-by-<code>N</code>大小来构造<code>m</code>。
元素由存储类型 <code>bounded_array</code>来构造, 不需要初始化自身的值。</td>
</tr>
<tr>
<td><code>c_matrix&lt;T, M, N&gt;<br />&nbsp;&nbsp; m(size1, size2);</code></td>
<td>给定大小的<code>T</code>类型的密集矩阵。
数据作为通常的 C++ 数组存储:<code>T
data_[N][M]</code></td>
</tr>
<tr>
<td><code>vector_of_vector&lt;T [, F, A]&gt;<br />&nbsp;&nbsp; m(size1,
size2);</code></td>
<td>给定大小的<code>T</code>类型的密集矩阵(dense matrix)。
数据存储为向量的向量(vector of vectors)。orientation
<code>F</code> 缺省为<code>row_major</code>。存储类型<code>S</code>缺省为
<code>unbounded_array&lt;unbounded_array&lt;T&gt;&nbsp;&gt;</code></td>
</tr>
<tr>
<td><code>zero_matrix&lt;T&gt;<br />&nbsp;&nbsp; m(size1, size2);</code></td>
<td>给定大小的<code>T</code>类型的零矩阵。</td>
</tr>
<tr>
<td><code>identity_matrix&lt;T&gt;<br />&nbsp;&nbsp; m(size1, size2);</code></td>
<td>给定大小的<code>T</code>类型的identity matrix。
数值为 <code>v(i,j) = (i==j)?T(1):T()</code>。</td>
</tr>
<tr>
<td><code>scalar_matrix&lt;T&gt;<br />&nbsp;&nbsp; m(size1, size2,
value);</code></td>
<td>给定大小的<code>T</code>类型的矩阵，每个元素的值都为<code>value</code>。</td>
</tr>
<tr>
<td><code>triangular_matrix&lt;T [, TRI, F, A]&gt;<br />&nbsp;&nbsp;
m(size);</code></td>
<td>可变大小的<code>T</code>类型的三角矩阵。只有非零元素以给定的顺序<code>F</code>存储。
("triangular packed storage") 。三角矩阵类型<code>F</code>缺省为<code>lower</code>, 
orientation type <code>F</code>缺省为<code>row_major</code>。</td>
</tr>
<tr>
<td><code>banded_matrix&lt;T [, F, A]&gt;<br />&nbsp;&nbsp; m(size1, size2, n_lower,
n_upper);</code></td>
<td>可变大小的<code>T</code>类型的带头矩阵(banded matrix)， <code>n_lower</code>下对角线(sub diagonals)
和<code>n_upper</code>上对角线(super diagonals)仅有非零元素以给定顺序<code>F</code>存储。 ("packed storage")</td>
</tr>
<tr>
<td><code>symmetric_matrix&lt;T [, TRI, F, A]&gt;<br />&nbsp;&nbsp;
m(size);</code></td>
<td>可变大小的<code>T</code>类型的对称矩阵(symmetrix)。
仅有给定的三角矩阵(triangular matrix)以给定顺序<code>F</code>存储。</td>
</tr>
<tr>
<td><code>hermitian_matrix&lt;T [, TRI, F, A]&gt;<br />&nbsp;&nbsp;
m(size);</code></td>
<td>可变大小的<code>T</code>类型的埃尔米特矩阵(hermitian matrix)。
仅有给定的三角矩阵使用顺序<code>F</code>存储。</td>
</tr>
<tr>
<td><code>mapped_matrix&lt;T, [F, S]&gt;<br />&nbsp;&nbsp; m(size1, size2 [,
non_zeros]);</code></td>
<td>可变大小的<code>T</code>类型的稀疏矩阵(sparse matrix)。
存储类型<code>S</code>可以是:<code>std::map&lt;size_t,
std::map&lt;size_t, T&gt;&nbsp;&gt;</code> 或
<code>map_array&lt;size_t, map_array&lt;size_t,
T&gt;&nbsp;&gt;</code>.</td>
</tr>
<tr>
<td><code>sparse_vector_of_sparse_vector&lt;T, [F, C]&gt;<br />&nbsp;&nbsp; m(size1,
size2 [, non_zeros]);</code></td>
<td>可变大小的<code>T</code>类型的稀疏矩阵。</td>
</tr>
<tr>
<td><code>compressed_matrix&lt;T, [F, IB, IA, TA]&gt;<br />&nbsp;&nbsp; m(size1,
size2 [, non_zeros]);</code></td>
<td>可变大小的<code>T</code>类型的稀疏矩阵。
数组以 压缩的行/列存储(compressed row/column storage)。</td>
</tr>
<tr>
<td><code>coordinate_matrix&lt;T, [F, IB, IA, TA]&gt;<br />&nbsp;&nbsp; m(size1,
size2 [, non_zeros]);</code></td>
<td>可变大小的<code>T</code>类型的稀疏矩阵。
数值以3个并行数组( 3 parallel array )作为triples (i, j,
value)存储。对于第一对索引多于一个值是可能的，
实数值是所有的和。</td>
</tr>
<tr>
<td><code>generalized_vector_of_vector&lt;T, F, A&gt;<br />&nbsp;&nbsp; m(size1,
size2 [, non_zeros]);</code></td>
<td>可变大小的<code>T</code>类型的稀疏矩阵。
这些值作为一个稀疏向量(sparse vector)的向量存储。例如，
<code>generalized_vector_of_vector&lt;double, row_major,
unbounded_array&lt;coordinate_vector&lt;double&gt;&nbsp;&gt;&nbsp;&gt;</code></td>
</tr>
</tbody>
</table>
<p><em>注意:</em> 缺省类型定义在<code>boost/numeric/ublas/fwd.hpp</code>。</p>

<h2><a name="matrix_proxies">矩阵代理(Matrix Proxies)</a></h2>

<table border="1" summary="matrix proxies">
<thead>
<tr>
<th width="30%">定义</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>triangular_adaptor&lt;MAT, TRI&gt;<br />&nbsp;&nbsp; ta(m);</code></td>
<td>一个三角矩阵引用矩阵<code>m</code>的部分元素。</td>
</tr>
<tr>
<td><code>symmetric_adaptor&lt;MAT, TRI&gt;<br />&nbsp;&nbsp; sa(m);</code></td>
<td>一个对称的矩阵引用矩阵<code>m</code>的部分元素。</td>
</tr>
<tr>
<td><code>hermitian_adaptor&lt;MAT, TRI&gt;<br />&nbsp;&nbsp; ha(m);</code></td>
<td>一个埃尔米特矩阵(hermitian matrix)引用矩阵<code>m</code>的部分元素。</td>
</tr>
<tr>
<td><code>banded_adaptor&lt;MAT&gt;<br />&nbsp;&nbsp; ba(m, n_lower,
n_upper);</code></td>
<td>一个banded matrix引用矩阵<code>m</code>的部分元素。</td>
</tr>
<tr>
<td><code>matrix_range&lt;MAT, TRI&gt;<br />&nbsp;&nbsp; mr(m, range1,
range2);</code></td>
<td>一个矩阵引用矩阵<code>m</code>的子矩阵的元素。</td>
</tr>
<tr>
<td><code>matrix_slice&lt;MAT, TRI&gt;<br />&nbsp;&nbsp; ms(m, slice1,
slice2);</code></td>
<td>一个矩阵引用矩阵<code>m</code>中的非连续子矩阵。</td>
</tr>
</tbody>
</table>



<h2><a name="storage_layout">特殊存储布局(Special Storage Layouts)</a></h2>


<p>这个库支持传统的密集(dense)， packed 和 基本的稀疏向量(basic sparse
vector)和矩阵存储布局(matrix storage layouts)。下面描述了大多数通用的向量和矩阵的构造方法。</p>

<table border="1" summary="storage layouts">
<tbody>
<tr>
<th width="30%">构造</th>
<th>注释</th>
</tr>
<tr>
<td><code>vector&lt;T,<br />
&nbsp;std::vector&lt;T&gt; &gt;<br />
&nbsp;&nbsp;v (size)</code></td>
<td>一个密集向量(dense vector)，由标准的vector来进行存储。<br />
这种存储布局通常与 BLAS 相兼容的。</td>
</tr>
<tr>
<td><code>vector&lt;T,<br />
&nbsp;unbounded_array&lt;T&gt; &gt;<br />
&nbsp;&nbsp;v (size)</code></td>
<td>一个密集向量(dense vector)，由基于堆(heap-based)的数组提供存储。
<br />
存储布局通常是 BLAS 兼容的。</td>
</tr>
<tr>
<td><code>vector&lt;T,<br />
&nbsp;bounded_array&lt;T, N&gt; &gt;<br />
&nbsp;&nbsp;v (size)</code></td>
<td>一个密集向量(dense vector)，由基于栈(stack-based)的数组进行存储。<br />
这种存储通常与 BLAS 兼容。</td>
</tr>
<tr>
<td><code>mapped_vector&lt;T,<br />
&nbsp;std::map&lt;std::size_t, T&gt; &gt;<br />
&nbsp;&nbsp;v (size, non_zeros)</code></td>
<td>稀疏向量(sparse vector)，由标准的map进行存储。</td>
</tr>
<tr>
<td><code>mapped_vector&lt;T,<br />
&nbsp;map_array&lt;std::size_t, T&gt; &gt;<br />
&nbsp;&nbsp;v (size, non_zeros)</code></td>
<td>稀疏向量(sparse vector)，由映射数组(map array)进行存储。</td>
</tr>
<tr>
<td><code>matrix&lt;T,<br />
&nbsp;row_major,<br />
&nbsp;std::vector&lt;T&gt; &gt;<br />
&nbsp;&nbsp;m (size1, size2)</code></td>
<td>密集矩阵(dense matrix)，orientation 是行优先(row major)，由标准的vector进行存储。</td>
</tr>
<tr>
<td><code>matrix&lt;T,<br />
&nbsp;column_major,<br />
&nbsp;std::vector&lt;T&gt; &gt;<br />
&nbsp;&nbsp;m (size1, size2)</code></td>
<td>密集矩阵(dense matrix)，orientation 是列优先(column major)，由标准的vector存储。<br />
这种存储布局通常与 BLAS 兼容。</td>
</tr>
<tr>
<td><code>matrix&lt;T,<br />
&nbsp;row_major,<br />
&nbsp;unbounded_array&lt;T&gt; &gt;<br />
&nbsp;&nbsp;m (size1, size2)</code></td>
<td>一个密集矩阵(dense matrix)， orientation 是行优先(row major)，由基于堆(heap-based)的数组进行存储。</td>
</tr>
<tr>
<td><code>matrix&lt;T,<br />
&nbsp;column_major,<br />
&nbsp;unbounded_array&lt;T&gt; &gt;<br />
&nbsp;&nbsp;m (size1, size2)</code></td>
<td>一个密集矩阵(dense matrix)，orientation 是列优先(column major)，由基于堆(heap-based)的数组进行存储<br />
这种存储布局通常与 BLAS 兼容。</td>
</tr>
<tr>
<td><code>matrix&lt;T,<br />
&nbsp;row_major,<br />
&nbsp;bounded_array&lt;T, N1 * N2&gt; &gt;<br />
&nbsp;&nbsp;m (size1, size2)</code></td>
<td>一个密集矩阵(dense matrix)，orientation 是行优先(row major)，由基于栈(stack-based)的数组进行存储。</td>
</tr>
<tr>
<td><code>matrix&lt;T,<br />
&nbsp;column_major,<br />
&nbsp;bounded_array&lt;T, N1 * N2&gt; &gt;<br />
&nbsp;&nbsp;m (size1, size2)</code></td>
<td>一个密集矩阵(dense matrix)，orientation 是列优先(column major)，由基于栈(stack-based)的数组存储。<br />
这种存储通常与 BLAS 兼容。</td>
</tr>
<tr>
<td><code>triangular_matrix&lt;T,<br />
&nbsp;row_major, F, A&gt;<br />
&nbsp;&nbsp;m (size)</code></td>
<td>一个 packed 三角矩阵(triangular matrix)， orientation 是行优先(row major)。</td>
</tr>
<tr>
<td><code>triangular_matrix&lt;T,<br />
&nbsp;column_major, F, A&gt;<br />
&nbsp;&nbsp;m (size)</code></td>
<td>一个 packed 三角矩阵(triangular matrix)，orientation 是列优先(column major)。<br />
这种存储通常与 BLAS 兼容。</td>
</tr>
<tr>
<td><code>banded_matrix&lt;T,<br />
&nbsp;row_major, A&gt;<br />
&nbsp;&nbsp;m (size1, size2, lower, upper)</code></td>
<td>一个 packed 三角矩阵(triangular matrix)，orientation 是行优先(row major)。</td>
</tr>
<tr>
<td><code>banded_matrix&lt;T,<br />
&nbsp;column_major, A&gt;<br />
&nbsp;&nbsp;m (size1, size2, lower, upper)</code></td>
<td>一个packed 带状矩阵(banded matrix)， orientation 是列优先(column major)。<br />
这种存储通常与 BLAS 兼容。</td>
</tr>
<tr>
<td><code>symmetric_matrix&lt;T,<br />
&nbsp;row_major, F, A&gt;<br />
&nbsp;&nbsp;m (size)</code></td>
<td>一个packed 对于矩阵(symmetric matrix)，orientation 是行优先(row major)。</td>
</tr>
<tr>
<td><code>symmetric_matrix&lt;T,<br />
&nbsp;column_major, F, A&gt;<br />
&nbsp;&nbsp;m (size)</code></td>
<td>一个packed对称矩阵(symmetric matrix)，orientation 是列优先(column major)。<br />
这种存储通常与 BLAS 兼容。</td>
</tr>
<tr>
<td><code>hermitian_matrix&lt;T,<br />
&nbsp;row_major, F, A&gt;<br />
&nbsp;&nbsp;m (size)</code></td>
<td>一个packed的埃尔米特矩阵(hermitian matrix)，orientation 是行优先(row major)。</td>
</tr>
<tr>
<td><code>hermitian_matrix&lt;T,<br />
&nbsp;column_major, F, A&gt;<br />
&nbsp;&nbsp;m (size)</code></td>
<td>一个packed埃尔米特矩阵(hermitian matrix)，orientation 是列优先(column major)。<br />
这种存储通常与 BLAS 兼容。</td>
</tr>
<tr>
<td><code>mapped_matrix&lt;T,<br />
&nbsp;row_major,<br />
&nbsp;std::map&lt;std::size_t, T&gt; &gt;<br />
&nbsp;&nbsp;m (size1, size2, non_zeros)</code></td>
<td>一个稀疏矩阵(sparse matrix)，orientation 是行优先(row major)，由标准map提供存储。</td>
</tr>
<tr>
<td><code>mapped_matrix&lt;T,<br />
&nbsp;column_major,<br />
&nbsp;std::map&lt;std::size_t, T&gt; &gt;<br />
&nbsp;&nbsp;m (size1, size2, non_zeros)</code></td>
<td>一个稀疏矩阵(sparse matrix)，orientation 是列优先(column major)，由标准map提供存储。</td>
</tr>
<tr>
<td><code>mapped_matrix&lt;T,<br />
&nbsp;row_major,<br />
&nbsp;map_array&lt;std::size_t, T&gt; &gt;<br />
&nbsp;&nbsp;m (size1, size2, non_zeros)</code></td>
<td>一个稀疏矩阵(sparse matrix)，orientation 是行优先(row major)，由映射数组(map array)提供存储。</td>
</tr>
<tr>
<td><code>mapped_matrix&lt;T,<br />
&nbsp;column_major,<br />
&nbsp;map_array&lt;std::size_t, T&gt; &gt;<br />
&nbsp;&nbsp;m (size1, size2, non_zeros)</code></td>
<td>一个稀疏矩阵(sparse matrix)，orientation 是列优先(column major)，由映射数组(map array)提供存储。</td>
</tr>
<tr>
<td><code>compressed_matrix&lt;T,<br />
&nbsp;row_major&gt;<br />
&nbsp;&nbsp;m (size1, size2, non_zeros)</code></td>
<td>一个压缩矩阵(compressed matrix)，orientation 是行优先(row major)。<br />
这种存储通常与 BLAS 兼容。</td>
</tr>
<tr>
<td><code>compressed_matrix&lt;T,<br />
&nbsp;column_major&gt;<br />
&nbsp;&nbsp;m (size1, size2, non_zeros)</code></td>
<td>一个压缩矩阵(compressed matrix)，orientation 是列优先(column major)。<br />
这种存储通常与 BLAS 兼容。</td>
</tr>
<tr>
<td><code>coordinate_matrix&lt;T,<br />
&nbsp;row_major&gt;<br />
&nbsp;&nbsp;m (size1, size2, non_zeros)</code></td>
<td>一个coordinate matrix, orientation 是行优先(row major)。<br />
这种存储通常与 BLAS 兼容。</td>
</tr>
<tr>
<td><code>coordinate_matrix&lt;T,<br />
&nbsp;column_major&gt;<br />
&nbsp;&nbsp;m (size1, size2, non_zeros)</code></td>
<td>一个coordinate matrix, orientation 是列优先(column major)。<br />
这种存储通常与 BLAS 兼容。</td>
</tr>
</tbody>
</table>

<hr />
<p>Copyright (&copy;) 2000-2004 Joerg Walter, Mathias Koch, Gunter
Winkler, Michael Stevens<br />
   Use, modification and distribution are subject to the
   Boost Software License, Version 1.0.
   (See accompanying file LICENSE_1_0.txt
   or copy at <a href="http://www.boost.org/LICENSE_1_0.txt">
      http://www.boost.org/LICENSE_1_0.txt
   </a>).
</p>
</body>
</html>
