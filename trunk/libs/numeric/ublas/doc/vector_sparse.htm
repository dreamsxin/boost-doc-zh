<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="generator" content=
"HTML Tidy for Linux/x86 (vers 1st March 2004), see www.w3.org" />
<meta http-equiv="Content-Type" content=
"text/html; charset=UTF-8" />
<link href="ublas.css" type="text/css" />
<title>Sparse Vector</title>
</head>
<body>
<h1><img src="../../../../boost.png" align="middle" />
稀疏向量(Sparse Vector)</h1>
<h2><a name="mapped_vector" id="mapped_vector"></a>映射向量(Mapped Vector)</h2>
<h4>定义</h4>
<p>模板类<code>mapped_vector&lt;T, A&gt;</code> 是所有使用元素映射(element maps)的稀疏向量(sparse vectors)的基容器适配器(base container adaptor)。对于一个<em>n</em>-维 稀疏向量且<em>0 &lt;= i &lt; n</em> ，那么非零元素<em>v</em><sub><em>i</em></sub> 被映射到关联容器中的连续元素(consecutive elements)，例如，对于容器中的元素<em>k</em> = <em>v</em><sub><em>i</em></sub><sub><sub><em>1</em></sub></sub>且<em>k + 1 =
v</em><sub><em>i</em></sub><sub><sub><em>2</em></sub></sub>，那么满足<em>i</em><sub><em>1</em></sub> <em>&lt; i</em><sub><em>2</em></sub>。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/vector_sparse.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    mapped_vector&lt;double&gt; v (3, 3);
    for (unsigned i = 0; i &lt; v.size (); ++ i)
        v (i) = i;
    std::cout &lt;&lt; v &lt;&lt; std::endl;
}
</pre>
<h4>定义</h4>
<p>定义在并没有文件vector_sparse.hpp中。</p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>T</code></td>
<td>存储在映射向量(mapped vector)中的对象的类型。</td>
<td></td>
</tr>
<tr>
<td><code>A</code></td>
<td>适配数组(adapted array)的类型。 <a href=
"#mapped_vector_1">[1]</a></td>
<td><code>map_std&lt;std::size_t, T&gt;</code></td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="container_concept.htm#vector">向量(Vector)</a> 。 </p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href=
"container_concept.htm#vector">向量(Vector)</a>所施加的类型要求。</p>
<h4>公有基类(Public base classes)</h4>
<p><code>vector_container&lt;mapped_vector&lt;T, A&gt;
&gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>mapped_vector ()</code></td>
<td>分配一个存储0个元素的<code>mapped_vector</code>
。</td>
</tr>
<tr>
<td><code>mapped_vector (size_type size, size_type
non_zeros = 0)</code></td>
<td>分配一个最多存储<code>size</code>个元素的<code>mapped_vector</code>
。</td>
</tr>
<tr>
<td><code>mapped_vector (const mapped_vector &amp;v)</code></td>
<td>拷贝构造函数。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
mapped_vector (size_type non_zeros, const
vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>扩展拷贝构造函数。</td>
</tr>
<tr>
<td><code>void resize (size_type size, bool
preserve = true)</code></td>
<td>重新分配一个存储最多<code>size</code>个元素的<code>mapped_vector</code>。如果被指定，那么
<code>mapped_vector</code>中已经存在的元素将会被保留。</td>
</tr>
<tr>
<td><code>size_type size () const</code></td>
<td>返回<code>mapped_vector</code>的大小。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i)
const</code></td>
<td>返回第<code>i</code>-th个元素的常引用。</td>
</tr>
<tr>
<td><code>reference operator () (size_type i)</code></td>
<td>返回第<code>i</code>-th个元素的引用。</td>
</tr>
<tr>
<td><code>const_reference operator [] (size_type i)
const</code></td>
<td>返回第<code>i</code>-th个元素的常引用。</td>
</tr>
<tr>
<td><code>reference operator [] (size_type i)</code></td>
<td>返回第<code>i</code>-th个元素的引用。</td>
</tr>
<tr>
<td><code>mapped_vector &amp;operator = (const mapped_vector
&amp;v)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>mapped_vector &amp;assign_temporary (mapped_vector
&amp;v)</code></td>
<td>赋值给一个临时变量。可能会改变映射向量(mapped vector)
<code>v</code> 。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
mapped_vector &amp;operator = (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>扩展赋值运算符。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
mapped_vector &amp;assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个向量表达式赋值给一个(mapped vector)。赋值的左边和右边应当是相互独立的。
</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
mapped_vector &amp;operator += (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个向量表达式加到
映射向量(mapped vector)。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
mapped_vector &amp;plus_assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个向量表达式加到一个映射向量(mapped vector)。赋值的左边和右边应当是相互独立的。
</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
mapped_vector &amp;operator -= (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。从映射向量(mapped vector)中减去向量表达式。
</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
mapped_vector &amp;minus_assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>从一个映射向量(mapped vector)中减去一个向量表达式。 赋值的左边和右边应当是相互独立的。
</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
mapped_vector &amp;operator *= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个映射向量(mapped vector)
乘以一个标量。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
mapped_vector &amp;operator /= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符(computed assignment operator)。将一个映射向量(mapped vector)
除以一个标量。</td>
</tr>
<tr>
<td><code>void swap (mapped_vector &amp;v)</code></td>
<td>交换映射向量(mapped vectors)。</td>
</tr>
<tr>
<td><code>true_reference insert_element (size_type i, const_reference t)</code></td>
<td>在第<code>i</code>-th插入<code>t</code>。不允许重复元素。</td>
</tr>
<tr>
<td><code>void erase_element (size_type i)</code></td>
<td>删除第<code>i</code>-th个元素。</td>
</tr>
<tr>
<td><code>void clear ()</code></td>
<td>清除映射向量(mapped vector)。</td>
</tr>
<tr>
<td><code>const_iterator begin () const</code></td>
<td>返回一个指向<code>mapped_vector</code>开始处的<code>const_iterator</code>。
</td>
</tr>
<tr>
<td><code>const_iterator end () const</code></td>
<td>返回一个指向<code>mapped_vector</code>终止处的<code>const_iterator</code>。</td>
</tr>
<tr>
<td><code>iterator begin ()</code></td>
<td>返回一个指向<code>mapped_vector</code>开始处的<code>iterator</code>。</td>
</tr>
<tr>
<td><code>iterator end ()</code></td>
<td>返回一个指向<code>mapped_vector</code>终止处的<code>citerator</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rbegin () const</code></td>
<td>返回一个指向反转(reversed)<code>mapped_vector</code>开始处的<code>const_reverse_iterator</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rend () const</code></td>
<td>返回一个指向反转(reversed)<code>mapped_vector</code>终止处的<code>const_reverse_iterator</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator rbegin ()</code></td>
<td>返回一个指向反转(reversed)<code>mapped_vector</code>开始处的<code>reverse_iterator</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator rend ()</code></td>
<td>返回一个指向反转(reversed)<code>mapped_vector</code>终止处的<code>reverse_iterator</code>。</td>
</tr>
</tbody>
</table>
<h4>Notes</h4>
<p><a name="mapped_vector_1" id="mapped_vector_1">[1]</a>  对于适配数组(adapted array)所支持的参数是<code>map_array&lt;std::size_t, T&gt;</code> 和 <code>map_std&lt;std::size_t, T&gt;</code>。后者等价于<code>std::map&lt;std::size_t, T&gt;</code>。</p>
<h2><a name="compressed_vector" id="compressed_vector"></a>Compressed Vector</h2>
<h4>说明</h4>
<p>模板类<code>compressed_vector&lt;T, IB, IA,
TA&gt;</code> 是所有的压缩向量(compressed vectors)的基容器适配器(base container adaptor)。对于一个<em>n</em>-维压缩向量且<em>0 &lt;= i
&lt; n</em> ，那么非零元素<em>v</em><sub><em>i</em></sub>
被映射到索引和值容器中的连续元素(consecutive elements)，例如对于容器中的元素<em>k</em> =
<em>v</em><sub><em>i</em></sub><sub><sub><em>1</em></sub></sub>且<em>k + 1 =
v</em><sub><em>i</em></sub><sub><sub><em>2</em></sub></sub>，那么满足<em>i</em><sub><em>1</em></sub> <em>&lt;
i</em><sub><em>2</em></sub>。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/vector_sparse.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    compressed_vector&lt;double&gt; v (3, 3);
    for (unsigned i = 0; i &lt; v.size (); ++ i)
        v (i) = i;
    std::cout &lt;&lt; v &lt;&lt; std::endl;
}
</pre>
<h4>定义</h4>
<p>定义在并没有文件vector_sparse.hpp中。</p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>T</code></td>
<td>存储在压缩向量(compressed vector)中的对象的类型。</td>
<td></td>
</tr>
<tr>
<td><code>IB</code></td>
<td>压缩向量的索引基(index base)。<a href=
"#compressed_vector_1">[1]</a></td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>IA</code></td>
<td>用于存储索引的适配数组(adapted array)的类型。<a href=
"#compressed_vector_2">[2]</a></td>
<td><code>unbounded_array&lt;std::size_t&gt;</code></td>
</tr>
<tr>
<td><code>TA</code></td>
<td>用于存储值的适配数组(adapted array)的类型。<a href=
"#compressed_vector_2">[2]</a></td>
<td><code>unbounded_array&lt;T&gt;</code></td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="container_concept.htm#vector">向量(Vector)</a> 。 </p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href=
"container_concept.htm#vector">向量(Vector)</a>所施加的类型要求。</p>
<h4>公有基类(Public base classes)</h4>
<p><code>vector_container&lt;compressed_vector&lt;T, IB, IA,
TA&gt; &gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>compressed_vector ()</code></td>
<td>分配一个包含0个元素的<code>compressed_vector</code>。</td>
</tr>
<tr>
<td><code>compressed_vector (size_type size, size_type
non_zeros)</code></td>
<td>分配一个至多包含<code>size</code>个元素的<code>compressed_vector</code>。</td>
</tr>
<tr>
<td><code>compressed_vector (const compressed_vector
&amp;v)</code></td>
<td>拷贝构造函数</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
compressed_vector (size_type non_zeros, const
vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>扩展拷贝构造函数。</td>
</tr>
<tr>
<td><code>void resize (size_type size, bool
preserve = true)</code></td>
<td>重新分配一个至多包含<code>size</code>个元素的<code>compressed_vector</code>。如果指定，那么
<code>compress_vector</code>中已经存在的元素将会被保留。</td>
</tr>
<tr>
<td><code>size_type size () const</code></td>
<td>返回<code>compressed_vector</code>的大小。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i)
const</code></td>
<td>返回第<code>i</code>-th个元素的常引用。</td>
</tr>
<tr>
<td><code>reference operator () (size_type i)</code></td>
<td>返回第<code>i</code>-th个元素的引用。</td>
</tr>
<tr>
<td><code>const_reference operator [] (size_type i)
const</code></td>
<td>返回第<code>i</code>-th个元素的常引用。</td>
</tr>
<tr>
<td><code>reference operator [] (size_type i)</code></td>
<td>返回第<code>i</code>-th个元素的引用。</td>
</tr>
<tr>
<td><code>compressed_vector &amp;operator = (const
compressed_vector &amp;v)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>compressed_vector &amp;assign_temporary
(compressed_vector &amp;v)</code></td>
<td>赋值给一个临时变量。可能会改变压缩向量
<code>v</code>。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
compressed_vector &amp;operator = (const
vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>扩展赋值运算符。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
compressed_vector &amp;assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个向量表达式赋值给一个压缩向量。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
compressed_vector &amp;operator += (const
vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>一个运算赋值运算符。将一个向量表达式加到一个压缩向量中。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
compressed_vector &amp;plus_assign (const
vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>将一个向量表达式回到一个压缩向量中。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
compressed_vector &amp;operator -= (const
vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>一个运算赋值运算符。 从一个压缩向量中减去一个向量表达式。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
compressed_vector &amp;minus_assign (const
vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>从一个压缩向量中减去一个向量表达式。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
compressed_vector &amp;operator *= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符。 将一个压缩向量乘以一个标量。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
compressed_vector &amp;operator /= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符。将一个压缩向量除以一个标量。</td>
</tr>
<tr>
<td><code>void swap (compressed_vector &amp;v)</code></td>
<td>交换压缩向量的内容。</td>
</tr>
<tr>
<td><code>true_reference insert_element (size_type i, const_reference t)</code></td>
<td>将<code>t</code>插入到第<code>i</code>-th个元素。不允许有重复元素。
</td>
</tr>
<tr>
<td><code>void erase_element (size_type i)</code></td>
<td>清除第<code>i</code>-th个元素。</td>
</tr>
<tr>
<td><code>void clear ()</code></td>
<td>清空压缩向量。</td>
</tr>
<tr>
<td><code>const_iterator begin () const</code></td>
<td>返回指向<code>compressed_vector</code>开始处的<code>const_iterator</code>。</td>
</tr>
<tr>
<td><code>const_iterator end () const</code></td>
<td>返回指向<code>compressed_vector</code>终止处的<code>const_iterator</code>。</td>
</tr>
<tr>
<td><code>iterator begin ()</code></td>
<td>返回指向<code>compressed_vector</code>开始处的<code>iterator</code>。</td>
</tr>
<tr>
<td><code>iterator end ()</code></td>
<td>返回指向<code>compressed_vector</code>终止处的<code>iterator</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rbegin () const</code></td>
<td>返回指向反转的(reversed)<code>compressed_vector</code>开始处的<code>const_reverse_iterator</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rend () const</code></td>
<td>返回指向反转的(reversed)<code>compressed_vector</code>终止处的<code>const_reverse_iterator</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator rbegin ()</code></td>
<td>返回指向反转的(reversed)<code>compressed_vector</code>开始处的<code>reverse_iterator</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator rend ()</code></td>
<td>返回指向反转的(reversed)<code>compressed_vector</code>终止处的<code>reverse_iterator</code>。</td>
</tr>
</tbody>
</table>
<h4>注意</h4>
<p><a name="compressed_vector_1" id="compressed_vector_1">[1]</a>
支持索引基(index base)至少为0和1的参数。</p>
<p><a name="compressed_vector_2" id="compressed_vector_2">[2]</a>
  对于适配数组(adapted array)所支持的参数是<code>unbounded_array&lt;&gt;</code> ,
<code>bounded_array&lt;&gt;</code> 和 <code>std::vector&lt;&gt;</code> 。 </p>
<h2><a name="coordinate_vector" id="coordinate_vector"></a>Coordinate Vector</h2>
<h4>说明</h4>
<p>模板类<code>coordinate_vector&lt;T, IB, IA,
TA&gt;</code> 是压缩向量(compressed vectors)的基容器适配器(base container adaptor)。对于一个<em>n</em>-维排序的( sorted) coordinate vector 且 <em>0
&lt;= i &lt; n</em> ，那么非零元素<em>v</em><sub><em>i</em></sub> 被映射到索引和值容器中的连续元素(consecutive elements)。例如，对于容器中的元素<em>k</em> =
<em>v</em><sub><em>i</em></sub><sub><sub><em>1</em></sub></sub>且<em>k + 1 =
v</em><sub><em>i</em></sub><sub><sub><em>2</em></sub></sub>，满足<em>i</em><sub><em>1</em></sub> <em>&lt;
i</em><sub><em>2</em></sub>。</p>
<h4>例子</h4>
<pre>
#include &lt;boost/numeric/ublas/vector_sparse.hpp&gt;
#include &lt;boost/numeric/ublas/io.hpp&gt;

int main () {
    using namespace boost::numeric::ublas;
    coordinate_vector&lt;double&gt; v (3, 3);
    for (unsigned i = 0; i &lt; v.size (); ++ i)
        v (i) = i;
    std::cout &lt;&lt; v &lt;&lt; std::endl;
}
</pre>
<h4>定义</h4>
<p>定义在并没有文件vector_sparse.hpp中。</p>
<h4>模板参数</h4>
<table border="1" summary="parameters">
<tbody>
<tr>
<th>参数</th>
<th>说明</th>
<th>缺省值</th>
</tr>
<tr>
<td><code>T</code></td>
<td>存储在coordinate vector中的对象的类型。</td>
<td></td>
</tr>
<tr>
<td><code>IB</code></td>
<td>coordinate vector的索引基(index base)。<a href=
"#coordinate_vector_1">[1]</a></td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>IA</code></td>
<td>用于存储索引的适配数组的类型。<a href=
"#coordinate_vector_2">[2]</a></td>
<td><code>unbounded_array&lt;std::size_t&gt;</code></td>
</tr>
<tr>
<td><code>TA</code></td>
<td>用于存储值的适配数组的类型。<a href=
"#coordinate_vector_2">[2]</a></td>
<td><code>unbounded_array&lt;T&gt;</code></td>
</tr>
</tbody>
</table>
<h4>模型(Model of)</h4>
<p><a href="container_concept.htm#vector">向量(Vector)</a> 。 </p>
<h4>类型要求(Type requirements)</h4>
<p>没有，除了由<a href=
"container_concept.htm#vector">向量(Vector)</a>所施加的类型要求。</p>
<h4>公有基类(Public base classes)</h4>
<p><code>vector_container&lt;coordinate_vector&lt;T, IB, IA,
TA&gt; &gt;</code></p>
<h4>成员</h4>
<table border="1" summary="members">
<tbody>
<tr>
<th>成员</th>
<th>说明</th>
</tr>
<tr>
<td><code>coordinate_vector ()</code></td>
<td>分配一个包含0个元素的<code>coordinate_vector</code>。</td>
</tr>
<tr>
<td><code>coordinate_vector (size_type size, size_type
non_zeros)</code></td>
<td>分配一个最多包含<code>size</code>个元素的<code>coordinate_vector</code>。</td>
</tr>
<tr>
<td><code>coordinate_vector (const coordinate_vector
&amp;v)</code></td>
<td>拷贝构造函数。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
coordinate_vector (size_type non_zeros, const
vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>扩展拷贝构造函数。</td>
</tr>
<tr>
<td><code>void resize (size_type size, bool
preserve = true)</code></td>
<td>重新分配一个最多包含<code>size</code>个元素的<code>coordinate_vector</code>。
如果指定，那么<code>coordinate_vector</code>中已经存在的元素将会被保留。</td>
</tr>
<tr>
<td><code>size_type size () const</code></td>
<td>返回<code>coordinate_vector</code>的大小。</td>
</tr>
<tr>
<td><code>const_reference operator () (size_type i)
const</code></td>
<td>返回第<code>i</code>-th个元素的常引用。</td>
</tr>
<tr>
<td><code>reference operator () (size_type i)</code></td>
<td>返回第<code>i</code>-th个元素的引用。</td>
</tr>
<tr>
<td><code>const_reference operator [] (size_type i)
const</code></td>
<td>返回第<code>i</code>-th个元素的常引用。</td>
</tr>
<tr>
<td><code>reference operator [] (size_type i)</code></td>
<td>返回第<code>i</code>-th个元素的引用。</td>
</tr>
<tr>
<td><code>coordinate_vector &amp;operator = (const
coordinate_vector &amp;v)</code></td>
<td>赋值运算符。</td>
</tr>
<tr>
<td><code>coordinate_vector &amp;assign_temporary
(coordinate_vector &amp;v)</code></td>
<td>赋值给一个临时变量。可能会改变coordinate vector
<code>v</code>。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
coordinate_vector &amp;operator = (const
vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>扩展赋值运算符。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
coordinate_vector &amp;assign (const vector_expression&lt;AE&gt;
&amp;ae)</code></td>
<td>将一个向量表达式赋给一个coordinate vector。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
coordinate_vector &amp;operator += (const
vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>一个运算赋值运算符。将一个向量表达式加到一个coordinate vector。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
coordinate_vector &amp;plus_assign (const
vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>将一个向量表达式回到coordinate vector。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
coordinate_vector &amp;operator -= (const
vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>一个运算赋值运算符。从一个coordinate vector中减去一个向量表达式。</td>
</tr>
<tr>
<td><code>template&lt;class AE&gt;<br />
coordinate_vector &amp;minus_assign (const
vector_expression&lt;AE&gt; &amp;ae)</code></td>
<td>从一个coordinate vector表达式中减去一个向量表达式。赋值的左边和右边应当是相互独立的。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
coordinate_vector &amp;operator *= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符。将一个coordinate
vector乘以一个标量。</td>
</tr>
<tr>
<td><code>template&lt;class AT&gt;<br />
coordinate_vector &amp;operator /= (const AT &amp;at)</code></td>
<td>一个运算赋值运算符。将一个coordinate vector除以一个标量。
</td>
</tr>
<tr>
<td><code>void swap (coordinate_vector &amp;v)</code></td>
<td>交换coordinate vectors的内容。</td>
</tr>
<tr>
<td><code>true_reference insert_element (size_type i, const_reference t)</code></td>
<td>将 <code>t</code> 插入到第 <code>i</code>-th 个元素。
不允许有重复元素。</td>
</tr>
<tr>
<td><code>void append_element (size_type i, size_type j, const_reference t)</code></td>
<td>将<code>t</code>附加到第 <code>i</code>-th 个元素。
重复的元素可以被附加到一个 <code>coordinate_vector</code>。它们由<code>sort</code>函数合并为一个单独的算术和元素(arithmetically summed element)。 
</td>
</tr>
<tr>
<td><code>void erase_element (size_type i)</code></td>
<td>删除第<code>i</code>-th个元素。</td>
</tr>
<tr>
<td><code>void clear ()</code></td>
<td>清除coordinate vector。</td>
</tr>
<tr>
<td><code>const_iterator begin () const</code></td>
<td>返回指向<code>coordinate_vector</code>开始处的<code>const_iterator</code>。</td>
</tr>
<tr>
<td><code>const_iterator end () const</code></td>
<td>返回指向<code>coordinate_vector</code>终止处的<code>const_iterator</code>。</td>
</tr>
<tr>
<td><code>iterator begin ()</code></td>
<td>返回指向<code>coordinate_vector</code>开始处的<code>iterator</code>。</td>
</tr>
<tr>
<td><code>iterator end ()</code></td>
<td>返回指向<code>coordinate_vector</code>终止处的<code>iterator</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rbegin () const</code></td>
<td>返回指向反转的(reversed)<code>coordinate_vector</code>开始处的<code>const_reverse_iterator</code>。</td>
</tr>
<tr>
<td><code>const_reverse_iterator rend () const</code></td>
<td>返回指向反转的(reversed)<code>coordinate_vector</code>终止处的<code>const_reverse_iterator</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator rbegin ()</code></td>
<td>返回指向反转的(reversed)<code>coordinate_vector</code>开始处的<code>reverse_iterator</code>。</td>
</tr>
<tr>
<td><code>reverse_iterator rend ()</code></td>
<td>返回指向反转的(reversed)<code>coordinate_vector</code>终止处的<code>reverse_iterator</code>。</td>
</tr>
</tbody>
</table>
<h4>注意</h4>
<p><a name="coordinate_vector_1" id="coordinate_vector_1">[1]</a>
支持索引基(index base)至少为0和1的参数。</p>
<p><a name="coordinate_vector_2" id="coordinate_vector_2">[2]</a>
对于适配数组(adapted array)所支持的参数是<code>unbounded_array&lt;&gt;</code> ,
<code>bounded_array&lt;&gt;</code> 和 <code>std::vector&lt;&gt;</code> 。 </p>
<hr />
<p>Copyright (&copy;) 2000-2002 Joerg Walter, Mathias Koch<br />
   Use, modification and distribution are subject to the
   Boost Software License, Version 1.0.
   (See accompanying file LICENSE_1_0.txt
   or copy at <a href="http://www.boost.org/LICENSE_1_0.txt">
      http://www.boost.org/LICENSE_1_0.txt
   </a>).
</p>
</body>
</html>
