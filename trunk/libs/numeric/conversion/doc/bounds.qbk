[/
    Boost.Optional

    Copyright (c) 2003-2007 Fernando Luis Cacciola Carballal

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
]

[section bounds<> traits class]

[section:introduction Introduction 简介]

To determine the ranges of numeric types with `std::numeric_limits` \[18.2.1\],
different syntax have to be used depending on numeric type. Specifically,
`numeric_limits<T>::min()` for integral types returns the minimum finite value,
whereas for floating point types it returns the minimum positive normalized
value. The difference in semantics makes client code unnecessarily complex
and error prone.\n
用 `std::numeric_limits` \[18.2.1\] 来判断数字类型的范围时，必须根据数字类型使用不同的语法。
特别地，对于整型类型，`numeric_limits<T>::min()` 返回最小限值，而对于浮点类型则返回正的最小正规值。
这种语义上的差异使得用户代码变得复杂和易错。

`boost::numeric::bounds<>` provides a consistent interface for retrieving the
maximum finite value, the minimum finite value and the minimum positive normalized
value (0 for integral types) for numeric types. The selection of implementation
is performed at compile time, so there is no runtime overhead.\n
`boost::numeric::bounds<>` 提供了一致的接口来获得数字类型的最大限值、最小限值和正的最小正规值(对于整型类型为0)。
具体实现的选择是在编译期执行，所以没有运行期的开销。

[endsect]

[section traits class bounds<N>]

    template<class N>
    struct bounds
    {
        static N lowest  () { return implementation_defined; }
        static N highest () { return implementation_defined; }
        static N smallest() { return implementation_defined; }
    };

[heading Members 成员]


[: `lowest()` ]

Returns the minimum finite value, equivalent to `numeric_limits<T>::min()` when `T`
is an integral type, and to `-numeric_limits<T>::max()` when `T` is a floating point type.\n
返回最小限值，如果 `T` 是一个整型类型则等同于 `numeric_limits<T>::min()`，如果 `T` 是一个浮点类型则等同于 `-numeric_limits<T>::max()`。 

[: `highest()` ]

Returns the maximum finite value, equivalent to `numeric_limits<T>::max()`.\n
返回最大限值，等同于 `numeric_limits<T>::max()`. 

[: `smallest()` ]

Returns the smallest positive normalized value for floating point types with
denormalization, or returns 0 for integral types.\n
对于反规格化的浮点类型，返回正的最小正规值，对于整型类型返回0。

[endsect]

[section:examples Examples 例子]

The following example demonstrates the use of `numeric::bounds<>` and the
equivalent code using `numeric_limits`:\n
以下例子示范了 `numeric::bounds<>` 的使用，以及使用 `numeric_limits` 的等效代码：

    #include <iostream>

    #include <boost/numeric/conversion/bounds.hpp>
    #include <boost/limits.hpp>

    int main() {

        std::cout << "numeric::bounds versus numeric_limits example.\n";

        std::cout << "The maximum value for float:\n";
        std::cout << boost::numeric::bounds<float>::highest() << "\n";
        std::cout << std::numeric_limits<float>::max() << "\n";

        std::cout << "The minimum value for float:\n";
        std::cout << boost::numeric::bounds<float>::lowest() << "\n";
        std::cout << -std::numeric_limits<float>::max() << "\n";

        std::cout << "The smallest positive value for float:\n";
        std::cout << boost::numeric::bounds<float>::smallest() << "\n";
        std::cout << std::numeric_limits<float>::min() << "\n";

        return 0;
    }


[endsect]

[endsect]










