[/
    Boost.Optional

    Copyright (c) 2003-2007 Fernando Luis Cacciola Carballal

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
]

[section:converter___function_object converter<> function object  converter<>函数对象]

[section:synopsis Synopsis 摘要]

    namespace boost { namespace numeric {


        template<class T,
                 class S,
                 class Traits,          = conversion_traits<T,S>
                 class OverflowHandler  = def_overflow_handler,
                 class Float2IntRounder = Trunc< typename Traits::source_type >,
                 class RawConverter     = raw_converter<Traits>,
                 class UserRangeChecker = UseInternalRangeChecker
                >
        struct converter
        {
            typedef Traits traits ;

            typedef typename Traits::source_type   source_type   ;
            typedef typename Traits::argument_type argument_type ;
            typedef typename Traits::result_type   result_type   ;

            static result_type convert ( argument_type s ) ;

            result_type operator() ( argument_type s ) const ;

            // Internal member functions: 内部成员函数：

            static range_check_result out_of_range      ( argument_type s ) ;
            static void               validate_range    ( argument_type s ) ;
            static result_type        low_level_convert ( argument_type s ) ;
            static source_type        nearbyint         ( argument_type s ) ;

        } ;

    } } // namespace numeric, boost


`boost::numeric::converter<>` is a __SGI_UNARY_FUNCTION__ encapsulating
the code to perform a numeric conversion with the direction and
properties specified by the Traits template parameter. It can optionally
take some [link boost_numericconversion.numeric_converter_policy_classes policies] which can be used to customize its behavior. The
`Traits` parameter is not a policy but the parameter that defines
the conversion.\n
`boost::numeric::converter<>` 是一个 __SGI_UNARY_FUNCTION__，它封装了执行数字转换的代码，转换的方向和各种属性由 Traits 模板参数指定。
它可选地接受一些 [link boost_numericconversion.numeric_converter_policy_classes 策略] 以定制其行为。
`Traits` 参数并非策略，但该参数定义了该转换。

[endsect]

[section:template_parameters Template parameters 模板参数]

[table
[[            ][           ]]
[[`T`][
The [link boost_numericconversion.definitions.numeric_types Numeric Type] 
which is the ['Target] of the conversion.\n
作为转换 ['目标] 的 [link boost_numericconversion.definitions.numeric_types 数字类型]。 
]]
[[`S`][
The [link boost_numericconversion.definitions.numeric_types Numeric Type] 
which is the ['Source] of the conversion.\n
作为转换 ['源] 的 [link boost_numericconversion.definitions.numeric_types 数字类型]。
]]
[[`Traits`][
This must be a conversion traits class with the interface of
[link boost_numericconversion.conversion_traits___traits_class `boost::numeric::conversion_traits`]\n
必须是一个转换 traits 类，具有 [link boost_numericconversion.conversion_traits___traits_class `boost::numeric::conversion_traits`] 的接口
]]
[[`OverflowHandler`][
[*Stateless Policy] called to administrate the result of the range checking.\n
[*无状态策略]，被调用以处理范围检查的结果。

It is a [*Function Object] which receives the result of `out_of_range()`
and is called inside the `validate_range()` static member function exposed
by the converter.\n
它是一个 [*函数对象]，接受 `out_of_range()` 的结果，在由转换器所开放的 `validate_range()` 静态成员函数中被调用。
]]
[[`Float2IntRounder`][
[*Stateless Policy] which specifies the rounding mode used for float to
integral conversions.\n
[*无状态策略]，指定用于浮点数到整数转换的舍入方式。

It supplies the `nearbyint()` static member function exposed by the converter.\n
它提供由转换器开放的 `nearbyint()` 静态成员函数。
]]
[[`RawConverter`][
[*Stateless Policy] which is used to perform the actual conversion.\n
[*无状态策略]，用于执行实际的转换。

It supplies the `low_level_convert()` static member function exposed
by the converter.\n
它提供由转换器开放的 `low_level_convert()` 过静态成员函数。
]]
[[`UserRangeChecker`][
['Special and Optional] [*Stateless Policy] which can be used to override
the internal range checking logic.\n
['特定且可选的] [*无状态策略]，可用于覆盖内部的范围检查逻辑。

If given, supplies alternative code for the `out_of_range()` and
`validate_range()` static member functions exposed by the converter.\n
如果给出，则提供由转换器开放的 `out_of_range()` 和 `validate_range()` 静态成员函数的替换代码。
]]
]

[endsect]

[section:member_functions Member functions 成员函数]

[: `static result_type converter<>::convert ( argument_type s ) ; // throw 有抛出
`]

This static member function converts an rvalue of type `source_type` to
an rvalue of type `target_type`.\n
该静态成员函数将一个类型为 `source_type` 的右值转换为一个类型为 `target_type` 的右值。 

If the conversion requires it, it performs a range checking before the conversion
and passes the result of the check to the overflow handler policy (the default
policy throws an exception if out-of-range is detected)\n
如果转换需要，则在转换前执行一个范围检查，并将检查结果传递给溢出处理器策略(缺省的策略是在检测到溢出时抛出一个异常)。

The implementation of this function is actually built from the policies and is
basically as follows:\n
该函数的实现实际上是依据策略来建造，基本如下：

    result_type converter<>::convert ( argument_type s )
    {
        validate_range(s); // Implemented by the internal range checking logic
                           // (which also calls the OverflowHandler policy)
                           // or externally supplied by the UserRangeChecker policy.
                           // 由内部的范围检查逻辑来实现(它也调用 OverflowHandler 策略)
                           // 或者由 UserRangeChecker 策略所提供的外部逻辑来实现

        s = nearbyint(s); // Externally supplied by the Float2IntRounder policy.
                          // NOTE: This is actually called only for float to int conversions.
                          // 由 Float2IntRounder 策略提供的外部逻辑
                          // 注：仅在浮点数至整数转换时实际调用

        return low_level_convert(s); // Externally supplied by the RawConverter policy.
                                     // 由 RawConverter 策略提供的外部逻辑
    }

`converter<>::operator() const` just calls `convert()`\n
`converter<>::operator() const` 只是调用 `convert()`

__SPACE__

[: `static range_check_result numeric_converter<>::out_of_range ( argument_type s ) ;`]

This [link numeric_conversion_converter_internal internal] static member function 
determines if the value `s` can be
represented by the target type without overflow.\n
该 [link numeric_conversion_converter_internal 内部] 静态成员函数判断值 `s` 是否可以被目标类型表示而没有溢出。

It does not determine if the conversion is ['exact]; that is, it does not detect
['inexact] conversions, only ['out-of-range] conversions (see the
[link boost_numericconversion.definitions.exact__correctly_rounded_and_out_of_range_representations Definitions] for further details).\n
它不判断转换是否 ['精确]；即它不检查 ['非精确的] 转换，只检查 ['超出范围的] 转换(进一步的细节请见 
[link boost_numericconversion.definitions.exact__correctly_rounded_and_out_of_range_representations 定义])。

The return value is of enum type 
[link boost_numericconversion.numeric_converter_policy_classes.enum_range_check_result `boost::numeric::range_check_result`]\n
返回值为枚举类型 
[link boost_numericconversion.numeric_converter_policy_classes.enum_range_check_result `boost::numeric::range_check_result`] 

The actual code for the range checking logic is optimized for the combined
properties of the source and target types. For example, a non-subranged
conversion (i.e: `int`->`float`), requires no range checking, so `out_of_range()`
returns `cInRange` directly. See the following 
[link boost_numericconversion.converter___function_object.range_checking_logic table] for more details.\n
范围检查逻辑的实际代码是根据源类型和目标类型的组合特性进行优化的。例如，一个非子范围的转换(如：`int`->`float`)，
就不需要范围检查，所以 `out_of_range()` 直接返回 `cInRange`。更多细节请见后文中的 
[link boost_numericconversion.converter___function_object.range_checking_logic 表格]。

If the user supplied a
[link boost_numericconversion.numeric_converter_policy_classes.policy_userrangechecker UserRangeChecker] policy, 
is this policy which implements this function, so the implementation is user 
defined, although it is expected to perform the same conceptual check and 
return the appropriate result.\n
如果用户提供了一个 [link boost_numericconversion.numeric_converter_policy_classes.policy_userrangechecker UserRangeChecker] 策略，
该策略要实现这个函数，则该实现就是用户自定义的，当然所期望的是要执行相同概念上的检查并返回适当的结果。

__SPACE__

[: `static void numeric_converter<>::validate_range ( argument_type s ) ; // no throw 无抛出
`]

This [link numeric_conversion_converter_internal internal] static member function 
calls out_of_range(s), and passes the
result to the [link boost_numericconversion.numeric_converter_policy_classes.policy_overflowhandler OverflowHandler] 
policy class.\n
该 [link numeric_conversion_converter_internal 内部] 静态成员函数调用 out_of_range(s)，并将结果传给 
[link boost_numericconversion.numeric_converter_policy_classes.policy_overflowhandler OverflowHandler] 策略类。

For those Target/Source combinations which don't require range checking, this
is an empty inline function.\n
对于那些不需要范围检查的目标/源类型组合，它是一个空的内联函数。

If the user supplied a 
[link boost_numericconversion.numeric_converter_policy_classes.policy_userrangechecker UserRangeChecker] policy, 
is this policy which implements this function, so the implementation is user 
defined, although it is expected to perform the same action as the default. 
In particular, it is expected to pass the result of the check to the overflow handler.\n
如果用户提供了一个 [link boost_numericconversion.numeric_converter_policy_classes.policy_userrangechecker UserRangeChecker] 策略，
该策略要实现这个函数，则该实现就是用户自定义的，当然所期望的是要执行与缺省相同的动作。特别是，要将检查的结果传递给溢出处理器。

__SPACE__

[: `static result_type numeric_converter<>::low_level_convert ( argument_type s ) ;` ]

This [link numeric_conversion_converter_internal internal] static member function 
performs the actual conversion.\n
该 [link numeric_conversion_converter_internal 内部] 静态成员函数执行实际的转换。

This function is externally supplied by the 
[link boost_numericconversion.numeric_converter_policy_classes.policy_rawconverter RawConverter] policy class.\n
该函数在外部由 [link boost_numericconversion.numeric_converter_policy_classes.policy_rawconverter RawConverter] 策略类提供。

__SPACE__

[: `static source_type converter<>::nearbyint ( argument_type s ) ;`]

This [link numeric_conversion_converter_internal internal] static member function, 
which is [_only used] for
`float` to `int` conversions, returns an ['integer] value of ['[_floating-point
type]] according to some rounding direction.\n
该 [link numeric_conversion_converter_internal 内部] 静态成员函数，[_仅用于] `float` 至 `int` 的转换，
根据某个舍入的方向返回 ['[_浮点数类型]] 的一个['整数]值。

This function is externally supplied by the 
[link boost_numericconversion.numeric_converter_policy_classes.policy_float2introunder Float2IntRounder] policy class
which encapsulates the specific rounding mode.\n
该函数在外部由封装了特定舍入方式的 
[link boost_numericconversion.numeric_converter_policy_classes.policy_float2introunder Float2IntRounder] 策略类提供。

__SPACE__

[#numeric_conversion_converter_internal]

[heading Internal Member Functions 内部成员函数]

These static member functions build the actual conversion code used by `convert()`.
The user does not have to call these if calling `convert()`, since `convert()` calls
them infernally, but they can be called separately for specific needs.\n
这些静态成员函数构建了用于 `convert()` 的实际转换代码。用户代码如果调用了 `convert()` 就无需调用它们，
因为 `convert()` 已经在内部调用了它们，不过如果有特别需要，它们也可以被单独调用。

[endsect]

[section:range_checking_logic Range Checking Logic 范围检查逻辑]

The following table summarizes the internal range checking logic performed for
each combination of the properties of Source and Target.\n
下表总结了对各种源类型和目标类型组合所执行的内部范围检查逻辑。

LowestT/HighestT denotes the highest and lowest values of the Target type, respectively.\n
LowestT/HighestT 分别表示目标类型的最大值和最小值。

`S(n)` is short for `static_cast<S>(n)` (`S` denotes the Source type).\n
`S(n)` 是 `static_cast<S>(n)` 的缩写(`S` 表示源类型)。

`NONE` indicates that for this case there is no range checking.\n
`NONE` 表示此种情况无范围检查。

[pre
[^
int_to_int    |--> sig_to_sig     |--> subranged     |--> ( s >= S(LowestT) ) && ( s <= S(HighestT) )
              |                   |--> not subranged |--> NONE
              |
              |--> unsig_to_unsig |--> subranged     |--> ( s >= S(LowestT) ) && ( s <= S(HighestT) )
              |                   |--> not subranged |--> NONE
              |
              |--> sig_to_unsig   |--> pos subranged     |--> ( s >= S(0) ) && ( s <= S(HighestT) )
              |                   |--> not pos subranged |--> ( s >= S(0) )
              |
              |--> unsig_to_sig   |--> subranged     |--> ( s <= S(HighestT) )
              |                   |--> not subranged |--> NONE
]
[^
int_to_float   |--> NONE
]
[^
float_to_int   |--> round_to_zero         |--> ( s >  S(LowestT)-S(1)   ) && ( s <  S(HighestT)+S(1)   )
               |--> round_to_even_nearest |--> ( s >= S(LowestT)-S(0.5) ) && ( s <  S(HighestT)+S(0.5) )
               |--> round_to_infinity     |--> ( s >  S(LowestT)-S(1)   ) && ( s <= S(HighestT)        )
               |--> round_to_neg_infinity |--> ( s >= S(LowestT)        ) && ( s <  S(HighestT)+S(1)   )
]
[^
float_to_float |--> subranged     |--> ( s >= S(LowestT) ) && ( s <= S(HighestT) )
               |--> not subranged |--> NONE
]
]



[endsect]

[section:examples Examples 例子]

    #include <cassert>
    #include <boost/numeric/conversion/converter.hpp>

    int main() {

        typedef boost::numeric::converter<int,double> Double2Int ;

        int x = Double2Int::convert(2.0);
        assert ( x == 2 );

        int y = Double2Int()(3.14); // As a function object. 作为一个函数对象。
        assert ( y == 3 ) ; // The default rounding is trunc. 缺省的舍入方式是截断。

        try
        {
            double m = boost::numeric::bounds<double>::highest();
            int z = Double2Int::convert(m); // By default throws positive_overflow()
                                            // 缺省抛出 positive_overflow()
        }
        catch ( boost::numeric::positive_overflow const& )
        {
        }

        return 0;
    }

[endsect]

[endsect]





