[/license

Boost.Bimap

Copyright (c) 2006-2007 Matias Capeletto

Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt or copy at
http://www.boost.org/LICENSE_1_0.txt)

]

[/ QuickBook Document version 1.4 ]

[section:bimap_reference Bimap Reference  Bimap参考]

[section:view_concepts View concepts 视图概念]

`bimap` instantiations comprise two side views and an view of the relation
specified at compile time. Each view allows read-write access to the elements contained
in a definite manner, mathing an STL container signature.\n
`bimap` 实例由两侧的视图以及一个双方关系的视图组成，这些视图都是在编译期指定的。
各个视图允许以确定的方式对所包含的元素进行读写访问，与STL容器的签名匹配。

Views are not isolated objects and so cannot be constructed on their
own; rather they are an integral part of a `bimap`. The name of the view
class implementation proper is never directly exposed to the user, who
has access only to the associated view type specifier.\n
视图并不是独立的对象，因此不能自行构造；它们是 `bimap` 的主要组成部分。
在正确的实现中，视图类名从不直接暴露给用户，用户只能访问关联的视图类型声明。

Insertion and deletion of elements are always performed through the
appropriate interface of any of the three views of the `bimap`; these
operations do, however, have an impact on all other views as well: for
instance, insertion through a given view may fail because there exists
another view that forbids the operation in order to preserve its
invariant (such as uniqueness of elements). The global operations
performed jointly in the any view can be reduced to six primitives:\n
元素的插入和删除总是通过 `bimap` 的三个视图中任一个的适当接口来执行；但是，这些操作会对所有视图都有所影响：
例如，通过一个给定的视图进行插入，有可能由于有另一个视图为了维持其不变式(如元素的唯一性)而禁止该操作，
从而插入失败。在所有视图上共同执行的全局操作可以归纳为以下六种基本操作：

* copying\n
  复制
* insertion of an element\n
  插入一个元素
* hinted insertion, where a pre-existing element is suggested in order to improve
the efficiency of the operation\n
  带提示的插入，给出一个已有元素以提高操作效率
* deletion of an element\n
  删除一个元素 
* replacement of the value of an element, which may trigger the
rearrangement of this element in one or more views, or may forbid the
replacement\n
  替换一个元素的值，可能触发该元素在一个或多个视图中的重排，也可能禁止该替换
* modification of an element, and its subsequent
rearrangement/banning by the various views\n
  修改一个元素，可能被其它视图重排或禁止

The last two primitives deserve some further explanation: in order to
guarantee the invariants associated to each view (e.g. some definite
ordering) elements of a `bimap` are not mutable. To overcome this
restriction, the views expose member functions for updating and
modifying, which allows for the mutation of elements in a controlled
fashion.\n
后两个操作需要进一步解释一下：为了保证每个视图(如有些视图是有顺序的)的不变式，`bimap` 的元素是不可修改的。
为了克服这一限制，视图分别提供了更新和修改的成员函数，它们允许以一种可控的方式进行元素的修改。

[endsect]

[#complexity_signature_explanation]

[section:complexity_signature Complexity signature 复杂度签名]

Some member functions of a view interface are implemented by global
primitives from the above list. The complexity of these operations thus
depends on all views of a given `bimap`, not just the currently used view.\n
视图接口的一些成员函数是通过以上全局基本操作来实现的。这些操作的复杂度依赖于一个给定 `bimap` 的所有视图，
而不仅仅是当前使用的视图。

In order to establish complexity estimates, a view is characterised by
its complexity signature, consisting of the following associated
functions on the number of elements:\n
为了进行复杂度的评估，我们将一个视图按其复杂度签名来标识，签名表示了以下相关函数在一定数量元素下的复杂度：

* `c(n)`: copying 复制
* `i(n)`: insertion 插入
* `h(n)`: hinted insertion 提示插入
* `d(n)`: deletion 删除
* `r(n)`: replacement 替换
* `m(n)`: modifying 修改

If the collection type of the relation is `left_based` or `right_based`, and we use
an `l` subscript to denote the left view and an `r` for the right view, then
the insertion of an element in such a container is of complexity
`O(i_l(n)+i_r(n))`, where n is the number of elements. If the collection type of
relation is not side-based, then there is an additional term to add that
is contributed by the collection type of relation view. Using `a` to denote the
above view, the complexity of insertion will now be
`O(i_l(n)+i_r(n)+i_a(n))`. To abbreviate the notation, we adopt the
following definitions:\n
如果关系组合类型为 `left_based` 或 `right_based`，且我们用 `l` 后缀表示左视图，用 `r` 表示右视图，
则往这一容器中插入一个元素的复杂度为 `O(i_l(n)+i_r(n))`，其中 n 为元素的元素。
如果关系组合类型不是 side-based 的，则还需要另一个术语来表示关系组合类型的视图。
我们用 `a` 来表示这一视图，插入操作的复杂度将是 `O(i_l(n)+i_r(n)+i_a(n))`。为了缩短这一记号，我们采用以下定义：

* `C(n) = c_l(n) + c_r(n) [ + c_a(n) ]`
* `I(n) = i_l(n) + i_r(n) [ + i_a(n) ]`
* `H(n) = h_l(n) + h_r(n) [ + h_a(n) ]`
* `D(n) = d_l(n) + d_r(n) [ + d_a(n) ]`
* `R(n) = r_l(n) + r_r(n) [ + r_a(n) ]`
* `M(n) = m_l(n) + m_r(n) [ + m_a(n) ]`

[endsect]

[section:set_type_specification Set type specification 集合类型规格]

Set type specifiers are passed as instantiation arguments to `bimap` and
provide the information needed to incorporate the corresponding views.
Currently, Boost.Bimap provides the collection type specifiers. The ['side collection type]
specifiers define the constraints of the two map views of the
bimap. The ['collection type of relation] specifier defines the main set view
constraints. If `left_based` (the default parameter) or `right_based` is
used, then the collection type of relation will be based on the left or right
collection type correspondingly.\n
集合类型规格被作为实例化参数传递给 `bimap`，提供了组成相应视图所需的信息。当前，Boost.Bimap 提供了一些组合类型指示符。
['单侧组合类型]指示符定义了对 bimap 的两个映射视图的约束。而['关系组合类型]指示符则定义了对主集合视图的约束。
如果使用了 `left_based` (缺省参数)或 `right_based`，则关系组合类型将分别基于左侧或右侧组合类型。

[table
[[Side collection type 单侧组合类型][Collection type of relation 关系组合类型][Include 包含的头文件]]
[[`set_of`                  ][`set_of_relation`               ][`boost/bimap/set_of.hpp`                ]]
[[`multiset_of`             ][`multiset_of_relation`          ][`boost/bimap/multiset_of.hpp`           ]]
[[`unordered_set_of`        ][`unordered_set_of_relation`     ][`boost/bimap/unordered_set_of.hpp`      ]]
[[`unordered_multiset_of`   ][`unordered_multiset_of_relation`][`boost/bimap/unordered_multiset_of.hpp` ]]
[[`list_of`                 ][`list_of_relation`              ][`boost/bimap/list_of.hpp`               ]]
[[`vector_of`               ][`vector_of_relation`            ][`boost/bimap/vector_of.hpp`             ]]
[[`unconstrained_set_of`    ][`unconstrained_set_of_relation` ][`boost/bimap/unconstrained_set_of.hpp`  ]]
[[                          ][`left_based`                    ][`boost/bimap/bimap.hpp`                 ]]
[[                          ][`right_based`                   ][`boost/bimap/bimap.hpp`                 ]]
]

[endsect]

[section:tags Tags 标签]

Tags are just conventional types used as mnemonics for the types stored
in a `bimap`. Boost.Bimap uses the tagged idiom to let the user specify
this tags.\n
标签只是一个类型，它是为了方便记忆 `bimap` 中的类型而使用。Boost.Bimap 使用标签惯用法来让用户指定标签。

[endsect]

[section Header "boost/bimap/bimap.hpp" synopsis]

    namespace boost {
    namespace bimaps {

    template< class Type, typename Tag >
    struct tagged;

    // bimap template class

    template
    <
        class LeftCollectionType, class RightCollectionType,

        class AdditionalParameter_1 = detail::not_specified,
        class AdditionalParameter_2 = detail::not_specified
    >
    class bimap ``['- implementation defined { : public SetView } -]``
    {
        public:

        // Metadata

        typedef ``['-unspecified-]`` left_tag;
        typedef ``['-unspecified-]`` left_map;

        typedef ``['-unspecified-]`` right_tag;
        typedef ``['-unspecified-]`` right_map;

        // Shortcuts
        // typedef -side-_map::-type- -side-_-type-;

        typedef ``['-unspecified-]`` info_type;

        // Map views

         left_map  left;
        right_map right;

        // Constructors

        bimap();

        template< class InputIterator >
        bimap(InputIterator first,InputIterator last);

        bimap(const bimap &);

        bimap& operator=(const bimap& b);

        // Projection of iterators

        template< class IteratorType >
        left_iterator project_left(IteratorType iter);

        template< class IteratorType >
        left_const_iterator project_left(IteratorType iter) const;

        template< class IteratorType >
        right_iterator project_right(IteratorType iter);

        template< class IteratorType >
        right_const_iterator project_right(IteratorType iter) const;

        template< class IteratorType >
        iterator project_up(IteratorType iter);

        template< class IteratorType >
        const_iterator project_up(IteratorType iter) const;

        // Support for tags

        template< class Tag >
        struct map_by;

        template< class Tag >
        map_by<Tag>::type by();

        template< class Tag >
        const map_by<Tag>::type & by() const;

        template< class Tag, class IteratorType >
        map_by<Tag>::iterator project(IteratorType iter);

        template< class Tag, class IteratorType >
        map_by<Tag>::const_iterator project(IteratorType iter) const

    };


    } // namespace bimap
    } // namespace boost


[/
    // Metafunctions for a bimap

    template< class Tag, class Bimap > struct value_type_by;
    template< class Tag, class Bimap > struct key_type_by;
    template< class Tag, class Bimap > struct data_type_by;
    template< class Tag, class Bimap > struct iterator_type_by;
    template< class Tag, class Bimap > struct const_iterator_type_by;
    template< class Tag, class Bimap > struct reverse_iterator_type_by;
    template< class Tag, class Bimap > struct const_reverse_iterator_type_by;
    template< class Tag, class Bimap > struct local_iterator_type_by;
    template< class Tag, class Bimap > struct const_local_iterator_type_by;

    // Functions for a bimap

    template<class Tag, class Relation>
    result_of::map_by< Tag, Bimap>::type map_by(Bimap &);

    // Metafunctions for a relation

    template< class Tag, class Relation > struct value_type_of;
    template< class Tag, class Relation > struct pair_type_by;

    // Functions for a relation

    template<class Tag, class Relation>
    result_of::get< Tag, Relation>::type get(Relation &r);

    template<class Tag, class Relation>
    result_of::pair_by< Tag, Relation>::type pair_by(Relation &);

]

[endsect]

[section Class template bimap]

This is the main component of Boost.Bimap.\n
这是 Boost.Bimap 的主要组件。

[section:complexity Complexity 复杂度]

In the descriptions of the operations of `bimap`, we adopt the scheme
outlined in the complexity signature section.\n
在 `bimap` 操作的描述中，我们采用了前面"复杂度签名"一节中的方式来进行说明。

[endsect]

[section:instantiation_types Instantiation types 实例化类型]

`bimap` is instantiated with the following types:\n
`bimap` 用以下类型进行实例化：

# LeftCollectionType and RightCollectionType are collection type specifications
optionally tagged, or any type optionally tagged, in which case that
side acts as a set.\n
  LeftCollectionType 和 RightCollectionType 可以是可带标志符的组合类型规格，
  也可以是可带标签的任意类型，这种情况下某侧就为一个集合类型。
# AdditionalParameter_{1/2} can be any ordered subset of:\n
  AdditionalParameter_{1/2} 可以是以下之一的任意有序子集：
    * CollectionTypeOfRelation specification\n
      CollectionTypeOfRelation 规格
    * Allocator\n
      分配器

[endsect]

[section:nested_types Nested types 嵌套类型]

    left_tag, right_tag

[:  Tags for each side of the bimap. If the user has not specified any tag the
    tags default to `member_at::left` and `member_at::right`.\n
    bimap 每一侧的标签。如果用户没有指定标签，则缺省为 `member_at::left` 和 `member_at::right`.
]

    left_key_type, right_key_type

[:  Key type of each side. In a `bimap<A,B> ` `left_key_type` is `A` and
    `right_key_type` is `B`.
    If there are tags, it is better to use: `Bimap::map_by<Tag>::key_type`.\n
    每一侧的键类型。在一个 `bimap<A,B>` 中，`left_key_type` 为 `A` 而 `right_key_type` 为 `B`。
    如果带有标签，则使用：`Bimap::map_by<Tag>::key_type`。
]

    left_data_type, right_data_type

[:  Data type of each side. In a bimap<A,B> left_key_type is B and
    right_key_type is A.
    If there are tags, it is better to use: `Bimap::map_by<Tag>::data_type`.\n
    每一侧的数据类型。在一个 bimap<A,B> 中，left_key_type 为 B 而 right_key_type 为 A。
    如果带有标签，则使用：`Bimap::map_by<Tag>::data_type`。
]

    left_value_type, right_value_type

[:  Value type used for the views.
    If there are tags, it is better to use: `Bimap::map_by<Tag>::value_type`.\n
    用于各视图的值类型。如果带有标签，则使用 `Bimap::map_by<Tag>::value_type`。
]


    left_iterator, right_iterator
    left_const_iterator, right_const_iterator

[:  Iterators of the views.
    If there are tags, it is better to use:
    `Bimap::map_by<Tag>::iterator` and
    `Bimap::map_by<Tag>::const_iterator`\n
    各视图的迭代器。如果带有标签，则使用 `Bimap::map_by<Tag>::iterator` 和 `Bimap::map_by<Tag>::const_iterator`
]


    left_map, right_map

[:  Map view type of each side.
    If there are tags, it is better to use:
    `Bimap::map_by<Tag>::type`.\n
    每一侧的映射视图类型。如果带有标签，则使用：`Bimap::map_by<Tag>::type`.
]

[endsect]

[section:constructors__copy_and_assignment Constructors, copy and assignment 构造函数、复制和赋值]

    bimap();

* [*Effects:] Constructs an empty `bimap`.\n
  [*效果：]构造一个空的 `bimap`.
* [*Complexity:] Constant.\n
  [*复杂度：]常数。

    template<typename InputIterator>
    bimap(InputIterator first,InputIterator last);

* [*Requires: ] `InputIterator` is a model of Input Iterator over elements of
type `relation` or a type convertible to `relation`. last is reachable from `first`.\n
  [*要求：]`InputIterator` 是一个输入迭代器，其指向的元素类型为 `relation` 或可转换为 `relation`。
  `last` 可以从 `first` 到达。
* [*Effects:] Constructs an empty `bimap` and fills it with the elements in the range
`[first,last)`. Insertion of each element may or may not succeed depending on
acceptance by the collection types of the `bimap`.\n
  [*效果：]构造一个空的 `bimap` 并用区间 `[first,last)` 中的元素进行填充。各元素的插入可能成功也可能不成功，
  这取决于 `bimap` 的组合类型的约束。
* [link complexity_signature_explanation
[*Complexity:]] O(m*H(m)), where m is the number of elements in `[first,last)`.\n
  [*复杂度：]O(m*H (m))，其中 m 为 `[first,last)` 中的元素数量。


    bimap(const bimap & x);

* [*Effects:] Constructs a copy of x, copying its elements as well as its
internal objects (key extractors, comparison objects, allocator.)\n
  [*效果：]构造一个 x 的拷贝，将其元素及内部对象(键提取器、比较对象、分配器)一起复制。
* [*Postconditions:] `*this == x`. The order of the views of the `bimap`
is preserved as well.\n
  [*后置条件：]`*this == x`。`bimap` 视图的顺序被保持。
* [*Complexity:] O(x.size()*log(x.size()) + C(x.size()))\n
  [*复杂度：]O(x.size()*log(x.size()) + C(x.size())) 


    ~bimap()

* [*Effects:] Destroys the `bimap` and all the elements contained.
The order in which the elements are destroyed is not specified.\n
  [*效果：]销毁 `bimap` 及其所含元素。元素销毁的顺序未指定。
* [*Complexity:] O(n).\n
  [*复杂度：]O(n). 


    bimap& operator=(const bimap& x);

* [*Effects:] Replaces the elements and internal objects of the `bimap`
with copies from x.\n
  [*效果：]以 x 的拷贝替换 `bimap` 的元素和内部对象。
* [*Postconditions:] `*this==x`. The order on the views of the `bimap`
is preserved as well.\n
  [*后置条件：]`*this == x`。`bimap` 视图的顺序被保持。
* [*Returns: ] `*this`.\n
  [*返回：]`*this`. 
* [*Complexity:] O(n + x.size()*log(x.size()) + C(x.size())).\n
  [*复杂度：]O(n + x.size()*log(x.size()) + C(x.size())). 
* [*Exception safety:] Strong, provided the copy and assignment operations
of the types of `ctor_args_list` do not throw.\n
  [*异常安全性：]强，如果类型 `ctor_args_list` 的复制和赋值操作不抛出异常的话。

[/
    allocator_type get_allocator() const;

* [*Effects:] Returns a copy of the `allocator_type` object used to construct
the `bimap`.
* [*Complexity:] Constant.
]

[endsect]

[#reference_projection_operations]

[section:projection_operations Projection operations 投射操作]

Given a `bimap` with views v1 and v2, we say than an v1-iterator
it1 and an v2-iterator it2 are equivalent if:\n
给定一个 `bimap`，其视图为 v1 和 v2，我们说一个 v1-迭代器 it1 与一个 v2-迭代器 it2 是等价的，如果：

* `it1 == i1.end()` AND `it2 == i2.end()`,\n
  `it1 == i1.end()` 且 `it2 == i2.end()`, 
* OR `it1` and `it2` point to the same element.\n
  或者 `it1` 和 `it2` 指向同一个元素。


    template< class IteratorType >
    left_iterator project_left(IteratorType iter);

    template< class IteratorType >
    left_const_iterator project_left(IteratorType iter) const;

* [*Requires:] `IteratorType` is a bimap view iterator. it is a
valid iterator of some view of `*this` (i.e. does not refer to some other
`bimap`.)\n
  [*要求：]`IteratorType` 为一个 bimap 视图迭代器。它是 `*this` 的某个视图的有效迭代器(即不是指向另一个 `bimap` 的)。 
* [*Effects:] Returns a left map view iterator equivalent to `it`.\n
  [*效果：]返回一个等价于 `it` 的左映射视图迭代器。
* [*Complexity:] Constant.\n
  [*复杂度：]常数。
* [*Exception safety:] nothrow.\n
  [*异常安全性：]无抛出。


    template< class IteratorType >
    right_iterator project_right(IteratorType iter);

    template< class IteratorType >
    right_const_iterator project_right(IteratorType iter) const;

* [*Requires:] `IteratorType` is a bimap view iterator. it is a
valid iterator of some view of `*this` (i.e. does not refer to some other
`bimap`.)\n
  [*要求：]`IteratorType` 为一个 bimap 视图迭代器。它是 `*this` 的某个视图的有效迭代器(即不是指向另一个 `bimap` 的)。 
* [*Effects:] Returns a right map view iterator equivalent to `it`.\n
  [*效果：]返回一个等价于 `it` 的右映射视图迭代器。
* [*Complexity:] Constant.\n
  [*复杂度：]常数。
* [*Exception safety:] nothrow.\n
  [*异常安全性：]无抛出。


    template< class IteratorType >
    iterator project_up(IteratorType iter);

    template< class IteratorType >
    const_iterator project_up(IteratorType iter) const;

* [*Requires:] `IteratorType` is a bimap view iterator. it is a
valid iterator of some view of `*this` (i.e. does not refer to some other
`bimap`.)\n
  [*要求：]`IteratorType` 为一个 bimap 视图迭代器。它是 `*this` 的某个视图的有效迭代器(即不是指向另一个 `bimap` 的)。 
* [*Effects:] Returns a collection of relations view iterator equivalent to `it`.\n
  [*效果：]返回一个等价于 `it` 的关系组合视图迭代器。
* [*Complexity:] Constant.\n
  [*复杂度：]常数。
* [*Exception safety:] nothrow.\n
  [*异常安全性：]无抛出。

[endsect]

[#reference_support_for_used_defined_names]

[section:support_for_user_defined_names Support for user defined names 对用户自定义名字的支持]

    template< class Tag >
    struct map_by;

* `map_by<Tag>::type` yields the type of the map view tagged with `Tag`.
`map_by<Tag>::`['-type name-] is the same as `map_by<Tag>::type::`['-type name-].\n
  `map_by<Tag>::type` 是一个标签为 `Tag` 的映射视图类型。`map_by<Tag>::`['-type name-] 
  与 `map_by<Tag>::type::`['-type name-] 相同。
* [*Requires: ] `Tag` is a valid user defined name of the bimap.\n
  [*要求：]`Tag` 是 bimap 的一个有效的用户自定义名字。


    template< class Tag >
    map_by<Tag>::type by();

    template< class Tag >
    const map_by<Tag>::type & by() const;


* [*Requires: ] `Tag` is a valid user defined name of the bimap.\n
  [*要求：]`Tag` 是 bimap 的一个有效的用户自定义名字。
* [*Effects:] Returns a reference to the map view tagged with `Tag` held by
`*this`.\n
  [*效果：]返回一个引用，引向由 `*this` 所持的标签为 `Tag` 的映射视图。
* [*Complexity:] Constant.\n
  [*复杂度：]常数。
* [*Exception safety:] nothrow.\n
  [*异常安全性：]无抛出。


    template< class Tag, class IteratorType >
    map_by<Tag>::iterator project(IteratorType iter);

    template< class Tag, class IteratorType >
    map_by<Tag>::const_iterator project(IteratorType iter) const

* [*Requires: ] `Tag` is a valid user defined name of the bimap. `IteratorType`
is a bimap view iterator. it is a valid iterator of some view of `*this`
(i.e. does not refer to some other `bimap`.)\n
  [*要求：]`Tag` 是 bimap 的一个有效的用户自定义名字。`IteratorType` 为一个 bimap 视图迭代器。
  它是 `*this` 的某个视图的有效迭代器(即不是指向另一个 `bimap` 的)。 
* [*Effects:] Returns a reference to the map view tagged with `Tag` held by
`*this`.\n
  [*效果：]返回一个引用，引向由 `*this` 所持的标签为 `Tag` 的映射视图。
* [*Complexity:] Constant.\n
  [*复杂度：]常数。
* [*Exception safety:] nothrow.\n
  [*异常安全性：]无抛出。


[endsect]

[section:serialization Serialization 序列化]

A `bimap` can be archived and retrieved by means of __BOOST_SERIALIZATION__.
Boost.Bimap does not expose a public serialisation interface, as this is
provided by Boost.Serialization itself. Both regular and XML archives
are supported.\n
`bimap` 可以通过 __BOOST_SERIALIZATION__ 被存档和取回。Boost.Bimap 没有提供公有的序列化接口，
而是由 Boost.Serialization 本身提供。常规存档和 XML 存档均可支持。

Each of the set specifications comprising a given `bimap` contributes its
own preconditions as well as guarantees on the retrieved containers. In describing
these, the following concepts are used. A type `T` is ['serializable]
(resp. XML-serializable) if any object of type `T` can be saved to an output
archive (XML archive) and later retrieved from an input archive (XML archive)
associated to the same storage. If `x`' of type `T` is loaded from the serialization
information saved from another object x, we say that x' is a ['restored copy] of x.
Given a __SGI_BINARY_PREDICATE__ `Pred` over `(T, T)`, and objects `p` and `q` of 
type `Pred`, we say that `q` is ['serialization-compatible] with `p` if\n
组成一个给定 `bimap` 的各个集合规格提供了本身的前提条件，也对取回容器提供了保证。在下面描述中，使用了以下概念。
类型 `T` 是['可序列化的](如可XML序列化)，如果类型 `T` 的任一个对象可以被保存到一个输出存档(如XML存档)中，
并且稍后可以从同一个输入存档(如XML存档)中取回。如果一个类型为 `T` 的对象 `x` 被序列化后，
从其序列化信息中取出的对象为 `x`'，则我们说 `x`' 是 `x` 的一个['恢复后拷贝]。给定一个 `(T, T)` 之上的
__SGI_BINARY_PREDICATE__ `Pred`，以及类型 `Pred` 的对象 `p` 和 `q`，我们说 `q` ['序列化兼容]于 `p`，如果 

* `p(x,y) == q(x`'`,y`'`)`

for every `x` and `y` of type `T` and `x`' and `y`' being restored copies of `x`
and `y`, respectively.\n
对于类型 `T` 的每个 `x` 和 `y` 以及 `x` 和 `y` 各自的恢复后拷贝 `x`' 和 `y`' 均成立。

[blurb [*Operation:] saving of a `bimap b` to an output archive
(XML archive) ar.\n
[*操作：]保存一个 `bimap b` 到一个输出存档(XML存档) ar。]

* [*Requires:] Value is serializable (XML-serializable). Additionally, each
of the views of b can impose other requirements.\n
  [*要求：]Value 是可序列化的(可XML序列化)。另外，b 的每个视图都可以增加其它要求。
* [*Exception safety:] Strong with respect to `b`. If an exception is thrown, ar
may be left in an inconsistent state.\n
  [*异常安全性：]对于 `b` 是强异常安全的。如果有异常抛出，ar 可能处于不一致的状态。

[blurb [*Operation:] loading of a `bimap` m' from an input archive
(XML archive) ar.\n
[*操作：]从一个输入存档(XML存档) ar 中导入一个 `bimap` m'。]

* [*Requires:] Value is serializable (XML-serializable). Additionally, each of
the views of `b`' can impose other requirements.\n
  [*要求：]Value 是可序列化的(可XML序列化)。另外，b 的每个视图都可以增加其它要求。
* [*Exception safety:] Basic. If an exception is thrown, ar may be left in an
inconsistent state.\n
  [*异常安全性：]基本。如果有异常抛出，ar 可能处于不一致的状态。

[endsect]
[endsect]

[endsect]