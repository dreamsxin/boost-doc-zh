[/license

Boost.Bimap

Copyright (c) 2006-2007 Matias Capeletto

Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt or copy at
http://www.boost.org/LICENSE_1_0.txt)

]

[/ QuickBook Document version 1.4 ]

[section:set_of_reference set_of Reference  set_of参考]

[section Header "boost/bimap/set_of.hpp" synopsis]

    namespace boost {
    namespace bimaps {


    template
    <
        class KeyType,
        class KeyCompare = std::less< KeyType >
    >
    struct set_of;


    template
    <
        class KeyCompare = std::less< _relation >
    >
    struct set_of_relation;


    } // namespace bimap
    } // namespace boost


[endsect]

[section Header "boost/bimap/multiset_of.hpp" synopsis]


    namespace boost {
    namespace bimaps {


    template
    <
        class KeyType,
        class KeyCompare = std::less< KeyType >
    >
    struct multiset_of;


    template
    <
        class KeyCompare = std::less< _relation >
    >
    struct multiset_of_relation;


    } // namespace bimap
    } // namespace boost


[endsect]


[section:collection_type_specifiers_set_of_and_multiset_of Collection type specifiers set_of and multiset_of 组合类型指示符 set_of 和 multiset_of]

These collection type specifiers allow for insertion of sets disallowing or
allowing duplicate elements, respectively. The syntaxes of `set_of` and
`multiset_of` coincide, so they are described together.\n
这两个组合类型指示符分别用于不允许和允许集合插入重复的元素。
`set_of` 和 `multiset_of` 的语法是一致的，所以将它们一起描述。

[endsect]


[section:__multi__set_of_views \[multi\]set_of Views  \[multi\]set_of视图]

A \[multi\]set_of set view is a std::\[multi\]set signature-compatible
interface to the underlying heap of elements contained in a `bimap`.\n
\[multi\]set_of 集合视图是一个与 std::\[multi\]set 签名兼容的接口，用于访问 `bimap` 中的元素堆。 

There are two variants: set_of, which does not allow duplicate elements
(with respect to its associated comparison predicate) and multiset_of,
which does accept those duplicates. The interface of these two variants
is largely the same, so they are documented together with their
differences explicitly noted where they exist.\n
它有两个变体：set_of，它不允许重复的元素(对于它的关联比较谓词而言)，和 multiset_of，它可以接受重复的元素。
这两个变体的接口基本上一样，因此我们对它们一起说明，并对它们间的差异特别说明。

If you look the bimap from a side, you will use a map view, and if you
look at it as a whole, you will be using a set view.\n
如果你从某侧去看一个 bimap，你要使用某个映射视图，如果你要把它当作一个整体来看，你就要使用集合视图。



    namespace boost {
    namespace bimaps {
    namespace views {

    template< ``['-implementation defined parameter list-]`` >
    class ``['-implementation defined view name-]``
    {
        public:

        typedef ``['-unspecified-]`` key_type;
        typedef ``['-unspecified-]`` value_type;
        typedef ``['-unspecified-]`` key_compare;
        typedef ``['-unspecified-]`` value_compare;
        typedef ``['-unspecified-]`` allocator_type;
        typedef ``['-unspecified-]`` reference;
        typedef ``['-unspecified-]`` const_reference;
        typedef ``['-unspecified-]`` iterator;
        typedef ``['-unspecified-]`` const_iterator;
        typedef ``['-unspecified-]`` size_type;
        typedef ``['-unspecified-]`` difference_type;
        typedef ``['-unspecified-]`` pointer;
        typedef ``['-unspecified-]`` const_pointer;
        typedef ``['-unspecified-]`` reverse_iterator;
        typedef ``['-unspecified-]`` const_reverse_iterator;

        typedef ``['-unspecified-]`` info_type;

        this_type & operator=(const this_type & x);

        allocator_type get_allocator() const;

        // iterators

        iterator               begin();
        const_iterator         begin() const;

        iterator               end();
        const_iterator         end() const;

        reverse_iterator       rbegin();
        const_reverse_iterator rbegin() const;

        reverse_iterator       rend();
        const_reverse_iterator rend() const;

        // capacity

        bool      empty() const;

        size_type size() const;

        size_type max_size() const;

        // modifiers

        std::pair<iterator,bool> ``[link reference_set_of_insert_value insert]``(const value_type & x);

        iterator ``[link reference_set_of_insert_iterator_value insert]``(iterator position, const value_type & x);

        template< class InputIterator>
        void ``[link reference_set_of_insert_iterator_iterator insert]``(InputIterator first,  InputIterator last);

        iterator ``[link reference_set_of_erase_iterator erase]``(iterator position);

        template< class CompatibleKey >
        size_type ``[link reference_set_of_erase_key erase]``(const CompatibleKey & x);

        iterator ``[link reference_set_of_erase_iterator_iterator erase]``(iterator first,  iterator last);

        bool ``[link reference_set_of_replace_iterator_value replace]``(iterator position, const value_type& x);

        // Only in map views
        // {

          template< class CompatibleKey >
          bool ``[link reference_set_of_replace_key_iterator_key replace_key]``(iterator position, const CompatibleKey & x);

          template< class CompatibleData >
          bool ``[link reference_set_of_replace_data_iterator_data replace_data]``(iterator position, const CompatibleData & x);

          template< class KeyModifier >
          bool ``[link reference_set_of_modify_key_iterator_modifier modify_key]``(iterator position, KeyModifier mod);

          template< class DataModifier >
          bool ``[link reference_set_of_modify_data_iterator_modifier modify_data]``(iterator position, DataModifier mod);

        // }

        void swap(this_type & x);

        void clear();

        // observers

        key_compare    key_comp() const;

        value_compare  value_comp() const;

        // set operations

        template< class CompatibleKey >
        iterator ``[link reference_set_of_find_key find]``(const CompatibleKey & x);

        template< class CompatibleKey >
        const_iterator ``[link reference_set_of_find_key find]``(const CompatibleKey & x) const;


        template< class CompatibleKey >
        size_type ``[link reference_set_of_count_key count]``(const CompatibleKey & x) const;


        template< class CompatibleKey >
        iterator ``[link reference_set_of_lower_bound_key lower_bound]``(const CompatibleKey & x);

        template< class CompatibleKey >
        const_iterator ``[link reference_set_of_lower_bound_key lower_bound]``(const CompatibleKey & x) const;


        template< class CompatibleKey >
        iterator ``[link reference_set_of_upper_bound_key upper_bound]``(const CompatibleKey & x);

        template< class CompatibleKey >
        const_iterator ``[link reference_set_of_upper_bound_key upper_bound]``(const CompatibleKey & x) const;


        template< class CompatibleKey >
        std::pair<iterator,iterator>
            ``[link reference_set_of_equal_range_key equal_range]``(const CompatibleKey & x);

        template< class CompatibleKey >
        std::pair<const_iterator,const_iterator>
            ``[link reference_set_of_equal_range_key equal_range]``(const CompatibleKey & x) const;

        // Only in maps views
        // {

        template< class LowerBounder, class UpperBounder>
        std::pair<iterator,iterator> ``[link reference_set_of_range_lower_upper range]``(
            LowerBounder lower, UpperBounder upper);

        template< class LowerBounder, class UpperBounder>
        std::pair<const_iterator,const_iterator> ``[link reference_set_of_range_lower_upper range]``(
            LowerBounder lower, UpperBounder upper) const;

        typedef ``['-unspecified-]`` data_type;

          // Only in for `set_of` collection type
          // {

          template< class CompatibleKey >
          const data_type & ``[link reference_set_of_at_key_const at]``(const CompatibleKey & k) const;

            // Only if the other collection type is mutable
            // {

            template< class CompatibleKey >
            data_type & ``[link reference_set_of_operator_bracket_key operator\[\]]``(const CompatibleKey & k);

            template< class CompatibleKey >
            data_type & ``[link reference_set_of_at_key at]``(const CompatibleKey & k);

            // }

            // Only if info_hook is used
            // {

            template< class CompatibleKey >
            info_type & ``[link reference_set_of_info_at_key info_at]``(const CompatibleKey & k);

            template< class CompatibleKey >
            const info_type & ``[link reference_set_of_info_at_key info_at]``(const CompatibleKey & k) const;

            // }

          // }

        // }
    };

    // view comparison

    bool operator==(const this_type & v1, const this_type & v2 );
    bool operator< (const this_type & v1, const this_type & v2 );
    bool operator!=(const this_type & v1, const this_type & v2 );
    bool operator> (const this_type & v1, const this_type & v2 );
    bool operator>=(const this_type & v1, const this_type & v2 );
    bool operator<=(const this_type & v1, const this_type & v2 );

    } // namespace views
    } // namespace bimap
    } // namespace boost



[/ Functions that may be implemented some day

        template< class Modifier>
        bool ``[link reference_set_of_modify_iterator_modifier modify]``(iterator position, Modifier mod);

        template< class CompatibleKey, class CompatibleCompare >
        iterator find(const CompatibleKey & x,
                      const CompatibleCompare & comp);

        template< class CompatibleKey, class CompatibleCompare >
        const_iterator find(const CompatibleKey & x,
                            const CompatibleCompare & comp) const;

        template< class CompatibleKey, class CompatibleCompare >
        size_type count(const CompatibleKey & x,
                        const CompatibleCompare & comp) const;

        template< class CompatibleKey, class CompatibleCompare >
        iterator lower_bound(const CompatibleKey & x,
                             const CompatibleCompare & comp);

        template< class CompatibleKey, class CompatibleCompare >
        const_iterator lower_bound(const CompatibleKey & x,
                                   const CompatibleCompare & comp) const;

        template< class CompatibleKey, class CompatibleCompare >
        iterator upper_bound(const CompatibleKey & x,
                             const CompatibleCompare & comp);

        template< class CompatibleKey, class CompatibleCompare >
        const_iterator upper_bound(const CompatibleKey & x,
                                   const CompatibleCompare & comp) const;

        template< class CompatibleKey, class CompatibleCompare >
        std::pair<iterator,iterator> equal_range(
            const CompatibleKey & x, const CompatibleCompare & comp);

        template< class CompatibleKey, class CompatibleCompare >
        std::pair<const_iterator,const_iterator> equal_range(
            const CompatibleKey & x, const CompatibleCompare & comp) const;

]


In the case of a `bimap< {multi}set_of<Left>, ... >`\n
对于 `bimap< {multi}set_of<Left>, ... >`：

In the set view:\n
在集合视图中：

    typedef signature-compatible with relation<       Left, ... > key_type;
    typedef signature-compatible with relation< const Left, ... > value_type;

In the left map view:\n
在左映射视图中：

    typedef  Left  key_type;
    typedef  ...   data_type;

    typedef signature-compatible with std::pair< const Left, ... > value_type;

In the right map view:\n
在右映射视图中：

    typedef  ...  key_type;
    typedef  Left data_type;

    typedef signature-compatible with std::pair< ... ,const Left > value_type;


[#set_of_complexity_signature]

[section:complexity_signature Complexity signature 复杂度签名]

Here and in the descriptions of operations of this view, we adopt the
scheme outlined in the [link complexity_signature_explanation complexity signature section].
The complexity signature of \[multi\]set_of view is:\n
在以下对视图的操作说明中，我们采用在 [link complexity_signature_explanation 复杂度签名] 一节中给出的方式来描述。
\[multi\]set_of 视图的复杂度签名为：

* copying: `c(n) = n * log(n)`,\n
  复制：`c(n) = n * log(n)`, 
* insertion: `i(n) = log(n)`,\n
  插入：`i(n) = log(n)`, 
* hinted insertion: `h(n) = 1` (constant) if the hint element precedes the point of
insertion, `h(n) = log(n)` otherwise,\n
  提示插入：如果提示的元素位于插入点之前则 `h(n) = 1` (常数)，否则 `h(n) = log(n)`
* deletion: `d(n) = 1` (amortized constant),\n
  删除：`d(n) = 1` (分期常数), 
* replacement: `r(n) = 1` (constant) if the element position does not change,
`r(n) = log(n)` otherwise,\n
  替换：如果元素的位置不变则 `r(n) = 1` (常数)，否则 `r(n) = log(n)`
* modifying: `m(n) = 1` (constant) if the element position does not change,
`m(n) = log(n)` otherwise.\n
  修改：如果元素的位置不变则 `m(n) = 1` (常数)，否则 `m(n) = log(n)`

[endsect]

[section:instantiation_types Instantiation types 实例化类型]

Set views are instantiated internally to a `bimap`.
Instantiations are dependent on the following types:\n
集合视图在一个 `bimap` 的内部被实例化。实例化取决于以下类型：

* `Value` from the set specifier,\n
  来自集合指示符的 `Value`,
* `Allocator` from `bimap`,\n
  来自 `bimap` 的 `Allocator`, 
* `Compare` from the set specifier.\n
  来自集合指示符的 `Compare`. 

`Compare` is a __SGI_STRICT_WEAK_ORDERING__ on elements of `Value`.\n
`Compare` 是 `Value` 元素之上的一个 __SGI_STRICT_WEAK_ORDERING__。

[endsect]

[section:constructors__copy_and_assignment Constructors, copy and assignment 构造函数、复制和赋值]

Set views do not have public constructors or destructors.
Assignment, on the other hand, is provided.\n
集合视图没有公有的构造函数或析构函数。而另一方面，赋值操作则是提供的。

    this_type & operator=(const this_type & x);

* [*Effects: ] `a = b;`
where a and b are the `bimap` objects to which `*this` and x
belong, respectively.\n
  [*效果：]`a = b;` 其中 a 和 b 分别为 `*this` 和 x 所属的 `bimap` 对象。
* [*Returns: ] `*this`.\n
  [*返回：]`*this`. 



[endsect]

[section:modifiers Modifiers 修改器]

[#reference_set_of_insert_value]

    std::pair<iterator,bool> insert(const value_type & x);

* [*Effects:] Inserts `x` into the `bimap` to which the set view belongs if\n
  [*效果：]将 `x` 插入到集合视图所属的 `bimap`，如果
    * the set view is non-unique OR no other element with equivalent key exists,\n
      该集合视图为非唯一键的或者不存在相同键值的其它元素，
    * AND insertion is allowed by the other set specifications the `bimap`.\n
      并且，插入操作为该 `bimap` 的其它集合规格所允许。
* [*Returns:] The return value is a pair `p`. `p.second` is `true` if and only if insertion
took place. On successful insertion, `p.first` points to the element inserted;
otherwise, `p.first` points to an element that caused the insertion to be banned.
Note that more than one element can be causing insertion not to be allowed.\n
  [*返回：]返回值为一个值对 `p`。`p.second` 为 `true` 当且仅当插入成功。插入成功时，`p.first` 指向被插入的元素；
  否则，`p.first` 指向导致插入失败的元素。注意，可能会有一个以上的元素导致插入失败。
* [link set_of_complexity_signature
[*Complexity:]] O(I(n)).\n
  [link set_of_complexity_signature [*复杂度：]]O(I(n)). 
* [*Exception safety:] Strong.\n
  [*异常安全性：]强。


[#reference_set_of_insert_iterator_value]

    iterator insert(iterator position, const value_type & x);

* [*Requires: ] `position` is a valid iterator of the view.\n
  [*要求：]`position` 为视图的有效迭代器。
* [*Effects: ] `position` is used as a hint to improve the efficiency of the operation. Inserts `x` into the `bimap` to which the view belongs if\n
  [*效果：]`position` 作为提示以提高操作的效率。将 `x` 插入到集合视图所属的 `bimap`，如果
    * the set view is non-unique OR no other element with equivalent key exists,\n
      该集合视图为非唯一键的或者不存在相同键值的其它元素，
    * AND insertion is allowed by all other views of the `bimap`.\n
      并且，插入操作为该 `bimap` 的其它集合规格所允许。
* [*Returns:] On successful insertion, an iterator to the newly inserted
element. Otherwise, an iterator to an element that caused the insertion to be
banned. Note that more than one element can be causing insertion not to be allowed.\n
  [*返回：]插入成功时，返回指向新插入元素的迭代器。否则，返回指向导致插入失败的元素的迭代器。
  注意，可能会有一个以上的元素导致插入失败。
* [link set_of_complexity_signature
[*Complexity:]] O(H(n)).\n
  [link set_of_complexity_signature [*复杂度：]]O(H(n)). 
* [*Exception safety:] Strong.\n
  [*异常安全性：]强。


[#reference_set_of_insert_iterator_iterator]

    template< class InputIterator >
    void insert(InputIterator first, InputIterator last);

* [*Requires: ] `InputIterator` is a model of __SGI_INPUT_ITERATOR__ over elements of
type `value_type` or a type convertible to value_type. `first` and `last` are not
iterators into any view of the `bimap` to which this index
belongs. `last` is reachable from `first`.\n
  [*要求：]`InputIterator` 为 __SGI_INPUT_ITERATOR__，指向类型为 `value_type` 或可以转换为 `value_type` 的类型的元素。
  `first` 和 `last` 不是指向该索引所属 `bimap` 的任一视图的迭代器。`last` 可从 `first` 到达。
* [*Effects: ]
`iterator hint = end()`;
`while( first != last ) hint = insert( hint, *first++ );`\n
  [*效果：]`iterator hint = end();` `while( first != last ) hint = insert( hint, *first++ );` 
* [link set_of_complexity_signature
[*Complexity:]] O(m*H(n+m)), where m is the number of elements in
`[first, last)`.\n
  [link set_of_complexity_signature [*复杂度：]]O(m*H (n+m))，其中 m 为 [first, last) 中的元素数量。
* [*Exception safety:] Basic.\n
  [*异常安全性：]基本。


[#reference_set_of_erase_iterator]

    iterator erase(iterator position);

* [*Requires: ] `position` is a valid dereferenceable iterator if the set view.\n
  [*要求：]`position` 为该集合视图的有效可提领迭代器。
* [*Effects:] Deletes the element pointed to by `position`.\n
  [*效果：]删除 `position` 所指的元素。
* [*Returns:] An iterator pointing to the element immediately following
the one that was deleted, or `end()` if no such element exists.\n
  [*返回：]指向紧跟在被删元素之后的元素的迭代器，如果不存在这样的元素，则返回 `end()`。 
* [link set_of_complexity_signature
[*Complexity:]] O(D(n)).\n
  [link set_of_complexity_signature [*复杂度：]]O(D(n)). 
* [*Exception safety:] nothrow.\n
  [*异常安全性：]无抛出。 


[#reference_set_of_erase_key]

    template< class CompatibleKey >
    size_type erase(const CompatibleKey & x);

* [*Requires: ] `CompatibleKey` is a compatible key of `key_compare`.\n
  [*要求：]`CompatibleKey` 为 `key_compare` 的兼容键。
* [*Effects:] Deletes the elements with key equivalent to `x`.\n
  [*效果：]删除所有与 `x` 等价的元素。
* [*Returns:] Number of elements deleted.\n
  [*返回：]被删元素的数量。
* [link set_of_complexity_signature
[*Complexity:]] O(log(n) + m*D(n)), where m is the number of elements deleted.\n
  [link set_of_complexity_signature [*复杂度：]]O(log(n) + m*D(n))，其中 m 为被删元素数量。 
* [*Exception safety:] Basic.\n
  [*异常安全性：]基本。


[#reference_set_of_erase_iterator_iterator]

    iterator erase(iterator first, iterator last);

* [*Requires: ] `[first,last)` is a valid range of the view.\n
  [*要求：]`[first,last)` 为视图的有效区间。
* [*Effects:] Deletes the elements in `[first,last)`.\n
  [*效果：]删除 `[first,last)` 中所有元素。
* [*Returns:] last.\n
  [*返回：]last。
* [link set_of_complexity_signature
[*Complexity:]] O(log(n) + m*D(n)), where m is the number of elements
in `[first,last)`.\n
  [link set_of_complexity_signature [*复杂度：]]O(log(n) + m*D(n))，其中 m 为 [first,last) 中的元素数量。
* [*Exception safety:] nothrow.\n
  [*异常安全性：]无抛出。 


[#reference_set_of_replace_iterator_value]

    bool replace(iterator position, const value_type& x);

* [*Requires: ] `position` is a valid dereferenceable iterator of the set view.\n
  [*要求：]`position` 为该集合视图的有效可提领迭代器。
* [*Effects:] Assigns the value `x` to the element pointed to by `position` into
the `bimap` to which the set view belongs if, for the value `x`\n
  [*效果：]将值 `x` 赋给 `position` 所指向的，位于该集合视图所属 `bimap` 中的元素，如果对于值 `x` 
    * the set view is non-unique OR no other element with equivalent key exists
(except possibly `*position`),\n
      该集合视图为非唯一键的或者不存在相同键值的其它元素(除 `*position` 以外)，
    * AND replacing is allowed by all other views of the `bimap`.\n
      并且，替换操作为该 `bimap` 的其它视图所允许。
* [*Postconditions:] Validity of position is preserved in all cases.\n
  [*后置条件：]在所有情形下，position 的有效性被保持。
* [*Returns: ] `true` if the replacement took place, `false` otherwise.\n
  [*返回：]`true` 如果替换成功，否则返回 `false`。
* [link set_of_complexity_signature
[*Complexity:]] O(R(n)).\n
  [link set_of_complexity_signature [*复杂度：]]O(R(n)).
* [*Exception safety:] Strong. If an exception is thrown by some user-provided
operation, the `bimap` to which the set view belongs remains in
its original state.\n
  [*异常安全性：]强。如果用户提供的某个操作抛出异常，则集合视图所属的 bimap 将保持原有状态。


[#reference_set_of_replace_key_iterator_key]

    template< class CompatibleKey >
    bool replace_key(iterator position, const CompatibleKey & x);

* [*Requires: ] `position` is a valid dereferenceable iterator of the set view.
`CompatibleKey` can be assigned to `key_type`.\n
  [*要求：]`position` 为该集合视图的有效可提领迭代器。`CompatibleKey` 可以被赋值给 `key_type`. 
* [*Effects:] Assigns the value `x` to `e.first`, where `e` is the element pointed 
to by `position` into the `bimap` to which the set view belongs if,\n
  [*效果：]将值 `x` 赋给 `e.first`，其中 `e` 为 `position` 所指向的，位于该集合视图所属 `bimap` 中的元素，如果
    * the map view is non-unique OR no other element with equivalent key exists
(except possibly `*position`),\n
      该集合视图为非唯一键的或者不存在相同键值的其它元素(除 `*position` 以外)，
    * AND replacing is allowed by all other views of the `bimap`.\n
      并且，替换操作为该 `bimap` 的其它视图所允许。
* [*Postconditions:] Validity of position is preserved in all cases.\n
  [*后置条件：]在所有情形下，position 的有效性被保持。
* [*Returns: ] `true` if the replacement took place, `false` otherwise.\n
  [*返回：]`true` 如果替换成功，否则返回 `false`。
* [link set_of_complexity_signature
[*Complexity:]] O(R(n)).\n
  [link set_of_complexity_signature [*复杂度：]]O(R(n)).
* [*Exception safety:] Strong. If an exception is thrown by some user-provided
operation, the `bimap` to which the set view belongs remains in
its original state.\n
  [*异常安全性：]强。如果用户提供的某个操作抛出异常，则集合视图所属的 bimap 将保持原有状态。


[#reference_set_of_replace_data_iterator_data]

    template< class CompatibleData >
    bool replace_data(iterator position, const CompatibleData & x);

* [*Requires: ] `position` is a valid dereferenceable iterator of the set view.
`CompatibleKey` can be assigned to `data_type`.\n
  [*要求：]`position` 为该集合视图的有效可提领迭代器。`CompatibleKey` 可以被赋值给 `data_type`.
* [*Effects:] Assigns the value `x` to `e.second`, where `e` is the element pointed 
to by `position` into the `bimap` to which the set view belongs if,\n
  [*效果：]将值 `x` 赋给 `e.second`，其中 `e` 为 `position` 所指向的，位于该集合视图所属 `bimap` 中的元素，如果
    * the map view is non-unique OR no other element with equivalent key exists
(except possibly `*position`),\n
      该集合视图为非唯一键的或者不存在相同键值的其它元素(除 `*position` 以外)， 
    * AND replacing is allowed by all other views of the `bimap`.\n
      并且，替换操作为该 `bimap` 的其它视图所允许。
* [*Postconditions:] Validity of position is preserved in all cases.\n
  [*后置条件：]在所有情形下，position 的有效性被保持。
* [*Returns: ] `true` if the replacement took place, `false` otherwise.\n
  [*返回：]`true` 如果替换成功，否则返回 `false`。
* [link set_of_complexity_signature
[*Complexity:]] O(R(n)).\n
  [link set_of_complexity_signature [*复杂度：]]O(R(n)).
* [*Exception safety:] Strong. If an exception is thrown by some user-provided
operation, the `bimap` to which the set view belongs remains in
its original state.\n
  [*异常安全性：]强。如果用户提供的某个操作抛出异常，则集合视图所属的 bimap 将保持原有状态。


[#reference_set_of_modify_key_iterator_modifier]

    template< class KeyModifier >
    bool modify_key(iterator position, KeyModifier mod);

* [*Requires: ] `KeyModifier` is a model of __SGI_UNARY_FUNCTION__ accepting arguments of
type: `key_type&`; `position` is a valid dereferenceable iterator of the view.\n
  [*要求：]`KeyModifier` 是一个 __SGI_UNARY_FUNCTION__，它接受的参数类型为 `key_type&`; 
  `position` 为该集合视图的有效可提领迭代器。
* [*Effects:] Calls `mod(e.first)` where e is the element pointed to by position and 
rearranges `*position` into all the views of the `bimap`.
If the rearrangement fails, the element is erased.
Rearrangement is successful if\n
  [*效果：]调用 `mod(e.first)`，其中 e 是 position 所指元素，对 `*position` 在 `bimap` 的所有视图中重排。
  如果重排失败，该元素将被删除。重排将成功，如果满足
    * the map view is non-unique OR no other element with equivalent key exists,\n
      该集合视图为非唯一键的或者不存在相同键值的其它元素，
    * AND rearrangement is allowed by all other views of the `bimap`.\n
      并且，重排操作为该 `bimap` 的其它视图所允许。
* [*Postconditions:] Validity of `position` is preserved if the operation succeeds.\n
  [*后置条件：]如果操作成功，则 `position` 的有效性被保持。
* [*Returns: ] `true` if the operation succeeded, `false` otherwise.\n
  [*返回：]`true` 如果替换成功，否则返回 `false`。
* [link set_of_complexity_signature
[*Complexity:]] O(M(n)).\n
  [link set_of_complexity_signature [*复杂度：]]O(M(n)).
* [*Exception safety:] Basic. If an exception is thrown by some user-provided
operation (except possibly mod), then the element pointed to by position is erased.\n
  [*异常安全性：]基本。如果用户提供的某个操作(除 mod 以外)抛出异常，则 position 所指元素被删除。 
* [*Note:] Only provided for map views. \n
  [*注：]仅对映射视图提供。


[#reference_set_of_modify_data_iterator_modifier]

    template< class DataModifier >
    bool modify_data(iterator position, DataModifier mod);

* [*Requires: ] `DataModifier` is a model of __SGI_UNARY_FUNCTION__ accepting arguments of
type: `data_type&`; `position` is a valid dereferenceable iterator of the view.\n
  [*要求：]`DataModifier` 是一个 __SGI_UNARY_FUNCTION__，它接受的参数类型为 `data_type&`; 
  `position` 为该集合视图的有效可提领迭代器。
* [*Effects:] Calls `mod(e.second)` where e is the element pointed to by position and 
rearranges `*position` into all the views of the `bimap`.
If the rearrangement fails, the element is erased.
Rearrangement is successful if\n
  [*效果：]调用 `mod(e.second)`，其中 e 是 position 所指元素，对 `*position` 在 `bimap` 的所有视图中重排。
  如果重排失败，该元素将被删除。重排将成功，如果满足
    * the oppositte map view is non-unique OR no other element with equivalent key in that
view exists,\n
      该集合视图为非唯一键的或者不存在相同键值的其它元素，
    * AND rearrangement is allowed by all other views of the `bimap`.\n
      并且，重排操作为该 `bimap` 的其它视图所允许。
* [*Postconditions:] Validity of `position` is preserved if the operation succeeds.\n
  [*后置条件：]如果操作成功，则 `position` 的有效性被保持。
* [*Returns: ] `true` if the operation succeeded, `false` otherwise.\n
  [*返回：]`true` 如果替换成功，否则返回 `false`。
* [link set_of_complexity_signature
[*Complexity:]] O(M(n)).\n
  [link set_of_complexity_signature [*复杂度：]]O(M(n)).
* [*Exception safety:] Basic. If an exception is thrown by some user-provided
operation (except possibly mod), then the element pointed to by position is erased.\n
  [*异常安全性：]基本。如果用户提供的某个操作(除 mod 以外)抛出异常，则 position 所指元素被删除。
* [*Note:] Only provided for map views. \n
  [*注：]仅对映射视图提供。

[/

[#reference_set_of_modify_iterator_modifier]

    template< class Modifier >
    bool modify(iterator position, Modifier mod);

* [*Requires: ] `Modifier` is a model of __SGI_BINARY_FUNCTION__ accepting arguments of
type: `first_type&` and `second_type&` for ['Map View] or `left_type&` and `right_type&`
['Set View]; `position` is a valid dereferenceable iterator of the view.
* [*Effects:] Calls `mod(e.first,e.second)` for ['Map View] or Calls `mod(e.left,e.right)`
for ['Set View] where e is the element pointed to by position and rearranges `*position` 
into all the views of the `bimap`.
If the rearrangement fails, the element is erased.
Rearrangement is successful if
    * the view is non-unique OR no other element with equivalent key exists,
    * AND rearrangement is allowed by all other views of the `bimap`.
* [*Postconditions:] Validity of `position` is preserved if the operation succeeds.
* [*Returns: ] `true` if the operation succeeded, `false` otherwise.
* [link set_of_complexity_signature
[*Complexity:]] O(M(n)).
* [*Exception safety:] Basic. If an exception is thrown by some user-provided
operation (except possibly mod), then the element pointed to by position is erased.

]

[endsect]

[section:set_operations Set operations 集合操作]

`[multi]set_of` views provide the full lookup functionality required by
__SGI_SORTED_ASSOCIATIVE_CONTAINER__ and __SGI_UNIQUE_ASSOCIATIVE_CONTAINER__,
namely `find`, `count`, `lower_bound`, `upper_bound` and `equal_range`.
Additionally, these member functions are templatized to allow for non-standard
arguments, so extending the types of search operations allowed.\n
`[multi]set_of` 视图提供了 __SGI_SORTED_ASSOCIATIVE_CONTAINER__ 和 __SGI_UNIQUE_ASSOCIATIVE_CONTAINER__ 
所要求的所有查找功能，分别为 `find`, `count`, `lower_bound`, `upper_bound` 和 `equal_range`。
另外，这些成员函数是模板化的，允许使用非标准参数，所以也可以扩展查找操作的类型。

[/
The kinds of arguments permissible when invoking the lookup member functions
are defined by the following concept.

Consider a __SGI_STRICT_WEAK_ORDERING__ `Compare` over values of type `Key`. A pair of
types `(CompatibleKey, CompatibleCompare)` is said to be a ['compatible extension]
of Compare if

* `CompatibleCompare` is a __SGI_BINARY_PREDICATE__ over `(Key, CompatibleKey)`,
* `CompatibleCompare` is a __SGI_BINARY_PREDICATE__ over `(CompatibleKey, Key)`,
* if `c_comp(ck,k1)` then `!c_comp(k1,ck)`,
* if `!c_comp(ck,k1)` and `!comp(k1,k2)` then `!c_comp(ck,k2)`,
* if `!c_comp(k1,ck)` and `!comp(k2,k1)` then `!c_comp(k2,ck)`,

for every `c_comp` of type `CompatibleCompare`, `comp` of type `Compare`, `ck` of type
`CompatibleKey` and `k1`, `k2` of type `Key`.
]
A type `CompatibleKey` is said to be a ['compatible key] of `Compare`
if `(CompatibleKey, Compare)` is a compatible extension of `Compare`. This implies
that `Compare`, as well as being a strict weak ordering, accepts arguments of type
`CompatibleKey`, which usually means it has several overloads of `operator()`.\n
类型 `CompatibleKey` 被称为 `Compare` 的['兼容键]，如果 `(CompatibleKey, Compare)` 是 `Compare` 的一个兼容扩展。
这意味着 `Compare`，一个严格弱序，将接受类型为 `CompatibleKey` 的参数，通常这表示会有几个 `operator()` 重载。 

[/
In the context of a compatible extension or a compatible key, the expressions
"equivalent", "less than" and "greater than" take on their obvious interpretations.
]

[#reference_set_of_find_key]

    template< class CompatibleKey >
    iterator find(const CompatibleKey & x);

    template< class CompatibleKey >
    const_iterator find(const CompatibleKey & x) const;

* [*Requires: ] `CompatibleKey` is a compatible key of `key_compare`.\n
  [*要求：]`CompatibleKey` 是 `key_compare` 的一个兼容键。
* [*Effects:] Returns a pointer to an element whose key is equivalent to `x`, or
`end()` if such an element does not exist.\n
  [*效果：]返回一个指向其键值等价于 `x` 的元素的指针，如果不存在这样的元素，则返回 `end()`。 
* [*Complexity:] O(log(n)).\n
  [*复杂度：]O(log(n)). 

[/
    template< class CompatibleKey, class CompatibleCompare >
    iterator find(const CompatibleKey & x,
                  const CompatibleCompare & comp);

    template< class CompatibleKey, class CompatibleCompare >
    const_iterator find(const CompatibleKey & x,
                        const CompatibleCompare & comp) const;

* [*Requires: ] `(CompatibleKey, CompatibleCompare)` is a compatible extension of
`key_compare.`
* [*Effects:] Returns a pointer to an element whose key is
equivalent to `x`, or `end()` if such an element does not exist.
* [*Complexity:] O(log(n)).
]

[#reference_set_of_count_key]

    template< class CompatibleKey >
    size_type count(const key_type & x) const;

* [*Requires: ] `CompatibleKey` is a compatible key of `key_compare`.\n
  [*要求：]`CompatibleKey` 是 `key_compare` 的一个兼容键。
* [*Effects:] Returns the number of elements with key equivalent to `x`.\n
  [*效果：]返回键值等价于 `x` 的元素数量。
* [*Complexity:] O(log(n) + count(x)).\n
  [*复杂度：]O(log(n) + count(x)). 

[/
    template< class CompatibleKey, class CompatibleCompare >
    size_type count(const CompatibleKey & x,
                    const CompatibleCompare & comp) const;

* [*Requires: ] `(CompatibleKey, CompatibleCompare)` is a compatible extension of
`key_compare.`
* [*Effects:] Returns the number of elements with key equivalent to `x`.
* [*Complexity:] O(log(n) + count(x)).
]

[#reference_set_of_lower_bound_key]

    template< class CompatibleKey >
    iterator lower_bound(const key_type & x);

    template< class CompatibleKey >
    const_iterator lower_bound(const key_type & x) const;

* [*Requires: ] `CompatibleKey` is a compatible key of `key_compare`.\n
  [*要求：]`CompatibleKey` 是 `key_compare` 的一个兼容键。
* [*Effects:] Returns an iterator pointing to the first element with key not
less than `x`, or `end()` if such an element does not exist.\n
  [*效果：]返回一个指向其键值不小于 `x` 的第一个元素的迭代器，如果不存在这样的元素，则返回 `end()`。 
* [*Complexity:] O(log(n)).\n
  [*复杂度：]O(log(n)). 


[#reference_set_of_upper_bound_key]

    template< class CompatibleKey >
    iterator upper_bound(const key_type & x);

    template< class CompatibleKey >
    const_iterator upper_bound(const key_type & x) const;

* [*Requires: ] `CompatibleKey` is a compatible key of `key_compare`.\n
  [*要求：]`CompatibleKey` 是 `key_compare` 的一个兼容键。
* [*Effects:] Returns an iterator pointing to the first element with key greater
than `x`, or `end()` if such an element does not exist.\n
  [*效果：]返回一个指向其键值大于 `x` 的第一个元素的迭代器，如果不存在这样的元素，则返回 `end()`。 
* [*Complexity:] O(log(n)).\n
  [*复杂度：]O(log(n)). 


[#reference_set_of_equal_range_key]

    template< class CompatibleKey >
    std::pair<iterator,iterator>
        equal_range(const key_type & x);

    template< class CompatibleKey >
    std::pair<const_iterator,const_iterator> 
        equal_range(const key_type & x) const;

* [*Requires: ] `CompatibleKey` is a compatible key of `key_compare`.\n
  [*要求：]`CompatibleKey` 是 `key_compare` 的一个兼容键。
* [*Effects:] Equivalent to `make_pair(lower_bound(x),upper_bound(x))`.\n
  [*效果：]等同于 `make_pair(lower_bound(x),upper_bound(x))`. 
* [*Complexity:] O(log(n)).\n
  [*复杂度：]O(log(n)). 



[endsect]

[section:range_operations Range operations 区间操作]

The member function range is not defined for sorted associative
containers, but `[multi]set_of` map views provide it as a convenient utility.
A range or interval is defined by two conditions for the lower and upper
bounds, which are modelled after the following concepts.\n
有序关联式容器没有定义成员函数 range，但是 `[multi]set_of` 映射视图却提供了这一函数以方便使用。
区间或范围是由下界和上界两个条件来定义的，它们遵循以下概念。

Consider a __SGI_STRICT_WEAK_ORDERING__ `Compare` over values of type Key.
A type `LowerBounder` is said to be a lower bounder of `Compare` if\n
考虑一个作用于类型 Key 的值的 __SGI_STRICT_WEAK_ORDERING__ `Compare`。
类型 `LowerBounder` 被称为 `Compare` 的下界谓词，如果

* `LowerBounder` is a `Predicate` over `Key`,\n
  `LowerBounder` 是 `Key` 之上的一个 `Predicate`，
* if `lower(k1)` and `!comp(k2,k1)` then `lower(k2)`,\n
  如果 `lower(k1)` 有 `!comp(k2,k1)` 则 `lower(k2)`， 

for every `lower` of type `LowerBounder`, `comp` of type `Compare`, and `k1`, `k2`
of type `Key`.
Similarly, an upper bounder is a type `UpperBounder` such that\n
对于类型为 `LowerBounder` 的每个 `lower`，类型为 `Compare` 的 `comp`，以及类型为 `Key` 的 `k1`, `k2` 都成立。
类似地，类型 `UpperBounder` 被称为上界谓词表示

* `UpperBounder` is a `Predicate` over `Key`,\n
  `UpperBounder` 是 `Key` 之上的一个 `Predicate`，
* if `upper(k1)` and `!comp(k1,k2)` then `upper(k2)`,\n
  如果 `upper(k1)` 有 `!comp(k1,k2)` 则 `upper(k2)`， 

for every `upper` of type `UpperBounder`, `comp` of type `Compare`, and `k1`, `k2`
of type `Key`.\n
对于类型为 `UpperBounder` 的每个 `upper`，类型为 `Compare` 的 `comp`，以及类型为 `Key` 的 `k1`, `k2` 都成立。

[#reference_set_of_range_lower_upper]

    template< class LowerBounder, class UpperBounder>
    std::pair<const_iterator,const_iterator> range(
        LowerBounder lower, UpperBounder upper) const;

* [*Requires: ] `LowerBounder` and `UpperBounder` are a lower and upper bounder of
`key_compare`, respectively.\n
  [*要求：]`LowerBounder` 和 `UpperBounder` 分别为 `key_compare` 的下界谓词和上界谓词。
* [*Effects:] Returns a pair of iterators pointing to
the beginning and one past the end of the subsequence of elements satisfying
lower and upper simultaneously. If no such elements exist, the iterators both
point to the first element satisfying lower, or else are equal to `end()` if this
latter element does not exist.\n
  [*效果：]返回一对迭代器，分别指向同时满足 lower 和 upper 的第一个元素和最后一个元素之后。
  如果不存在这样的元素，则两个迭代器指向满足 lower 的第一个元素，或者如果后者也不存在，则都指向 `end()`。 
* [*Complexity:] O(log(n)).\n
  [*复杂度：]O(log(n)). 
* [*Variants:] In place of lower or upper (or both), the singular value
`boost::bimap::unbounded` can be provided. This acts as a predicate which
all values of type `key_type` satisfy.\n
  [*变化：]还提供了一个值 `boost::bimap::unbounded` 用于替代 lower 或 upper (或两者)。
  它的作用相当于一个类型 `key_type` 的所有值均可满足的谓词。
* [*Note:] Only provided for map views.\n
  [*注：]仅对映射视图提供。

[endsect]

[section at(), info_at() and operator\[\] - set_of only]

[#reference_set_of_at_key_const]

    template< class CompatibleKey >
    const data_type & at(const CompatibleKey & k) const;

* [*Requires: ] `CompatibleKey` is a compatible key of `key_compare`.\n
  [*要求：]`CompatibleKey` 是 `key_compare` 的一个兼容键。
* [*Effects:] Returns the `data_type` reference that is associated with `k`, or
throws `std::out_of_range` if such key does not exist.\n
  [*效果：]返回与 `k` 相关联的 `data_type` 引用，或者如果不存在这样的键值，则抛出 `std::out_of_range`。
* [*Complexity:] O(log(n)).\n
  [*复杂度：]O(log(n)). 
* [*Note:] Only provided when `set_of` is used.\n
  [*注：]仅当使用 `set_of` 时提供。

The symmetry of bimap imposes some constraints on `operator[]` and the 
non constant version of at() that are not found in `std::maps`.
Tey are only provided if the other collection type is mutable
(`list_of`, `vector_of` and `unconstrained_set_of`).\n
bimap 的对称性对 `operator[]` 有所约束，而且在 `std::maps` 中没有非常量版本的 at()。
这些函数仅在其它组合类型为可修改(`list_of`, `vector_of` 和 `unconstrained_set_of`)时提供。

[#reference_set_of_operator_bracket_key]

    template< class CompatibleKey >
    data_type & operator[](const CompatibleKey & k);

* [*Requires: ] `CompatibleKey` is a compatible key of `key_compare`.\n
  [*要求：]`CompatibleKey` 是 `key_compare` 的一个兼容键。
* [*Effects: ] `return insert(value_type(k,data_type()))->second;`\n
  [*效果：]`return insert(value_type(k,data_type()))->second;`
* [*Complexity:] O(log(n)).\n
  [*复杂度：]O(log(n)). 
* [*Note:] Only provided when `set_of` is used and the other collection
type is mutable.\n
  [*注：]仅当使用 `set_of` 且其它组合类型为可修改时提供。

[#reference_set_of_at_key]

    template< class CompatibleKey >
    data_type & at(const CompatibleKey & k);

* [*Requires: ] `CompatibleKey` is a compatible key of `key_compare`.\n
  [*要求：]`CompatibleKey` 是 `key_compare` 的一个兼容键。
* [*Effects: ] Returns the `data_type` reference that is associated with `k`, or
throws `std::out_of_range` if such key does not exist.\n
  [*效果：]返回与 `k` 相关联的 `data_type` 引用，或者如果不存在这样的键值，则抛出 `std::out_of_range`。
* [*Complexity:] O(log(n)).\n
  [*复杂度：]O(log(n)). 
* [*Note:] Only provided when `set_of` is used and the other collection
type is mutable.\n
  [*注：]仅当使用 `set_of` 且其它组合类型为可修改时提供。

[/
The symmetry of bimap imposes some constraints on `operator[]` that are
not found in `std::maps`. If other views are unique,
`bimap::duplicate_value` is thrown whenever an assignment is attempted to
a value that is already a key in these views. As for
`bimap::value_not_found`, this exception is thrown while trying to access
a non-existent key: this behaviour differs from that of `std::map`, which
automatically assigns a default value to non-existent keys referred to
by `operator[]`.

    const data_type & operator[](const typename key_type & k) const;

* [*Effects:] Returns the `data_type` reference that is associated with `k`, or
throws `bimap::value_not_found` if such an element does not exist.
* [*Complexity:] O(log(n)).


    ``['-unspecified data_type proxy-]`` operator[](const typename key_type & k);

* [*Effects:] Returns a proxy to a `data_type` associated with `k` and the
bimap. The proxy behaves as a reference to the `data_type` object. If this
proxy is read and `k` was not in the bimap, the bimap::value_not_found is
thrown. If it is written then `bimap::duplicate_value` is thrown if the
assignment is not allowed by one of the other views of the `bimap`.
* [link set_of_complexity_signature
[*Complexity:]] If the assignment operator of the proxy is not used, then
the order is O(log(n)). If it is used, the order is O(I(n)) if `k` was not
in the bimap and O(R(n)) if it existed in the bimap.
]


[#reference_set_of_info_at_key]

    template< class CompatibleKey >
    info_type & info_at(const CompatibleKey & k);

    template< class CompatibleKey >
    const info_type & info_at(const CompatibleKey & k) const;

* [*Requires: ] `CompatibleKey` is a compatible key of `key_compare`.\n
  [*要求：]`CompatibleKey` 是 `key_compare` 的一个兼容键。
* [*Effects:] Returns the `info_type` reference that is associated with `k`, or
throws `std::out_of_range` if such key does not exist.\n
  [*效果：]返回与 `k` 相关联的 `info_type` 引用，或者如果不存在这样的键值，则抛出 `std::out_of_range`。
* [*Complexity:] O(log(n)).\n
  [*复杂度：]O(log(n)). 
* [*Note:] Only provided when `set_of` and `info_hook` are used\n
  [*注：]仅当使用 `set_of` 和 `info_hook` 时提供。


[endsect]

[section:serialization Serialization 序列化]

Views cannot be serialized on their own, but only as part of the `bimap`
into which they are embedded. In describing the additional preconditions and guarantees
associated to `[multi]set_of` views with respect to serialization of their embedding containers,
we use the concepts defined in the `bimap` serialization section.\n
视图不能被它们自己序列化，只能作为它们所嵌的 `bimap` 的一部分。
在描述与所嵌容器的 `[multi]set_of` 视图相关的其它前提条件和保证时，我们使用在 `bimap` 序列化一节中所定义的概念。

[blurb  [*Operation:] saving of a `bimap` m to an output archive (XML archive) ar.\n
[*操作：]保存一个 `bimap` m 到一个输出存档(XML 存档) ar 中。]

* [*Requires:] No additional requirements to those imposed by the container.\n
  [*要求：]除了对容器的要求以外，没有其它要求。


[blurb [*Operation:] loading of a `bimap` m' from an input archive (XML archive) ar.\n
[*操作：]从一个输入存档(XML 存档) ar 中导入一个 `bimap` m' 。]

* [*Requires:] In addition to the general requirements, `value_comp()` must be
serialization-compatible with `m.get<i>().value_comp()`, where i is the position
of the ordered view in the container.\n
  [*要求：]除了通常的要求以外，`value_comp()` 还必须序列化兼容于 `m.get<i>().value_comp()`，
  其中 i 为该有序视图在容器中的位置。
* [*Postconditions:] On successful loading, each of the elements of `[begin(), end())`
is a restored copy of the corresponding element in `[m.get<i>().begin(), m.get<i>().end())`.\n
  [*后置条件：]成功导入后，在 `[begin(), end())` 中的每个元素为 `[m.get<i>().begin(), m.get<i>().end())` 
  中各相应元素的恢复后拷贝。



[blurb [*Operation:] saving of an iterator or `const_iterator` it to an output archive
(XML archive) ar.\n
[*操作：]保存一个 `iterator` 或 `const_iterator` it 到一个输出存档(XML 存档) ar 中。]

* [*Requires: ] `it` is a valid iterator of the view. The associated `bimap`
has been previously saved.\n
[*要求：]`it` 为视图的有效迭代器。相关联的 `bimap` 已经被保存。 



[blurb [*Operation:] loading of an `iterator` or `const_iterator` `it`' from an input archive (
XML archive) ar.\n
[*操作：]从一个输入存档(XML 存档) ar 中导入一个 `iterator` 或 `const_iterator` it' 。]

* [*Postconditions:] On successful loading, if it was dereferenceable then `*it`' is the
restored copy of `*it`, otherwise `it`'` == end()`.\n
  [*后置条件：]成功导入后，如果 `it` 是可提领的，则 `*it`' 为 `*it` 的恢复后拷贝，否则 `it`'` == end()`. 
* [*Note:] It is allowed that it be a `const_iterator` and the restored `it`' an iterator,
or viceversa.\n
注：允许 `it` 是一个 `const_iterator`，而恢复后的 `it`' 为一个 `iterator`，反之亦然。


[endsect]
[endsect]

[endsect]