[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:introduction Introduction 简介]

[h2 What is xpressive? xpressive是什么？]

xpressive is a regular expression template library. Regular expressions
(regexes) can be written as strings that are parsed dynamically at runtime
(dynamic regexes), or as ['expression templates][footnote See
[@http://www.osl.iu.edu/~tveldhui/papers/Expression-Templates/exprtmpl.html
Expression Templates] 参见 [@http://www.osl.iu.edu/~tveldhui/papers/Expression-Templates/exprtmpl.html 
表达式模板]] that are parsed at compile-time (static regexes).
Dynamic regexes have the advantage that they can be accepted from the user
as input at runtime or read from an initialization file. Static regexes
have several advantages. Since they are C++ expressions instead of
strings, they can be syntax-checked at compile-time. Also, they can naturally
refer to code and data elsewhere in your program, giving you the ability to call
back into your code from within a regex match. Finally, since they are statically
bound, the compiler can generate faster code for static regexes.\n
xpressive 是一个正则表达式模板库。正则表达式(regexes)可以以字符串方式编写并在运行期进行动态的分析(动态regexes)，
又或者作为 ['表达式模板] 方式编写并在编译期进行分析(静态regexes)。
动态regexes的优点在于，它们可以在运行期从用户的输入中获得，或者是从一个初始化文件中读取。
静态regexes也有多个好处。由于它们是C++表达式而不是字符串，所以它们可以在编译期进行语法检查。
同时，它们可以很自然地引用你的程序中任意地方的代码和数据，让你可以在正则表达式匹配时回调你的代码。
最后，由于它们是静态绑定的，所以编译器可以为静态regexes生成更快速的代码。

xpressive's dual nature is unique and powerful. Static xpressive is a bit
like the _spirit_fx_. Like _spirit_, you can build grammars with
static regexes using expression templates. (Unlike _spirit_, xpressive does
exhaustive backtracking, trying every possibility to find a match for your
pattern.) Dynamic xpressive is a bit like _regexpp_. In fact,
xpressive's interface should be familiar to anyone who has used _regexpp_.
xpressive's innovation comes from allowing you to mix and match static and
dynamic regexes in the same program, and even in the same expression! You
can embed a dynamic regex in a static regex, or /vice versa/, and the embedded
regex will participate fully in the search, back-tracking as needed to make
the match succeed.\n
xpressive的双重特点是独特且强大的。静态xpressive有点象 _spirit_fx_。
和 _spirit_ 一样，你可以用表达式模板为静态regexes构建语法。
(和 _spirit_ 不同的的，xpressive进行完全的回溯，尝试每一种可能性以找到与你的模式相匹配的地方)。
动态xpressive则有点象 _regexpp_。实际上，xpressive的接口对于使用过 _regexpp_ 的任何人都会很熟悉。
xpressive的创新在于，它可以让你在同一个程序中混用和匹配静态和动态regexes，甚至是在同一个表达式中！
你可以在一个静态regex中嵌入一个动态regex，或/反之/，而且嵌入的regex也会完全参与到为了匹配成功而所需的查找和回溯之中。

[h2 Hello, world!]

Enough theory. Let's have a look at ['Hello World], xpressive style:\n
理论知识已经够了。下面我们来看一个xpressive风格的 ['Hello World]：

    #include <iostream>
    #include <boost/xpressive/xpressive.hpp>

    using namespace boost::xpressive;

    int main()
    {
        std::string hello( "hello world!" );

        sregex rex = sregex::compile( "(\\w+) (\\w+)!" );
        smatch what;

        if( regex_match( hello, what, rex ) )
        {
            std::cout << what[0] << '\n'; // whole match
            std::cout << what[1] << '\n'; // first capture
            std::cout << what[2] << '\n'; // second capture
        }

        return 0;
    }

This program outputs the following:\n
该程序的输出如下：

[pre
hello world!
hello
world
]

The first thing you'll notice about the code is that all the types in xpressive live in
the `boost::xpressive` namespace.\n
关于这段代码，你应该留意到的第一件事是，xpressive中的所有类型均位于 `boost::xpressive` 名字空间中。

[note Most of the rest of the examples in this document will leave off the
`using namespace boost::xpressive;` directive. Just pretend it's there.\n
本文档中的其它例子中，多数时候会省略 `using namespace boost::xpressive;` 指令。你只要当它存在就行了。]

Next, you'll notice the type of the regular expression object is `sregex`. If you are familiar
with _regexpp_, this is different than what you are used to. The "`s`" in "`sregex`" stands for
"`string`", indicating that this regex can be used to find patterns in `std::string` objects.
I'll discuss this difference and its implications in detail later.\n
接着，你应该留意到，正则表达式对象的类型是 `sregex`。如果你熟悉 _regexpp_，就会发现这和以前用过的有所不同。
"`sregex`" 中的 "`s`" 是代表 "`string`"，表示这个 regex 可被用于在 `std::string` 对象中查找模式。
稍后我会详细讨论这些差别和它的含义。

Notice how the regex object is initialized:\n
注意regex对象是如何初始化的：

    sregex rex = sregex::compile( "(\\w+) (\\w+)!" );

To create a regular expression object from a string, you must call a factory method such as
_regex_compile_. This is another area in which xpressive differs from
other object-oriented regular expression libraries. Other libraries encourage you to think of
a regular expression as a kind of string on steroids. In xpressive, regular expressions are not
strings; they are little programs in a domain-specific language. Strings are only one ['representation]
of that language. Another representation is an expression template. For example, the above line of code
is equivalent to the following:\n
要从一个字符串创建正则表达式对象，你必须调用一个工厂方法，如 _regex_compile_。
这是xpressive不同于其它面向对象的正则表达式库的另一个地方。其它的库鼓励你将正则表达式想象为一种带类固醇的字符串。
而在xpressive 中，正则表达式不是字符串；它们是一些用领域专用语言编写的小程序。
字符串只是这种语言的一种['表示法]。另一种表示法是表达式模板。例如，以上那行代码等同于：

    sregex rex = (s1= +_w) >> ' ' >> (s2= +_w) >> '!';

This describes the same regular expression, except it uses the domain-specific embedded language
defined by static xpressive.\n
这种写法定义了一个相同的正则表达式，除了它是用领域专用嵌入式语言来定义静态xpressive。

As you can see, static regexes have a syntax that is noticeably different than standard Perl
syntax. That is because we are constrained by C++'s syntax. The biggest difference is the use
of `>>` to mean "followed by". For instance, in Perl you can just put sub-expressions next
to each other:\n
正如你所见到的，静态regexes具有与标准的Perl语法明显不同的语法。这是因为我们受到C++语法的约束。
最大的不同是，使用 `>>` 来表示"后随"。例如，在Perl中你只需把子表达式一个接一个地写出来：

    abc

But in C++, there must be an operator separating sub-expressions:\n
但是在C++中，就必须要用一个操作符来分隔各个子表达式：

    a >> b >> c

In Perl, parentheses `()` have special meaning. They group, but as a side-effect they also create
back-references like [^$1] and [^$2]. In C++, there is no way to overload parentheses to give them
side-effects. To get the same effect, we use the special `s1`, `s2`, etc. tokens. Assign to
one to create a back-reference (known as a sub-match in xpressive).\n
在Perl中，括号`()`具有特殊的意义。它们负责分组，但是有一个副作用，它们会同时创建一些反向引用，如 [^$1] 和 [^$2]。
在C++中，没有办法对括号操作符进行重载以给予它们这些副作用。为了得到相同的效果，我们使用专用的记号，`s1`, `s2`, 等等。
赋值给这样的记号就可以创建一个反向引用(在xpressive中称为子匹配)。

You'll also notice that the one-or-more repetition operator `+` has moved from postfix
to prefix position. That's because C++ doesn't have a postfix `+` operator. So:\n
你还应该留意到，一次或多次重复的操作符 `+` 从后缀变为前缀了。这是因为C++没有后缀的 `+` 操作符。所以：

    "\\w+"

is the same as:\n
等同于：

    +_w

We'll cover all the other differences [link boost_xpressive.user_s_guide.creating_a_regex_object.static_regexes later].\n
[link boost_xpressive.user_s_guide.creating_a_regex_object.static_regexes 稍后] 我们将讨论其它的差异。

[endsect]
