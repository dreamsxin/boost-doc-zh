[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:examples Examples 示例]

Below you can find six complete sample programs.\n
以下你将看到六个完整的示例程序。
\n

----

[h4 See if a whole string matches a regex 检查整个字符串是否匹配一个regex]

This is the example from the Introduction. It is reproduced here for your convenience.\n
这是来自于"简介"一节中的示例。为便于查看，在此重复。

    #include <iostream>
    #include <boost/xpressive/xpressive.hpp>

    using namespace boost::xpressive;

    int main()
    {
        std::string hello( "hello world!" );

        sregex rex = sregex::compile( "(\\w+) (\\w+)!" );
        smatch what;

        if( regex_match( hello, what, rex ) )
        {
            std::cout << what[0] << '\n'; // whole match
            std::cout << what[1] << '\n'; // first capture
            std::cout << what[2] << '\n'; // second capture
        }

        return 0;
    }

This program outputs the following:\n
程序输出如下：

[pre
hello world!
hello
world
]
\n
[link boost_xpressive.user_s_guide.examples top]

----

[h4 See if a string contains a sub-string that matches a regex 检查一个字符串是否包含匹配某个regex的子串]

Notice in this example how we use custom `mark_tag`s to make the pattern more readable.
We can use the `mark_tag`s later to index into the _match_results_.\n
请留意在这个例子中，我们是如何使用定制的 `mark_tags` 来使得匹配的模式更可读。
我们可以在稍后使用 `mark_tag`s 来对 _match_results_ 进行索引访问。

    #include <iostream>
    #include <boost/xpressive/xpressive.hpp>

    using namespace boost::xpressive;

    int main()
    {
        char const *str = "I was born on 5/30/1973 at 7am.";

        // define some custom mark_tags with names more meaningful than s1, s2, etc.
        mark_tag day(1), month(2), year(3), delim(4);

        // this regex finds a date
        cregex date = (month= repeat<1,2>(_d))           // find the month ...
                   >> (delim= (set= '/','-'))            // followed by a delimiter ...
                   >> (day=   repeat<1,2>(_d)) >> delim  // and a day followed by the same delimiter ...
                   >> (year=  repeat<1,2>(_d >> _d));    // and the year.

        cmatch what;

        if( regex_search( str, what, date ) )
        {
            std::cout << what[0]     << '\n'; // whole match
            std::cout << what[day]   << '\n'; // the day
            std::cout << what[month] << '\n'; // the month
            std::cout << what[year]  << '\n'; // the year
            std::cout << what[delim] << '\n'; // the delimiter
        }

        return 0;
    }

This program outputs the following:\n
程序输出如下：

[pre
5/30/1973
30
5
1973
/
]
\n
[link boost_xpressive.user_s_guide.examples top]

----

[h4 Replace all sub-strings that match a regex 替换匹配某个regex的所有子串]

The following program finds dates in a string and marks them up with pseudo-HTML.\n
以下程序在一个字符串中查找日期并用伪-HTML标记它们。

    #include <iostream>
    #include <boost/xpressive/xpressive.hpp>

    using namespace boost::xpressive;

    int main()
    {
        std::string str( "I was born on 5/30/1973 at 7am." );

        // essentially the same regex as in the previous example, but using a dynamic regex
        sregex date = sregex::compile( "(\\d{1,2})([/-])(\\d{1,2})\\2((?:\\d{2}){1,2})" );

        // As in Perl, $& is a reference to the sub-string that matched the regex
        std::string format( "<date>$&</date>" );

        str = regex_replace( str, date, format );
        std::cout << str << '\n';

        return 0;
    }

This program outputs the following:\n
程序输出如下：

[pre
I was born on <date>5/30/1973</date> at 7am.
]
\n
[link boost_xpressive.user_s_guide.examples top]

----

[h4 Find all the sub-strings that match a regex and step through them one at a time 查找匹配某个regex的所有子串并每次一个地分步处理它们]

The following program finds the words in a wide-character string.
It uses `wsregex_iterator`. Notice that dereferencing a `wsregex_iterator`
yields a `wsmatch` object.\n
以下程序在一个宽字符串中查找单词。它使用 `wsregex_iterator`。注意，对 `wsregex_iterator` 的解引用将产生一个 `wsmatch` 对象。

    #include <iostream>
    #include <boost/xpressive/xpressive.hpp>

    using namespace boost::xpressive;

    int main()
    {
        std::wstring str( L"This is his face." );

        // find a whole word
        wsregex token = +alnum;

        wsregex_iterator cur( str.begin(), str.end(), token );
        wsregex_iterator end;

        for( ; cur != end; ++cur )
        {
            wsmatch const &what = *cur;
            std::wcout << what[0] << L'\n';
        }

        return 0;
    }

This program outputs the following:\n
程序输出如下：

[pre
This
is
his
face
]
\n
[link boost_xpressive.user_s_guide.examples top]

----

[h4 Split a string into tokens that each match a regex 将字符串分拆为匹配某个regex的记号]

The following program finds race times in a string and displays first
the minutes and then the seconds. It uses _regex_token_iterator_.\n
以下程序在字符串中查找比赛时间，并且先显示分钟数再显示秒数。它使用 _regex_token_iterator_. 

    #include <iostream>
    #include <boost/xpressive/xpressive.hpp>

    using namespace boost::xpressive;

    int main()
    {
        std::string str( "Eric: 4:40, Karl: 3:35, Francesca: 2:32" );

        // find a race time
        sregex time = sregex::compile( "(\\d):(\\d\\d)" );

        // for each match, the token iterator should first take the value of
        // the first marked sub-expression followed by the value of the second
        // marked sub-expression
        int const subs[] = { 1, 2 };

        sregex_token_iterator cur( str.begin(), str.end(), time, subs );
        sregex_token_iterator end;

        for( ; cur != end; ++cur )
        {
            std::cout << *cur << '\n';
        }

        return 0;
    }

This program outputs the following:\n
程序输出如下：

[pre
4
40
3
35
2
32
]
\n
[link boost_xpressive.user_s_guide.examples top]

----

[h4 Split a string using a regex as a delimiter 用一个regex作为分隔符分拆字符串]

The following program takes some text that has been marked up with html and strips
out the mark-up. It uses a regex that matches an HTML tag and a _regex_token_iterator_
that returns the parts of the string that do ['not] match the regex.\n
以下程序接受一些带有html标记的文本，去掉其中的标记。
它使用一个regex来匹配HTML标签，并用一个 _regex_token_iterator_ 返回字符串中不匹配该regex的其余部分。

    #include <iostream>
    #include <boost/xpressive/xpressive.hpp>

    using namespace boost::xpressive;

    int main()
    {
        std::string str( "Now <bold>is the time <i>for all good men</i> to come to the aid of their</bold> country." );

        // find a HTML tag
        sregex html = '<' >> optional('/') >> +_w >> '>';

        // the -1 below directs the token iterator to display the parts of
        // the string that did NOT match the regular expression.
        sregex_token_iterator cur( str.begin(), str.end(), html, -1 );
        sregex_token_iterator end;

        for( ; cur != end; ++cur )
        {
            std::cout << '{' << *cur << '}';
        }
        std::cout << '\n';

        return 0;
    }

This program outputs the following:\n
程序输出如下：

[pre
{Now }{is the time }{for all good men}{ to come to the aid of their}{ country.}
]
\n
[link boost_xpressive.user_s_guide.examples top]

----

[h4 Display a tree of nested results 显示嵌套结果组成的树]

Here is a helper class to demonstrate how you might display a tree of nested results:\n
以下是一个辅助类，示范了如何显示由嵌套结果组成的树：

    // Displays nested results to std::cout with indenting
    struct output_nested_results
    {
        int tabs_;

        output_nested_results( int tabs = 0 )
            : tabs_( tabs )
        {
        }

        template< typename BidiIterT >
        void operator ()( match_results< BidiIterT > const &what ) const
        {
            // first, do some indenting
            typedef typename std::iterator_traits< BidiIterT >::value_type char_type;
            char_type space_ch = char_type(' ');
            std::fill_n( std::ostream_iterator<char_type>( std::cout ), tabs_ * 4, space_ch );

            // output the match
            std::cout << what[0] << '\n';

            // output any nested matches
            std::for_each(
                what.nested_results().begin(),
                what.nested_results().end(),
                output_nested_results( tabs_ + 1 ) );
        }
    };

[link boost_xpressive.user_s_guide.examples top]

[endsect]
