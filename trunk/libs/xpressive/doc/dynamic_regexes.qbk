[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:dynamic_regexes Dynamic Regexes 动态Regexes]

[h2 Overview 概述]

Static regexes are dandy, but sometimes you need something a bit more ... dynamic. Imagine you are developing
a text editor with a regex search/replace feature. You need to accept a regular expression from the end user
as input at run-time. There should be a way to parse a string into a regular expression. That's what xpressive's
dynamic regexes are for. They are built from the same core components as their static counterparts, but they
are late-bound so you can specify them at run-time.\n
静态regexes非常漂亮，但有时你还需要更多的 ... 动态。想象你正在开发一个带有regex查找/替换功能的文本编辑器。
你需要在运行期从最终用户处输入正则表达式。需要一种方法来将字符串解析为正则表达式。这正是xpressive的动态regexes要做的。
它们构建于和静态regex相同核心组件之上，只是它们是后期绑定的，所以你可以在运行期来指定它们。

[h2 Construction and Assignment 构造与赋值]

There are two ways to create a dynamic regex: with the _regex_compile_
function or with the _regex_compiler_ class template. Use _regex_compile_
if you want the default locale. Use _regex_compiler_ if you need to
specify a different locale. In the section on
[link boost_xpressive.user_s_guide.grammars_and_nested_matches regex grammars],
we'll see another use for _regex_compiler_.\n
有两种方法创建一个动态regex：用 _regex_compile_ 函数或者用 _regex_compiler_ 类模板。
如果你想用缺省locale，则使用 _regex_compile_。如果你需要指定不同的locale，就使用 _regex_compiler_。
在 [link boost_xpressive.user_s_guide.grammars_and_nested_matches regex 语法] 一节中，我们将看到 _regex_compiler_ 的另一种用法。

Here is an example of using `basic_regex<>::compile()`:\n
以下是一个使用 `basic_regex<>::compile()` 的例子：

    sregex re = sregex::compile( "this|that", regex_constants::icase );

Here is the same example using _regex_compiler_:\n
以下是同一个例子，不过用的是 _regex_compiler_： 

    sregex_compiler compiler;
    sregex re = compiler.compile( "this|that", regex_constants::icase );

_regex_compile_ is implemented in terms of _regex_compiler_.\n
_regex_compile_ 是依据 _regex_compiler_ 实现的。

[h2 Dynamic xpressive Syntax 动态xpressive语法]

Since the dynamic syntax is not constrained by the rules for valid C++ expressions, we are free to use familiar
syntax for dynamic regexes. For this reason, the syntax used by xpressive for dynamic regexes follows the
lead set by John Maddock's [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1429.htm proposal]
to add regular expressions to the Standard Library. It is essentially the syntax standardized by
[@http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf ECMAScript], with minor changes
in support of internationalization.\n
由于动态语法不受有效C++表达式的限制，所以我们可以随意对动态regexes使用我们所熟悉的语法。
为此，xpressive对于动态regexes 所使用的语法是遵照 John Maddock 的关于为标准库增加正则表达式的 
[@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1429.htm 建议书] 的。基本上，它是 
[@http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf ECMAScript] 所标准化的语法，有一点点变化以支持国际化。

Since the syntax is documented exhaustively elsewhere, I will simply refer you to the existing standards, rather
than duplicate the specification here.\n
由于这种语法在很多地方都有记载，所以我只会向你指出一些已有的标准，而不再在此重复这些规范了。

[h2 Internationalization 国际化]

As with static regexes, dynamic regexes support internationalization by allowing you to specify a different
`std::locale`. To do this, you must use _regex_compiler_. The _regex_compiler_ class has an `imbue()` function.
After you have imbued a _regex_compiler_ object with a custom `std::locale`, all regex objects compiled by
that _regex_compiler_ will use that locale. For example:\n
和静态regexes相似，动态regexes也是通过让你指定一个不同的 `std::locale` 来支持国际化。为此，你必须使用 _regex_compiler_。 
_regex_compiler_ 类有一个 `imbue()` 函数。在你向一个 _regex_compiler_ 对象注入一个定制的 `std::locale` 后，
所有由该 _regex_compiler_ 编译的regex对象都将使用该locale。例如：

    std::locale my_locale = /* initialize your locale object here */;
    sregex_compiler compiler;
    compiler.imbue( my_locale );
    sregex re = compiler.compile( "\\w+|\\d+" );

This regex will use `my_locale` when evaluating the intrinsic character sets `"\\w"` and `"\\d"`.\n
这个regex在对基础字符集 `"\\w"` 和 `"\\d"` 求值时将使用 `my_locale`。

[endsect]
