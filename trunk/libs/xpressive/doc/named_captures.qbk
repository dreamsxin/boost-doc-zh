[/
 / Copyright (c) 2009 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:named_captures Named Captures 命名捕获]

[h2 Overview 概述]

For complicated regular expressions, dealing with numbered captures can be a
pain. Counting left parentheses to figure out which capture to reference is
no fun. Less fun is the fact that merely editing a regular expression could
cause a capture to be assigned a new number, invaliding code that refers back
to it by the old number.\n
对于复杂的正则表达式，处理编号的捕获会是一种痛苦。计算左括号的数量来确定引用的是哪个捕获，这并不好玩。
更不好玩的是，稍微修改一下正则表达式，就可能会导致某个捕获被赋予新的编号，而令以旧编号来引用它的代码失效。

Other regular expression engines solve this problem with a feature called
/named captures/. This feature allows you to assign a name to a capture, and
to refer back to the capture by name rather by number. Xpressive also supports
named captures, both in dynamic and in static regexes.\n
其它正则表达式引擎是以一种名为 /命名捕获/ 的特性来解决这个问题的。
这种特性允许你对一个捕获赋予某个名字，而后以名字而非号码来引用该捕获。Xpressive 也支持命名捕获，在动态和静态正则表达式中均支持。

[h2 Dynamic Named Captures 动态的命名捕获]

For dynamic regular expressions, xpressive follows the lead of other popular
regex engines with the syntax of named captures. You can create a named capture
with `"(?P<xxx>...)"` and refer back to that capture with `"(?P=xxx)"`. Here,
for instance, is a regular expression that creates a named capture and refers
back to it:\n
对于动态的正则表达式，xpressive 参照了其它具有命名捕获语法的正则表达式引擎。你可以用 `"(?P<xxx>...)"` 
创建一个命名捕获，而后用 `"(?P=xxx)"` 引用该捕获。例如，以下是一个创建了命名捕获并后向引用它的正则表达式：

    // Create a named capture called "char" that matches a single
    // character and refer back to that capture by name.
    // 创建一个名为"char"的命名捕获，匹配单个字符，并通过名字引用该捕获
    sregex rx = sregex::compile("(?P<char>.)(?P=char)");

The effect of the above regular expression is to find the first doubled
character.\n
以上正则表达式的作用是找出第一个连续重复的字符。

Once you have executed a match or search operation using a regex with named
captures, you can access the named capture through the _match_results_ object
using the capture's name.\n
一旦你用一个带有命名捕获的regex执行一次匹配或搜索操作，你就可以通过 _match_results_ 对象用捕获名来访问这个命名捕获。

    std::string str("tweet");
    sregex rx = sregex::compile("(?P<char>.)(?P=char)");
    smatch what;
    if(regex_search(str, what, rx))
    {
        std::cout << "char = " << what["char"] << std::endl;
    }

The above code displays:\n
以上代码输出：

[pre
char = e
]

You can also refer back to a named capture from within a substitution string.
The syntax for that is `"\\g<xxx>"`. Below is some code that demonstrates how
to use named captures when doing string substitution.\n
你也可以从一个替换子串内部引用命名捕获。语法是 `"\\g<xxx>"`。以下是一段代码，示范了如何在进行字符串替换时使用命名捕获。

    std::string str("tweet");
    sregex rx = sregex::compile("(?P<char>.)(?P=char)");
    str = regex_replace(str, rx, "**\\g<char>**", regex_constants::format_perl);
    std::cout << str << std::endl;

Notice that you have to specify `format_perl` when using named captures. Only
the perl syntax recognizes the `"\\g<xxx>"` syntax. The above code displays:\n
注意，在使用命名捕获时，你必须指定 `format_perl`。只有perl语法能识别 `"\\g<xxx>"` 语法。以上代码输出：

[pre
tw\*\*e\*\*t
]

[h2 Static Named Captures 静态命名捕获]

If you're using static regular expressions, creating and using named
captures is even easier. You can use the _mark_tag_ type to create
a variable that you can use like [globalref boost::xpressive::s1 `s1`],
[globalref boost::xpressive::s1 `s2`] and friends, but with a name
that is more meaningful. Below is how the above example would look 
using static regexes:\n
如果你使用的是静态正则表达式，那么创建和使用命名捕获就更容易了。你可以用 _mark_tag_ 类型来创建一个可以象 
[globalref boost::xpressive::s1 `s1`], [globalref boost::xpressive::s1 `s2`] 等那样使用的变量，但变量的名字更有意义。
以下是上一个例子的静态regex版本：

    mark_tag char_(1); // char_ is now a synonym for s1
    sregex rx = (char_= _) >> char_;

After a match operation, you can use the `mark_tag` to index into the
_match_results_ to access the named capture:\n
在匹配操作之后，你可以用 `mark_tag` 来作为 _match_results_ 的索引，以访问命名捕获：

    std::string str("tweet");
    mark_tag char_(1);
    sregex rx = (char_= _) >> char_;
    smatch what;
    if(regex_search(str, what, rx))
    {
        std::cout << what[char_] << std::endl;
    }

The above code displays:\n
以上代码输出：

[pre
char = e
]

When doing string substitutions with _regex_replace_, you can use named
captures to create /format expressions/ as below:\n
在用 _regex_replace_ 进行字符串替换时，你可以用命名捕获来创建如下 /格式表达式/：

    std::string str("tweet");
    mark_tag char_(1);
    sregex rx = (char_= _) >> char_;
    str = regex_replace(str, rx, "**" + char_ + "**");
    std::cout << str << std::endl;

The above code displays:\n
以上代码输出：

[pre
tw\*\*e\*\*t
]

[note You need to include [^<boost/xpressive/regex_actions.hpp>] to
use format expressions.\n
要使用格式表达式，你需要包含 [^<boost/xpressive/regex_actions.hpp>] 。]

[endsect]
