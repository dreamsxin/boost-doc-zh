[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:quick_start Quick Start 快速入门]

You don't need to know much to start being productive with xpressive. Let's begin with
the nickel tour of the types and algorithms xpressive provides.\n
要开始使用xpressive，你并不需要知道得太多。让我们来从xpressive所提供的类型和算法开始来一次简易的浏览。

[table xpressive's Tool-Box xpressive的工具箱
    [[Tool 工具]                             [Description 说明]]
    [[_basic_regex_]                    [Contains a compiled regular expression. _basic_regex_ is the most important type in xpressive. Everything you do with xpressive will begin with creating an object of type _basic_regex_.\n
    含有一个已编译的正则表达式。_basic_regex_ 是xpressive之中最重要的类型。
    你用xpressive做的任何事情都要从创建一个类型为 _basic_regex_ 的对象开始。]]
    [[_match_results_, _sub_match_]     [_match_results_ contains the results of a _regex_match_ or _regex_search_ operation. It acts like a vector of _sub_match_ objects. A _sub_match_ object contains a marked sub-expression (also known as a back-reference in Perl). It is basically just a pair of iterators representing the begin and end of the marked sub-expression.\n
    _match_results_ 含有 _regex_match_ 或 _regex_search_ 操作的结果。它就象一个存有 _sub_match_ 对象的向量。
    一个 _sub_match_ 对象含有一个已标记的子表达式(在Perl中又称为后向引用)。
    基本上，它只是一个迭代器对，代表了已标记子表达式的开始和结束。]]
    [[_regex_match_]                    [Checks to see if a string matches a regex. For _regex_match_ to succeed, the ['whole string] must match the regex, from beginning to end. If you give _regex_match_ a _match_results_, it will write into it any marked sub-expressions it finds.\n
    检查一个字符串是否匹配一个regex。_regex_match_ 要成功，必须是['整个字符串]从头到尾匹配regex。
    如果你给了 _regex_match_ 一个 _match_results_，那么它会将所有找到的带标记子表达式写入其中。]]
    [[_regex_search_]                   [Searches a string to find a sub-string that matches the regex. _regex_search_ will try to find a match at every position in the string, starting at the beginning, and stopping when it finds a match or when the string is exhausted. As with _regex_match_, if you give _regex_search_ a _match_results_, it will write into it any marked sub-expressions it finds.\n
    查找一个字符串，以发现其中匹配regex的子字符串。_regex_search_ 将尝试在字符串的每个位置查找匹配，从头部开始，
    当找到一个匹配或者整个字符串找完时停止。使用 _regex_match_ 时，如果你给了 _regex_search_ 一个 _match_results_，
    那么它会将所有找到的带标记子表达式写入其中。]]
    [[_regex_replace_]                  [Given an input string, a regex, and a substitution string, _regex_replace_ builds a new string by replacing those parts of the input string that match the regex with the substitution string. The substitution string can contain references to marked sub-expressions.\n
    给定一个输入字符串，一个regex和一个替代字符串，_regex_replace_ 通过将输入字符串中与 regex
    相匹配的部分替换为替代字符串来构建一个新的字符串。替代字符串可以含有对带标记子表达式的引用。]]
    [[_regex_iterator_]                 [An STL-compatible iterator that makes it easy to find all the places in a string that match a regex. Dereferencing a _regex_iterator_ returns a _match_results_. Incrementing a _regex_iterator_ finds the next match.\n
    一个与STL兼容的迭代器，可以很方便地找到在一个字符串中与某个regex匹配的所有地方。
    解引用一个 _regex_iterator_ 会返回一个 _match_results_。递增一个 _regex_iterator_ 可以找出下一个匹配。]]
    [[_regex_token_iterator_]           [Like _regex_iterator_, except dereferencing a _regex_token_iterator_ returns a string. By default, it will return the whole sub-string that the regex matched, but it can be configured to return any or all of the marked sub-expressions one at a time, or even the parts of the string that ['didn't] match the regex.\n
    类似于 _regex_iterator_，除了一点，解引用一个 _regex_token_iterator_ 会返回一个字符串。
    缺省地，它返回与regex匹配的整个子字符串，不过它也可以被配置为每次返回任一个或整个带标记子表达式，
    或者甚至是['不]匹配 regex的部分字符串。]]
    [[_regex_compiler_]                 [A factory for _basic_regex_ objects. It "compiles" a string into a regular expression. You will not usually have to deal directly with _regex_compiler_ because the _basic_regex_ class has a factory method that uses _regex_compiler_ internally. But if you need to do anything fancy like create a _basic_regex_ object with a different `std::locale`, you will need to use a _regex_compiler_ explicitly.\n
    一个用于 _basic_regex_ 对象的工厂。它将一个字符串"编译"为正则表达式。
    通常，你不需要直接关心 _regex_compiler_，因为 _basic_regex_ 类有一个工厂方法，其内部使用了 _regex_compiler_。
    不过，如果你需要做一些花哨的东西，如创建一个带有不同 std::locale 的 _basic_regex_ 对象，你就需要显式使用 _regex_compiler_ 了。]]
]

Now that you know a bit about the tools xpressive provides, you can pick the right tool for you
by answering the following two questions:\n
现在你应该对xpressive所提供的工具有了一些了解，你可以通过回答以下两个问题来找到合适的工具：

# What ['iterator] type will you use to traverse your data?\n
  你要用哪种类型的['迭代器]来遍历你的数据？
# What do you want to ['do] to your data?\n
  你要对你的数据['做]什么操作？

[h2 Know Your Iterator Type 弄明白你的迭代器类型]

Most of the classes in xpressive are templates that are parameterized on the iterator type.
xpressive defines some common typedefs to make the job of choosing the right types easier.
You can use the table below to find the right types based on the type of your iterator.\n
在xpressive中的多数类都是根据迭代器类型参数化的模板类。xpressive定义了一些常用的typedefs来让你可以更容易地选择合适的类型。
你可以用下表基于你的迭代器类型来找到正确的类型。

[table xpressive Typedefs vs. Iterator Types
    [[]                         [std::string::const_iterator]       [char const *]              [std::wstring::const_iterator]      [wchar_t const *]]
    [[_basic_regex_]            [`sregex`]                          [`cregex`]                  [`wsregex`]                         [`wcregex`]]
    [[_match_results_]          [`smatch`]                          [`cmatch`]                  [`wsmatch`]                         [`wcmatch`]]
    [[_regex_compiler_]         [`sregex_compiler`]                 [`cregex_compiler`]         [`wsregex_compiler`]                [`wcregex_compiler`]]
    [[_regex_iterator_]         [`sregex_iterator`]                 [`cregex_iterator`]         [`wsregex_iterator`]                [`wcregex_iterator`]]
    [[_regex_token_iterator_]   [`sregex_token_iterator`]           [`cregex_token_iterator`]   [`wsregex_token_iterator`]          [`wcregex_token_iterator`]]
]

You should notice the systematic naming convention. Many of these types are used together, so the
naming convention helps you to use them consistently. For instance, if you have a `sregex`, you
should also be using a `smatch`.\n
你要留意系统的命名习惯。这些类型经常要一起使用，所以命名习惯可以帮助你一致地使用它们。
例如，如果你有一个 `sregex`，你就应该使用 `smatch`。

If you are not using one of those four iterator types, then you can use the templates directly and
specify your iterator type.\n
如果你用的不是以上四种迭代器类型之一，那么你可以直接用模板并指定你的迭代器类型。

[h2 Know Your Task 弄明白你的任务]

Do you want to find a pattern once? Many times? Search and replace? xpressive has tools for all
that and more. Below is a quick reference:\n
你是不是只想找到一个模式一次？还是多次？是查找还是替换？xpressive 具有所有这些工具，而且更多。以下是一个快速参考：

[table Tasks and Tools 任务和工具
    [[To do this ... 要做... ] [Use this ... 就用... ]]
    [[__tip__ [link boost_xpressive.user_s_guide.examples.see_if_a_whole_string_matches_a_regex See if a whole string matches a regex  判断整个字符串是否匹配一个regex]] [The _regex_match_ algorithm]]
    [[__tip__ [link boost_xpressive.user_s_guide.examples.see_if_a_string_contains_a_sub_string_that_matches_a_regex See if a string contains a sub-string that matches a regex 判断一个字符串是否包含匹配某个regex的子串]] [The _regex_search_ algorithm]]
    [[__tip__ [link boost_xpressive.user_s_guide.examples.replace_all_sub_strings_that_match_a_regex Replace all sub-strings that match a regex 替换所有匹配regex的子串]] [The _regex_replace_ algorithm]]
    [[__tip__ [link boost_xpressive.user_s_guide.examples.find_all_the_sub_strings_that_match_a_regex_and_step_through_them_one_at_a_time Find all the sub-strings that match a regex and step through them one at a time 找到所有匹配regex的子串并逐个处理]] [The _regex_iterator_ class]]
    [[__tip__ [link boost_xpressive.user_s_guide.examples.split_a_string_into_tokens_that_each_match_a_regex Split a string into tokens that each match a regex 将字符串分拆为记号，每个匹配一个regex]] [The _regex_token_iterator_ class]]
    [[__tip__ [link boost_xpressive.user_s_guide.examples.split_a_string_using_a_regex_as_a_delimiter Split a string using a regex as a delimiter 用regex作为分隔符分拆一个字符串]]  [The _regex_token_iterator_ class]]
]

These algorithms and classes are described in excruciating detail in the Reference section.\n
在参考手册一节中有这些算法和类的详细说明。

[tip Try clicking on a task in the table above to see a complete example
program that uses xpressive to solve that particular task.\n
点击上表中的某个任务，可以看到一个完整的示例程序，使用xpressive来完成特定任务。]

[endsect]
