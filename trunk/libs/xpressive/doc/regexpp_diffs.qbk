[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:appendix_3__differences_from_boost_regex Appendix 3: Differences from Boost.Regex 附录3：与Boost.Regex的差异]

Since many of xpressive's users are likely to be familiar with the _regexpp_ library,
I would be remiss if I failed to point out some important differences between xpressive
and _regexpp_. In particular:\n
由于xpressive的许多用户都很熟悉 _regexpp_ 库，如果我不指出 xpressive 和 _regexpp_ 之间的主要差异，将是失职的。特别是：\n

* `xpressive::basic_regex<>` is a template on the iterator type, not the character type.\n
  `xpressive::basic_regex<>` 是基于迭代器类型而不是字符类型的模板。
* `xpressive::basic_regex<>` cannot be constructed directly from a string; rather, you must use
  `basic_regex::compile()` or `regex_compiler<>` to build a regex object from a string.\n
  `xpressive::basic_regex<>` 不能直接从字符串构造；你必须使用 `basic_regex::compile()` 或 `regex_compiler<>` 来从字符串构造一个regex对象。
* `xpressive::basic_regex<>` does not have an `imbue()` member function; rather, the `imbue()` member
  function is in the `xpressive::regex_compiler<>` factory.\n
  `xpressive::basic_regex<>` 没有 `imbue()` 成员函数；`imbue()` 成员函数是在 `xpressive::regex_compiler<>` 工厂中的。
* `boost::basic_regex<>` has a subset of `std::basic_string<>`'s members. `xpressive::basic_regex<>`
  does not. The members lacking are: `assign()`, `operator[]()`, `max_size()`, `begin()`, `end()`,
  `size()`, `compare()`, and `operator=(std::basic_string<>)`.\n
  `boost::basic_regex<>` 具有 `std::basic_string<>` 成员函数的一个子集。`xpressive::basic_regex<>` 则没有。
  缺少的成员包括有：`assign()`, `operator[]()`, `max_size()`, `begin()`, `end()`, `size()`, `compare()`, 
  和 `operator=(std::basic_string<>)`.
* Other member functions that exist in `boost::basic_regex<>` but do not exist in
  `xpressive::basic_regex<>` are: `set_expression()`, `get_allocator()`, `imbue()`, `getloc()`,
  `getflags()`, and `str()`.\n
  其它在 `boost::basic_regex<>` 中有而在 `xpressive::basic_regex<>` 中没有的成员函数包括有：
  `set_expression()`, `get_allocator()`, `imbue()`, `getloc()`, `getflags()`, 和 `str()`. 
* `xpressive::basic_regex<>` does not have a RegexTraits template parameter. Customization of regex
  syntax and localization behavior will be controlled by `regex_compiler<>` and a custom regex facet
  for `std::locale`.\n
  `xpressive::basic_regex<>` 不带 RegexTraits 模板参数。对regex语法和本地化行为的定制由 `regex_compiler<>` 
  和为 `std::locale` 定制的 regex facet 来控制。
* `xpressive::basic_regex<>` and `xpressive::match_results<>` do not have an Allocator template
  parameter. This is by design.\n
  `xpressive::basic_regex<>` 和 `xpressive::match_results<>` 不带 Allocator 模板参数。这是设计的原因。
* `match_not_dot_null` and `match_not_dot_newline` have moved from the `match_flag_type` enum to the
  `syntax_option_type` enum, and they have changed names to `not_dot_null` and `not_dot_newline`.\n
  `match_not_dot_null` 和 `match_not_dot_newline` 从 `match_flag_type` enum 移至 `syntax_option_type` enum，并且改名为 
  `not_dot_null` 和 `not_dot_newline`. 
* The following `syntax_option_type` enumeration values are not supported: `escape_in_lists`,
  `char_classes`, `intervals`, `limited_ops`, `newline_alt`, `bk_plus_qm`, `bk_braces`, `bk_parens`,
  `bk_refs`, `bk_vbar`, `use_except`, `failbit`, `literal`, `perlex`, `basic`, `extended`, `emacs`,
  `awk`, `grep` ,`egrep`, `sed`, `JavaScript`, `JScript`.\n
  以下 syntax_option_type 枚举值不被支持：`escape_in_lists`,
  `char_classes`, `intervals`, `limited_ops`, `newline_alt`, `bk_plus_qm`, `bk_braces`, `bk_parens`,
  `bk_refs`, `bk_vbar`, `use_except`, `failbit`, `literal`, `perlex`, `basic`, `extended`, `emacs`,
  `awk`, `grep` ,`egrep`, `sed`, `JavaScript`, `JScript`.
* The following `match_flag_type` enumeration values are not supported: `match_not_bob`,
  `match_not_eob`, `match_perl`, `match_posix`, and `match_extra`.\n
  以下 match_flag_type 枚举值不被支持：`match_not_bob`,
  `match_not_eob`, `match_perl`, `match_posix`, and `match_extra`.

Also, in the current implementation, the regex algorithms in xpressive will not detect
pathological behavior and abort by throwing an exception. It is up to you to write efficient
patterns that do not behave pathologically.\n
还有，在当前的实现中，xpressive中的regex算法不检测反常行为，并以抛出异常的方式退出。编写无反常行为的高效模式的责任在你。

[endsect]
