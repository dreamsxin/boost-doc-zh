[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:grammars_and_nested_matches Grammars and Nested Matches 语法和嵌套匹配]

[h2 Overview 概述]

One of the key benefits of representing regexes as C++ expressions is the ability to easily refer to other C++
code and data from within the regex. This enables programming idioms that are not possible with other regular
expression libraries. Of particular note is the ability for one regex to refer to another regex, allowing you
to build grammars out of regular expressions. This section describes how to embed one regex in another by value
and by reference, how regex objects behave when they refer to other regexes, and how to access the tree of results
after a successful parse.\n
用C ++表达式来表示regex的一个关键优点是，可以很容易地在regex内引用其它C++代码和数据。
这样就可以使用一些其它正则表达式库所不能实现的编程技巧。尤其值得注意的是，可以在一个regex中引用另一个regex，
你可以从正则表达式来构建语法。本节将介绍如何将一个regex以值方式或引用方式嵌入到另一个regex中，
当regex对象引用其它regex时其行为如何，以及在一次成功的语法分析后如何访问结果树。

[h2 Embedding a Regex by Value 以值方式嵌入一个Regex ]

The _basic_regex_ object has value semantics. When a regex object appears on the right-hand side in the definition
of another regex, it is as if the regex were embedded by value; that is, a copy of the nested regex is stored by
the enclosing regex. The inner regex is invoked by the outer regex during pattern matching. The inner regex
participates fully in the match, back-tracking as needed to make the match succeed.\n
_basic_regex_ 对象是具有值语义的。当一个regex对象出现在另一个regex的定义中的右侧时，其作用就象是该regex以值方式被嵌入一样；
即，内嵌的regex 的一份拷贝被外面的regex所保存。在模式匹配时，里面的regex将被外面的regex调用。
里面的regex在匹配中要完全参与，视乎成功匹配的需要进行后向跟踪。 

Consider a text editor that has a regex-find feature with a whole-word option. You can implement this with
xpressive as follows:\n
来看一个文本编辑器，它具有regex-查找的功能，并带有一个"完整单词"的选项。你可以用xpressive实现如下：

    find_dialog dlg;
    if( dialog_ok == dlg.do_modal() )
    {
        std::string pattern = dlg.get_text();          // the pattern the user entered
        bool whole_word = dlg.whole_word.is_checked(); // did the user select the whole-word option?

        sregex re = sregex::compile( pattern );        // try to compile the pattern

        if( whole_word )
        {
            // wrap the regex in begin-word / end-word assertions
            re = bow >> re >> eow;
        }

        // ... use re ...
    }

Look closely at this line:\n
我们来仔细看看这一行：

    // wrap the regex in begin-word / end-word assertions
    re = bow >> re >> eow;

This line creates a new regex that embeds the old regex by value. Then, the new regex is assigned back to
the original regex. Since a copy of the old regex was made on the right-hand side, this works as you might
expect: the new regex has the behavior of the old regex wrapped in begin- and end-word assertions.\n
这一行创建了一个新的regex，它以值方式嵌入了旧的regex。然后，这个新的regex被赋值回给原来的regex。
由于在右侧创建了旧regex 的一份拷贝，所以其结果正如你所想：新的regex的行为就是旧regex被包在 begin- 和 end-word 断言中。

[note Note that `re = bow >> re >> eow` does ['not] define a recursive regular expression, since regex
objects embed by value by default. The next section shows how to define a recursive regular expression by
embedding a regex by reference.\n
注意，`re = bow >> re >> eow` 并没有定义一个递归的正则表达式，因为缺省情况下，regex对象是以值方式嵌入的。
下一节将示范如何通过以引用方式嵌入regex来定义一个递归的正则表达式。]

[h2 Embedding a Regex by Reference 以引用方式嵌入一个Regex]

If you want to be able to build recursive regular expressions and context-free grammars, embedding a regex
by value is not enough. You need to be able to make your regular expressions self-referential. Most regular
expression engines don't give you that power, but xpressive does.\n
如果你想构建递归的正则表达式和上下文无关的语法，以值方式嵌入regex是不够的。你要能让你的正则表达式自引用。
多数正则表达式引擎没有这个能力，但 xpressive 可以。

[tip The theoretical computer scientists out there will correctly point out that a self-referential
regular expression is not "regular", so in the strict sense, xpressive isn't really a ['regular] expression engine
at all. But as Larry Wall once said, "the term '''[regular expression]''' has grown with the capabilities of our
pattern matching engines, so I'm not going to try to fight linguistic necessity here."\n
计算机理论科学家会正确地指出，一个自引用的正则表达式并不“正规”，所以在严格意义上，xpressive实际上并不是一个正则表达式引擎。
不过正如 Larry Wall 曾说过的，"这个术语'''[正则表达式]'''已随着我们的模式匹配引擎能力的发展而发展，
所以我不打算在这里尝试和语言规律相争。" ]

Consider the following code, which uses the `by_ref()` helper to define a recursive regular expression that
matches balanced, nested parentheses:\n
来看以下代码，它用 `by_ref()` 辅助函数定义了一个递归的正则表达式，来匹配成对的嵌套的括号：

    sregex parentheses;
    parentheses                          // A balanced set of parentheses ...
        = '('                            // is an opening parenthesis ...
            >>                           // followed by ...
             *(                          // zero or more ...
                keep( +~(set='(',')') )  // of a bunch of things that are not parentheses ...
              |                          // or ...
                by_ref(parentheses)      // a balanced set of parentheses
              )                          //   (ooh, recursion!) ...
            >>                           // followed by ...
          ')'                            // a closing parenthesis
        ;

Matching balanced, nested tags is an important text processing task, and it is one that "classic" regular
expressions cannot do. The `by_ref()` helper makes it possible. It allows one regex object to be embedded
in another ['by reference]. Since the right-hand side holds `parentheses` by reference, assigning the right-hand
side back to `parentheses` creates a cycle, which will execute recursively.\n
匹配成对的、嵌套的标签是一项重要的文本处理任务，它也是"经典的"正则表达式所不能完成的任务。
辅助函数 `by_ref()` 使得它可以实现了。它允许一个regex对象['以引用方式]嵌入到另一个之中。
由于赋值操作的右侧以引用方式持有 `parentheses`，所以将右侧部分赋值回 `parentheses` 将创建一个循环，它将递归执行。

[h2 Building a Grammar 构建一种语法]

Once we allow self-reference in our regular expressions, the genie is out of the bottle and all manner of
fun things are possible. In particular, we can now build grammars out of regular expressions. Let's have
a look at the text-book grammar example: the humble calculator.\n
一旦我们可以在正则表达式中使用自引用，就象魔鬼出了瓶子，各种有趣的事情都可能发生了。
尤其是，我们现在可以从正则表达式来构建语法。我们来看一个文本图书的语法例子：一个简陋的计算器。

    sregex group, factor, term, expression;

    group       = '(' >> by_ref(expression) >> ')';
    factor      = +_d | group;
    term        = factor >> *(('*' >> factor) | ('/' >> factor));
    expression  = term >> *(('+' >> term) | ('-' >> term));

The regex `expression` defined above does something rather remarkable for a regular expression: it matches
mathematical expressions. For example, if the input string were `"foo 9*(10+3) bar"`, this pattern would
match `"9*(10+3)"`. It only matches well-formed mathematical expressions, where the parentheses are
balanced and the infix operators have two arguments each. Don't try this with just any regular expression
engine!\n
以上定义的regex `expression` 做的事情对于一个正则表达式来说是不寻常的：它匹配数学表达式。
例如，如果输入的字符串是 `"foo 9*(10+3) bar"`，那么这个模式会匹配 `"9*(10+3)"`。
它只匹配正确的数学表达式，即括号是成对的，且各个中缀操作符都有两个操作数。不要用其它任意的正则表达式引擎来尝试它！

Let's take a closer look at this regular expression grammar. Notice that it is cyclic: `expression` is
implemented in terms of `term`, which is implemented in terms of `factor`, which is implemented in terms
of `group`, which is implemented in terms of `expression`, closing the loop. In general, the way to define
a cyclic grammar is to forward-declare the regex objects and embed by reference those regular expressions
that have not yet been initialized. In the above grammar, there is only one place where we need to reference
a regex object that has not yet been initialized: the definition of `group`. In that place, we use
`by_ref()` to embed `expression` by reference. In all other places, it is sufficient to embed the other
regex objects by value, since they have already been initialized and their values will not change.\n
我们来仔细看一下这个正则表达式语法。注意，它是循环的：`expression` 要依据 `term` 实现，后者要依据 `factor` 
实现，后者再依据 `group` 实现，后者再依据 `expression` 来实现，完成一个循环。
通常，定义一个循环语法的方法是，前向声明regex对象并以引用方式将尚未初始化的它们嵌入到正则表达式中。
在以上这个语法中，只有一个地方需要引用尚未初始化的regex对象：在 `group` 的定义中。
在此，我们使用 `by_ref()` 来以引用方式嵌入 `expression`。
在所有其它的地方，以值方式嵌入其它regex对象就够了，因为它们都已经完成了初始化，而且值不会再变了。

[tip [*Embed by value if possible 只要可能就以值方式嵌入]
\n\n
In general, prefer embedding regular expressions by value rather than by reference. It
involves one less indirection, making your patterns match a little faster. Besides, value semantics
are simpler and will make your grammars easier to reason about. Don't worry about the expense of "copying"
a regex. Each regex object shares its implementation with all of its copies.\n
通常，应该优先以值的方式而不是引用的方式嵌入正则表达式。这样可以少一层间接层，使你的模式匹配更快一点。
此外，值语义更为简单，可以让你的语法更易懂。不要担心"复制"一个regex的开销。每个regex对象在其所有拷贝间共享其实现。]

[h2 Dynamic Regex Grammars 动态Regex语法]

Using _regex_compiler_, you can also build grammars out of dynamic regular expressions.
You do that by creating named regexes, and referring to other regexes by name. Each
_regex_compiler_ instance keeps a mapping from names to regexes that have been created
with it.\n
使用 _regex_compiler_，你可以从动态正则表达式来构建语法。为此，你要通过创建命名regexes，然后以名字来引用至其它regexes。
每个 _regex_compiler_ 实例会持有一份从名字到它所创建的regexes的映射。

You can create a named dynamic regex by prefacing your regex with `"(?$name=)"`, where
/name/ is the name of the regex. You can refer to a named regex from another regex with
`"(?$name)"`. The named regex does not need to exist yet at the time it is referenced
in another regex, but it must exist by the time you use the regex.\n
你可以通过在regex前加上 `"(?$name=)"` 来创建一个命名的动态regex，其中 /name/ 是这个regex的名字。
你可以用 `"(?$name)"` 来从其它regex引用已命名的regex。在
被引用至其它regex之时，命名的regex并不需要已经存在，但是在使用该regex时，它必须是存在的。

Below is a code fragment that uses dynamic regex grammars to implement the calculator
example from above.\n
以下是一段使用动态regex语法来实现以上计算器例子的代码片断。

    using namespace boost::xpressive;
    using namespace regex_constants;

    sregex expr;

    {
         sregex_compiler compiler;
         syntax_option_type x = ignore_white_space;

                compiler.compile("(? $group  = ) \\( (? $expr ) \\) ", x);
                compiler.compile("(? $factor = ) \\d+ | (? $group ) ", x);
                compiler.compile("(? $term   = ) (? $factor )"
                                 " ( \\* (? $factor ) | / (? $factor ) )* ", x);
         expr = compiler.compile("(? $expr   = ) (? $term )"
                                 "   ( \\+ (? $term ) | - (? $term )   )* ", x);
    }

    std::string str("foo 9*(10+3) bar");
    smatch what;

    if(regex_search(str, what, expr))
    {
         // This prints "9*(10+3)":
         std::cout << what[0] << std::endl;
    }

As with static regex grammars, nested regex invocations create nested
match results (see /Nested Results/ below). The result is a complete parse tree
for string that matched. Unlike static regexes, dynamic regexes are always
embedded by reference, not by value.\n
和静态regex语法一样，嵌套的regex调用创建嵌套的匹配结果(见后文的 /嵌套结果/)。
该结果是一个针对被匹配字符串的完整的语法分析树。和静态regexes不同，动态 regexes总是以引用方式嵌入，不使用值方式。

[h2 Cyclic Patterns, Copying and Memory Management, Oh My! 循环的模式，复制和内存管理，哦！]

The calculator examples above raises a number of very complicated memory-management issues. Each of the
four regex objects refer to each other, some directly and some indirectly, some by value and some by
reference. What if we were to return one of them from a function and let the others go out of scope?
What becomes of the references? The answer is that the regex objects are internally reference counted,
such that they keep their referenced regex objects alive as long as they need them. So passing a regex
object by value is never a problem, even if it refers to other regex objects that have gone out of scope.\n
以上的计算器例子引起了许多非常复杂的内存管理问题。上面这四个regex对象中的每一个都引用了另外的regex，有直接的也有间接的，
有值方式的也有引用方式的。如果我们从一个函数返回了一个这样的regex，又让另一个被引用的regex离开了作用域，会怎么样呢？
答案是，regex对象在内部采用了引用计数，这样它们可以按需要保持它们所引用的regex对象的生存期。
因此，以值方式传递一个regex对象不会有问题，即使它所引用的其它regex 对象已经超出了作用域。

Those of you who have dealt with reference counting are probably familiar with its Achilles Heel: cyclic
references. If regex objects are reference counted, what happens to cycles like the one created in the
calculator examples? Are they leaked? The answer is no, they are not leaked. The _basic_regex_ object has some tricky
reference tracking code that ensures that even cyclic regex grammars are cleaned up when the last external
reference goes away. So don't worry about it. Create cyclic grammars, pass your regex objects around and
copy them all you want. It is fast and efficient and guaranteed not to leak or result in dangling references.\n
你们当中曾经用过引用计数的人，可能会很熟悉它的致命弱点：循环引用。
如果regex对象是引用计数的，对于前面的计算器例子中所创建的循环regex会发生什么？它们会泄露吗？答案是不会的，它们不会泄露。
_basic_regex_ 对象有一些特殊的引用跟踪代码来确保当最后一个外部引用消失时，即使是循环的regex语法也会清理干净。所以不需要担心它。
放心地按你所想的创建循环语法，传递regex对象和复制它们吧。这些是快速和高效的，并且保证不会泄露或引起悬空的引用。

[h2 Nested Regexes and Sub-Match Scoping 嵌套Regex和子匹配域]

Nested regular expressions raise the issue of sub-match scoping. If both the inner and outer regex write
to and read from the same sub-match vector, chaos would ensue. The inner regex would stomp on the
sub-matches written by the outer regex. For example, what does this do?\n
嵌套的正则表达式带来了子匹配域的问题。如果内层的regex和外层的regex都要写出到或读入自同一个子匹配向量，混乱就会发生。
内层的regex将破坏由外层regex写出的子匹配。例如，以下例子会做些什么？

    sregex inner = sregex::compile( "(.)\\1" );
    sregex outer = (s1= _) >> inner >> s1;

The author probably didn't intend for the inner regex to overwrite the sub-match written by the outer
regex. The problem is particularly acute when the inner regex is accepted from the user as input. The
author has no way of knowing whether the inner regex will stomp the sub-match vector or not. This is
clearly not acceptable.\n
作者可能并不是想要内层的regex覆写由外层regex所写出的子匹配。当内层的regex是由用户输入时，这个问题尤其严重。
作者没有办法知道内层的 regex是否会破坏子匹配向量。这显然是不可接受的。

Instead, what actually happens is that each invocation of a nested regex gets its own scope. Sub-matches
belong to that scope. That is, each nested regex invocation gets its own copy of the sub-match vector to
play with, so there is no way for an inner regex to stomp on the sub-matches of an outer regex. So, for
example, the regex `outer` defined above would match `"ABBA"`, as it should.\n
相反，实际情况是，嵌套regex的每次调用会得到它自己的作用域。子匹配属于该作用域。
即，每次嵌套regex的调用会得到它自己的子匹配向量拷贝用以操作，所以内层regex是没有办法破坏外层regex的子匹配的。
例如，以上所定义的regex `outer` 会匹配 `"ABBA"`，如其所愿。

[h2 Nested Results 嵌套结果]

If nested regexes have their own sub-matches, there should be a way to access them after a successful
match. In fact, there is. After a _regex_match_ or _regex_search_, the _match_results_ struct behaves
like the head of a tree of nested results. The _match_results_ class provides a `nested_results()`
member function that returns an ordered sequence of _match_results_ structures, representing the
results of the nested regexes. The order of the nested results is the same as the order in which
the nested regex objects matched.\n
如果嵌套regexes具有它们自己的子匹配，那么就应试有方法在成功匹配后访问它们。事实上，确实有。在 _regex_match_ 或 _regex_search_ 
之后，结构 _match_results_ 的行为类似于嵌套结果树的头部。_match_results_ 类提供了一个 `nested_results()` 成员函数，它返回一个 
_match_results_ 结构的已排序序列，表示嵌套regexes的结果。嵌套结果的顺序与嵌套regex对象匹配的顺序相同。

Take as an example the regex for balanced, nested parentheses we saw earlier:\n
以我们前面看到过的匹配成对的、嵌套的括号的regex为例：

    sregex parentheses;
    parentheses = '(' >> *( keep( +~(set='(',')') ) | by_ref(parentheses) ) >> ')';

    smatch what;
    std::string str( "blah blah( a(b)c (c(e)f (g)h )i (j)6 )blah" );

    if( regex_search( str, what, parentheses ) )
    {
        // display the whole match
        std::cout << what[0] << '\n';

        // display the nested results
        std::for_each(
            what.nested_results().begin(),
            what.nested_results().end(),
            output_nested_results() );
    }

This program displays the following:\n
程序输出如下：

[pre
( a(b)c (c(e)f (g)h )i (j)6 )
    (b)
    (c(e)f (g)h )
        (e)
        (g)
    (j)
]

Here you can see how the results are nested and that they are stored in the order in which they
are found.\n
这里你可以看到这个结果是如何嵌套的，以及它们是按查找的顺序保存的。

[tip See the definition of [link boost_xpressive.user_s_guide.examples.display_a_tree_of_nested_results output_nested_results] in the
[link boost_xpressive.user_s_guide.examples Examples] section.\n
请见在 [link boost_xpressive.user_s_guide.examples 示例] 一节中的 
[link boost_xpressive.user_s_guide.examples.display_a_tree_of_nested_results output_nested_results] 定义。]

[h2 Filtering Nested Results 过滤嵌套结果]

Sometimes a regex will have several nested regex objects, and you want to know which result corresponds
to which regex object. That's where `basic_regex<>::regex_id()` and `match_results<>::regex_id()`
come in handy. When iterating over the nested results, you can compare the regex id from the results to
the id of the regex object you're interested in.\n
有时一个regex有多个嵌套的regex对象，而且你想知道哪个结果对应哪个regex对象。这时 `basic_regex<>::regex_id()` 和 
`match_results<>::regex_id()` 可以帮上忙。在对嵌套结果进行迭代时，你可以将结果中的regex id与你所关心的regex对象的id进行比较。

To make this a bit easier, xpressive provides a predicate to make it simple to iterate over just the
results that correspond to a certain nested regex. It is called `regex_id_filter_predicate`, and it is
intended to be used with _iterator_. You can use it as follows:\n
为了让这容易一些，xpressive提供了一个谓词，可以很简单地对与特定的嵌套regex相对应的结果进行迭代。
这个谓词名为 `regex_id_filter_predicate`，其目的是与 _iterator_ 一起使用。你可以这样来使用它：

    sregex name = +alpha;
    sregex integer = +_d;
    sregex re = *( *_s >> ( name | integer ) );

    smatch what;
    std::string str( "marsha 123 jan 456 cindy 789" );

    if( regex_match( str, what, re ) )
    {
        smatch::nested_results_type::const_iterator begin = what.nested_results().begin();
        smatch::nested_results_type::const_iterator end   = what.nested_results().end();

        // declare filter predicates to select just the names or the integers
        sregex_id_filter_predicate name_id( name.regex_id() );
        sregex_id_filter_predicate integer_id( integer.regex_id() );

        // iterate over only the results from the name regex
        std::for_each(
            boost::make_filter_iterator( name_id, begin, end ),
            boost::make_filter_iterator( name_id, end, end ),
            output_result
            );

        std::cout << '\n';

        // iterate over only the results from the integer regex
        std::for_each(
            boost::make_filter_iterator( integer_id, begin, end ),
            boost::make_filter_iterator( integer_id, end, end ),
            output_result
            );
    }

where `output_results` is a simple function that takes a `smatch` and displays the full match.
Notice how we use the `regex_id_filter_predicate` together with `basic_regex<>::regex_id()` and
`boost::make_filter_iterator()` from the _iterator_ to select only those results
corresponding to a particular nested regex. This program displays the following:\n
其中 `output_results` 是一个简单的函数，它接受一个 `smatch` 并打印全匹配。留意我们是如何将 `regex_id_filter_predicate` 和 
`basic_regex<>::regex_id()` 以及 _iterator_ 的 `boost::make_filter_iterator()` 一起使用，来选出仅与特定的嵌套regex相对应的结果。
程序的输出如下：

[pre
marsha
jan
cindy
123
456
789
]



[endsect]
