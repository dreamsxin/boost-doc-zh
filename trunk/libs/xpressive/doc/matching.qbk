[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Matching and Searching 匹配与查找]

[h2 Overview 概述]

Once you have created a regex object, you can use the _regex_match_ and _regex_search_ algorithms to find patterns
in strings. This page covers the basics of regex matching and searching. In all cases, if you are familiar with
how _regex_match_ and _regex_search_ in the _regexpp_ library work, xpressive's versions work the same way.\n
一旦你创建了一个regex对象，你就可以用 _regex_match_ 和 _regex_search_ 算法来在字符串中查找该模式。
本节包括了regex匹配与查找的基础。在所有情况下，如果你对于在 Boost.Regex 库中如何使用 _regex_match_ 
和 _regex_search_ 是熟悉的，那么xpressive也是一样的用法。

[h2 Seeing if a String Matches a Regex 查看一个字符串是否匹配一个Regex]

The _regex_match_ algorithm checks to see if a regex matches a given input.\n
算法 _regex_match_ 检查一个regex是否匹配一个给定的输入。

[warning The _regex_match_ algorithm will only report success if the regex matches the ['whole input],
from beginning to end. If the regex matches only a part of the input, _regex_match_ will return false. If you
want to search through the string looking for sub-strings that the regex matches, use the _regex_search_
algorithm.\n
算法 _regex_match_ 只报告一个regex是否匹配整个输入，从头到尾。如果regex只匹配部分输入，则 _regex_match_ 将返回false。
如果你要在字符串中查找与regex相匹配的子串，请用 regex_search() 算法。]

The input can be a bidirectional range such as `std::string`, a C-style null-terminated string or a pair of
iterators. In all cases, the type of the iterator used to traverse the input sequence must match the iterator
type used to declare the regex object. (You can use the table in the
[link boost_xpressive.user_s_guide.quick_start.know_your_iterator_type Quick Start] to find the correct regex
type for your iterator.)\n
输入可能是一个双向区间，如 `std::string`，或是一个C-风格的以空字符结束的字符串，或是一对迭代器。
在所有情况下，用于对输入序列进行遍历的迭代器类型必须与用于声明regex对象的迭代器类型相匹配。
(你可以用 [link boost_xpressive.user_s_guide.quick_start.know_your_iterator_type 快速入门] 
一节中的表格来查找与你的迭代器相对应的正确regex类型)。 

    cregex cre = +_w;  // this regex can match C-style strings 该regex可以匹配C-风格的字符串
    sregex sre = +_w;  // this regex can match std::strings 该regex可以匹配std::string

    if( regex_match( "hello", cre ) )              // OK
        { /*...*/ }

    if( regex_match( std::string("hello"), sre ) ) // OK
        { /*...*/ }

    if( regex_match( "hello", sre ) )              // ERROR! iterator mis-match! 错误！迭代器不匹配！
        { /*...*/ }

The _regex_match_ algorithm optionally accepts a _match_results_ struct as an out parameter. If given, the _regex_match_
algorithm fills in the _match_results_ struct with information about which parts of the regex matched which
parts of the input.\n
算法 _regex_match_ 选择性地接受一个 _match_results_ 结构作为输出参数。
如果给出该参数，则 _regex_match_ 算法将与哪部分regex匹配哪部分输入的信息填入 _match_results_ 结构。

    cmatch what;
    cregex cre = +(s1= _w);

    // store the results of the regex_match in "what" 保存regex_match的结果到"what"中
    if( regex_match( "hello", what, cre ) )
    {
        std::cout << what[1] << '\n'; // prints "o"
    }

The _regex_match_ algorithm also optionally accepts a _match_flag_type_ bitmask. With _match_flag_type_, you can
control certain aspects of how the match is evaluated. See the _match_flag_type_ reference for a complete list
of the flags and their meanings.\n
算法 _regex_match_ 还选择性地接受一个 _match_flag_type_ 位掩码。通过 _match_flag_type_，你可以控制匹配如何执行的各个方面。
相关标志位的完整列表及其含义，请看 _match_flag_type_ 参考。

    std::string str("hello");
    sregex sre = bol >> +_w;

    // match_not_bol means that "bol" should not match at [begin,begin)
    // match_not_bol 表示 "bol" 并不匹配于 [begin,begin)
    if( regex_match( str.begin(), str.end(), sre, regex_constants::match_not_bol ) )
    {
        // should never get here!!! 不会运行至此！！！
    }

Click [link boost_xpressive.user_s_guide.examples.see_if_a_whole_string_matches_a_regex here] to see a complete
example program that shows how to use _regex_match_. And check the _regex_match_ reference to see a complete list
of the available overloads.\n
[link boost_xpressive.user_s_guide.examples.see_if_a_whole_string_matches_a_regex 这里] 
有一个完整的示例程序，示范如何使用 _regex_match_。查看 _regex_match_ 参考可以看到其它重载的完整列表。

[h2 Searching for Matching Sub-Strings  匹配子串的查找]

Use _regex_search_ when you want to know if an input sequence contains a sub-sequence that a regex matches.
_regex_search_ will try to match the regex at the beginning of the input sequence and scan forward in the
sequence until it either finds a match or exhausts the sequence.\n
当你想知道一个输入序列是否包含一个匹配regex的子序列时，使用 _regex_search_。
_regex_search_ 将尝试在输入序列的开始匹配regex，并向前扫描，直至找到一个匹配或扫描完整个序列。

In all other regards, _regex_search_ behaves like _regex_match_ ['(see above)]. In particular, it can operate
on a bidirectional range such as `std::string`, C-style null-terminated strings or iterator ranges. The same
care must be taken to ensure that the iterator type of your regex matches the iterator type of your input
sequence. As with _regex_match_, you can optionally provide a _match_results_ struct to receive the results
of the search, and a _match_flag_type_ bitmask to control how the match is evaluated.\n
在所有其它方面，_regex_search_ 的行为类似于 _regex_match_ ['(见上)]。特别地，它可以在一个双向区间，如 `std::string`，
或是一个C-风格的以空字符结束的字符串，或是一对迭代器上操作。同样也是注意确保你的regex的迭代器类型与输入序列的迭代器类型相匹配。
和 _regex_match_ 一样，你可以选择性地提供一个 _match_results_ 结构来接收查找结果，以及提供一个 _match_flag_type_ 
位掩码来控制如何进行匹配。

Click [link boost_xpressive.user_s_guide.examples.see_if_a_string_contains_a_sub_string_that_matches_a_regex here]
to see a complete example program that shows how to use _regex_search_. And check the _regex_search_ reference to
see a complete list of the available overloads.\n
[link boost_xpressive.user_s_guide.examples.see_if_a_string_contains_a_sub_string_that_matches_a_regex 这里] 
有一个完整的示例程序，示范如何使用 _regex_search_。查看 _regex_search_ 参考可以看到其它重载的完整列表。

[endsect]
