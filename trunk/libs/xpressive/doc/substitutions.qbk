[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:string_substitutions String Substitutions 字符串替代]

Regular expressions are not only good for searching text; they're good at ['manipulating] it. And one of the
most common text manipulation tasks is search-and-replace. xpressive provides the _regex_replace_ algorithm for
searching and replacing.\n
正则表达式并不只是擅长查找文本；它们也擅于['操作]文本。而最常见的一种文本操作任务就是查找并替换。
xpressive提供了 _regex_replace_ 算法来查找和替换。

[h2 regex_replace()]

Performing search-and-replace using _regex_replace_ is simple. All you need is an input sequence, a regex object,
and a format string or a formatter object. There are several versions of the _regex_replace_ algorithm. Some accept
the input sequence as a bidirectional container such as `std::string` and returns the result in a new container
of the same type. Others accept the input as a null terminated string and return a `std::string`. Still others
accept the input sequence as a pair of iterators and writes the result into an output iterator. The substitution
may be specified as a string with format sequences or as a formatter object. Below are some simple examples of
using string-based substitutions.\n
用 _regex_replace_ 执行查找和替换非常简单。你所需要的就是一个输入序列、一个regex对象、一个格式化字符串或一个格式化器对象。
存在多个版本的 _regex_replace_ 算法。有些以双向容器，如 `std::string`，的方式接受输入序列并在一个相同类型的新容器中返回结果。
其它的一些版本则以空字符结尾的字符串方式接受输入并返回一个 `std::string`。
还有一些版本以迭代器对的方式接受输入序列并将结果写出到输出迭代器。
替代方式可以由一个带格式化序列的字符串或一个格式化器对象来指定。以下是一些例子，使用了基于字符串的替代。

    std::string input("This is his face");
    sregex re = as_xpr("his");                // find all occurrences of "his" ...
    std::string format("her");                // ... and replace them with "her"

    // use the version of regex_replace() that operates on strings
    std::string output = regex_replace( input, re, format );
    std::cout << output << '\n';

    // use the version of regex_replace() that operates on iterators
    std::ostream_iterator< char > out_iter( std::cout );
    regex_replace( out_iter, input.begin(), input.end(), re, format );

The above program prints out the following:\n
以上程序的输出如下：

[pre
Ther is her face
Ther is her face
]

Notice that ['all] the occurrences of `"his"` have been replaced with `"her"`.\n
注意，['所有]的 `"his"` 都已替换为 `"her"`。 

Click [link boost_xpressive.user_s_guide.examples.replace_all_sub_strings_that_match_a_regex here] to see
a complete example program that shows how to use _regex_replace_. And check the _regex_replace_ reference
to see a complete list of the available overloads.\n
在 [link boost_xpressive.user_s_guide.examples.replace_all_sub_strings_that_match_a_regex 这里] 
有一个完整的示例程序示范如何使用 _regex_replace_。在 _regex_replace_ 参考手册中有所有可用重载的完整列表。

[h2 Replace Options 替换的选项]

The _regex_replace_ algorithm takes an optional bitmask parameter to control the formatting. The
possible values of the bitmask are:\n
算法 _regex_replace_ 接受一个可选的位掩码参数来控制格式化。该掩码的可用值如下：

[table Format Flags 格式化标志
    [[Flag]                     [Meaning]]
    [[`format_default`]         [Recognize the ECMA-262 format sequences (see below).\n
    使用ECMA-262格式化序列(见后)。]]
    [[`format_first_only`]      [Only replace the first match, not all of them.\n
    只替换第一个匹配而不是所有。]]
    [[`format_no_copy`]         [Don't copy the parts of the input sequence that didn't match the regex
                                 to the output sequence.\n
                                 不将输入序列中不匹配regex的部分复制至输出序列。]]
    [[`format_literal`]         [Treat the format string as a literal; that is, don't recognize any
                                 escape sequences.\n
                                 将格式化字符串视为文字值；即不使用任何转义序列。]]
    [[`format_perl`]            [Recognize the Perl format sequences (see below).\n
    使用Perl格式化序列(见后)。]]
    [[`format_sed`]             [Recognize the sed format sequences (see below).\n
    使用sed格式化序列(见后)。]]
    [[`format_all`]             [In addition to the Perl format sequences, recognize some
                                 Boost-specific format sequences.\n
                                 除了Perl格式化序列以外，还使用一些Boost特有的格式化序列。]]
]

These flags live in the `xpressive::regex_constants` namespace. If the substitution parameter is
a function object instead of a string, the flags `format_literal`, `format_perl`, `format_sed`, and
`format_all` are ignored.\n
这些标志位于 `xpressive::regex_constants` 名字空间。如果替代参数是一个函数对象而不是字符串，则忽略标志 
`format_literal`, `format_perl`, `format_sed`, 和 `format_all`。

[h2 The ECMA-262 Format Sequences  ECMA-262格式化序列]

When you haven't specified a substitution string dialect with one of the format flags above,
you get the dialect defined by ECMA-262, the standard for ECMAScript. The table below shows
the escape sequences recognized in ECMA-262 mode.\n
如果你没有指定带有以上任一格式化标志的替换串方言，那么你就是使用由ECMA-262定义的方言，这是ECMAScript的标准。
下表列出了在 ECMA-262 模式中使用的转义序列。

[table Format Escape Sequences 格式化转义序列
    [[Escape Sequence]      [Meaning]]
    [[[^$1], [^$2], etc.]   [the corresponding sub-match\n
    对应的子匹配]]
    [[[^$&]]                [the full match\n
    全匹配]]
    [[[^$\`]]               [the match prefix\n
    匹配前缀]]
    [[[^$']]                [the match suffix\n
    匹配后缀]]
    [[[^$$]]                [a literal `'$'` character\n
    `'$'` 字符]]
]

Any other sequence beginning with `'$'` simply represents itself. For example, if the format string were
`"$a"` then `"$a"` would be inserted into the output sequence.\n
任何其它以 `'$'` 开头的序列都只是表示它本身。例如，如果格式化串为 `"$a"` 则 `"$a"` 将被插入到输出序列中。

[h2 The Sed Format Sequences  Sed格式化序列]

When specifying the `format_sed` flag to _regex_replace_, the following escape sequences
are recognized:\n
当指定 `format_sed` 标志给 _regex_replace_ 时，将使用以下转义序列：

[table Sed Format Escape Sequences  Sed格式化转义序列
    [[Escape Sequence]      [Meaning]]
    [[[^\\1], [^\\2], etc.] [The corresponding sub-match\n
    对应的子匹配]]
    [[[^&]]                 [the full match\n
    全匹配]]
    [[[^\\a]]               [A literal `'\a'`\n
    文字 `'\a'`]]
    [[[^\\e]]               [A literal `char_type(27)`\n
    文字 `char_type(27)`]]
    [[[^\\f]]               [A literal `'\f'`\n
    文字 `'\f'`]]
    [[[^\\n]]               [A literal `'\n'`\n
    文字 `'\n'`]]
    [[[^\\r]]               [A literal `'\r'`\n
    文字 `'\r'`]]
    [[[^\\t]]               [A literal `'\t'`\n
    文字 `'\t'`]]
    [[[^\\v]]               [A literal `'\v'`\n
    文字 `'\v'`]]
    [[[^\\xFF]]             [A literal `char_type(0xFF)`, where [^['F]] is any hex digit\n
    文字 `char_type(0xFF)`, 其中 [^['F]] 是任意的十六进制数字]]
    [[[^\\x{FFFF}]]         [A literal `char_type(0xFFFF)`, where [^['F]] is any hex digit\n
    文字 `char_type(0xFFFF)`, 其中 [^['F]] 是任意的十六进制数字]]
    [[[^\\cX]]              [The control character [^['X]]\n
    控制字符 [^['X]] ]]
]

[h2 The Perl Format Sequences  Perl格式化序列 ]

When specifying the `format_perl` flag to _regex_replace_, the following escape sequences
are recognized:\n
当指定 `format_perl` 标志给 _regex_replace_ 时，使用以下转义序列：

[table Perl Format Escape Sequences  Perl 格式化转义序列
    [[Escape Sequence]      [Meaning]]
    [[[^$1], [^$2], etc.]   [the corresponding sub-match\n
    对应的子匹配]]
    [[[^$&]]                [the full match\n
    全匹配]]
    [[[^$\`]]               [the match prefix\n
    匹配前缀]]
    [[[^$']]                [the match suffix\n
    匹配后缀]]
    [[[^$$]]                [a literal `'$'` character\n
    文字 `'$'` 字符]]
    [[[^\\a]]               [A literal `'\a'`\n
    文字 `'\a'`]]
    [[[^\\e]]               [A literal `char_type(27)`\n
    文字 `'char_type(27)'`]]
    [[[^\\f]]               [A literal `'\f'`\n
    文字 `'\f'`]]
    [[[^\\n]]               [A literal `'\n'`\n
    文字 `'\n'`]]
    [[[^\\r]]               [A literal `'\r'`\n
    文字 `'\r'`]]
    [[[^\\t]]               [A literal `'\t'`\n
    文字 `'\t'`]]
    [[[^\\v]]               [A literal `'\v'`\n
    文字 `'\v'`]]
    [[[^\\xFF]]             [A literal `char_type(0xFF)`, where [^['F]] is any hex digit\n
    文字 `char_type(0xFF)`, 其中 [^['F]] 是任意的十六进制数字]]
    [[[^\\x{FFFF}]]         [A literal `char_type(0xFFFF)`, where [^['F]] is any hex digit\n
    文字 `char_type(0xFFFF)`, 其中 [^['F]] 是任意的十六进制数字]]
    [[[^\\cX]]              [The control character [^['X]]\n
    控制字符 {^['X]]]]
    [[[^\\l]]               [Make the next character lowercase\n
    将下一个字符变为小写]]
    [[[^\\L]]               [Make the rest of the substitution lowercase until the next [^\\E]\n
    将剩余替代变为小写，直至下一个 [^\\E]]]
    [[[^\\u]]               [Make the next character uppercase\n
    将下一个字符变为大写]]
    [[[^\\U]]               [Make the rest of the substitution uppercase until the next [^\\E]\n
    将剩余替代变为大写，直至下一个 [^\\E]]]
    [[[^\\E]]               [Terminate [^\\L] or [^\\U]\n
    结束 [^\\L] 或 [^\\U]]]
    [[[^\\1], [^\\2], etc.] [The corresponding sub-match\n
    对应的子匹配]]
    [[[^\\g<name>]]         [The named backref /name/\n
    命名的后向引用 /name/ ]]
]

[h2 The Boost-Specific Format Sequences  Boost特有的格式化序列]

When specifying the `format_all` flag to _regex_replace_, the escape sequences
recognized are the same as those above for `format_perl`. In addition, conditional
expressions of the following form are recognized:\n
当指定 `format_all` 标志给 _regex_replace_ 时，使用的转义序列与前面的 `format_perl` 相同。另外还可以使用以下形式的条件表达式：

[pre
?Ntrue-expression:false-expression
]

where /N/ is a decimal digit representing a sub-match. If the corresponding sub-match
participated in the full match, then the substitution is /true-expression/. Otherwise,
it is /false-expression/. In this mode, you can use parens [^()] for grouping. If you
want a literal paren, you must escape it as [^\\(].\n
其中 /N/ 是一个十进制数字，表示某个子匹配。如果对应的子匹配参与了全匹配，则该替换为 /true-expression/。
否则为 /false-expression/。在这个模式下，你可以使用括号 [^()] 来分组。如果你要一个文字上的括号，你必须用转义序列 [^\\(]。 

[h2 Formatter Objects 格式化器对象]

Format strings are not always expressive enough for all your text substitution
needs. Consider the simple example of wanting to map input strings to output
strings, as you may want to do with environment variables. Rather than a format
/string/, for this you would use a formatter /object/. Consider the following
code, which finds embedded environment variables of the form `"$(XYZ)"` and
computes the substitution string by looking up the environment variable in a
map.\n
格式化串并不总能足够应付你所有的文本替换需要。想象这样一个简单的例子，你想将输入字符串映射至输出字符串，正如你可能想用环境变量所做的。
这时不要用格式化/串/，你要用一个格式化器/对象/。
考虑以下代码，它找出内嵌的形如 `"$(XYZ)"` 的环境变量，并通过在一个map中查找该环境变量来计算替换的字符串。

    #include <map>
    #include <string>
    #include <iostream>
    #include <boost/xpressive/xpressive.hpp>
    using namespace boost;
    using namespace xpressive;

    std::map<std::string, std::string> env;

    std::string const &format_fun(smatch const &what)
    {
        return env[what[1].str()];
    }

    int main()
    {
        env["X"] = "this";
        env["Y"] = "that";

        std::string input("\"$(X)\" has the value \"$(Y)\"");

        // replace strings like "$(XYZ)" with the result of env["XYZ"]
        sregex envar = "$(" >> (s1 = +_w) >> ')';
        std::string output = regex_replace(input, envar, format_fun);
        std::cout << output << std::endl;
    }

In this case, we use a function, `format_fun()` to compute the substitution string
on the fly. It accepts a _match_results_ object which contains the results of the
current match. `format_fun()` uses the first submatch as a key into the global `env`
map. The above code displays:\n
在这种情况下，我们使用函数 `format_fun()` 来就地计算替换字符串。它接受一个含有当前匹配结果的 _match_results_ 对象。
`format_fun()` 使用第一个子匹配作为全局 `env` map的键值。以上代码输出：

[pre
"this" has the value "that"
]

The formatter need not be an ordinary function. It may be an object of class type.
And rather than return a string, it may accept an output iterator into which it
writes the substitution. Consider the following, which is functionally equivalent
to the above.\n
格式化器不必是一个普通函数。它可以是一个类类型对象。它也不必返回一个字符串，可以接受一个输出迭代器用以写出替代串。
参考以下代码，其功能与前面的代码一样。

    #include <map>
    #include <string>
    #include <iostream>
    #include <boost/xpressive/xpressive.hpp>
    using namespace boost;
    using namespace xpressive;

    struct formatter
    {
        typedef std::map<std::string, std::string> env_map;
        env_map env;

        template<typename Out>
        Out operator()(smatch const &what, Out out) const
        {
            env_map::const_iterator where = env.find(what[1]);
            if(where != env.end())
            {
                std::string const &sub = where->second;
                out = std::copy(sub.begin(), sub.end(), out);
            }
            return out;
        }

    };

    int main()
    {
        formatter fmt;
        fmt.env["X"] = "this";
        fmt.env["Y"] = "that";

        std::string input("\"$(X)\" has the value \"$(Y)\"");

        sregex envar = "$(" >> (s1 = +_w) >> ')';
        std::string output = regex_replace(input, envar, fmt);
        std::cout << output << std::endl;
    }

The formatter must be a callable object -- a function or a function object --
that has one of three possible signatures, detailed in the table below. For
the table, `fmt` is a function pointer or function object, `what` is a
_match_results_ object, `out` is an OutputIterator, and `flags` is a value
of `regex_constants::match_flag_type`:\n
格式化器必须是一个可调用的对象 -- 函数或函数对象 -- 可以是三个可能的签名之一，详见下表。
在下表中，`fmt` 是一个函数指针或函数对象，`what` 是一个 _match_results_ 对象，`out` 是一个输出迭代器，
`flags` 是一个类型为 `regex_constants::match_flag_type` 的值：

[table Formatter Signatures
[
    [Formatter Invocation]
    [Return Type]
    [Semantics]
]
[
    [`fmt(what)`]
    [Range of characters (e.g. `std::string`) or null-terminated string\n
    字符区间(如 `std::string`)或空字符结尾的字符串]
    [The string matched by the regex is replaced with the string returned by
     the formatter.\n
     匹配regex的字符串被替换为由格式化器返回的字符串。]
]
[
    [`fmt(what, out)`]
    [OutputIterator\n输出迭代器]
    [The formatter writes the replacement string into `out` and returns `out`.\n
    格式化器将替换串写出至 `out` 并返回 `out`. ]
]
[
    [`fmt(what, out, flags)`]
    [OutputIterator\n输出迭代器]
    [The formatter writes the replacement string into `out` and returns `out`.
     The `flags` parameter is the value of the match flags passed to the
     _regex_replace_ algorithm.\n
     格式化器将替换串写出至 `out` 并返回 `out`。参数 `flags` 为传给 _regex_replace_ 算法的匹配标志值。]
]
]

[h2 Formatter Expressions 格式化器表达式]

In addition to format /strings/ and formatter /objects/, _regex_replace_ also
accepts formatter /expressions/. A formatter expression is a lambda expression
that generates a string. It uses the same syntax as that for
[link boost_xpressive.user_s_guide.semantic_actions_and_user_defined_assertions
Semantic Actions], which are covered later. The above example, which uses
_regex_replace_ to substitute strings for environment variables, is repeated
here using a formatter expression.\n
除了格式化/串/和格式化器/对象/以外，_regex_replace_ 还接受格式化器表达式。格式化器表达式是一个生成字符串的lambda表达式。
它所使用的语法与用于语义动作的语法相同，稍后我们会提及。
前面那个用 _regex_replace_ 来把环境变量替换为字符串的例子，可以用格式化器表达式实现如下。

    #include <map>
    #include <string>
    #include <iostream>
    #include <boost/xpressive/xpressive.hpp>
    #include <boost/xpressive/regex_actions.hpp>
    using namespace boost::xpressive;

    int main()
    {
        std::map<std::string, std::string> env;
        env["X"] = "this";
        env["Y"] = "that";

        std::string input("\"$(X)\" has the value \"$(Y)\"");

        sregex envar = "$(" >> (s1 = +_w) >> ')';
        std::string output = regex_replace(input, envar, ref(env)[s1]);
        std::cout << output << std::endl;
    }

In the above, the formatter expression is `ref(env)[s1]`. This means to use the
value of the first submatch, `s1`, as a key into the `env` map. The purpose of
`xpressive::ref()` here is to make the reference to the `env` local variable /lazy/
so that the index operation is deferred until we know what to replace `s1` with.\n
这里的格式化器表达式是 `ref(env)[s1]`。它表示的是，使用第一个子匹配的值 `s1` 作为 `env` map 的键值来求值。
这里的 `xpressive::ref()` 的目的是令局部变量 `env` 的引用变为/惰性/的，使得下标操作可以到我们得知 `s1` 要替换为什么的时候再进行解引用。

[endsect]
