[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:tips_n_tricks Tips 'N Tricks 提示与技巧 ]

Squeeze the most performance out of xpressive with these tips and tricks.\n
以下这些提示和技巧可以将xpressive的最大性能挤压出来。

[h2 Compile Patterns Once And Reuse Them 对模式编译一次并重用它们 ]

Compiling a regex (dynamic or static) is /far/ more expensive than executing a
match or search. If you have the option, prefer to compile a pattern into
a _basic_regex_ object once and reuse it rather than recreating it over
and over.\n
编译一个regex (动态或静态的)要比执行一次匹配或查找更为昂贵。
如果你可以选择，就应该一次性将模式编译到一个 _basic_regex_ 对象中，然后重用它，而不是反复创建它。

Since _basic_regex_ objects are not mutated by any of the regex algorithms, they
are completely thread-safe once their initialization (and that of any grammars of
which they are members) completes. The easiest way to reuse your patterns is
to simply make your _basic_regex_ objects "static const".\n
由于 _basic_regex_ 对象不会被任何 regex 算法改写，所以一旦这些对象的初始化(以及它们所含的语法元素)完成，它们就是线程安全的。
重用你的模式的最容易的方法是，令你的 _basic_regex_ 对象为"static const"。

[h2 Reuse _match_results_ Objects 重用 _match_results_ 对象 ]

The _match_results_ object caches dynamically allocated memory. For this
reason, it is far better to reuse the same _match_results_ object if you
have to do many regex searches.\n
_match_results_ 对象缓存了动态分配的内存。为此，如果你要进行多个regex搜索，重用同一个 _match_results_ 对象要好得多。

Caveat: _match_results_ objects are not thread-safe, so don't go wild
reusing them across threads.\n
警告：_match_results_ 对象不是线程安全的，所以不要跨线程重用它们。

[h2 Prefer Algorithms That Take A _match_results_ Object 优先选用带 _match_results_ 对象的算法 ]

This is a corollary to the previous tip. If you are doing multiple searches,
you should prefer the regex algorithms that accept a _match_results_ object
over the ones that don't, and you should reuse the same _match_results_ object
each time. If you don't provide a _match_results_ object, a temporary one
will be created for you and discarded when the algorithm returns. Any
memory cached in the object will be deallocated and will have to be reallocated
the next time.\n
这是前一个提示的必然推论。如果你要进行多次查找，你应该优先选择使用 _match_results_ 
对象的regex算法，而且应该重用同一个 _match_results_ 对象。如果你不提供一个 _match_results_ 对象，
则会为你创建一个临时的对象并在算法返回时丢弃。所有缓存在该对象中的内存将被释放，在下一次使用时将不得不重新分配。

[h2 Prefer Algorithms That Accept Iterator Ranges Over Null-Terminated Strings 处理空字符结束的字符串时，优先选用接受迭代器区间的算法]

xpressive provides overloads of the _regex_match_ and _regex_search_
algorithms that operate on C-style null-terminated strings. You should
prefer the overloads that take iterator ranges. When you pass a
null-terminated string to a regex algorithm, the end iterator is calculated
immediately by calling `strlen`. If you already know the length of the string,
you can avoid this overhead by calling the regex algorithms with a `[begin, end)`
pair.\n
xpressive为 _regex_match_ 和 _regex_search_ 算法提供了处理C-风格的空字符结束字符串的多个重载。
你应该优先选用其中接受迭代器区间的那些重载。如果你传递一个空字符结束的字符串给一个regex 算法，会即时通过调用 strlen 来计算出结尾迭代器。
如果你已经知道该字符串的长度，就可以通过以一个 `[begin, end)` 对来调用这个regex算法，避免这种开销。

[h2 Use Static Regexes 使用静态Regexes ]

On average, static regexes execute about 10 to 15% faster than their
dynamic counterparts. It's worth familiarizing yourself with the static
regex dialect.\n
平均来说，静态regex执行起来比同等的动态regex快10%到15%。熟悉静态regex的写法非常值得。

[h2 Understand [^syntax_option_type::optimize] 理解 [^syntax_option_type::optimize] ]

The `optimize` flag tells the regex compiler to spend some extra time analyzing
the pattern. It can cause some patterns to execute faster, but it increases
the time to compile the pattern, and often increases the amount of memory
consumed by the pattern. If you plan to reuse your pattern, `optimize` is
usually a win. If you will only use the pattern once, don't use `optimize`.\n
这个 `optimize` 标志告知regex编译器，使用更多的时间去分析这个模式。
这样可以使得某些模式执行得更快一些，不过它会增加模式编译的时间，而且通常也会增加该模式所占用的内存。
如果你计划重用你的模式，通常使用 `optimize` 会更好。如果你只使用该模式一次，就不要使用 `optimize`. 

[h1 Common Pitfalls 常见错误 ]

Keep the following tips in mind to avoid stepping in potholes with xpressive.\n
留意以下提示，以避免陷入xpressive的泥沼。

[h2 Create Grammars On A Single Thread 在单个线程中创建语法]

With static regexes, you can create grammars by nesting regexes inside one
another. When compiling the outer regex, both the outer and inner regex objects,
and all the regex objects to which they refer either directly or indirectly, are
modified. For this reason, it's dangerous for global regex objects to participate
in grammars. It's best to build regex grammars from a single thread. Once built,
the resulting regex grammar can be executed from multiple threads without
problems.\n
对于静态regex，你可以通过把regex嵌入另一个regex中来创建语法。
在编译外层的regex时，外层和内层的regex对象，以及所有它们直接或间接引用到的regex对象，都会被修改。
因此，这对于参与到语法中的全局regex对象而言是很危险的。最好是从单个线程中构建regex语法。
一旦构建完成，所得到的regex语法就可以在多线程下执行，没有问题。

[h2 Beware Nested Quantifiers 小心嵌套的数量词]

This is a pitfall common to many regular expression engines. Some patterns can
cause exponentially bad performance. Often these patterns involve one quantified
term nested withing another quantifier, such as `"(a*)*"`, although in many
cases, the problem is harder to spot. Beware of patterns that have nested
quantifiers.\n
这是一个很多正则表达式都会犯的错误。有些模式会引起指数级的低性能。
通常，这些模式含有一个嵌套在另一个数量词中的数量词，如 `"(a*)*"`，在多数情况下，这个问题很难被指出。
要当心那些带有嵌套数量词的模式。

[endsect]
