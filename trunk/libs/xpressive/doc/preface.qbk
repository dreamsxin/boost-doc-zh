[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:preface Preface 前言]

[:['Wife:]      New Shimmer is a floor wax!\n
  ['Husband:]   No, new Shimmer is a dessert topping!\n
  ['Wife:]      It's a floor wax!\n
  ['Husband:]   It's a dessert topping!\n
  ['Wife:]      It's a floor wax, I'm telling you!\n
  ['Husband:]   It's a dessert topping, you cow!\n
  ['Announcer:] Hey, hey, hey, calm down, you two. New Shimmer is both a floor wax ['and] a dessert topping!]
[:[*['-- Saturday Night Live]]]

[h2 Description 描述]

xpressive is an advanced, object-oriented regular expression template library for C++.
Regular expressions can be written as strings that are parsed at run-time, or as expression
templates that are parsed at compile-time. Regular expressions can refer to each other and
to themselves recursively, allowing you to build arbitrarily complicated grammars out of
them.\n
xpressive 是一个先进的、面向对象的、用于C++的正则表达式模板库。
正则表达式可以以字符串方式编写并在运行期分析，也可以以表达式模板方式编写并在编译期分析。
正则表达式可以相互引用，或者递归引用其本身，你就可以用它们来构建任意复杂的语法。

[h2 Motivation 动机]

If you need to manipulate text in C++, you have typically had two disjoint options: a regular
expression engine or a parser generator. Regular expression engines (like _regexpp_) are powerful
and flexible; patterns are represented as strings which can be specified at runtime. However,
that means that syntax errors are likewise not detected until runtime. Also, regular expressions
are ill-suited to advanced text processing tasks such as matching balanced, nested tags. Those
tasks have traditionally been handled by parser generators (like the _spirit_fx_). These
beasts are more powerful but less flexible. They generally don't allow you to arbitrarily modify
your grammar rules on the fly. In addition, they don't have the exhaustive backtracking semantics
of regular expressions, which can make it more challenging to author some types of patterns.\n
如果你要在C++中处理文本，通常你有两个不相交的选项：正则表达式引擎或语法分析生成器。
正则表达式引擎(如 _regexpp_)更为强大和灵活；文本的模式以字符串方式表示，可以在运行期指定。
但是，这意味着语法错误同样要到运行期才能被检测。另外，正则表达式不适合于高级的文本处理任务，如匹配平衡的、嵌套的标签。
那些任务传统上都是由语法分析生成器(如 _spirit_fx_)来处理的。这些工具更为强大，但不够灵活。
它们通常不允许你随时随意地修改你的语法规则。此外，它们不具备正则表达式的完全回溯语义，对于某些类型的模式来说，这样对作者更具有挑战性。

xpressive brings these two approaches seamlessly together and occupies a unique niche in the
world of C++ text processing. With xpressive, you can choose to use it much as you would use
_regexpp_, representing regular expressions as strings. Or you can use it as you would use _spirit_,
writing your regexes as C++ expressions, enjoying all the benefits of an embedded language
dedicated to text manipulation. What's more, you can mix the two to get the benefits of
both, writing regular expression ['grammars] in which some of the regular expressions are
statically bound -- hard-coded and syntax\-checked by the compiler \-- and others are dynamically
bound and specified at runtime. These regular expressions can refer to each other recursively,
matching patterns in strings that ordinary regular expressions cannot.\n
xpressive 将这两种方法无缝地集合到一起，在C++的文本处理世界中占据了独特的优势。
通过 xpressive，你可以选择更象使用 _regexpp_ 那样去使用它，将正则表达式表示为字符串。
或者你也可以象使用 _spirit_ 那样使用它，将你的 regexes 写为C++表达式，获得一种专用于文本处理的嵌入式语言所带来的所有好处。
更重要的是，你可以混用这两种方式，从而获得两者的好处，对于那些要静态绑定的正则表达式编写正则表达式['语法]  -- 
由编译器进行硬编码和语法检查 -- 其它的则动态绑定并在运行期指定。
这些正则表达式可以相互递归地引用，在以前的正则表达式不能进行模式匹配的字符串中进行模式匹配。

[h2 Influences and Related Work 影响和相关工作]

The design of xpressive's interface has been strongly influenced by John Maddock's
_regexpp_ library and his _proposal_
to add regular expressions to the Standard Library. I also drew a great deal of
inspiration from Joel de Guzman's _spirit_fx_, which served as the model
for static xpressive. Other sources of inspiration are the _perl6_ redesign and _greta_.
(You can read a summary of the changes Perl 6 will bring to regex culture
[@http://dev.perl.org/perl6/doc/design/syn/S05.html here].)\n
xpressive 的接口设计受到 John Maddock 的 _regexpp_ 库和他的关于增加正则表达式到标准库的 _proposal_ 的强烈影响。
我还从 Joel de Guzman 的 _spirit_fx_ 获得大量灵感，该框架被用作静态 xpressive 的模型。
其它的灵感来源还有 _perl6_ 的设计和 _greta_。(你可以在 [@http://dev.perl.org/perl6/doc/design/syn/S05.html 这里] 
看到关于 Perl 6 的变化所带来的 regex 文化的总结。) 


[endsect]
