[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[/==================]
[section Hello World]
[/==================]

Below is a very simple program that uses Proto to build an expression template
and then execute it.\n
以下是一个非常简单的程序，它使用 Proto 来构建一个表达式模板，然后执行它。

    #include <iostream>
    #include <boost/proto/proto.hpp>
    #include <boost/typeof/std/ostream.hpp>
    using namespace boost;

    proto::terminal< std::ostream & >::type cout_ = { std::cout };

    template< typename Expr >
    void evaluate( Expr const & expr )
    {
        proto::default_context ctx;
        proto::eval(expr, ctx);
    }

    int main()
    {
        evaluate( cout_ << "hello" << ',' << " world" );
        return 0;
    }

This program outputs the following:\n
该程序的输出如下：

[pre
hello, world
]

This program builds an object representing the output operation and passes
it to an `evaluate()` function, which then executes it.\n
这个程序构建了一个表示输出操作的对象，并将它传递给一个 `evaluate()` 函数，后者对该操作进行执行。

The basic idea of expression templates is to overload all the operators so
that, rather than evaluating the expression immediately, they build a tree-like
representation of the expression so that it can be evaluated later. For each
operator in an expression, at least one operand must be Protofied in order
for Proto's operator overloads to be found. In the expression ...\n
表达式模板的基本意思是重载所有操作符，不再立即对表达式进行求值，而对该表达式构建一个树型的表示，
以便在晚些时候进行求值。对于表达式中的每一个操作符，必须至少要有一个操作数是Proto化的，
这样才可以找到 Proto 的操作符重载。在表达式 ... 

    cout_ << "hello" << ',' << " world"

... the Protofied sub-expression is `cout_`, which is the Proto-ification of
`std::cout`. The presence of `cout_` "infects" the expression, and brings
Proto's tree-building operator overloads into consideration. Any literals in
the expression are then Protofied by wrapping them in a Proto terminal before
they are combined into larger Proto expressions.\n
... 中，Proto化的子表达式是 `cout_`，它是 `std::cout` 的Proto化产物。`cout_` 的出现"感染"了整个表达式，
进而带来 Proto 的操作符重载，进行表达式树的构建。在这个表达式中的任何字面值都随后被Proto化，
它们被包装为一个 Proto 终结符，然后被组装进更大的 Proto 表达式中。

Once Proto's operator overloads have built the expression tree, the expression
can be lazily evaluated later by walking the tree. That is what `proto::eval()`
does. It is a general tree-walking expression evaluator, whose behavior is
customizable via a /context/ parameter. The use of _default_context_ assigns
the standard meanings to the operators in the expression. (By using a different
context, you could give the operators in your expressions different semantics.
By default, Proto makes no assumptions about what operators actually /mean/.)\n
一旦 Proto 的操作符重载构建了这棵表达式树，这个表达式就可以在晚些时候通过遍历来进行惰性求值。
这正是 `proto::eval()` 所做的事情。它是一个通用的表达式树遍历求值器，其行为可以通过一个 /上下文/ 参数来进行定制。
_default_context_ 的使用为表达式中的操作符赋予了标准意义(通过使用不同的上下文，
你可以为表达式中的操作符赋予不同的语义。缺省情况下，Proto 对于操作符的实际/意义/不作任何假设)。

[/==============================]
[heading Proto Design Philosophy  Proto的设计哲学]
[/==============================]

Before we continue, let's use the above example to illustrate an important
design principle of Proto's. The expression template created in the ['hello
world] example is totally general and abstract. It is not tied in any way to
any particular domain or application, nor does it have any particular meaning
or behavior on its own, until it is evaluated in a /context/. Expression
templates are really just heterogeneous trees, which might mean something in
one domain, and something else entirely in a different one.\n
在我们继续往下之前，我们用上述例子来说明 Proto 的一个非常重要的设计原则。
在 ['hello world] 例子中所创建的表达式模板完全是通用和抽象的。
它没有以任何方式与任何特定的问题域或应用相结合，本身也没有任何特定的含义或行为，
直至它在一个/上下文/中被求值。表达式模板只是一个异类树，可能在某个问题域中具有某种意义，
而在另一个问题域中则具有完全不同的意义。

As we'll see later, there is a way to create Proto expression trees that are
['not] purely abstract, and that have meaning and behaviors independent of any
context. There is also a way to control which operators are overloaded for your
particular domain. But that is not the default behavior. We'll see later why
the default is often a good thing.\n
正如我们稍后将看到的，可以有方法创建['非]纯抽象的 Proto 表达式树，它具有独立于上下文的意义和行为。
也有方法为你的特定问题域控制对哪些操作符进行重载。不过这些不是缺省的行为。稍后我们将看到为什么缺省值通常是好事。

[endsect]
