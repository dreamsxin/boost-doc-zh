[/
 / Copyright (c) 2008 Eric Niebler
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[import ../example/hello.cpp]
[import ../example/calc1.cpp]
[import ../example/calc2.cpp]
[import ../example/calc3.cpp]
[import ../example/lazy_vector.cpp]
[import ../example/mixed.cpp]
[import ../example/rgb.cpp]
[import ../example/tarray.cpp]
[import ../example/vec3.cpp]
[import ../example/vector.cpp]
[import ../example/map_assign.cpp]
[import ../example/futures.cpp]
[import ../example/mini_lambda.cpp]

[/===============]
[section:examples Examples 示例]
[/===============]

A code example is worth a thousand words ...\n
一个代码示例抵得上千言万语...

[/================================================================================]
[section:hello_world Hello World:
    Building an Expression Template and Evaluating It 构建一个表达式模板并对它求值]
[/================================================================================]

A trivial example which builds and expression template and evaluates it.\n
一个简单的例子，构建一个表达式模板并对它进行求值。

[HelloWorld]

[endsect]

[/==================================================]
[section:calc1 Calc1: Defining an Evaluation Context 定义一个求值上下文]
[/==================================================]

A simple example that builds a miniature domain-specific embedded language for lazy arithmetic expressions, with TR1 bind-style argument placeholders.\n
一个简单的例子，构建一个用于惰性算术表达式的微型领域专用嵌入式语言，使用TR1 bind风格的参数占位符。

[Calc1]

[endsect]

[/============================================================]
[section:calc2 Calc2: Adding Members Using [^proto::extends<>] 用[^proto::extends<>]增加成员]
[/============================================================]

An extension of the Calc1 example that uses _extends_ to make calculator expressions valid function objects that can be used with STL algorithms.\n
对Calc1例子的扩展，使用 proto::extends<> 来让计算器表达式的有效函数对象可以用于STL算法。

[Calc2]

[endsect]

[/===============================================]
[section:calc3 Calc3: Defining a Simple Transform 定义一个简单的变换]
[/===============================================]

An extension of the Calc2 example that uses a Proto transform to calculate the arity of a calculator expression and statically assert that the correct number of arguments are passed.\n
Calc2例子的一个扩展，使用一个Proto变换来计算一个计算器表达式的arity，并静态地对传入的参数数量进行断言。

[Calc3]

[endsect]

[/==============================================================]
[section:lazy_vector Lazy Vector: Controlling Operator Overloads 控制操作符重载]
[/==============================================================]

This example constructs a mini-library for linear algebra, using expression templates to eliminate the need for temporaries when adding vectors of numbers.\n
这个例子构建一个线性代数的小型库，使用了表达式模板来消除数字向量相加时的临时对象。

This example uses a domain with a grammar to prune the set of overloaded operators. Only those operators that produce valid lazy vector expressions are allowed.\n
这个例子使用了一个带语法的领域来减少操作符的重载。只有那些可以生成有效的惰性向量表达式的操作符被允许。

[LazyVector]

[endsect]

[/========================================================]
[section:rgb RGB: Type Manipulations with Proto Transforms 以Proto变换进行类型操作]
[/========================================================]

This is a simple example of doing arbitrary type manipulations with Proto transforms. It takes some expression involving primary colors and combines the colors according to arbitrary rules. It is a port of the RGB example from _PETE_.\n
这是一个简单的例子，以Proto变换进行任意的类型操作。它接受带有三原色的表达式，并根据任意规则组合成颜色。
它是对 _PETE_ 中的RGB例子的一个移植。

[RGB]

[endsect]

[/=====================================================]
[section:tarray TArray: A Simple Linear Algebra Library 一个简单的线性代数库]
[/=====================================================]

This example constructs a mini-library for linear algebra, using expression templates to eliminate the need for temporaries when adding arrays of numbers. It duplicates the TArray example from _PETE_.\n
这个例子构造了一个线性代数的小型库，使用表达式模板来消除进行数值数组加法时所需的临时对象。它复制了 _PETE_ 中的TArray例子。

[TArray]

[endsect]

[/========================================================]
[section:vec3 Vec3: Computing With Transforms and Contexts 用变换和上下文进行计算]
[/========================================================]

This is a simple example using `proto::extends<>` to extend a terminal type with additional behaviors, and using custom contexts and `proto::eval()` for evaluating expressions. It is a port of the Vec3 example from _PETE_.\n
这是一个简单的例子，使用 `proto::extends<>` 来扩展一个终结符类型以增加行为，并使用定制的上下文和 `proto::eval()` 来对表达式求值。
它是修改自 _PETE_ 中的Vec3例子。

[Vec3]

[endsect]

[/========================================================]
[section:vector Vector: Adapting a Non-Proto Terminal Type 适配一个非Proto的终结符类型]
[/========================================================]

This is an example of using `BOOST_PROTO_DEFINE_OPERATORS()` to Protofy expressions using `std::vector<>`, a non-Proto type. It is a port of the Vector example from _PETE_.\n
这个例子使用 `BOOST_PROTO_DEFINE_OPERATORS()` 来Proto化使用了一个非Proto类型 `std::vector<>` 的表达式。它修改自 _PETE_ 的Vector例子。


[Vector]

[endsect]

[/=============================================================]
[section:mixed Mixed: Adapting Several Non-Proto Terminal Types 适配多个非Proto的终结符类型]
[/=============================================================]

This is an example of using `BOOST_PROTO_DEFINE_OPERATORS()` to Protofy expressions using `std::vector<>` and `std::list<>`, non-Proto types. It is a port of the Mixed example from _PETE_.\n
这是一个使用 `BOOST_PROTO_DEFINE_OPERATORS()` 来对使用了 `std::vector<>` 和 `std::list<>` 这些非Proto类型的表达式进行Proto化的例子。
它修改自 _PETE_ 的Mixed例子。

[Mixed]

[endsect]

[/=======================================================]
[section:map_assign Map Assign: An Intermediate Transform 一个中间变换]
[/=======================================================]

A demonstration of how to implement `map_list_of()` from the Boost.Assign library using Proto. `map_list_assign()` is used to conveniently initialize a `std::map<>`. By using Proto, we can avoid any dynamic allocation while building the intermediate representation.\n
以下示范如何用Proto从Boost.Assign库实现 `map_list_of()`。`map_list_assign()` 用于便利地初始化一个 `std::map<>`。
通过使用Proto，我们可以在构建中间表示方式时避免动态内存分配。

[MapAssign]

[endsect]

[/===========================================================]
[section:future_group Future Group: A More Advanced Transform 更高级的变换]
[/===========================================================]

An advanced example of a Proto transform that implements Howard Hinnant's design for /future groups/ that block for all or some asynchronous operations to complete and returns their results in a tuple of the appropriate type.\n
一个Proto变换的进阶例子，它实现了Howard Hinnant对于 /future groups/ 的设计，阻塞至所有或部分异步操作完成，
并以一个适当类型的tuple来返回操作的结果。

[FutureGroup]

[endsect]

[/========================================================]
[section:lambda Lambda: A Simple Lambda Library with Proto 一个使用Proto的简单Lambda库]
[/========================================================]

This is an advanced example that shows how to implement a simple lambda DSEL with Proto, like the Boost.Lambda_library. It uses contexts, transforms and expression extension.\n
这是一个高级例子，示范如何用Proto实现一个简单的lambda DSEL，类似于Boost.Lambda库。它使用了上下文、变换和表达式扩展。

[Lambda]

[endsect]

[endsect]
