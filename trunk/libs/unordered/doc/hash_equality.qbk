[/ Copyright 2006-2008 Daniel James.
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt) ]

[section:hash_equality Equality Predicates and Hash Functions 等同性谓词和散列函数]

While the associative containers use an ordering relation to specify how the
elements are stored, the unordered associative containers use an equality
predicate and a hash function. For example, [classref boost::unordered_map]
is declared as:\n
关联式容器使用一个排序关系来指定如何保存元素，而无序关联式容器则使用一个等同性谓词和一个散列函数。
例如，[classref boost::unordered_map] 被声明为：

        template <
            class Key, class Mapped,
            class Hash = ``[classref boost::hash]``<Key>,
            class Pred = std::equal_to<Key>,
            class Alloc = std::allocator<std::pair<Key const, Mapped> > >
        class ``[classref boost::unordered_map unordered_map]``;

The hash function comes first as you might want to change the hash function
but not the equality predicate. For example, if you wanted to use the
[@http://www.isthe.com/chongo/tech/comp/fnv/ FNV-1 hash] you could write:\n
散列函数被放在前面，因为你可能想修改散列函数而不修改等同性谓词。例如，如果你想使用 
[@http://www.isthe.com/chongo/tech/comp/fnv/ FNV-1 hash]，你可以写：

[import src_code/dictionary.cpp]
[case_sensitive_dictionary_fnv]

There is an [@boost:/libs/unordered/examples/fnv1.hpp implementation
of FNV-1] in the examples directory.\n
在 examples 目录下有一个 [@boost:/libs/unordered/examples/fnv1.hpp FNV-1 的实现]。

If you wish to use a different equality function,
you will also need to use a matching hash function. For
example, to implement a case insensitive dictionary you need to define a
case insensitive equality predicate and hash function:\n
如果你希望使用一个不同的等同性谓词，你也需要使用一个相匹配的散列函数。
例如，要实现一个大小写不敏感的字典，你需要定义一个大小写不敏感的等同性谓词和散列函数：

[case_insensitive_functions]

Which you can then use in a case insensitive dictionary:\n
然后你就可以在大小写不敏感的字典中使用它们了：

[case_insensitive_dictionary]

This is a simplified version of the example at
[@boost:/libs/unordered/examples/case_insensitive.hpp /libs/unordered/examples/case_insensitive.hpp]
which supports other locales and string types.\n
在 [@boost:/libs/unordered/examples/case_insensitive.hpp /libs/unordered/examples/case_insensitive.hpp] 
中有这个例子的简化版本，它支持其它的 locales 和字符串类型。

[caution
Be careful when using the equality (`==`) operator with custom equality
predicates, especially if you're using a function pointer. If you compare two
containers with different equality predicates then the result is undefined.
For most stateless function objects this is impossible - since you can only
compare objects with the same equality predicate you know the equality
predicates must be equal. But if you're using function pointers or a stateful
equality predicate (e.g. boost::function) then you can get into trouble.\n
将相等操作符(`==`) 与定制的相等性谓词一起使用时要特别小心，尤其是当你在使用函数指针时。
如果你对两个具有不同相等性谓词的容器进行比较，其结果是未定义的。
对于大多数无状态的函数对象来说，这是不可能的 - 因为你只能比较带有同一个相等性谓词的对象，你知道它们的相等性谓词肯定是一样的。
但是如果你使用的是函数指针或有状态的相等性谓词(如 boost::function)，则你会陷入麻烦。
]

[h2 Custom Types 定制类型]

Similarly, a custom hash function can be used for custom types:\n
同样，对于定制的类型可以使用定制的散列函数：

[import src_code/point1.cpp]
[point_example1]

Since the default hash function is [link hash Boost.Hash],
we can [link hash.custom extend it to support the type]
so that the hash function doesn't need to be explicitly given:\n
由于缺省的散列函数是 [link hash Boost.Hash]，我们可以 [link hash.custom 对它进行扩展以支持这个类型]，所以散列函数不需要显式给出：

[import src_code/point2.cpp]
[point_example2]

See the [link hash.custom Boost.Hash documentation] for more detail on how to
do this.  Remember that it relies on extensions to the draft standard - so it
won't work on other implementations of the unordered associative containers.\n
关于如何实现的更多细节，请见 [link hash.custom Boost.Hash 文档]。
记住，它依赖于标准草案的扩展部分 - 所以它在无序关联式容器的其它实现中不一定可用。

[table Methods for accessing the hash and equality functions. 访问散列函数和等同性函数的方法。
    [[Method 方法] [Description 说明]]

    [
        [`hasher hash_function() const`]
        [Returns the container's hash function.\n
        返回容器的散列函数。]
    ]
    [
        [`key_equal key_eq() const`]
        [Returns the container's key equality function.\n
        返回容器的键类型的等同性函数。]
    ]
]

[endsect]
