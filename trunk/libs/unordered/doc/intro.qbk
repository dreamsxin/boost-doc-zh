[/ Copyright 2006-2008 Daniel James.
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt) ]

[def __tr1__ 
    [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1836.pdf
    C++ Standard Library Technical Report]]
[def __boost-tr1__
    [@http://www.boost.org/doc/html/boost_tr1.html
    Boost.TR1]]
[def __draft__
    [@http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2009/n2960.pdf
    Working Draft of the C++ Standard]]
[def __hash-table__ [@http://en.wikipedia.org/wiki/Hash_table
    hash table]]
[def __hash-function__ [@http://en.wikipedia.org/wiki/Hash_function
    hash function]]

[section:intro Introduction 简介]

For accessing data based on key lookup, the C++ standard library offers `std::set`,
`std::map`, `std::multiset` and `std::multimap`. These are generally
implemented using balanced binary trees so that lookup time has
logarithmic complexity. That is generally okay, but in many cases a
__hash-table__ can perform better, as accessing data has constant complexity,
on average. The worst case complexity is linear, but that occurs rarely and
with some care, can be avoided.\n
在基于键值查找的数据访问方面，C++标准库提供了 `std::set`, `std::map`, `std::multiset` 和 `std::multimap`。
它们通常都是使用平衡树来实现的，这样查找时间具有对数复杂度。通常来说这是OK的，不过在多数情况下 __hash-table__ 
可以表现得更好，平均而言它对数据的访问是常量复杂度的。最坏情况下的复杂度则是线性的，不过这种情况极少发生，而且留意一下是可以避免的。

Also, the existing containers require a 'less than' comparison object
to order their elements. For some data types this is impossible to implement
or isn't practical. In contrast, a hash table only needs an equality function
and a hash function for the key.\n
还有，已有的容器要求一个'小于'比较对象来对元素进行排序。对于某些数据，这是不可能实现或不实际的。
相比之下，散列表只需要用于键值的一个等同性函数和一个散列函数。

With this in mind, the __tr1__ introduced the unordered associative containers,
which are implemented using hash tables, and they have now been added to the
__draft__.\n
对于这一点，__tr1__ 引入了无序关联式容器，它们是用散列表来实现的，它们已经被加入到 __draft__ 之中了。

This library supplies an almost complete implementation of the specification in
the __draft__.\n
本库提供了一个符合 __draft__ 规范的基本完整的实现。

`unordered_set` and `unordered_multiset` are defined in the header
<[headerref boost/unordered_set.hpp]>\n
`unordered_set` 和 `unordered_multiset` 定义于头文件 <[headerref boost/unordered_set.hpp]> 中

    namespace boost {
        template <
            class Key,
            class Hash = ``[classref boost::hash]``<Key>, 
            class Pred = std::equal_to<Key>, 
            class Alloc = std::allocator<Key> > 
        class ``[classref boost::unordered_set unordered_set]``;

        template<
            class Key,
            class Hash = ``[classref boost::hash]``<Key>, 
            class Pred = std::equal_to<Key>, 
            class Alloc = std::allocator<Key> > 
        class ``[classref boost::unordered_multiset unordered_multiset]``;
    }

`unordered_map` and `unordered_multimap` are defined in the header
<[headerref boost/unordered_map.hpp]>\n
`unordered_map` 和 `unordered_multimap` 定义于头文件 <[headerref boost/unordered_map.hpp]> 中

    namespace boost {
        template <
            class Key, class Mapped,
            class Hash = ``[classref boost::hash]``<Key>,
            class Pred = std::equal_to<Key>,
            class Alloc = std::allocator<Key> >
        class ``[classref boost::unordered_map unordered_map]``;

        template<
            class Key, class Mapped,
            class Hash = ``[classref boost::hash]``<Key>,
            class Pred = std::equal_to<Key>,
            class Alloc = std::allocator<Key> >
        class ``[classref boost::unordered_multimap unordered_multimap]``;
    }

When using Boost.TR1, these classes are included from `<unordered_set>` and
`<unordered_map>`, with the classes added to the `std::tr1` namespace.\n
在使用 Boost.TR1 时，这些类包含在 `<unordered_set>` 和 `<unordered_map>` 中，而且被添加到 `std::tr1` 名字空间中。

The containers are used in a similar manner to the normal associative
containers:\n
这些容器的使用方式与普通的关联式容器相似：

[import src_code/intro.cpp]
[intro_example1_2]

But since the elements aren't ordered, the output of:\n
不过由于其中的元素是无序的，所以以下语句的输出：

[intro_example1_3]

can be in any order. For example, it might be:\n
可以是任意顺序。例如，它可能是：

    two,2
    one,1
    three,3

To store an object in an unordered associative container requires both an
key equality function and a hash function. The default function objects in
the standard containers support a few basic types including integer types,
floating point types, pointer types, and the standard strings. Since
Boost.Unordered uses [classref boost::hash] it also supports some other types,
including standard containers. To use any types not supported by these methods
you have to [link hash.custom extend Boost.Hash to support the type] or use
your own custom equality predicates and hash functions. See the
[link unordered.hash_equality Equality Predicates and Hash Functions] section
for more details.\n
要将一个对象保存在无序关联式容器中，需要有一个键值等同性函数和一个散列函数。
在标准容器中的缺省函数对象支持少量基本类型，包括整数类型、浮点数类型、指针类型和标准字符串。
由于 Boost.Unordered 使用了 [classref boost::hash]，所以它还支持一些其它的类型，包括标准容器。
要将这些方法用于尚不支持的类型，你必须 [link hash.custom 扩展 Boost.Hash] 以支持该类型，或者使用你自己定制的等同性谓词和散列函数。
更多细节请见 [link unordered.hash_equality 等同性谓词和散列函数] 一节。

There are other differences, which are listed in the
[link unordered.comparison Comparison with Associative Containers] section.\n
其它的差别被列在 [link unordered.comparison 与关联式容器的比较] 一节中。

[endsect]
