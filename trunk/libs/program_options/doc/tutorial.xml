<?xml version="1.0" standalone="yes"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
     "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd"
[
    <!ENTITY % entities SYSTEM "program_options.ent" >
    %entities;
]>

<section id="program_options.tutorial">
  <title>Tutorial 指南</title>
  
  <para>In this section, we'll take a look at the most common usage scenarios
  of the program_options library, starting with the simplest one. The examples
  show only the interesting code parts, but the complete programs can be found
  in the "BOOST_ROOT/libs/program_options/example" directory. Through all the
  examples, we'll assume that the following namespace alias is in effect:<sbr/>
  在这一节中，我们将看到 program_options 库的一些最常见的用法，我们从最简单的开始。
  这些例子只展示了相关的部分代码，你可以在 "BOOST_ROOT/libs/program_options/example" 
  目录下找到完整的程序。在所有这些例子中，我们都假设以下namespace别名有效：
<programlisting>namespace po = boost::program_options;</programlisting>
  </para>

  <section>
    <title>Getting Started 入门</title>

  <para>The first example is the simplest possible: it only handles two
    options. Here's the source code (the full program is in
    "example/first.cpp"):<sbr/>
    第一个例子是最简单不过的了：它仅处理两个选项。以下是源代码 (完整的程序在 "example/first.cpp")： 

<programlisting>
// Declare the supported options. 声明被支持的选项。
po::options_description desc(&quot;Allowed options&quot;);
desc.add_options()
    (&quot;help&quot;, &quot;produce help message&quot;)
    (&quot;compression&quot;, po::value&lt;int&gt;(), &quot;set compression level&quot;)
;

po::variables_map vm;
po::store(po::parse_command_line(ac, av, desc), vm);
po::notify(vm);    

if (vm.count(&quot;help&quot;)) {
    cout &lt;&lt; desc &lt;&lt; &quot;\n&quot;;
    return 1;
}

if (vm.count(&quot;compression&quot;)) {
    cout &lt;&lt; &quot;Compression level was set to &quot; 
 &lt;&lt; vm[&quot;compression&quot;].as&lt;int&gt;() &lt;&lt; &quot;.\n&quot;;
} else {
    cout &lt;&lt; &quot;Compression level was not set.\n&quot;;
}
</programlisting>
  </para>

  <para>We start by declaring all allowed options using the
    &options_description; class. The <code>add_options</code> method of that
    class returns a special proxy object that defines
    <code>operator()</code>. Calls to that operator actually declare
    options. The parameters are option name, information about value, and option
    description. In this example, the first option has no value, and the second
    one has a value of type <code>int</code>.<sbr/>
    最开始，我们用 &options_description; 类来声明了所有允许的选项。该类的 <code>add_options</code> 方法返回一个特定的代理对象，
    该对象定义了 <code>operator()</code>。调用该操作符才真正声明了选项。调用的参数包括：选项名、有关选项值的信息，
    以及选项的描述。在本例中，第一个选项没有值，而第二个具有类型为 <code>int</code> 的值。
  </para>
  
  <para>After that, an object of class <code>variables_map</code> is
    declared. That class is intended to store values of options, and can store
    values of arbitrary types. Next, the calls to <code>store</code>,
    <code>parse_command_line</code> and <code>notify</code> functions cause
    <code>vm</code> to contain all the options found on the command
    line.<sbr/>
    之后，声明了一个类型为 <code>variables_map</code> 的对象。这个类用于保存各选项的值，
    它可以将值保存于任意的类型。接着，调用 <code>store</code>, <code>parse_command_line</code> 
    和 <code>notify</code> 函数，使得 vm 保存了命令行中发现的所有选项。</para>

  <para>And now, finally, we can use the options as we like. The
    <code>variables_map</code> class can be used just like
    <code>std::map</code>, except that values stored there must be retrieved
    with the <code>as</code> method shown above. (If the type specified in the
    call to the <code>as</code> method is different from the actually stored
    type, an exception is thrown.)<sbr/>
    现在，我们可以随意使用这些选项了。类 <code>variables_map</code> 可以象 <code>std::map</code> 那样使用，
    区别仅在于必须使用 <code>as</code> 方法来获取其中保存的值。(如果调用 <code>as</code> 
    方法时指定的类型不同于实际保存的值类型，将会抛出异常)。 
  </para>

  <para>It's now a good time to try compiling the code yourself, but if
    you're not yet ready, here's an example session:<sbr/>
    现在你可以试着编译和执行这段代码，如果你还没有环境，可以先看看下面的运行结果：
<screen>
$<userinput>bin/gcc/debug/first</userinput>
Compression level was not set.
$<userinput>bin/gcc/debug/first --help</userinput>
Allowed options:
  --help                 : produce help message
  --compression arg      : set compression level
$<userinput>bin/gcc/debug/first --compression 10</userinput>
Compression level was set to 10.
    </screen>
  </para>
    
  </section>

  <section>
    <title>Option Details 选项的细节</title>
    
  <para>An option value, surely, can have other types than <code>int</code>, and
  can have other interesting properties, which we'll discuss right now. The
  complete version of the code snipped below can be found in
  <filename>example/options_description.cpp</filename>.<sbr/>
  事实上，一个选项值可以是 <code>int</code> 以外的类型，也可以带有其它相关的属性，下面我们来看一下。
  以下代码片断的完整版本可以在文件 <filename>example/options_description.cpp</filename> 中找到。</para>

  <para>Imagine we're writing a compiler. It should take the optimization
    level, a number of include paths, and a number of input files, and perform some
    interesting work. Let's describe the options:<sbr/>
    想象一下我们正在编写一个编译器。它应该有一个优化级别，一系列的包含路径，
    以及一系列输入文件，然后执行一系列相关的操作。我们来描述一下这些选项：
    <programlisting>
int opt;
po::options_description desc(&quot;Allowed options&quot;);
desc.add_options()
    (&quot;help&quot;, &quot;produce help message&quot;)
    (&quot;optimization&quot;, po::value&lt;int&gt;(&amp;opt)-&gt;default_value(10), 
  &quot;optimization level&quot;)
    (&quot;include-path,I&quot;, po::value&lt; vector&lt;string&gt; &gt;(), 
  &quot;include path&quot;)
    (&quot;input-file&quot;, po::value&lt; vector&lt;string&gt; &gt;(), &quot;input file&quot;)
;
</programlisting>
  </para>

  <para>The <literal>"help"</literal> option should be familiar from 
  the previous example. It's a good idea to have this option in all cases.<sbr/>
  <literal>"help"</literal> 选项和上一个例子中的非常相似。通常在多数情况下，
  有这样一个选项是不错的主意。
  </para>

  <para>The <literal>"optimization"</literal> option shows two new features. First, we specify
    the address of the variable(<code>&amp;opt</code>). After storing values, that
    variable will have the value of the option. Second, we specify a default
    value of 10, which will be used if no value is specified by the user.<sbr/>
    <literal>"optimization"</literal> 选项展示了两个新的特性。首先，我们指定了一个变量地址(<code>&amp;opt</code>)。
    在保存了相应的选项值后，这个变量将具有该选项的值。其次，我们指定了一个缺省值 10，
    在用户没有指定这个选项时，它就会被使用。
  </para>

  <para>The <literal>"include-path"</literal> option is an example of the 
  only case where the interface of the <code>options_description</code> 
  class serves only one
    source -- the command line. Users typically like to use short option names
    for common options, and the "include-path,I" name specifies that short
    option name is "I". So, both "--include-path" and "-I" can be used.<sbr/>
    <literal>"include-path"</literal> 选项目前只展示了一个情况的例子，即 <code>options_description</code> 
    类的接口只使用一个数据来源 -- 命令行。用户通常喜欢对常用选项使用短的名字，"include-path,I" 就指定了一个短名 "I"。
    因此，"--include-path" 和 "-I" 两者都可以使用。
  </para>

  <para>Note also that the type of the <literal>"include-path"</literal>
  option is <type>std::vector</type>. The library provides special 
  support for vectors -- it will be possible to specify the option several 
  times, and all specified values will be collected in one vector.  <sbr/>
  另外，<literal>"include-path"</literal> 选项的类型是 <type>std::vector</type>。
  本库对 vectors 提供了特别的支持 -- 它可以多次指定选项，所有指定的值都会被保存于一个 vector 中。
  </para>
    
  <para>The "input-file" option specifies the list of files to
    process. That's okay for a start, but, of course, writing something like:<sbr/>
    "input-file" 选项指定了要处理的文件列表。现在可以开始了，不过，象这样写：
    <screen>
<userinput>compiler --input-file=a.cpp</userinput>
    </screen>
    is a little non-standard, compared with<sbr/>
    有点不太标准，更好的写法是：
    <screen>
<userinput>compiler a.cpp</userinput>
    </screen>
    We'll address this in a moment.<sbr/>
    我们马上来处理这一点。
  </para>

  <para>
    The command line tokens which have no option name, as above, are
    called "positional options" by this library. They can be handled
    too. With a little help from the user, the library can decide that "a.cpp"
    really means the same as "--input-file=a.cpp". Here's the additional code
    we need:<sbr/>
    象上面这样的不带选项名的命令行 tokens，在本库中被称为 "positional options"。
    它们也是可以处理的。通过用户的一点点帮助，程序库可以判定 "a.cpp" 其实就是 
    "--input-file=a.cpp"。以下是我们要增加了代码：
    <programlisting>
po::positional_options_description p;
p.add(&quot;input-file&quot;, -1);

po::variables_map vm;
po::store(po::command_line_parser(ac, av).
          options(desc).positional(p).run(), vm);
po::notify(vm);
    </programlisting>    
  </para>

  <para>
    The first two lines say that all positional options should be translated
    into "input-file" options. Also note that we use the
    &command_line_parser; class to parse the command
    line, not the &parse_command_line;
    function. The latter is a convenient wrapper for simple cases, but now we
    need to pass additional information.<sbr/>
    头两行代码指定所有 positional options 都被转换为 "input-file" 选项。另外，
    我们使用 &command_line_parser; 类来分析命令行，而不是 &parse_command_line; 函数。
    后者只能用于简单的情形，而我们现在需要更多的信息。
  </para>

  <para>By now, all options are described and parsed. We'll save ourselves the
      trouble of implementing the rest of the compiler logic and only print the
      options:<sbr/>
      现在，所有选项都已经写好并分析完了。我们不去管其余的编译器逻辑，只是打印出这些选项就好了：
    <programlisting>
if (vm.count(&quot;include-path&quot;))
{
    cout &lt;&lt; &quot;Include paths are: &quot; 
         &lt;&lt; vm[&quot;include-path&quot;].as&lt; vector&lt;string&gt; &gt;() &lt;&lt; &quot;\n&quot;;
}

if (vm.count(&quot;input-file&quot;))
{
    cout &lt;&lt; &quot;Input files are: &quot; 
         &lt;&lt; vm[&quot;input-file&quot;].as&lt; vector&lt;string&gt; &gt;() &lt;&lt; &quot;\n&quot;;
}

cout &lt;&lt; &quot;Optimization level is &quot; &lt;&lt; opt &lt;&lt; &quot;\n&quot;;                
</programlisting>
  </para>

  <para>Here's an example session:<sbr/>
  下面是执行的结果：
    <screen>
$<userinput>bin/gcc/debug/options_description --help</userinput>
Usage: options_description [options]
Allowed options:
  --help                 : produce help message
  --optimization arg     : optimization level
  -I [ --include-path ] arg : include path
  --input-file arg       : input file
$bin/gcc/debug/options_description
Optimization level is 10
$<userinput>bin/gcc/debug/options_description --optimization 4 -I foo a.cpp</userinput>
Include paths are: foo
Input files are: a.cpp
Optimization level is 4
</screen>
  </para>

  <para>
    Oops, there's a slight problem. It's still possible to specify the
    "--input-file" option, and usage message says so, which can be confusing
    for the user. It would be nice to hide this information, but let's wait
    for the next example.<sbr/>
    喔，还有一点点问题。由于还是可以指定 "--input-file" 选项，所以用法信息中也列出来了，
    这可能会把用户搞混乱。最好是把这些信息隐藏掉，让我们看看下一个例子。
  </para>

  </section>

  <section>
    <title>Multiple Sources 多个数据源</title>

    <para>It's quite likely that specifying all options to our compiler on the
    command line will annoy users. What if a user installs a new library and
    wants to always pass an additional command line element? What if he has
    made some choices which should be applied on every run? It's desirable to
    create a config file with common settings which will be used together with
    the command line.<sbr/>
    在命令行中指定所有选项可能会让用户很恼火。如果用户安装了一个新的库，
    希望某个命令行选项总是被使用，怎么办？又或者如果用户每次编译都要做一些选择？
    最好的方法是让用户可以创建一个配置文件来保存常用的设置，这些设置可以和命令行一起使用。
    </para>

    <para>Of course, there will be a need to combine the values from command
    line and config file. For example, the optimization level specified on the
    command line should override the value from the config file. On the other
    hand, include paths should be combined.<sbr/>
    当然，我们还要把命令行中的选项值和配置文件中的组合起来。例如，
    命令行中指定的优化级别应该覆盖配置文件中的值。另一方面，两处的包含路径则应该组合起来。
    </para>

    <para>Let's see the code now. The complete program is in
      "examples/multiple_sources.cpp". The option definition has two interesting
      details. First, we declare several instances of the
      <code>options_description</code> class. The reason is that, in general,
      not all options are alike. Some options, like "input-file" above, should
      not be presented in an automatic help message. Some options make sense only
      in the config file. Finally, it's nice to have some structure in the help message,
      not just a long list of options. Let's declare several option groups:<sbr/>
      现在我们来看看代码。完整的程序在 "examples/multiple_sources.cpp"。选项的定义有两个要注意的地方。
      首先，我们声明几个 <code>options_description</code> 类的实例。原因是，不是所有选项都是相似的。
      有些选项不应该自动显示在帮助信息中，如前面的 "input-file"；有些选项则只在配置文件中有用。
      另外，最好在帮助信息中具有一些结构，而不仅仅是选项的一个长长的列表。我们来声明几个选项组：
      <programlisting>
// Declare a group of options that will be 
// allowed only on command line
// 声明一组只可用于命令行的选项
po::options_description generic(&quot;Generic options&quot;);
generic.add_options()
    (&quot;version,v&quot;, &quot;print version string&quot;)
    (&quot;help&quot;, &quot;produce help message&quot;)    
    ;
    
// Declare a group of options that will be 
// allowed both on command line and in
// config file
// 声明一组可用于命令行和配置文件的选项
po::options_description config(&quot;Configuration&quot;);
config.add_options()
    (&quot;optimization&quot;, po::value&lt;int&gt;(&amp;opt)-&gt;default_value(10), 
          &quot;optimization level&quot;)
    (&quot;include-path,I&quot;, 
         po::value&lt; vector&lt;string&gt; &gt;()-&gt;composing(), 
         &quot;include path&quot;)
    ;

// Hidden options, will be allowed both on command line and
// in config file, but will not be shown to the user.
// 隐藏选项，可用于命令行和配置文件，但不会显示给用户看
po::options_description hidden(&quot;Hidden options&quot;);
hidden.add_options()
    (&quot;input-file&quot;, po::value&lt; vector&lt;string&gt; &gt;(), &quot;input file&quot;)
    ;        
</programlisting>
      Note the call to the <code>composing</code> method in the declaration of the
      "include-path" option. It tells the library that values from different sources
      should be composed together, as we'll see shortly.<sbr/>
      注意，要在 "include-path" 选项的声明中调用 <code>composing</code> 方法。
      它告诉程序库从不同数据源获得的值应该组合起来。
    </para>

    <para>    
      The <code>add</code> method of the <code>options_description</code>
      class can be used to further group the options:<sbr/>
      <code>options_description</code> 类的 <code>add</code> 方法可用于进一步把选项集合成组：
      <programlisting>
po::options_description cmdline_options;
cmdline_options.add(generic).add(config).add(hidden);

po::options_description config_file_options;
config_file_options.add(config).add(hidden);

po::options_description visible(&quot;Allowed options&quot;);
visible.add(generic).add(config);
      </programlisting>
    </para>

    <para>The parsing and storing of values follows the usual pattern, except that
      we additionally call <functionname>parse_config_file</functionname>, and
      call the &store; function twice. But what
      happens if the same value is specified both on the command line and in
      config file? Usually, the value stored first is preferred. This is what
      happens for the "--optimization" option. For "composing" options, like
      "include-file", the values are merged.<sbr/>
      分析及保存选项值则沿用通常的模式，除了一点，要额外调用 <functionname>parse_config_file</functionname>，
      以及调用两次 store 函数。如果在命令行和配置文件中都给出了同一个选项的值，那又该怎么办呢？
      通常，最先保存的值会被优先使用，例如对于 "--optimization" 选项就是这样。而对于 "composing" 选项，
      如 "include-file"，选项值会被合并。
    </para>

    <para>Here's an example session:<sbr/>
    以下是运行的例子：
<screen>
$<userinput>bin/gcc/debug/multiple_sources</userinput>
Include paths are: /opt
Optimization level is 1
$<userinput>bin/gcc/debug/multiple_sources --help</userinput>
Allows options:

Generic options:
  -v [ --version ]       : print version string
  --help                 : produce help message

Configuration:
  --optimization n       : optimization level
  -I [ --include-path ] path : include path

$<userinput>bin/gcc/debug/multiple_sources --optimization=4 -I foo a.cpp b.cpp</userinput>
Include paths are: foo /opt
Input files are: a.cpp b.cpp
Optimization level is 4
</screen>
      The first invocation uses values from the configuration file. The second
      invocation also uses values from command line. As we see, the include
      paths on the command line and in the configuration file are merged,
      while optimization is taken from the command line.<sbr/>
      第一次运行给出了配置文件中的选项值。第三次运行则同时使用了来自命令行的选项值。
      正如我们所看到的，命令行和配置文件中给出的包含路径被合并起来了，而优化级别则来自于命令行。
    </para>
      
  </section>

  

  

  
        
</section>

<!--
     Local Variables:
     mode: nxml
     sgml-indent-data: t     
     sgml-parent-document: ("program_options.xml" "section")
     sgml-set-face: t
     End:
-->