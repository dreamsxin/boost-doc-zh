<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE section PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
  "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<section last-revision="$Date: 2008-05-21 16:57:05 -0400 (Wed, 21 May 2008) $">
  <title>Frequently Asked Questions  常见问题</title>
  
  <qandaset>
    <qandaentry>
      <question>
        <para>Don't noncopyable signal semantics mean that a class
        with a signal member will be noncopyable as well?<sbr/>
        signal 的不可复制语义并不是意味着带有 signal 成员的类也是不可复制的？</para>
      </question>
      <answer>
        <para>No. The compiler will not be able to generate a copy
        constructor or copy assignment operator for your class if it
        has a signal as a member, but you are free to write your own
        copy constructor and/or copy assignment operator. Just don't
        try to copy the signal.<sbr/>
        对。如果你的类有一个 signal 成员，编译器就不能为你的类生成一个复制构造函数或复制赋值操作符，
        但是你可以自己编写复制构造函数和/或赋值操作符。只是不要试图复制那个 signal。</para>
      </answer>
    </qandaentry>
    <qandaentry>
      <question>
        <para>Is Boost.Signals thread-safe?<sbr/>
        Boost.Signals 是线程安全的吗？</para>
      </question>
      <answer>
        <para>No. Using Boost.Signals in a multithreaded concept is
        very dangerous, and it is very likely that the results will be
        less than satisfying. Boost.Signals will support thread safety
        in the future.<sbr/>
        不是。在多线程中使用 Boost.Signals 是很危险的，这个结果不能满足需要。
        Boost.Signals 在未来将会支持线程安全。</para>
      </answer>
    </qandaentry>
    <qandaentry>
      <question>
        <para>How do I get Boost.Signals to work with Qt?<sbr/>
        我如何让 Boost.Signals 与 Qt 一起使用呢？</para>
      </question>
      <answer>
        <para>When building with Qt, the Moc keywords
        <code>signals</code> and <code>slots</code> are defined using
        preprocessor macros, causing programs using Boost.Signals and
        Qt together to fail to compile.<sbr/>
        与 Qt 一起构建时，Moc 关键字 <code>signals</code> 和 <code>slots</code> 采用预处理器宏来定义，
        这使得同时使用 Boost.Signals 和 Qt 的程序无法通过编译。</para>

        <para><emphasis>For Qt 4.1 and later</emphasis>, This behavior
        can be turned off in Qt on a per-project or per-file basis
        with the <code>no_keywords</code> option.  This works with
        out-of-the-box builds of Boost and Qt. You do not need to
        re-configure, re-build, or duplicate existing libraries. For a
        project where you want to use both Boost.Signals and Qt
        Signals and Slots, the relevant part of your .pro file might
        look like this:<sbr/>
        <emphasis>对于 Qt 4.1 及后续版本</emphasis>，这一行为可以在 Qt 中关闭，
        方法是在一个 per-project 或 per-file 基础上使用 <code>no_keywords</code> 选项。
        这可以用于缺省构建的 Boost 和 Qt。你不需要重新配置、重新构建或复制已有的库。
        对于你想要同时使用 Boost.Signals 和 Qt Signals 以及 Slots 的项目，
        你的 .pro 文件的相应部分如下：</para>

        <programlisting>
CONFIG      += no_keywords # so Qt won't #define any non-all-caps `keywords'
INCLUDEPATH += . /usr/local/include/boost-1_33_1/
macx:LIBS   += /usr/local/lib/libboost_signals-1_33_1.a  # ...your exact paths may vary
</programlisting>

        <para>Now you can mix Boost.Signals and Qt Signals and Slots
        in the same files, and even within the same class or function.
        You will have to use the upper-case versions of Qt macros in
        your own code.  See the article <ulink
        url="http://scottcollins.net/articles/a-deeper-look-at-signals-and-slots.html">A
        Deeper Look at Signals and Slots</ulink> [off-site] for more
        complete examples and a survey of the strengths of the two
        systems.<sbr/>
        现在你可以在同一个文件中混用 Boost.Signals 和 Qt Signals 及 Slots 了，
        即使是在同一个类或函数中。你必须在你的代码中使用大写字母的 Qt 宏。
        更多的完整例子和共用这两个系统的纵览，请见论文 <ulink
        url="http://scottcollins.net/articles/a-deeper-look-at-signals-and-slots.html">A
        Deeper Look at Signals and Slots</ulink> [off-site]。</para>

        <para><emphasis>Older versions of Qt</emphasis> did not
        provide a reliable mechanism for avoiding these unfriendly,
        all lower-case `keyword'-like macros.  Although this is a
        problem with Qt and not Boost.Signals, a user can use the two
        systems together with a little extra effort. There are two
        ways to do this:<sbr/>
        <emphasis>旧版本的 Qt</emphasis> 不提供避免这些不便的方法，
        所有'关键字'样式的宏都是小写的。虽然这是 Qt 的问题而不是 Boost.Signals 的，
        用户还是可以通过一些小的努力来一起使用这两个系统。有两种方法可以做到这一点：</para>

        <para>The first way involves defining
        the <code>BOOST_SIGNALS_NAMESPACE</code> 
        macro to some other identifier (e.g., <code>signalslib</code>)
        when building and using the Boost.Signals library. Then the
        namespace of the Boost.Signals library will be
        <code>boost::BOOST_SIGNALS_NAMESPACE</code> instead of
        <code>boost::signals</code>. To retain the original namespace
        name in translation units that do not interact with Qt, you
        can use a namespace alias:<sbr/>
        第一种方法是在构建和使用 Boost.Signals 库时将 <code>BOOST_SIGNALS_NAMESPACE</code> 宏定义为其它标识符
        (如 <code>signalslib</code>)。这样 Boost.Signals 库的名字空间就是 <code>boost::BOOST_SIGNALS_NAMESPACE</code> 
        而不是 <code>boost::signals</code>。要在没有与 Qt 共用的编译单元中保留原有名字空间，你可以使用名字空间别名：</para>

        <programlisting>
  namespace boost {
    namespace signals = BOOST_SIGNALS_NAMESPACE;
  }
</programlisting>

        <para>The second way, provided by Frank Hess and improved by
        Niels Dekker, involves 
        creating a header <code>signalslib.hpp</code> that contains
          the following code:<sbr/>
          第二种方法是由 Frank Hess 提供并由 Niels Dekker 改进的，
          创建一个头文件 <code>signalslib.hpp</code>，包含以下代码：</para>

        <programlisting>#ifndef SIGNALSLIB_HPP_INCLUDED
#define SIGNALSLIB_HPP_INCLUDED 

#if defined(signals) &amp;&amp; defined(QOBJECTDEFS_H) &amp;&amp; \
  !defined(QT_MOC_CPP)
#  undef signals
#  define signals signals
#endif

#include &lt;boost/signal.hpp&gt;
namespace boost
{
  namespace signalslib = signals;
}

#if defined(signals) &amp;&amp; defined(QOBJECTDEFS_H) &amp;&amp; \
  !defined(QT_MOC_CPP)
#  undef signals
// Restore the macro definition of "signals", as it was
// defined by Qt's &lt;qobjectdefs.h&gt;.
#  define signals protected
#endif

#endif</programlisting>

        <para>Use this header to include the Boost library, then refer
          to it in the namespace <code>boost::signalslib</code>. This
          option is often
        preferable to the first option because it can be used without
        recompiling the Signals library binary. <sbr/>
        使用这个头文件来包含 Boost 库，然后在名字空间 <code>boost::signalslib</code> 中引用它。
        这一方法通常优于第一种方法，因为它无需重新编译 Signals 库的二进制代码就可以使用。</para>
      </answer>
    </qandaentry>
  </qandaset>
</section>
