<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN" 
"../../../tools/boostbook/dtd/boostbook.dtd">

<!-- Copyright (c) 2001-2005 CrystalClear Software, Inc.
     Subject to the Boost Software License, Version 1.0. 
     (See accompanying file LICENSE_1_0.txt or  http://www.boost.org/LICENSE_1_0.txt)
-->

<section id="date_time.posix_time.ptime_class">
  <title>Ptime</title>

  <link linkend="ptime_intro">Introduction 简介</link> --
  <link linkend="ptime_header">Header 头文件</link> --
  <link linkend="ptime_constr">Construction 构造</link> --
  <link linkend="ptime_from_string">Construct from String 从字符串构造</link> --
  <link linkend="ptime_from_clock">Construct from Clock 从时钟构造</link> --
  <link linkend="ptime_from_funcs">Construct using Conversion functions 使用转换函数进行构造</link> --
  <link linkend="ptime_accessors">Accessors 访问器</link> --
  <link linkend="ptime_to_string">Conversion To String 转换为字符串</link> --
  <link linkend="ptime_operators">Operators 操作符</link> --
  <link linkend="ptime_struct_tm">Struct tm, time_t, and FILETIME Functions</link>

  <anchor id="ptime_intro" />
  <bridgehead renderas="sect3">Introduction 简介</bridgehead>
  <para>
    The class boost::posix_time::ptime is the primary interface for time point manipulation. In general, the ptime class is immutable once constructed although it does allow assignment. <sbr/>
    类 boost::posix_time::ptime 是处理时间点的主要接口。通常，ptime 类在构造后就不再改变，不过它也允许进行赋值。
  </para>
  <para>
    Class ptime is dependent on <link linkend="date_time.gregorian.date_class">gregorian::date</link> for the interface to the date portion of a time point. <sbr/>
    类 ptime 依赖于 <link linkend="date_time.gregorian.date_class">gregorian::date</link>，作为时间点的日期部分的接口。
  </para>
  <para>
    Other techniques for creating times include <link linkend="date_time.posix_time.time_iterators">time iterators</link>. <sbr/>
    其它创建时间的方法还包括有 <link linkend="date_time.posix_time.time_iterators">时间迭代器</link>。
  </para>

  <anchor id="ptime_header" />
  <bridgehead renderas="sect3">Header 头文件</bridgehead>
  <para>
    <programlisting>#include "boost/date_time/posix_time/posix_time.hpp" //include all types plus i/o 包含所有类型和i/o
or
#include "boost/date_time/posix_time/posix_time_types.hpp" //no i/o just types 只有类型没有i/o</programlisting>
  </para>

  <anchor id="ptime_constr" />
  <bridgehead renderas="sect3">Construction 构造</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry valign="top" morerows="1">Syntax 语法</entry>
	    <entry>Description 说明</entry>
	  </row>
	  <row>
	    <entry>Example 例子</entry>
	  </row>
	</thead>
	<tbody>
          <row>
	    <entry valign="top" morerows="1"><screen>ptime(date,time_duration)</screen></entry>
	    <entry>Construct from a date and offset<sbr/>
        从一个日期和时间偏移进行构造。</entry>
	  </row>
	  <row>
	    <entry><screen>ptime t1(date(2002,Jan,10), 
         time_duration(1,2,3));
ptime t2(date(2002,Jan,10), 
         hours(1)+nanosec(5));</screen>
	    </entry>
          </row>

	  <row>
	    <entry valign="top" morerows="1"><screen>ptime(ptime)</screen></entry>
	    <entry>Copy constructor<sbr/>
        复制构造函数。</entry>
	  </row>
	  <row>
	    <entry><screen>ptime t3(t1)</screen></entry>
          </row>
          
	  <row>
	    <entry valign="top" morerows="1"><screen>ptime(special_values sv)</screen></entry>
	    <entry>Constructor for infinities, not-a-date-time, max_date_time, and min_date_time<sbr/>
        无限时间、无效时间、最大时间和最小时间的构造函数。</entry>
	  </row>
	  <row>
	    <entry><screen>ptime d1(neg_infin);
ptime d2(pos_infin);
ptime d3(not_a_date_time);
ptime d4(max_date_time);
ptime d5(min_date_time);</screen></entry>
          </row>
          
          <row>
	    <entry valign="top" morerows="1"><screen>ptime;</screen></entry>
	    <entry>Default constructor. Creates a ptime object initialized to not_a_date_time. NOTE: this constructor can be disabled by defining DATE_TIME_NO_DEFAULT_CONSTRUCTOR (see compiler_config.hpp)<sbr/>
        缺省构造函数。创建一个 ptime 对象，初始化为 not_a_date_time. 注：该构造函数可以通过下定义 
        DATE_TIME_NO_DEFAULT_CONSTRUCTOR 来禁止(请见 compiler_config.hpp)</entry>
	  </row>
	  <row>
	    <entry><screen>ptime p; // p =&gt; not_a_date_time</screen></entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>
  </para>


  <anchor id="ptime_from_string" />
  <bridgehead renderas="sect3">Construct from String 从字符串构造</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry valign="top" morerows="1">Syntax 语法</entry>
	    <entry>Description 说明</entry>
	  </row>
	  <row>
	    <entry>Example 例子</entry>
	  </row>
	</thead>
	<tbody>
          <row>
	    <entry valign="top" morerows="1"><screen>ptime time_from_string(std::string)</screen></entry>
            <entry>From delimited string. NOTE: Excess digits in fractional seconds will be dropped. Ex: "1:02:03.123456999" =&gt; 1:02:03.123456. This behavior is affected by the precision the library is compiled with (see <link linkend="date_time.buildinfo">Build-Compiler Information</link>).<sbr/>
            从带分隔的字符串进行构造。注：秒的小数部分中超出精度的部分将被截掉。如："1:02:03.123456999" => 1:02:03.123456.
            该行为受编译本库时的精度所影响(请见 <link linkend="date_time.buildinfo">构建及编译器信息</link>)</entry>
	  </row>
	  <row>
	    <entry><screen>std::string ts("2002-01-20 23:59:59.000");
ptime t(time_from_string(ts))</screen></entry>
          </row>

	  <row>
	    <entry valign="top" morerows="1"><screen>ptime from_iso_string(std::string)</screen></entry>
	    <entry>From non delimited iso form string.<sbr/>
        从不带分隔的字符串构造。</entry>
	  </row>
          <row>
	    <entry><screen>std::string ts("20020131T235959");
ptime t(from_iso_string(ts))</screen></entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>
  </para>


  <anchor id="ptime_from_clock" />
  <bridgehead renderas="sect3">Construct from Clock 从时钟构造</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry valign="top" morerows="1">Syntax 语法</entry>
	    <entry>Description 说明</entry>
	  </row>
	  <row>
	    <entry>Example 例子</entry>
	  </row>
	</thead>
	<tbody>
          <row>
	    <entry valign="top" morerows="1"><screen>ptime second_clock::local_time()</screen></entry>
	    <entry>Get the local time, second level resolution, based on the time zone settings of the computer.<sbr/>
        取得本地时间，秒级精度，基于计算机的时区设置。</entry>
	  </row>
	  <row>
	    <entry><screen>ptime t(second_clock::local_time());</screen></entry>
          </row>

	  <row>
	    <entry valign="top" morerows="1"><screen>ptime second_clock::universal_time()</screen></entry>
	    <entry>Get the UTC time.<sbr/>
        取得 UTC 时间。</entry>
	  </row>
	  <row>
	    <entry><screen>ptime t(second_clock::universal_time())</screen></entry>
          </row>
          
          <row>
	    <entry valign="top" morerows="1"><screen>ptime microsec_clock::local_time()</screen></entry>
	    <entry>Get the local time using a sub second resolution clock.  On Unix systems this is implemented using GetTimeOfDay.  On most Win32 platforms it is implemented using ftime.  Win32 systems often do not achieve microsecond resolution via this API.  If higher resolution is critical to your application test your platform to see the achieved resolution.<sbr/>
        使用次秒级精度的时钟取得本地时间。在 Unix 系统上，以 GetTimeOfDay 来实现。
        在大多数 Win32 平台上则以 ftime 实现。Win32 系统通常不能通过此 API 达到微秒级精度。
        如果你的应用程序需要更高的精度，请测试你的平台，以确定可达到的精度。</entry>
	  </row>
	  <row>
	    <entry><screen>ptime t(microsec_clock::local_time());</screen></entry>
	  </row>
          
          <row>
	    <entry valign="top" morerows="1"><screen>ptime microsec_clock::universal_time()</screen></entry>
	    <entry>Get the UTC time using a sub second resolution clock.  On Unix systems this is implemented using GetTimeOfDay.  On most Win32 platforms it is implemented using ftime.  Win32 systems often do not achieve microsecond resolution via this API.  If higher resolution is critical to your application test your platform to see the achieved resolution.<sbr/>
        使用次秒级精度的时钟取得 UTC 时间。在 Unix 系统上，以 GetTimeOfDay 来实现。
        在大多数 Win32 平台上则以 ftime 实现。Win32 系统通常不能通过此 API 达到微秒级精度。
        如果你的应用程序需要更高的精度，请测试你的平台，以确定可达到的精度。</entry>
	  </row>
	  <row>
	    <entry><screen>ptime t(microsec_clock::universal_time());</screen></entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>
  </para>


  <anchor id="ptime_from_funcs" />
  <bridgehead renderas="sect3">Construct using Conversion Functions 使用转换函数进行构造</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry valign="top" morerows="1">Syntax 语法</entry>
	    <entry>Description 说明</entry>
	  </row>
	  <row>
	    <entry>Example 例子</entry>
	  </row>
	</thead>
	<tbody>
          <row>
	    <entry valign="top" morerows="1"><screen>ptime from_time_t(time_t t);</screen></entry>
	    <entry>Converts a time_t into a ptime.<sbr/>
        将 time_t 转换为 ptime.</entry>
	  </row>
	  <row>
	    <entry><screen>ptime t = from_time_t(tt);</screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>ptime from_ftime&lt;ptime&gt;(FILETIME ft);</screen></entry>
            <entry>Creates a ptime object from a FILETIME structure.<sbr/>
            从 FILETIME 结构创建 ptime 对象。</entry>
	  </row>
	  <row>
            <entry><screen>ptime t = from_ftime&lt;ptime&gt;(ft);</screen></entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>
  </para>


  <anchor id="ptime_accessors" />
  <bridgehead renderas="sect3">Accessors 访问器</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry valign="top" morerows="1">Syntax 语法</entry>
	    <entry>Description 说明</entry>
	  </row>
	  <row>
	    <entry>Example 例子</entry>
	  </row>
	</thead>
	<tbody>
          <row>
	    <entry valign="top" morerows="1"><screen>date date()</screen></entry>
	    <entry>Get the date part of a time.<sbr/>
        取出时间的日期部分。</entry>
	  </row>
	  <row>
	    <entry><screen>date d(2002,Jan,10);
ptime t(d, hour(1));
t.date() --> 2002-Jan-10;</screen>
	    </entry>
          </row>

	  <row>
	    <entry valign="top" morerows="1"><screen>time_duration time_of_day()</screen></entry>
	    <entry>Get the time offset in the day.<sbr/>
        取出在一天中的时间偏移。</entry>
	  </row>
	  <row>
	    <entry><screen>date d(2002,Jan,10);
ptime t(d, hour(1));
t.time_of_day() --> 01:00:00;</screen>
	    </entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>bool is_infinity() const</screen></entry>
            <entry>Returns true if ptime is either positive or negative infinity<sbr/>
            返回 true 如果 ptime 是正的或负的无限。</entry>
          </row>
          <row>
            <entry><screen>ptime pt(pos_infin); 
pt.is_infinity(); // --> true</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>bool is_neg_infinity() const</screen></entry>
            <entry>Returns true if ptime is negative infinity<sbr/>
            返回 true 如果 ptime 为负无限。</entry>
          </row>
          <row>
            <entry><screen>ptime pt(neg_infin);
pt.is_neg_infinity(); // --> true</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>bool is_pos_infinity() const</screen></entry>
            <entry>Returns true if ptime is positive infinity<sbr/>
            返回 true 如果 ptime 为正无限。</entry>
          </row>
          <row>
            <entry><screen>ptime pt(neg_infin); 
pt.is_pos_infinity(); // --> true</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>bool is_not_a_date_time() const</screen></entry>
            <entry>Returns true if value is not a ptime<sbr/>
            返回 true 如果其值不是一个 ptime</entry>
          </row>
          <row>
            <entry><screen>ptime pt(not_a_date_time);
pt.is_not_a_date_time(); // --> true</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>bool is_special() const</screen></entry>
            <entry>Returns true if ptime is any <code>special_value</code><sbr/>
            返回 true 如果 ptime 为某个 <code>special_value</code> </entry>
          </row>
          <row>
            <entry><screen>ptime pt(pos_infin); 
ptime pt2(not_a_date_time); 
ptime pt3(date(2005,Mar,1), hours(10));
pt.is_special(); // --> true
pt2.is_special(); // --> true
pt3.is_special(); // --> false</screen></entry>
          </row>
        
	</tbody>
      </tgroup>
    </informaltable>
  </para>


  <anchor id="ptime_to_string" />
  <bridgehead renderas="sect3">Conversion to String 转换为字符串</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry valign="top" morerows="1">Syntax 语法</entry>
	    <entry>Description 说明</entry>
	  </row>
	  <row>
	    <entry>Example 例子</entry>
	  </row>
	</thead>
	<tbody>
          <row>
	    <entry valign="top" morerows="1"><screen>std::string to_simple_string(ptime)</screen></entry>
            <entry>To <code>YYYY-mmm-DD HH:MM:SS.fffffffff</code> string where <code>mmm</code> 3 char month name. Fractional seconds only included if non-zero.<sbr/>
            转换为 <code>YYYY-mmm-DD HH:MM:SS.fffffffff</code> 字符串，其中 <code>mmm</code> 为3字符月份名。
            秒的小数部分仅在非零时包含。</entry>
	  </row>
	  <row>
	    <entry><screen>2002-Jan-01 10:00:01.123456789</screen></entry>
          </row>

	  <row>
	    <entry valign="top" morerows="1"><screen>std::string to_iso_string(ptime)</screen></entry>
            <entry>Convert to form <code>YYYYMMDDTHHMMSS,fffffffff</code> where <code>T</code> is the date-time separator<sbr/>
            转换为 <code>YYYYMMDDTHHMMSS,fffffffff</code> 其中 <code>T</code> 为日期-时间分隔符。</entry>
	  </row>
	  <row>
	    <entry><screen>20020131T100001,123456789</screen></entry>
          </row>
          
          <row>
	    <entry valign="top" morerows="1"><screen>std::string to_iso_extended_string(ptime)</screen></entry>
            <entry>Convert to form <code>YYYY-MM-DDTHH:MM:SS,fffffffff</code> where <code>T</code> is the date-time separator<sbr/>
            转换为 <code>YYYY-MM-DDTHH:MM:SS,fffffffff</code> 其中 <code>T</code> 为日期-时间分隔符。</entry>
	  </row>
	  <row>
	    <entry><screen>2002-01-31T10:00:01,123456789</screen></entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>
  </para>


  <anchor id="ptime_operators" />
  <bridgehead renderas="sect3">Operators 操作符</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry valign="top" morerows="1">Syntax 语法</entry>
	    <entry>Description 说明</entry>
	  </row>
	  <row>
	    <entry>Example 例子</entry>
	  </row>
	</thead>
	<tbody>
          <row>
            <entry valign="top" morerows="1"><screen>operator&lt;&lt;, operator&gt;&gt;</screen></entry>
            <entry>Streaming operators. <emphasis role="strong">Note:</emphasis> As of version 1.33, streaming operations have been greatly improved. See <link linkend="date_time.date_time_io">Date Time IO System</link> for more details (including exceptions and error conditions).<sbr/>
            流操作符。<emphasis role="strong">注：</emphasis>和版本1.33一样，流操作符得到了改进。
            详情请见 <link linkend="date_time.date_time_io">日期时间IO系统 </link>(包括异常和错误条件)。</entry>
          </row>
          <row>
            <entry><screen>ptime pt(not_a_date_time);
stringstream ss("2002-Jan-01 14:23:11");
ss &gt;&gt; pt; 
std::cout &lt;&lt; pt; // "2002-Jan-01 14:23:11"
  </screen>
            </entry>
          </row>

          <row>
	    <entry valign="top" morerows="1"><screen>operator==, operator!=,
operator>, operator&lt;,
operator>=, operator&lt;=</screen>
	    </entry>
	    <entry>A full complement of comparison operators<sbr/>
        完整的比较操作符。</entry>
	  </row>
	  <row>
	    <entry><screen>t1 == t2, etc</screen></entry>
          </row>

	  <row>
	    <entry valign="top" morerows="1"><screen>ptime operator+(days)</screen></entry>
	    <entry>Return a ptime adding a day offset<sbr/>
        返回加上日子偏移后的 ptime</entry>
	  </row>
	  <row>
	    <entry><screen>date d(2002,Jan,1);
ptime t(d,minutes(5));
days dd(1);
ptime t2 = t + dd;</screen>
	    </entry>
          </row>
          
	  <row>
	    <entry valign="top" morerows="1"><screen>ptime operator-(days)</screen></entry>
	    <entry>Return a ptime subtracting a day offset<sbr/>
        返回减去日子偏移后的 ptime</entry>
	  </row>
	  <row>
	    <entry><screen>date d(2002,Jan,1);
ptime t(d,minutes(5));
days dd(1);
ptime t2 = t - dd;</screen>
	    </entry>
          </row>
          
	  <row>
	    <entry valign="top" morerows="1"><screen>ptime operator+(time_duration)</screen></entry>
	    <entry>Return a ptime adding a time duration<sbr/>
        返回加上时间长度后的 ptime</entry>
	  </row>
	  <row>
	    <entry><screen>date d(2002,Jan,1);
ptime t(d,minutes(5));
ptime t2 = t + hours(1) + minutes(2);</screen>
	    </entry>
          </row>
          
	  <row>
	    <entry valign="top" morerows="1"><screen>ptime operator-(time_duration)</screen></entry>
	    <entry>Return a ptime subtracting a time duration<sbr/>
        返回减去时间长度后的 ptime</entry>
	  </row>
	  <row>
	    <entry><screen>date d(2002,Jan,1);
ptime t(d,minutes(5));
ptime t2 = t - minutes(2);</screen>
	    </entry>
          </row>
          
          <row>
	    <entry valign="top" morerows="1"><screen>time_duration operator-(ptime)</screen></entry>
	    <entry>Take the difference between two times.<sbr/>
        获得两个时间之间的差距。</entry>
	  </row>
	  <row>
	    <entry><screen>date d(2002,Jan,1);
ptime t1(d,minutes(5));
ptime t2(d,seconds(5));
time_duration t3 = t2 - t1;//negative result 结果为负</screen>
	    </entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>
  </para>

  <anchor id="ptime_struct_tm" />
  <bridgehead renderas="sect3">Struct tm, time_t, and FILETIME Functions</bridgehead>
  <para>Functions for converting posix_time objects to, and from, <code>tm</code> structs are provided as well as conversion from <code>time_t</code> and <code>FILETIME</code>.<sbr/>
  库中提供了 posix_time 对象与 <code>tm</code> 结构之间进行相互转换的函数，还有从 <code>time_t</code> 和 
  <code>FILETIME</code> 进行转换的函数。</para>
  <informaltable frame="all">
    <tgroup cols="2">
      <thead>
	<row>
	  <entry valign="top" morerows="1">Syntax 语法</entry>
	  <entry>Description 说明</entry>
	</row>
	<row>
	  <entry>Example 例子</entry>
	</row>
      </thead>
      <tbody>
        <row>
	  <entry valign="top" morerows="1"><screen>tm to_tm(ptime)</screen></entry>
          <entry>A function for converting a <code>ptime</code> object to a <code>tm</code> struct. The <code>tm_isdst</code> field is set to -1.<sbr/>
          该函数将 <code>ptime</code> 对象转换为 <code>tm</code> 结构。其中 <code>tm_isdst</code> 字段设为 -1.</entry>
	</row>
	<row>
          <entry><screen>ptime pt(date(2005,Jan,1), time_duration(1,2,3));
tm pt_tm = to_tm(pt);
/* tm_year => 105
   tm_mon  => 0
   tm_mday => 1
   tm_wday => 6 (Saturday 星期六)
   tm_yday => 0
   tm_hour => 1
   tm_min  => 2
   tm_sec  => 3
   tm_isddst => -1 */</screen>
	  </entry>
        </row>

        <row>
	  <entry valign="top" morerows="1"><screen>date date_from_tm(tm datetm)</screen></entry>
          <entry>A function for converting a <code>tm</code> struct to a <code>date</code> object. The fields: <code>tm_wday </code>, <code>tm_yday </code>, and <code>tm_isdst</code> are ignored.<sbr/>
          该函数将 <code>tm</code> 结构转换为 <code>date</code> 对象。字段 <code>tm_wday</code>, <code>tm_yday</code>, 
          和 <code>tm_isdst</code> 均被忽略。</entry>
	</row>
	<row>
          <entry><screen>tm pt_tm;
pt_tm.tm_year = 105;
pt_tm.tm_mon  = 0;
pt_tm.tm_mday = 1;
pt_tm.tm_hour = 1;
pt_tm.tm_min  = 2;
pt_tm.tm_sec  = 3;
ptime pt = ptime_from_tm(pt_tm);
// pt => 2005-Jan-01 01:02:03</screen>
          </entry>
        </row>
        
        <row>
	  <entry valign="top" morerows="1"><screen>tm to_tm(time_duration)</screen></entry>
          <entry>A function for converting a <code>time_duration</code> object to a <code>tm</code> struct. The fields: <code>tm_year</code>, <code>tm_mon</code>, <code>tm_mday</code>, <code>tm_wday</code>, <code>tm_yday</code> are set to zero. The <code>tm_isdst</code> field is set to -1.<sbr/>
          该函数将 <code>time_duration</code> 对象转换为 <code>tm</code> 结构。字段 <code>tm_year</code>, 
          <code>tm_mon</code>, <code>tm_mday</code>, <code>tm_wday</code>, <code>tm_yday</code> 均设为零。
          字段 <code>tm_isdst</code> 被设为 -1.</entry>
	</row>
	<row>
          <entry><screen>time_duration td(1,2,3);
tm td_tm = to_tm(td);
/* tm_year => 0
   tm_mon  => 0
   tm_mday => 0
   tm_wday => 0
   tm_yday => 0
   tm_hour => 1
   tm_min  => 2
   tm_sec  => 3
   tm_isddst => -1 */</screen>
	  </entry>
        </row>

        <row>
	  <entry valign="top" morerows="1"><screen>ptime from_time_t(std::time_t)</screen></entry>
          <entry>Creates a <code>ptime</code> from the time_t parameter. The seconds held in the time_t are added to a time point of 1970-Jan-01.<sbr/>
          从 time_t 参数创建一个 <code>ptime</code>. 在 time_t 中的秒值被加到时间点 1970-Jan-01 上。</entry>
	</row>
	<row>
          <entry><screen>ptime pt(not_a_date_time);
std::time_t t;
t = 1118158776;
pt = from_time_t(t);
// pt => 2005-Jun-07 15:39:36</screen></entry>
        </row>

        <row>
          <entry valign="top" morerows="1"><screen>ptime from_ftime&lt;ptime>(FILETIME)</screen></entry>
          <entry>A template function that constructs a <code>ptime</code> from a FILETIME struct.<sbr/>
          该模板函数从 FILETIME 结构构造 <code>ptime</code>.</entry>
	</row>
	<row>
          <entry><screen>FILETIME ft;
ft.dwHighDateTime = 29715317;
ft.dwLowDateTime = 3865122988UL;
ptime pt = from_ftime&lt;ptime>(ft);
// pt => 2005-Jun-07 15:30:57.039582000</screen></entry>
        </row>

      </tbody>
    </tgroup>
  </informaltable>
  
</section>
