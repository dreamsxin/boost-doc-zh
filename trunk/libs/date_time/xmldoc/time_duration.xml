<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN" 
"../../../tools/boostbook/dtd/boostbook.dtd">

<!-- Copyright (c) 2001-2005 CrystalClear Software, Inc.
     Subject to the Boost Software License, Version 1.0. 
     (See accompanying file LICENSE_1_0.txt or  http://www.boost.org/LICENSE_1_0.txt)
-->

<section id="date_time.posix_time.time_duration">
  <title>Time Duration 时间长度</title>

  <link linkend="time_duration_intro">Introduction 简介</link> --
  <link linkend="time_duration_header">Header 头文件</link> --
  <link linkend="time_duration_constr">Construction 构造</link> --
  <link linkend="time_duration_count_constr">Count Based Construction 基于计数值的构造</link> --
  <link linkend="time_duration_from_string">Construct from String 从字符串构造</link> --
  <link linkend="time_duration_accessors">Accessors 访问器</link> --
  <link linkend="time_duration_to_string">Conversion To String 转换为字符串</link> --
  <link linkend="time_duration_operators">Operators 操作符</link> --
  <link linkend="time_duration_struct_tm">Struct tm Functions</link>

  <anchor id="time_duration_intro" />
  <bridgehead renderas="sect3">Introduction 简介</bridgehead>
  <para>
    The class boost::posix_time::time_duration the base type responsible for representing a length of time. A duration can be either positive or negative. The general time_duration class provides a constructor that takes a count of the number of hours, minutes, seconds, and fractional seconds count as shown in the code fragment below. The resolution of the time_duration is configure able at compile time. See <link linkend="date_time.buildinfo">Build-Compiler Information</link> for more information. <sbr/>
    类 boost::posix_time::time_duration 是负责表示时间长度的基本类型。时间长度可正可负。
    通常 time_duration 类提供一个带有小时、分、秒的计数的构造函数，就象在后面的代码片段所示。
    time_duration 的分辨率可以在编译期配置。更多信息请见 <link linkend="date_time.buildinfo">构建与编译器信息</link>。
  </para>
  <para>
    <programlisting>using namespace boost::posix_time;
time_duration td(1,2,3,4); //01:02:03.000000004 when resolution is nano seconds 如果分辨率为纳秒
time_duration td(1,2,3,4); //01:02:03.000004 when resolution is micro seconds 如果分辨率为微秒</programlisting>
  </para>
  <para>
    Several small helper classes that derive from a base time_duration, as shown below, to adjust for different resolutions. These classes can shorten code and make the intent clearer.<sbr/>
    如下所示，从基类 time_duration 派生了几个类用于按不同的分辨率进行调整。这些类可以使得代码更短且意图更清晰。
  </para>
  <imagedata fileref="../../libs/date_time/doc/time_duration_inherit.png" /> 
  <para>
    As an example: <sbr/>
    举例如下：
    <programlisting>using namespace boost::posix_time;
      
time_duration td = hours(1) + seconds(10); //01:00:01
td = hours(1) + nanoseconds(5); //01:00:00.000000005</programlisting>
    Note that the existence of the higher resolution classes (eg: nanoseconds) depends on the installation of the library. See <link linkend="date_time.buildinfo">Build-Compiler Information</link> for more information. <sbr/>
    注意，是否存在更高分辨率的类(如：纳秒)取决于库的安装。更多信息请见 
    <link linkend="date_time.buildinfo">构建及编译器信息</link>。 
  </para>

  <para>
     Another way to handle this is to utilize the ticks_per_second() method of time_duration to
     write code that is portable no matter how the library is compiled.   The general equation
     for calculating a resolution independent count is as follows:<sbr/>
     处理此事的另一个方法是利用 time_duration 的 ticks_per_second() 方法来编写可移植的代码，
     这样可以不管库是如何编译的。以下是计算分辨率无关的计数值的常用公式。

    <programlisting>
count*(time_duration_ticks_per_second / count_ticks_per_second)
    </programlisting>

     For example, let's suppose we want to construct using a count that represents tenths 
     of a second.  That is, each tick is 0.1 second. <sbr/>
     例如，假设我们想用表示十分之一秒的计数值来构造时间。即每一 tick 为0.1秒。
    <programlisting>
int number_of_tenths = 5;
//create a resolution independent count -- divide by 10 since there are 
//10 tenths in a second.  
//创建一个分辨率无关的计数值 -- 除以10，因为一秒分为10份
int count = number_of_tenths*(time_duration::ticks_per_second()/10);
time_duration td(1,2,3,count); //01:02:03.5 //no matter the resolution settings 与分辨率设置无关
    </programlisting>
  </para>

  <anchor id="time_duration_header" />
  <bridgehead renderas="sect3">Header 头文件</bridgehead>
  <para>
    <programlisting>#include "boost/date_time/posix_time/posix_time.hpp" //include all types plus i/o 包含所有类型和i/o
or
#include "boost/date_time/posix_time/posix_time_types.hpp" //no i/o just types 只有类型没有i/o</programlisting>
  </para>

  <anchor id="time_duration_constr" />
  <bridgehead renderas="sect3">Construction 构造</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry valign="top" morerows="1">Syntax 语法</entry>
            <entry>Description 说明</entry>
          </row>
          <row>
	    <entry>Example 例子</entry>
	  </row>
	</thead>
	<tbody>
          <row>
            <entry valign="top" morerows="1"><screen>time_duration(hours,
              minutes,
              seconds,
              fractional_seconds)</screen></entry>
          <entry>Construct a duration from the counts. The fractional_second parameter is a number of units and is therefore affected by the resolution the application is compiled with (see <link linkend="compile_options">Build-Compiler Information</link>). If the fractional_seconds argument exceeds the limit of the compiled precision, the excess value will be "carried over" into the seconds field.  See above for techniques to creating a resolution independent count.<sbr/>
          从计数值构造一个时间长度。参数 fractional_seconds 为一个单元值，它受应用编译时所设置的分辨率影响
          (请见 <link linkend="compile_options">构建与编译器信息</link>)。如果参数 fractional_seconds 超出编译时精度的限制，
          则超出值将被"进位"至 seconds 字段。要创建与分辨率无关的计数请参见前文。</entry>
          </row>
          <row>
            <entry><screen>time_duration td(1,2,3,9);
//1 hr 2 min 3 sec 9 nanoseconds  1 小时 2 分 3 秒 9 纳秒
time_duration td2(1,2,3,123456789);
time_duration td3(1,2,3,1000);
// with microsecond resolution (6 digits)  对于微秒分辨率(6位)
// td2 => "01:04:06.456789"
// td3 => "01:02:03.001000"
// with nanosecond resolution (9 digits)  对于纳秒分辨率(9位)
// td2 => "01:02:03.123456789"
// td3 => "01:02:03.000001000"</screen></entry>
          </row>

          <row>
            <entry valign="top"><screen>time_duration(special_value sv)</screen></entry>
            <entry>Special values constructor. <emphasis role="strong">Important note</emphasis>: When a time_duration is a special value, either by construction or other means, the following accessor functions will give unpredictable results: <sbr/>
特殊值的构建函数。<emphasis role="strong">重要提示</emphasis>：如果 time_duration 是由构造函数或其它方式所设置的特殊值，
则以下访问器函数将给出不可预知的结果：<screen>hours(), minutes(), seconds(), ticks(), 
fractional_seconds(), total_nanoseconds(),
total_microseconds(), total_milliseconds(),
total_seconds()</screen>The remaining accessor functions will work as expected. <sbr/>
其它访问器函数则没有不同。</entry>
          </row>

	</tbody>
      </tgroup>
    </informaltable>
  </para>


  <anchor id="time_duration_count_constr" />
  <bridgehead renderas="sect3">Count Based Construction 基于计数值的构造</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry valign="top" morerows="1">Syntax 语法</entry>
	    <entry>Description 说明</entry>
	  </row>
	  <row>
	    <entry>Example 例子</entry>
	  </row>
	</thead>
	<tbody>
          <row>
	    <entry valign="top" morerows="1"><screen>hours(long)</screen></entry>
	    <entry>Number of hours<sbr/>
        小时数</entry>
	  </row>
	  <row>
	    <entry><screen>time_duration td = hours(3);</screen></entry>
          </row>

	  <row>
	    <entry valign="top" morerows="1"><screen>minutes(long)</screen></entry>
	    <entry>Number of minutes<sbr/>
        分钟数</entry>
	  </row>
	  <row>
	    <entry><screen>time_duration td = minutes(3);</screen></entry>
          </row>
          
	  <row>
	    <entry valign="top" morerows="1"><screen>seconds(long)</screen></entry>
	    <entry> Number of seconds<sbr/>
        秒数</entry>
	  </row>
	  <row>
	    <entry><screen>time_duration td = seconds(3);</screen></entry>
          </row>
          
	  <row>
	    <entry valign="top" morerows="1"><screen>milliseconds(long)</screen></entry>
	    <entry>Number of milliseconds.<sbr/>
        毫秒数</entry>
	  </row>
	  <row>
	    <entry><screen>time_duration td = milliseconds(3);</screen></entry>
          </row>
          
	  <row>
	    <entry valign="top" morerows="1"><screen>microseconds(long)</screen></entry>
	    <entry>Number of microseconds.<sbr/>
        微秒数</entry>
	  </row>
	  <row>
	    <entry><screen>time_duration td = microseconds(3);</screen></entry>
          </row>
          
          <row>
	    <entry valign="top" morerows="1"><screen>nanoseconds(long)</screen></entry>
	    <entry>Number of nanoseconds.<sbr/>
        纳秒数</entry>
	  </row>
	  <row>
	    <entry><screen>time_duration td = nanoseconds(3);</screen></entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>
  </para>


  <anchor id="time_duration_from_string" />
  <bridgehead renderas="sect3">Construct from String 从字符串构造</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry valign="top" morerows="1">Syntax 语法</entry>
            <entry>Description 说明</entry>
          </row>
          <row>
	    <entry>Example 例子</entry>
	  </row>
	</thead>
	<tbody>
          <row>
	    <entry valign="top" morerows="1"><screen>time_duration duration_from_string(std::string)</screen></entry>
            <entry>From delimited string. NOTE: Excess digits in fractional seconds will be dropped. Ex: "1:02:03.123456999" =&gt; 1:02:03.123456. This behavior is affected by the precision the library is compiled with (see <link linkend="date_time.buildinfo">Build-Compiler Information</link>.<sbr/>
            从带有分隔符的字符串构造。注：秒数中超界的小数部分将被截断。如："1:02:03.123456999" => 1:02:03.123456. 
            该行为受本库编译时的精度影响(请见 <link linkend="date_time.buildinfo">构建及编译器信息</link>)</entry>
          </row>
          <row>
            <entry><screen>std::string ts("23:59:59.000");
time_duration td(duration_from_string(ts));</screen>
	    </entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>
  </para>


  <anchor id="time_duration_accessors" />
  <bridgehead renderas="sect3">Accessors 访问器</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry valign="top" morerows="1">Syntax 语法</entry>
	    <entry>Description 说明</entry>
	  </row>
	  <row>
	    <entry>Example 例子</entry>
	  </row>
	</thead>
	<tbody>
          <row>
	    <entry valign="top" morerows="1"><screen>long hours()</screen></entry>
            <entry>Get the number of normalized hours (will give unpredictable results if calling <code>time_duration</code> is a <code>special_value</code>).<sbr/>
            取出规格化的小时数(如果调用的 <code>time_duration</code> 为 <code>special_value</code> 则给出不可预知的结果)。</entry>
	  </row>
	  <row>
            <entry><screen>time_duration td(1,2,3); 
time_duration neg_td(-1,2,3);
td.hours(); // --> 1
neg_td.hours(); // --> -1</screen></entry>
          </row>

	  <row>
	    <entry valign="top" morerows="1"><screen>long minutes()</screen></entry>
            <entry>Get the number of minutes normalized +/-(0..59) (will give unpredictable results if calling <code>time_duration</code> is a <code>special_value</code>).<sbr/>
            取出规格化的分钟数 +/-(0..59) (如果调用的 <code>time_duration</code> 为 <code>special_value</code> 
            则给出不可预知的结果)。</entry>
	  </row>
	  <row>
            <entry><screen>time_duration td(1,2,3);
time_duration neg_td(-1,2,3);
td.minutes(); // --> 2
neg_td.minutes(); // --> -2</screen></entry>
        </row>
        
	  <row>
	    <entry valign="top" morerows="1"><screen>long seconds()</screen></entry>
            <entry>Get the normalized number of second +/-(0..59) (will give unpredictable results if calling <code>time_duration</code> is a <code>special_value</code>).<sbr/>
            取出规格化的秒数 +/-(0..59) (如果调用的 <code>time_duration</code> 为 <code>special_value</code> 
            则给出不可预知的结果)。</entry>
	  </row>
	  <row>
            <entry><screen>time_duration td(1,2,3); 
time_duration neg_td(-1,2,3);
td.seconds(); // --> 3
neg_td.seconds(); // --> -3</screen></entry>
        </row>
        
	  <row>
	    <entry valign="top" morerows="1"><screen>long total_seconds()</screen></entry>
	    <entry>Get the total number of seconds truncating any fractional seconds (will give unpredictable results if calling <code>time_duration</code> is a <code>special_value</code>).<sbr/>
        取出截断分数后的总秒数(如果调用的 <code>time_duration</code> 为 <code>special_value</code> 则给出不可预知的结果)。</entry>
	  </row>
	  <row>
	    <entry><screen>time_duration td(1,2,3,10);
td.total_seconds(); 
// --> (1*3600) + (2*60) + 3 == 3723</screen>
	    </entry>
          </row>
          
	  <row>
	    <entry valign="top" morerows="1"><screen>long total_milliseconds()</screen></entry>
	    <entry>Get the total number of milliseconds truncating any remaining digits (will give unpredictable results if calling <code>time_duration</code> is a <code>special_value</code>).<sbr/>
        取出截掉剩余的数字后的总毫秒数(如果调用的 <code>time_duration</code> 为 <code>special_value</code> 
        则给出不可预知的结果)。</entry>
	  </row>
	  <row>
	    <entry><screen>time_duration td(1,2,3,123456789);
td.total_milliseconds(); 
// HMS --> (1*3600) + (2*60) + 3 == 3723 seconds
// milliseconds is 3 decimal places  毫秒是3位数字
// (3723 * 1000) + 123 == 3723123</screen>
	    </entry>
          </row>
          
	  <row>
	    <entry valign="top" morerows="1"><screen>long total_microseconds()</screen></entry>
	    <entry>Get the total number of microseconds truncating any remaining digits (will give unpredictable results if calling <code>time_duration</code> is a <code>special_value</code>).<sbr/>
        取出截掉剩余的数字后的总微秒数(如果调用的 <code>time_duration</code> 为 <code>special_value</code>
        则给出不可预知的结果)。</entry>
	  </row>
	  <row>
	    <entry><screen>time_duration td(1,2,3,123456789);
td.total_microseconds(); 
// HMS --> (1*3600) + (2*60) + 3 == 3723 seconds
// microseconds is 6 decimal places  微秒是6位数字
// (3723 * 1000000) + 123456 == 3723123456</screen>
	    </entry>
          </row>
          
	  <row>
	    <entry valign="top" morerows="1"><screen>long total_nanoseconds()</screen></entry>
	    <entry>Get the total number of nanoseconds truncating any remaining digits (will give unpredictable results if calling <code>time_duration</code> is a <code>special_value</code>).<sbr/>
        取出截掉剩余的数字后的总纳秒数(如果调用的 <code>time_duration</code> 为 <code>special_value</code>
        则给出不可预知的结果)。</entry>
	  </row>
	  <row>
	    <entry><screen>time_duration td(1,2,3,123456789);
td.total_nanoseconds(); 
// HMS --> (1*3600) + (2*60) + 3 == 3723 seconds
// nanoseconds is 9 decimal places  纳秒是9位数字
// (3723 * 1000000000) + 123456789
//                              == 3723123456789</screen>
	    </entry>
          </row>
          
	  <row>
	    <entry valign="top" morerows="1"><screen>long fractional_seconds()</screen></entry>
	    <entry>Get the number of fractional seconds (will give unpredictable results if calling <code>time_duration</code> is a <code>special_value</code>).<sbr/>
        取出秒的分数部分(如果调用的 <code>time_duration</code> 为 <code>special_value</code> 则给出不可预知的结果)。</entry>
	  </row>
	  <row>
            <entry><screen>time_duration td(1,2,3, 1000);
td.fractional_seconds(); // --> 1000</screen></entry>
          </row>
          
	  <row>
	    <entry valign="top" morerows="1"><screen>bool is_negative()</screen></entry>
	    <entry>True if duration is negative.<sbr/>
        返回 True 如果时间长度为负。</entry>
	  </row>
	  <row>
            <entry><screen>time_duration td(-1,0,0); 
td.is_negative(); // --> true</screen></entry>
          </row>
          
	  <row>
	    <entry valign="top" morerows="1"><screen>time_duration invert_sign()</screen></entry>
	    <entry>Generate a new duration with the sign inverted.<sbr/>
        生成一个新的时间长度，将符号取反。</entry>
	  </row>
	  <row>
            <entry><screen>time_duration td(-1,0,0); 
td.invert_sign(); // --> 01:00:00</screen></entry>
          </row>
          
	  <row>
	    <entry valign="top" morerows="1"><screen>date_time::time_resolutions resolution()</screen></entry>
            <entry>Describes the resolution capability of the time_duration class. time_resolutions is an enum of resolution possibilities ranging from seconds to nanoseconds.<sbr/>
            表示 time_duration 类的精度。time_resolutions 是一个可能的精度的枚举类型，从秒到纳秒。</entry>
	  </row>
	  <row>
	    <entry><screen>time_duration::resolution() --> nano</screen></entry>
          </row>
          
	  <row>
            <entry valign="top" morerows="1"><screen>time_duration::num_fractional_digits()</screen></entry>
            <entry>Returns an unsigned short holding the number of fractional digits the time resolution has.<sbr/>
            返回一个 unsigned short，表示时间精度的分数位数。</entry>
	  </row>
	  <row>
            <entry><screen>unsigned short secs;
secs = time_duration::num_fractional_digits();
// 9 for nano, 6 for micro, etc. 纳秒为9，微秒为6，等等</screen></entry>
          </row>
          
	  <row>
            <entry valign="top" morerows="1"><screen>time_duration::ticks_per_second()</screen></entry>
            <entry>Return the number of ticks in a second.  For example, if the duration supports nanoseconds then the returned result will be 1,000,000,000 (1e+9).<sbr/>
            返回一秒的 ticks 数。例如，如果时间长度支持纳秒，则返回结果为 1,000,000,000 (1e+9).</entry>
	  </row>
	  <row>
            <entry><screen>std::cout &lt;&lt; time_duration::ticks_per_second();</screen></entry>
          </row>
          
	  <row>
	    <entry valign="top" morerows="1"><screen>boost::int64_t ticks()</screen></entry>
	    <entry>Return the raw count of the duration type (will give unpredictable results if calling <code>time_duration</code> is a <code>special_value</code>).<sbr/>
        返回时间长度类型的祼计数值(如果调用的 <code>time_duration</code> 为 <code>special_value</code> 
        则给出不可预知的结果)。</entry>
	  </row>
	  <row>
            <entry><screen>time_duration td(0,0,0, 1000);
td.ticks() // --> 1000</screen></entry>
          </row>
          
          <row>
	    <entry valign="top" morerows="1"><screen>time_duration unit()</screen></entry>
	    <entry>Return smallest possible unit of duration type (1 nanosecond).<sbr/>
        返回时间长度类型的最小可能单元(1纳秒)。</entry>
	  </row>
	  <row>
	    <entry><screen>time_duration::unit() --> time_duration(0,0,0,1)</screen></entry>
          </row>
  
          <row>
            <entry valign="top" morerows="1"><screen>bool is_neg_infinity() const</screen></entry>
            <entry>Returns true if time_duration is negative infinity<sbr/>
            返回 true 如果 time_duration 为负无限。</entry>
          </row>
          <row>
            <entry><screen>time_duration td(neg_infin);
td.is_neg_infinity(); // --> true</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>bool is_pos_infinity() const</screen></entry>
            <entry>Returns true if time_duration is positive infinity<sbr/>
            返回 true 如果 time_duration 为正无限。</entry>
          </row>
          <row>
            <entry><screen>time_duration td(neg_infin); 
td.is_pos_infinity(); // --> true</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>bool is_not_a_date_time() const</screen></entry>
            <entry>Returns true if value is not a time<sbr/>
            返回 true 如果时间长度值无效。</entry>
          </row>
          <row>
            <entry><screen>time_duration td(not_a_date_time);
td.is_not_a_date_time(); // --> true</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>bool is_special() const</screen></entry>
            <entry>Returns true if time_duration is any <code>special_value</code><sbr/>
            返回 true 如果 time_duration 为任意 <code>special_value</code> </entry>
          </row>
          <row>
            <entry><screen>time_duration td(pos_infin); 
time_duration td2(not_a_date_time); 
time_duration td3(2,5,10);
td.is_special(); // --> true
td2.is_special(); // --> true
td3.is_special(); // --> false</screen></entry>
          </row>
        
	</tbody>
      </tgroup>
    </informaltable>
  </para>


  <anchor id="time_duration_to_string" />
  <bridgehead renderas="sect3">Conversion To String 转换为字符串</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry valign="top" morerows="1">Syntax 语法</entry>
	    <entry>Description 说明</entry>
	  </row>
	  <row>
	    <entry>Example 例子</entry>
	  </row>
	</thead>
	<tbody>
          <row>
	    <entry valign="top" morerows="1"><screen>std::string to_simple_string(time_duration)</screen></entry>
            <entry>To <code>HH:MM:SS.fffffffff</code> were <code>fff</code> is fractional seconds that are only included if non-zero.<sbr/>
            转换为 <code>HH:MM:SS.fffffffff</code> 其中 <code>fff</code> 为秒的分数部分，仅当非零时包含。</entry>
	  </row>
	  <row>
	    <entry><screen>10:00:01.123456789</screen></entry>
          </row>

	  <row>
	    <entry valign="top" morerows="1"><screen>std::string to_iso_string(time_duration)</screen></entry>
            <entry>Convert to form <code>HHMMSS,fffffffff</code>.<sbr/>
            转换为 <code>HHMMSS,fffffffff</code>.</entry>
	  </row>
          <row>
	    <entry><screen>100001,123456789</screen></entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>
  </para>


  <anchor id="time_duration_operators" />
  <bridgehead renderas="sect3">Operators 操作符</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry valign="top" morerows="1">Syntax 语法</entry>
	    <entry>Description 说明</entry>
	  </row>
	  <row>
	    <entry>Example 例子</entry>
	  </row>
	</thead>
	<tbody>
          <row>
            <entry valign="top" morerows="1"><screen>operator&lt;&lt;, operator&gt;&gt;</screen></entry>
            <entry>Streaming operators. <emphasis role="strong">Note:</emphasis> As of version 1.33, streaming operations have been greatly improved. See <link linkend="date_time.date_time_io">Date Time IO System</link> for more details (including exceptions and error conditions).<sbr/>
            流操作符。<emphasis role="strong">注：</emphasis>和版本1.33一样，流操作符得到很大改进。相关详情请见 <link linkend="date_time.date_time_io">日期时间IO系统</link>(包括异常和错误条件)。</entry>
          </row>
          <row>
            <entry><screen>time_duration td(0,0,0);
stringstream ss("14:23:11.345678");
ss &gt;&gt; td; 
std::cout &lt;&lt; td; // "14:23:11.345678"
  </screen>
            </entry>
          </row>

          <row>
	    <entry valign="top" morerows="1"><screen>operator==, operator!=,
operator>, operator&lt;,
operator>=, operator&lt;=</screen>
	    </entry>
	    <entry>A full complement of comparison operators<sbr/>
        完整的比较操作符。</entry>
	  </row>
	  <row>
	    <entry><screen>dd1 == dd2, etc</screen></entry>
          </row>

	  <row>
	    <entry valign="top" morerows="1"><screen>time_duration operator+(time_duration)</screen></entry>
	    <entry>Add durations.<sbr/>
        加上时间长度。</entry>
	  </row>
	  <row>
	    <entry><screen>time_duration td1(hours(1)+minutes(2));
time_duration td2(seconds(10));
time_duration td3 = td1 + td2;</screen>
	    </entry>
          </row>
          
	  <row>
	    <entry valign="top" morerows="1"><screen>time_duration operator-(time_duration)</screen></entry>
	    <entry>Subtract durations.<sbr/>
        减去时间长度。</entry>
	  </row>
	  <row>
	    <entry><screen>time_duration td1(hours(1)+nanoseconds(2));
time_duration td2 = td1 - minutes(1);</screen>
	    </entry>
          </row>
          
	  <row>
	    <entry valign="top" morerows="1"><screen>time_duration operator/(int)</screen></entry>
	    <entry>Divide the length of a duration by an integer value. Discards any remainder.<sbr/>
        用整数值去除以时间长度。忽略余数。</entry>
	  </row>
	  <row>
	    <entry><screen>hours(3)/2 == time_duration(1,30,0);
nanosecond(3)/2 == nanosecond(1);</screen>
	    </entry>
          </row>
          
	  <row>
	    <entry valign="top" morerows="1"><screen>time_duration operator*(int)</screen></entry>
	    <entry>Multiply the length of a duration by an integer value.<sbr/>
        用整数值乘以时间长度。</entry>
	  </row>
          <row>
	    <entry><screen>hours(3)*2 == hours(6);</screen></entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>
  </para>

  <anchor id="time_duration_struct_tm" />
  <bridgehead renderas="sect3">Struct tm, time_t, and FILETIME Functions</bridgehead>
  <para>Function for converting a time_duration to a <code>tm</code> struct is provided.<sbr/>
  系统提供了将 time_duration 转换为 <code>tm</code> 结构的函数。</para>
  <informaltable frame="all">
    <tgroup cols="2">
      <thead>
	<row>
	  <entry valign="top" morerows="1">Syntax 语法</entry>
	  <entry>Description 说明</entry>
	</row>
	<row>
	  <entry>Example 例子</entry>
	</row>
      </thead>
      <tbody>
        <row>
	  <entry valign="top" morerows="1"><screen>tm to_tm(time_duration)</screen></entry>
          <entry>A function for converting a <code>time_duration</code> object to a <code>tm</code> struct. The fields: <code>tm_year</code>, <code>tm_mon</code>, <code>tm_mday</code>, <code>tm_wday</code>, <code>tm_yday</code> are set to zero. The <code>tm_isdst</code> field is set to -1.<sbr/>
          将 <code>time_duration</code> 对象转换为 <code>tm</code> 结构的函数。字段 <code>tm_year</code>, <code>tm_mon</code>, 
          <code>tm_mday</code>, <code>tm_wday</code>, <code>tm_yday</code> 均设为零。字段 <code>tm_isdst</code> 设为 -1.</entry>
	</row>
	<row>
          <entry><screen>time_duration td(1,2,3);
tm td_tm = to_tm(td);
/* tm_year => 0
   tm_mon  => 0
   tm_mday => 0
   tm_wday => 0
   tm_yday => 0
   tm_hour => 1
   tm_min  => 2
   tm_sec  => 3
   tm_isddst => -1 */</screen>
	  </entry>
        </row>

      </tbody>
    </tgroup>
  </informaltable>
  
</section>
