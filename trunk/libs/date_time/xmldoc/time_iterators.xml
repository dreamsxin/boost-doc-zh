<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN" 
"../../../tools/boostbook/dtd/boostbook.dtd">

<!-- Copyright (c) 2001-2005 CrystalClear Software, Inc.
     Subject to the Boost Software License, Version 1.0. 
     (See accompanying file LICENSE_1_0.txt or  http://www.boost.org/LICENSE_1_0.txt)
-->

<section id="date_time.posix_time.time_iterators">
  <title>Time Iterators 时间迭代器</title>

  <link linkend="time_iter_intro">Introduction 简介</link> --
  <link linkend="time_iter_header">Header 头文件</link> --
  <link linkend="time_iter_overview">Overview 概要</link> --
  <link linkend="time_iter_operators">Operators 操作符</link>

  <anchor id="time_iter_intro" />
  <bridgehead renderas="sect3">Introduction 简介</bridgehead>
  <para>
    Time iterators provide a mechanism for iteration through times. Time iterators are similar to <ulink url="http://www.sgi.com/tech/stl/BidirectionalIterator.html">Bidirectional Iterators</ulink>. However, time_iterators are different than standard iterators in that there is no underlying sequence, just a calculation function. In addition, time_iterators are directly comparable against instances of <link linkend="date_time.posix_time.ptime_class">class ptime</link>. Thus a second iterator for the end point of the iteration is not required, but rather a point in time can be used directly. For example, the following code iterates using a 15 minute iteration interval. The <link linkend="date_time.examples.print_hours">print hours</link> example also illustrates the use of the time_iterator. <sbr/>
    时间迭代器提供了对时间进行迭代的一种机制。时间迭代器类似于 
    <ulink url="http://www.sgi.com/tech/stl/BidirectionalIterator.html">双向迭代器</ulink>。
    不过，time_iterators 与标准迭代器的区别在于，它不存在底层的序列，只有计算用的函数。
    此外，time_iterators 可以与 <link linkend="date_time.posix_time.ptime_class">类 ptime</link> 的实例直接比较。
    因此不需要一个表示迭代结束点的迭代器，可以直接使用时间点。例如，以下代码使用了一个每次15分钟的迭代器。
    例子 <link linkend="date_time.examples.print_hours">打印小时</link> 也示范了如何使用 time_iterator.
  </para>
  <para>
    <programlisting>
      <![CDATA[
	#include "boost/date_time/posix_time/posix_time.hpp"
	#include <iostream>


	int
	main()
	{
	  using namespace boost::gregorian;
	  using namespace boost::posix_time;
	  date d(2000,Jan,20);
	  ptime start(d);
	  ptime end = start + hours(1);
	  time_iterator titr(start,minutes(15)); //increment by 15 minutes 每次递增15分钟
	  //produces 00:00:00, 00:15:00, 00:30:00, 00:45:00
	  while (titr < end) {
	    std::cout << to_simple_string(*titr) << std::endl;
	    ++titr;
	  }
	  std::cout << "Now backward" << std::endl;
	  //produces 01:00:00, 00:45:00, 00:30:00, 00:15:00
	  while (titr > start) {
	    std::cout << to_simple_string(*titr) << std::endl;
	    --titr;
	  }
	}
      ]]>
    </programlisting>
  </para>

  <anchor id="time_iter_header" />
  <bridgehead renderas="sect3">Header 头文件</bridgehead>
  <para>
    <programlisting>#include "boost/date_time/posix_time/posix_time.hpp" //include all types plus i/o 包含所有类型和i/o
or
#include "boost/date_time/posix_time/posix_time_types.hpp" //no i/o just types 只有类型没有i/o</programlisting>
  </para>

  <anchor id="time_iter_overview" />
  <bridgehead renderas="sect3">Overview 概要</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry valign="top" morerows="1">Class 类</entry>
	    <entry>Description 说明</entry>
          </row>
          <row>
            <entry>Construction Parameters 构造参数</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
            <entry valign="top" morerows="1"><screen>time_iterator</screen></entry>
	    <entry>Iterate incrementing by the specified duration.<sbr/>
        以指定的递增长度迭代。</entry>
          </row>
          <row>
            <entry><screen>ptime start_time, time_duration increment</screen></entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>
  </para>


  <anchor id="time_iter_operators" />
  <bridgehead renderas="sect3">Operators 操作符</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry valign="top" morerows="1">Syntax 语法</entry>
	    <entry>Description 说明</entry>
	  </row>
	  <row>
	    <entry>Example 例子</entry>
	  </row>
	</thead>
	<tbody>
          <row>
	    <entry valign="top" morerows="1"><screen>operator==(const ptime&amp; rhs),
operator!=(const ptime&amp; rhs),
operator>, operator&lt;,
operator>=, operator&lt;=</screen>
	    </entry>
	    <entry>A full complement of comparison operators<sbr/>
        完整的比较操作符。</entry>
	  </row>
	  <row>
	    <entry><screen>date d(2002,Jan,1);
ptime start_time(d, hours(1));
//increment by 10 minutes 递增10分钟
time_iterator titr(start_time, minutes(10));
ptime end_time = start_time + hours(2);
if (titr == end_time) // false
if (titr != end_time) // true
if (titr >= end_time) // false
if (titr &lt;= end_time) // true</screen>
	    </entry>
          </row>

	  <row>
	    <entry valign="top" morerows="1"><screen>prefix increment</screen></entry>
	    <entry>Increment the iterator by the specified duration.<sbr/>
        以指定时间长度对迭代器进行递增。</entry>
	  </row>
	  <row>
	    <entry><screen>//increment by 10 milli seconds 递增10毫秒
time_iterator titr(start_time, milliseconds(10));
++titr; // == start_time + 10 milliseconds</screen>
	    </entry>
          </row>
          
	  <row>
	    <entry valign="top" morerows="1"><screen>prefix decrement</screen></entry>
	    <entry>Decrement the iterator by the specified time duration.<sbr/>
        以指定时间长度对迭代器进行递减。</entry>
	  </row>
          <row>
            <entry><screen>time_duration td(1,2,3);
time_iterator titr(start_time, td);
--titr; // == start_time - 01:02:03</screen></entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>
  </para>

</section>
