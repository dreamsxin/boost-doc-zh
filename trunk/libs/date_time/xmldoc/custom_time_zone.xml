<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
"../../../tools/boostbook/dtd/boostbook.dtd">

<!-- Copyright (c) 2001-2005 CrystalClear Software, Inc.
     Subject to the Boost Software License, Version 1.0.
     (See accompanying file LICENSE_1_0.txt or  http://www.boost.org/LICENSE_1_0.txt)
-->

<section id="date_time.local_time.custom_time_zone">
  <title>Custom Time Zone 定制时区</title>

  <link linkend="custom_time_zone_intro">Introduction 简介</link> --
  <link linkend="custom_time_zone_header">Header 头文件</link> --
  <link linkend="custom_time_zone_constr">Construction 构造</link> --
  <link linkend="custom_time_zone_accessors">Accessors 访问器</link> --
  <link linkend="custom_time_zone_dependents">Dependent Types 相关类型</link>

  <anchor id="custom_time_zone_intro" />
  <bridgehead renderas="sect3">Introduction 简介</bridgehead>
  <para>
    A custom_time_zone object is a set of data and rules that provide information about a time zone. Information such as the offset from UTC, it's name and abbreviation, as well as daylight savings rules, called <link linkend="date_time.local_time.dst_calc_rules">dst_calc_rules</link>. These rules are handled via a boost::shared_ptr&lt;dst_calc_rules&gt;. Not all time zones utilize daylight savings, therefore, time_zone objects can be used with a NULL-assigned shared_ptr.<sbr/>
    custom_time_zone 对象是一组数据和规则，提供了关于时区的相关信息。这些信息包括有：与UTC的偏移量，时区的名字和缩写，
    被称为 <link linkend="date_time.local_time.dst_calc_rules">dst_calc_rules</link> 的夏令时规则。
    这些规则通过一个 boost::shared_ptr&lt;dst_calc_rules&gt; 来处理。不是所有时区都使用夏令时，
    因此，time_zone 对象可以带一个空赋值的 shared_ptr.
  </para>
  <para>
    As a convenience, a typedef for shared_ptr&lt;dst_calc_rules&gt; is provided.<sbr/>
    为方便使用，提供了对 shared_ptr&lt;dst_calc_rules&gt; 的一个 typedef. 
    <programlisting>typedef boost::shared_ptr&lt;dst_calc_rules&gt; local_time::dst_calc_rule_ptr;</programlisting>
  </para>
  <anchor id="date_time.local_time.custom_time_zone_ptr" />
  <para>
    The time_zone objects are used via a boost::shared_ptr&lt;local_time::time_zone&gt;. As a convenience, a typedef for boost::shared_ptr&lt;local_time::time_zone&gt; is provided: <sbr/>
    time_zone 对象通过一个 boost::shared_ptr&lt;local_time::time_zone&gt; 来使用。为方便起见，
    提供了对 boost::shared_ptr&lt;local_time::time_zone&gt; 的 typedef: 
    <programlisting>typedef boost::shared_ptr&lt;time_zone&gt; local_time::time_zone_ptr;</programlisting>
  </para>

  <anchor id="custom_time_zone_header" />
  <bridgehead renderas="sect3">Header 头文件</bridgehead>
  <para>
    The inclusion of a single header will bring in all boost::local_time types, functions, and IO operators.<sbr/>
    包含单个头文件即可引入所有 boost::local_time 类型、函数和 IO 操作符。
    <programlisting>#include "boost/date_time/local_time/local_time.hpp"</programlisting>
  </para>

  <anchor id="custom_time_zone_constr" />
  <bridgehead renderas="sect3">Construction 构造</bridgehead>
  <para>
    Construction of a custom_time_zone is dependent on four objects: a 
    <link linkend="date_time.posix_time.time_duration">time_duration</link>, a <link linkend="time_zone_names">time_zone_names</link>, a <link linkend="dst_adjustment_offsets">dst_adjustment_offsets</link>, and a shared_ptr to a <link linkend="date_time.local_time.dst_calc_rules">dst_calc_rule</link>.<sbr/>
    custom_time_zone 的构造依赖于四个对象：一个 <link linkend="date_time.posix_time.time_duration">time_duration</link>, 
    一个 <link linkend="time_zone_names">time_zone_names</link>, 一个 <link linkend="dst_adjustment_offsets">dst_adjustment_offsets
    </link>, 和一个指向 <link linkend="date_time.local_time.dst_calc_rules">dst_calc_rule</link> 的 shared_ptr. 
  </para>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Syntax 语法</entry>
            <entry>Example 例子</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top"><screen>custom_time_zone(...)
  Parameters:
    <link linkend="time_zone_names">names</link>, 
    <link linkend="date_time.posix_time.time_duration">gmt_offset</link>, 
    <link linkend="dst_adjustment_offsets">dst_offsets</link>, 
    <link linkend="date_time.local_time.dst_calc_rules">dst_rules</link> </screen></entry>
            <entry>See <link linkend="date_time.examples.simple_time_zone">simple_time_zone</link> example for time_zone usage<sbr/>
            有关 time_zone 的用法请见 <link linkend="date_time.examples.simple_time_zone">简单的时区</link>。</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </para>

  <anchor id="custom_time_zone_accessors" />
  <bridgehead renderas="sect3">Accessors 访问器</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry valign="top" morerows="1">Syntax 语法</entry>
            <entry>Description 说明</entry>
          </row>
          <row>
            <entry>Example 例子</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top" morerows="1"><screen>std::string dst_zone_abbrev()</screen></entry>
            <entry>Returns the daylight savings abbreviation for the represented time zone.</entry>
          </row>
          <row>
            <entry><screen>nyc_zone_sh_ptr->dst_zone_abbrev();
// "EDT"</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>std::string std_zone_abbrev()</screen></entry>
            <entry>Returns the standard abbreviation for the represented time zone.</entry>
          </row>
          <row>
            <entry><screen>nyc_zone_sh_ptr->std_zone_abbrev();
// "EST"</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>std::string dst_zone_name()</screen></entry>
            <entry>Returns the daylight savings name for the represented time zone.</entry>
          </row>
          <row>
            <entry><screen>nyc_zone_sh_ptr->dst_zone_name(); 
// "Eastern Daylight Time"</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>std::string std_zone_name()</screen></entry>
            <entry>Returns the standard name for the represented time zone.</entry>
          </row>
          <row>
            <entry><screen>nyc_zone_sh_ptr->std_zone_name();
// "Eastern Standard Time"</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>bool has_dst()</screen></entry>
            <entry>Returns true when custom_time_zone's shared_ptr to dst_calc_rules is not NULL.</entry>
          </row>
          <row>
            <entry><screen>nyc_zone_sh_ptr->has_dst();
// true
phx_zone_sh_ptr->has_dst();
// false</screen>
            </entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>dst_local_start_time(...)
  Return Type:
    ptime
  Parameter:
    greg_year</screen></entry>
            <entry>The date and time daylight savings time begins in given year. Returns not_a_date_time if this zone has no daylight savings.</entry>
          </row>
          <row>
            <entry><screen>nyc_ptr->dst_local_start_time(2004);
// 2004-Apr-04 02:00</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>dst_local_end_time(...)
  Return Type:
    ptime
  Parameter:
    greg_year</screen></entry>
            <entry>The date and time daylight savings time ends in given year. Returns not_a_date_time if this zone has no daylight savings.</entry>
          </row>
          <row>
            <entry><screen>nyc_ptr->dst_local_end_time(2004);
// 2004-Oct-31 02:00</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>time_duration base_utc_offset()</screen></entry>
            <entry>The amount of time offset from UTC (typically in hours).</entry>
          </row>
          <row>
            <entry><screen>nyc_ptr->base_utc_offset();
// -05:00</screen></entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>time_duration dst_offset()</screen></entry>
            <entry>The amount of time shifted during daylight savings.</entry>
          </row>
          <row>
            <entry><screen>nyc_zone_sh_ptr->dst_offset();
// 01:00</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>std::string to_posix_string()</screen></entry>
            <entry>Returns a posix time zone string representation of this time_zone object. Depending on how the time_zone object was created, the date-spec format of the string will be in either 'M' notation or 'n' notation. Every possible date-spec that can be represented in 'J' notation can also be represented in 'n' notation. The reverse is not true so only 'n' notation is used for these types of date-specs. For a detailed description of a posix time zone string see <link linkend="date_time.local_time.posix_time_zone">posix_time_zone</link>.</entry>
          </row>
          <row>
            <entry><screen>nyc_ptr->to_posix_string();
// "EST-05EDT+01,M4.1.0/02:00,M10.5.0/02:00"
phx_ptr->to_posix_string();
// "MST-07"
            </screen></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </para>

  <anchor id="custom_time_zone_dependents" />
  <bridgehead renderas="sect3">Dependent Types 相关类型</bridgehead>
  <link linkend="time_zone_names">Time Zone Names 时区名</link> --
  <link linkend="dst_adjustment_offsets">Dst Adjustment Offsets  Dst调整量</link> --
  <link linkend="date_time.local_time.dst_calc_rules">Daylight Savings Calc Rules 夏令时计算规则</link>
  <anchor id="time_zone_names" />
  <bridgehead renderas="sect3">Time Zone Names 时区名</bridgehead>
  <para>
    The time_zone_names_base type is an immutable template class of four strings. One each for the name and abbreviation in standard time and daylight savings time. The time_zone_names type is a typedef of time_zone_names_base&lt;char&gt;.<sbr/>
    time_zone_names_base 类型是带四个字符串的不可变模板类。每个字符串分别为标准时和夏令时的全称和缩写。
    time_zone_names 类型是 time_zone_names_base&lt;char&gt; 的 typedef. 
  </para>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry valign="top" morerows="1">Syntax 语法</entry>
            <entry>Description 说明</entry>
          </row>
          <row>
            <entry>Example 例子</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top" morerows="1"><screen>time_zone_names(...)
  Parameters:
    string std_name
    string std_abbrev
    string dst_name
    string dst_abbrev</screen></entry>
            <entry>The only constructor, all four strings must be provided.<sbr/>
            唯一的构造函数，必须提供所有四个字符串。</entry>
          </row>
          <row>
            <entry><screen>string sn("Eastern Standard Time");
string sa("EST");
string dn("Eastern Daylight Time");
string da("EDT");
time_zone_names nyc_names(sn, sa, 
                          dn, da);</screen>
            </entry>
          </row>

          <row>
            <entry valign="top" morerows="1"><screen>std::string std_zone_name()</screen></entry>
            <entry>Returns the standard zone name<sbr/>
            返回标准的时区名。</entry>
          </row>
          <row>
            <entry><screen>nyc_names.std_zone_name();
// "Eastern Standard Time"</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>std::string std_zone_abbrev()</screen></entry>
            <entry>Returns the standard zone abbreviation<sbr/>
            返回标准的时区缩写。</entry>
          </row>
          <row>
            <entry><screen>nyc_names.std_zone_abbrev();
// "EST"</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>std::string dst_zone_name()</screen></entry>
            <entry>Returns the daylight savings zone name<sbr/>
            返回夏令时的时区名。</entry>
          </row>
          <row>
            <entry><screen>nyc_names.std_zone_name();
// "Eastern Daylight Time"</screen></entry>
          </row>
          
          <row>
            <entry valign="top" morerows="1"><screen>std::string dst_zone_abbrev()</screen></entry>
            <entry>Returns the daylight savings zone abbreviation<sbr/>
            返回夏令时的时区缩写。</entry>
          </row>
          <row>
            <entry><screen>nyc_names.std_zone_abbrev();
// "EDT"</screen></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </para>

  <anchor id="dst_adjustment_offsets" />
  <bridgehead renderas="sect3">Dst Adjustment Offsets  Dst调整量</bridgehead>
  <para>
    The dst_adjustment_offsets type is a collection of three <link linkend="date_time.posix_time.time_duration">time_duration</link> objects.<sbr/>
    dst_adjustment_offsets 类型是三个 <link linkend="date_time.posix_time.time_duration">时间长度</link> 对象的集合。
  </para>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry valign="top" morerows="1">Syntax 语法</entry>
            <entry>Description 说明</entry>
          </row>
          <row>
            <entry>Example 例子</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top" morerows="1"><screen>dst_adjustment_offsets(...)
  Parameters:
    time_duration dst_adjust
    time_duration start_offset
    time_duration end_offset</screen></entry>
            <entry>The first time_duration is the daylight savings adjustment. The second is the time which daylight savings starts on the start day. The third is the time daylight savings ends on the ending day.<sbr/>
            第一个 time_duration 是夏令时的调整量。第二个是在夏令时开始当天的夏令时开始时间。
            第三个为在夏令时结束当天的夏令时结束时间。</entry>
          </row>
          <row>
            <entry><screen>
dst_adjustment_offsets(hours(1), 
                       hours(2), 
                       hours(2));</screen></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </para>

  <anchor id="date_time.local_time.dst_calc_rules" />
  <bridgehead renderas="sect3">Daylight Savings Calc Rules 夏令时计算规则</bridgehead>
  <para>
    Daylight savings calc rules, named dst_calc_rules, are a series of objects that group appropriate <link linkend="date_time.gregorian.date_algorithms">date_generators</link> together to form rule sets. The individual rules objects are used via dst_calc_rule_ptr.<sbr/>
    夏令时计算规则，称为 dst_calc_rules, 是一系列对象，将多个合适的 <link linkend="date_time.gregorian.date_algorithms">
    日期生成器</link> 组合起来以形成规则集。单个规则对象通过 dst_calc_rule_ptr 使用。
  </para>
  <para>
    For a complete example of all five dst_calc_rule types, see: <link linkend="date_time.examples.calc_rules">calc_rules example</link>.<sbr/>
    有关所有五个 dst_calc_rule 类型的完整例子，请见：<link linkend="date_time.examples.calc_rules">计算规则举例</link>。 
  </para>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Syntax 语法</entry>
            <entry>Description 说明</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry valign="top"><screen>partial_date_dst_rule(...)
  Parameters:
    start_rule
    end_rule</screen></entry>
            <entry>Both the start and end rules are of type gregorian::partial_date.<sbr/>
            开始和结束规则均为类型 gregorian::partial_date.</entry>
          </row>
          <row>
            <entry valign="top"><screen>first_last_dst_rule(...)
  Parameters:
    start_rule
    end_rule</screen></entry>
            <entry>The DST start rule is of type gregorian::first_day_of_the_week_in_month and the end rule is of type gregorian::last_day_of_the_week_in_month.<sbr/>
            DST 开始规则为类型 gregorian::first_day_of_the_week_in_month 而结束规则为类型 
            gregorian::last_day_of_the_week_in_month.</entry>
          </row>
          <row>
            <entry valign="top"><screen>last_last_dst_rule(...)
  Parameters:
    start_rule
    end_rule</screen></entry>
            <entry>Both the start and end rules are of type gregorian::last_day_of_the_week_in_month.<sbr/>
            开始和结束规则均为类型 gregorian::last_day_of_the_week_in_month.</entry>
          </row>
          <row>
            <entry valign="top"><screen>nth_last_dst_rule(...)
  Parameters:
    start_rule
    end_rule</screen></entry>
            <entry>The DST start rule is of type gregorian::nth_day_of_the_week_in_month and the end rule is of type gregorian::last_day_of_the_week_in_month.<sbr/>
            DST 开始规则为类型 gregorian::nth_day_of_the_week_in_month 而结束规则为类型 
            gregorian::last_day_of_the_week_in_month.</entry>
          </row>
          <row>
            <entry valign="top"><screen>nth_kday_dst_rule(...)
  Parameters:
    start_rule
    end_rule)
(see note* below)</screen>
            </entry>
            <entry>Both rules are of type gregorian::nth_day_of_the_week_in_month.<sbr/>
            两个规则均为类型 gregorian::nth_day_of_the_week_in_month.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
      * Note: The name "nth_kday_dst_rule" is a bit cryptic. Therefore, a more descriptive name, "nth_day_of_the_week_in_month_dst_rule", is also provided.
    </para>
  </para>

</section>
