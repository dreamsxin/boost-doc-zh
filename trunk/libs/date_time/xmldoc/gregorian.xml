<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN" 
"../../../tools/boostbook/dtd/boostbook.dtd">

<!-- Copyright (c) 2001-2005 CrystalClear Software, Inc.
     Subject to the Boost Software License, Version 1.0. 
     (See accompanying file LICENSE_1_0.txt or  http://www.boost.org/LICENSE_1_0.txt)
-->

<section id="date_time.gregorian" 
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Gregorian 格里历</title>
  <bridgehead renderas="sect2">Gregorian Date System 格里历日期系统</bridgehead>
  <para>
    <link linkend="greg_intro">Introduction 简介</link> -- 
    <link linkend="greg_ex">Usage Examples 用例</link>
  </para>

  <anchor id="greg_intro" />
  <bridgehead renderas="sect3">Introduction 简介</bridgehead>
  <para>The gregorian date system provides a date programming system based the Gregorian Calendar. The first introduction of the Gregorian calendar was in 1582 to fix an error in the Julian Calendar. However, many local jurisdictions did not adopt this change until much later. Thus there is potential confusion with historical dates. <sbr/>
  格里历日期系统提供了基于格里历的日期编程系统。格里历的第一次引入是在1582年，它修正了罗马儒略历的一个错误。
  不过，许多地区直到很后才采用这种修正。所以在历史日期上可能存在一些混乱。
  </para>
  <para>The implemented calendar is a "proleptic Gregorian calendar" which extends dates back prior to the Gregorian Calendar's first adoption in 1582. The current implementation supports dates in the range 1400-Jan-01 to 9999-Dec-31. Many references will represent dates prior to 1582 using the Julian Calendar, so caution is in order if accurate calculations are required on historic dates. See <ulink url="http://emr.cs.iit.edu/home/reingold/calendar-book/second-edition">Calendrical Calculations</ulink> by Reingold &amp; Dershowitz for more details. Date information from Calendrical Calculations has been used to cross-test the correctness of the Gregorian calendar implementation. <sbr/>
  我们实现的日历是一种"预想的格里历"，即将格里历推广至1582年首次采用格里历之前的时间。
  当前的实现支持从 1400-Jan-01 到 9999-Dec-31 的日期。有很多被引用的1582年以前的日期是采用罗马儒略历的，
  所以如果要求对历史日期进行准确的计算，就必须要小心。更多细节请参见 Reingold &amp; Dershowitz 所写的 
  <ulink url="http://emr.cs.iit.edu/home/reingold/calendar-book/second-edition">日历计算</ulink> 一书。
  这本书中的日期信息常被用于对格里历实现的正确性进行交叉测试。
  </para>
  <para>All types for the gregorian system are found in namespace boost::gregorian. The library supports a convenience header boost/date_time/gregorian/gregorian_types.hpp that will include all the classes of the library with no input/output dependency. Another header boost/date_time/gregorian/gregorian.hpp will include the types and the input/output code. <sbr/>
  格里历系统的所有类型位于名字空间 boost::gregorian. 本库提供一个方便的头文件 boost/date_time/gregorian/gregorian_types.hpp，
  它包含了本库所有类，但不带输入/输出。另一个头文件 boost/date_time/gregorian/gregorian.hpp 则包含所有类型以及输入/输出代码。
  </para>
  <para>The class <link linkend="date_time.gregorian.date_class">boost::gregorian::date</link> is the primary temporal type for users. If you are interested in learning about writing programs that do specialized date calculations such as finding the "first sunday in april" see the date <link linkend="date_time.gregorian.date_algorithms">generators and algorithms page</link>. <sbr/>
  类 <link linkend="date_time.gregorian.date_class">boost::gregorian::date</link> 是用户使用的主要时间类型。
  如果你想学习编写一个进行特定日期计算的程序，如查找"四月第一个星期天"，请参见 
  <link linkend="date_time.gregorian.date_algorithms">日期生成器与算法</link>。
  </para>

  <anchor id="greg_ex" />
  <bridgehead renderas="sect3">Usage Examples 用例</bridgehead>
  <para>
    <informaltable frame="all">
      <tgroup cols="2">
	<thead>
	  <row>
	    <entry>Example 例子</entry>
	    <entry>Description 说明</entry>
	  </row>
	</thead>
	<tbody>
          <row>
            <entry valign="top"><literallayout>
<link linkend="date_time.examples.days_alive">Days Alive 已生活的日子</link> &nbsp; 
<link linkend="date_time.examples.days_between_new_year">Days Between New Years 距离新年的日子</link></literallayout></entry>
	    <entry>Simple date arithmetic. Retrieve current day from clock.<sbr/>
        简单的日期算术。从时钟取出当天日期。</entry>
	  </row>
	  <row>
	    <entry valign="top"><literallayout><link linkend="date_time.examples.dates_as_strings">Dates as strings<sbr/>
        字符串表示的日期</link></literallayout></entry>
	    <entry>Simple parsing and formatting of dates from/to strings<sbr/>
        对日期字符串进行简单分析，以及将日期格式化为字符串</entry>
	  </row>
	  <row>
	    <entry valign="top"><literallayout><link linkend="date_time.examples.date_period_calc">Date Period Calculations<sbr/>
        日期段计算</link></literallayout></entry>
	    <entry>See if a date is in a set of date periods (eg: is it a holiday/weekend)<sbr/>
        检查某个日期是否在一组日期段中(如：某天是否假日/周末)</entry>
	  </row>
	  <row>
	    <entry valign="top"><literallayout><link linkend="date_time.examples.print_month">Print a month<sbr/>
        打印月份</link></literallayout></entry>
	    <entry>Small utility program which prints out all the days in a month from command line. Need to know if 1999-Jan-1 was a Friday or a Saturday? This program shows how to do it.<sbr/>
        一个小工具程序，从命令行打印出某月的所有天。想知道 1999-Jan-1 是星期五还是星期六？这个程序可以示范怎么做。</entry>
	  </row>
          <row>
	    <entry valign="top"><literallayout><link linkend="date_time.examples.print_holidays">Print Holidays<sbr/>
        打印假日</link></literallayout></entry>
	    <entry>Uses date generators to convert abstract specification into concrete set of dates.<sbr/>
        使用日期生成器将抽象描述转换为具体的日期集。</entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>
  </para>

  <xi:include href="date_class.xml" /> 
  <xi:include href="date_duration.xml" />
  <xi:include href="date_period.xml" />
  <xi:include href="date_iterators.xml" />
  <xi:include href="date_algorithms.xml" />
  <xi:include href="gregorian_calendar.xml" />
  
</section>
