<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN" 
"../../../tools/boostbook/dtd/boostbook.dtd">

<!-- Copyright (c) 2001-2004 CrystalClear Software, Inc.
     Subject to the Boost Software License, Version 1.0. 
     (See accompanying file LICENSE_1_0.txt or  http://www.boost.org/LICENSE_1_0.txt)
-->

<section id="date_time.examples.date_period_calc">
  <title>Date Period Calculations 日期段计算</title>

  <para>  
    Calculates if a date is in an 'irregular' collection of periods using period calculation functions.<sbr/>
    用时间段计算函数计算某个日期是否位于一个‘无规则’的时间段集合中。
  </para>
  <programlisting>
    <![CDATA[
  /*
  This example demonstrates a simple use of periods for the calculation
  of date information.
  本例示范了使用时间段来计算日期信息。

  The example calculates if a given date is a weekend or holiday
  given an exclusion set.  That is, each weekend or holiday is
  entered into the set as a time interval.  Then if a given date
  is contained within any of the intervals it is considered to
  be within the exclusion set and hence is a offtime.
  本例计算一个给定的日期是否在一个给定的周末或假日集合中。即，
  每个周末或假日  作为一个时间间隔放入一个集合中。如果给定的日期
  被某一个间隔所包含则认为它是在这个排除集合之中，是一个休息日。  

  Output:
  输出：
  Number Excluded Periods: 5
  20020202/20020203
  20020209/20020210
  20020212/20020212
  20020216/20020217
  In Exclusion Period: 20020216 --> 20020216/20020217
  20020223/20020224

  */


  #include "boost/date_time/gregorian/gregorian.hpp"
  #include <set>
  #include <algorithm>
  #include <iostream>

  typedef std::set<boost::gregorian::date_period> date_period_set;

  //Simple population of the exclusion set
  //生成排除集合
  date_period_set
  generateExclusion()
  {
    using namespace boost::gregorian;
    date_period periods_array[] = 
      { date_period(date(2002,Feb,2), date(2002,Feb,4)),//weekend of 2nd-3rd
        date_period(date(2002,Feb,9), date(2002,Feb,11)),
        date_period(date(2002,Feb,16), date(2002,Feb,18)),
        date_period(date(2002,Feb,23), date(2002,Feb,25)),
        date_period(date(2002,Feb,12), date(2002,Feb,13))//a random holiday 2-12
      };
    const int num_periods = sizeof(periods_array)/sizeof(date_period);

    date_period_set ps;
    //insert the periods in the set
    //将时间段插入到集合中
    std::insert_iterator<date_period_set> itr(ps, ps.begin());
    std::copy(periods_array, periods_array+num_periods, itr );
    return ps;
    
  }


  int main() 
  {
    using namespace boost::gregorian;
    
    date_period_set ps = generateExclusion();
    std::cout << "Number Excluded Periods: "  << ps.size() << std::endl;

    date d(2002,Feb,16);
    date_period_set::const_iterator i = ps.begin();
    //print the periods, check for containment
    //打印时间段，并检查包含性
    for (;i != ps.end(); i++) {
      std::cout << to_iso_string(*i) << std::endl;
      //if date is in exclusion period then print it
      //如果 date 位于于排除时间段中则打印它
      if (i->contains(d)) {
        std::cout << "In Exclusion Period: "
            << to_iso_string(d) << " --> " << to_iso_string(*i)
            << std::endl;
      }
    }

    return 0;  

  }

    ]]>
  </programlisting>
</section>
