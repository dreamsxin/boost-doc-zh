<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN" 
"../../../tools/boostbook/dtd/boostbook.dtd">

<!-- Copyright (c) 2005 CrystalClear Software, Inc.
     Subject to the Boost Software License, Version 1.0. 
     (See accompanying file LICENSE_1_0.txt or  http://www.boost.org/LICENSE_1_0.txt)
-->

<section id="date_time.io_tutorial" 
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Date Time IO Tutorial 日期时间 IO 指南</title>
  <bridgehead renderas="sect2">Date Time IO Tutorial 日期时间 IO 指南</bridgehead>

  <link linkend="basic_use">Basic Use 基本用法</link> |
  <link linkend="format_strings">Format Strings 格式化串</link> |
  <link linkend="content_strings">Content Strings 内容字符串</link> |
  <link linkend="tut_sv">Special Values 特殊值</link> |
  <link linkend="tut_dper">Date/Time Periods 日期/时间段</link> |
  <link linkend="tut_dgen">Date Generators 日期生成器 </link>
  
  <anchor id="basic_use" />
  <bridgehead renderas="sect4">Basic Use 基本用法</bridgehead>
  <para>Facets are automatically imbued when operators '>>' and '&lt;&lt;' are called. The list of date_time objects that can be streamed are:<sbr/>
  在调用 '>>' 和 '&lt;&lt;' 时，会自动使用 Facets. 可以进行流输入输出的 date_time 对象列举如下：</para>
  <bridgehead renderas="sect5">Gregorian 格里历</bridgehead>
  <para>
    <code>date</code>, 
    <code>days</code>, 
    <code>date_period</code>, 
    <code>greg_month</code>, 
    <code>greg_weekday</code>, 
    <code>greg_year</code>, 
    <code>partial_date</code>, 
    <code>nth_day_of_the_week_in_month</code>, 
    <code>first_day_of_the_week_in_month</code>, 
    <code>last_day_of_the_week_in_month</code>, 
    <code>first_day_of_the_week_after</code>, 
    <code>first_day_of_the_week_before</code>
  </para>
  <bridgehead renderas="sect5">Posix_time</bridgehead>
  <para>
    <code>ptime</code>, 
    <code>time_period</code>, 
    <code>time_duration</code>
  </para>
  <bridgehead renderas="sect5">Local_time 本地时间</bridgehead>
  <para>
    <code>local_date_time</code>
  </para>
  
  <para>
    The following example is of the basic use of the new IO code, utilizing all the defaults. (this example can be found in the <code>libs/date_time/examples/tutorial</code> directory)<sbr/>
    以下是使用新的 IO 代码的简单例子，全部使用缺省值。(这个例子可以在 <code>libs/date_time/examples/tutorial</code> 目录下找到) 
  </para>
  <programlisting>
    <![CDATA[
  date d(2004, Feb, 29);
  time_duration td(12,34,56,789);
  stringstream ss;
  ss << d << ' ' << td;
  ptime pt(not_a_date_time);
  cout << pt << endl; // "not-a-date-time"
  ss >> pt;
  cout << pt << endl; // "2004-Feb-29 12:34:56.000789"
  ss.str("");
  ss << pt << " EDT-05EDT,M4.1.0,M10.5.0";
  local_date_time ldt(not_a_date_time);
  ss >> ldt;
  cout << ldt << endl; // "2004-Feb-29 12:34:56.000789 EDT"
    ]]>
  </programlisting>

  <para>This example used the default settings for the input and output facets. The default formats are such that interoperability like that shown in the example is possible. NOTE: Input streaming of local_date_time can only be done with a <link linkend="date_time.local_time.posix_time_zone">posix time zone string</link>. The default output format uses a time zone abbreviation. The format can be changed so out and in match (as we will see later in this tutorial).<sbr/>
  这个例子使用了输入和输出 facets 的缺省值。缺省的格式正如上例所示。注意：local_date_time 的流输入只能用一个 
  <link linkend="date_time.local_time.posix_time_zone">posix 时区字符串</link> 来完成。
  缺省的输出格式将使用时区缩写。这个格式可以被改变，以使得输入和输出相匹配(在本指南稍后将会看到)。</para>

  <anchor id="format_strings" />
  <bridgehead renderas="sect4">Format Strings 格式化串</bridgehead>
  <para>The format strings control the order, type, and style of the date/time elements used. The facets provide some predefined formats (iso_format_specifier, iso_format_extended_specifier, and default_date_format) but the user can easily create their own.<sbr/>
  格式化串控制着所用的日期/时间元素的顺序、类型和风格。facets 提供了一些预定义的格式(iso_format_specifier, 
  iso_format_extended_specifier, 和 default_date_format)，不过用户也可以很容易地创建自己的格式。</para>
  (continued from previous example 继续前一个例子)
  <programlisting>
    <![CDATA[
  local_time_facet* output_facet = new local_time_facet();
  local_time_input_facet* input_facet = new local_time_input_facet();
  ss.imbue(locale(locale::classic(), output_facet));
  ss.imbue(locale(ss.getloc(), input_facet));
  
  output_facet->format("%a %b %d, %H:%M %z");
  ss.str("");
  ss << ldt;
  cout << ss.str() << endl; // "Sun Feb 29, 12:34 EDT"

  output_facet->format(local_time_facet::iso_time_format_specifier);
  ss.str("");
  ss << ldt;
  cout << ss.str() << endl; // "20040229T123456.000789-0500"
 
  output_facet->format(local_time_facet::iso_time_format_extended_specifier);
  ss.str("");
  ss << ldt;
  cout << ss.str() << endl; // "2004-02-29 12:34:56.000789-05:00"
    ]]>
  </programlisting>

  <para>Format strings are not limited to date/time elements. Extra verbiage can be placed in a format string. NOTE: When extra verbiage is present in an input format, the data being input must also contain the exact verbiage.<sbr/>
  格式化串前不仅限于日期/时间元素。可以往格式化串中放入其它内容。注意：如果在输入格式化串中存在其它内容，
  那么输入的数据中也必须包含这些内容。</para>
  (continued from previous example 继续前一个例子)
  <programlisting>
    <![CDATA[
  // extra words in format 格式中的额外单词
  string my_format("The extended ordinal time %Y-%jT%H:%M can also be \
  represented as %A %B %d, %Y");
  output_facet->format(my_format.c_str());
  input_facet->format(my_format.c_str());
  ss.str("");
  ss << ldt;
  cout << ss.str() << endl;

  // matching extra words in input 在输入中必须要有相匹配的单词
  ss.str("The extended ordinal time 2005-128T12:15 can also be \
  represented as Sunday May 08, 2005");
  ss >> ldt;
  cout << ldt << endl;
    ]]>
  </programlisting>

  <anchor id="content_strings" />
  <bridgehead renderas="sect4">Content Strings 内容字符串</bridgehead>
  <para>So far we've shown how a user can achieve a great deal of customization with very little effort by using formats. Further customization can be achieved through user defined elements (ie strings). The elements that can be customized are: Special value names, month names, month abbreviations, weekday names, weekday abbreviations, delimiters of the date/time periods, and the phrase elements of the date_generators.<sbr/>
  前面我们示范了如何通过格式化以极少量的工作量来达到大量的定制化。更进一步的定制化可以通过用户自定义元素(即字符串)来完成。
  可以被定制的元素包括：特殊值的名字、月份名、月份缩写、周日名、周日缩写、日期/时间段的定界符，
  以及 date_generators 的短语元素。</para>
  <para>The default values for these are as follows:<sbr/>
  以上元素的缺省值如下：</para>
  <bridgehead renderas="sect5">Special values 特殊值</bridgehead>
  <para>
    <code>not-a-date-time</code>, 
    <code>-infinity</code>, 
    <code>+infinity</code>, 
    <code>minimum-date-time</code>, 
    <code>maximum-date-time</code>
  </para>
  <bridgehead renderas="sect5">Months 月份</bridgehead>
  <para>
    <code>English calendar and three letter abbreviations<sbr/>
    英语名字及三字母的缩写</code>
  </para>
  <bridgehead renderas="sect5">Weekdays 周日</bridgehead>
  <para>
    <code>English calendar and three letter abbreviations<sbr/>
    英语名字及三字母缩写</code>
  </para>
  <bridgehead renderas="sect5">Date generator phrase elements 日期生成器的短语元素</bridgehead>
  <para>
    <code>first</code>, 
    <code>second</code>, 
    <code>third</code>, 
    <code>fourth</code>, 
    <code>fifth</code>, 
    <code>last</code>, 
    <code>before</code>, 
    <code>after</code>, 
    <code>of</code>
  </para>
  <para>NOTE: We've shown earlier that the components of a date/time representation can be re-ordered via the format string. This is not the case with date_generators. The elements themselves can be customized but their order cannot be changed.<sbr/>
  注意：我们在前面曾经示范过日期/时间表示中的组件可以通过格式化串来重新排序。
  但是对于 date_generators 来说则不可以。其中的元素可以定制但顺序不可改变。</para>

  <bridgehead renderas="sect4">Content Strings 内容字符串</bridgehead>
  <para>To illustrate the customization possibilities we will use custom strings for months and weekdays (we will only use long names, is all lowercase, for this example).<sbr/>
  为了示范定制化的可能性，我们将为月份和周日使用定制的字符串(我们在这个例子中只使用长名字，且全为小写)。</para>
  (continued from previous example 继续前一个例子)
  <programlisting>
    <![CDATA[
  // set up the collections of custom strings. 设置定制字符串的 collections.
  // only the full names are altered for the sake of brevity 为简短起见，只修改全名
  string month_names[12] = { "january", "february", "march", 
                             "april", "may", "june", 
                             "july", "august", "september", 
                             "october", "november", "december" };
  vector<string> long_months(&month_names[0], &month_names[12]);
  string day_names[7] = { "sunday", "monday", "tuesday", "wednesday", 
                          "thursday", "friday", "saturday" };
  vector<string> long_days(&day_names[0], &day_names[7]);
  
  //  create date_facet and date_input_facet using all defaults 使用缺省值创建 date_facet 和 date_input_facet
  date_facet* date_output = new date_facet();
  date_input_facet* date_input = new date_input_facet();
  ss.imbue(locale(ss.getloc(), date_output)); 
  ss.imbue(locale(ss.getloc(), date_input));

  // replace names in the output facet 替换输出 facet 中的名字
  date_output->long_month_names(long_months);
  date_output->long_weekday_names(long_days);
  
  // replace names in the input facet 替换输入 facet 中的名字
  date_input->long_month_names(long_months);
  date_input->long_weekday_names(long_days);
  
  // customize month, weekday and date formats 定制月份、周日和日期的格式
  date_output->format("%Y-%B-%d");
  date_input->format("%Y-%B-%d");
  date_output->month_format("%B"); // full name
  date_input->month_format("%B"); // full name
  date_output->weekday_format("%A"); // full name
  date_input->weekday_format("%A"); // full name

  ss.str("");
  ss << greg_month(3);
  cout << ss.str() << endl; // "march"
  ss.str("");
  ss << greg_weekday(3);
  cout << ss.str() << endl; // "tuesday"
  ss.str("");
  ss << date(2005,Jul,4);
  cout << ss.str() << endl; // "2005-july-04"
    ]]>
  </programlisting>


  <anchor id="tut_sv" />
  <bridgehead renderas="sect4">Special Values 特殊值</bridgehead>
  <para>Customizing the input and output of special values is best done by creating a new special_values_parser and special_values_formatter. The new strings can be set at construction time (as in the example below).<sbr/>
  定制输入和输出用的特殊值，最好的方法是创建一个新的 special_values_parser 和 special_values_formatter. 
  新的字符串在构造的时候进行设置(如下例所示)。</para>
  (continued from previous example 继续前一个例子)
  <programlisting>
    <![CDATA[
  // reset the formats to defaults 将格式重置为缺省
  output_facet->format(local_time_facet::default_time_format);
  input_facet->format(local_time_input_facet::default_time_input_format);

  // create custom special_values parser and formatter objects 创建定制的 special_values 分析器和格式化器对象
  // and add them to the facets 并将它们加入到 facets
  string sv[5] = {"nadt","neg_inf", "pos_inf", "min_dt", "max_dt" };
  vector<string> sv_names(&sv[0], &sv[5]);
  special_values_parser sv_parser(sv_names.begin(), sv_names.end());
  special_values_formatter sv_formatter(sv_names.begin(), sv_names.end());
  output_facet->special_values_formatter(sv_formatter);
  input_facet->special_values_parser(sv_parser);

  ss.str("");
  ldt = local_date_time(not_a_date_time);
  ss << ldt;
  cout << ss.str() << endl; // "nadt"
  
  ss.str("min_dt");
  ss >> ldt;
  ss.str("");
  ss << ldt;
  cout << ss.str() << endl; // "1400-Jan-01 00:00:00 UTC"
    ]]>
  </programlisting>
  <para>NOTE: even though we sent in strings for min and max to the formatter, they are ignored because those special values construct to actual dates (as shown above).<sbr/>
  注意：虽然我们将 min 和 max 的字符串也传递给了格式化器，但是它们会被忽略，
  因为这两个特殊值是以真实的日期来构造的(如上所示)。</para>


  <anchor id="tut_dper" />
  <bridgehead renderas="sect4">Date/Time Periods 日期/时间段</bridgehead>
  <para>Customizing the input and output of periods is best done by creating a new period_parser and period_formatter. The new strings can be set at construction time (as in the example below).<sbr/>
  定制时间段的输入输出，最好的方法是创建一个新的 period_parser 和 period_formatter. 
  新的字符串在构造的时候进行设置(如下例所示)。</para>
  (continued from previous example 继续前一个例子)
  <programlisting>
    <![CDATA[
  // all formats set back to defaults (not shown for brevity) 将所有格式设置回缺省值(为简短起见，不再列出)

  // create our date_period 创建我们的 date_period
  date_period dp(date(2005,Mar,1), days(31)); // month of march 整个三月份

  // custom period formatter and parser 定制时间段格式化器和分析器
  period_formatter per_formatter(period_formatter::AS_OPEN_RANGE, 
                                 " to ", "from ", " exclusive", " inclusive" );
  period_parser per_parser(period_parser::AS_OPEN_RANGE, 
                           " to ", "from ", " exclusive" , "inclusive" );
  
  // default output 缺省输出 
  ss.str("");
  ss << dp;
  cout << ss.str() << endl; // "[2005-Mar-01/2005-Mar-31]"
 
  // add out custom parser and formatter to  the facets 将我们的定制分析器和格式化器加入到 facets
  date_output->period_formatter(per_formatter);
  date_input->period_parser(per_parser);
  
  // custom output 定制化输出
  ss.str("");
  ss << dp;
  cout << ss.str() << endl; // "from 2005-Feb-01 to 2005-Apr-01 exclusive"
    ]]>
  </programlisting>

  <anchor id="tut_dgen" />
  <bridgehead renderas="sect4">Date Generators 日期生成器</bridgehead>
  <para>Customizing the input and output of date_generators is done by replacing the existing strings (in the facet) with new strings.<sbr/>
  定制 date_generators 的输入输出可以通过将(在 facet 中的)已有字符串替换为新字符串来完成。</para>
  <para>NOTE: We've shown earlier that the components of a date/time representation can be re-ordered via the format string. This is not the case with date_generators. The elements themselves can be customized but their order cannot be changed.<sbr/>
  注意：前面我们曾经示范过日期/时间表示中的组件可以通过格式化串变更顺序。但是对于 date_generators 则不可以。
  其中的元素可以定制，但顺序不可改变。</para>
  (continued from previous example 继续前一个例子)
  <programlisting>
    <![CDATA[
  // custom date_generator phrases 定制 date_generator 短语
  string dg_phrases[9] = { "1st", "2nd", "3rd", "4th", "5th", 
                           "final", "prior to", "following", "in" };
  vector<string> phrases(&dg_phrases[0], &dg_phrases[9]);

  // create our date_generator 创建我们的 date_generator
  first_day_of_the_week_before d_gen(Monday);

  // default output 缺省输出
  ss.str("");
  ss << d_gen;
  cout << ss.str() << endl; // "Mon before"
 
  // add our custom strings to the date facets 将我们的定制字符串加入到日期 facets
  date_output->date_gen_phrase_strings(phrases);
  date_input->date_gen_element_strings(phrases);
  
  // custom output 定制化的输出
  ss.str("");
  ss << d_gen;
  cout << ss.str() << endl; // "Mon prior to"
    ]]>
  </programlisting>

</section>
