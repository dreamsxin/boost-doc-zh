<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN" 
"../../../tools/boostbook/dtd/boostbook.dtd">

<!-- Copyright (c) 2001-2005 CrystalClear Software, Inc.
     Subject to the Boost Software License, Version 1.0. 
     (See accompanying file LICENSE_1_0.txt or  http://www.boost.org/LICENSE_1_0.txt)
-->

<section id="date_time.gregorian.date_iterators">
  <title>Date Iterators 日期迭代器</title>

  <link linkend="iterators_intro">Introduction 简介</link> --
  <link linkend="iterators_header">Header 头文件</link> --
  <link linkend="iterators_overview">Overview 概要</link>

  <anchor id="iterators_intro" />
  <bridgehead renderas="sect3">Introduction 简介</bridgehead>
  <para>
    Date iterators provide a standard mechanism for iteration through dates. Date iterators are a model of <ulink url="http://www.sgi.com/tech/stl/BidirectionalIterator.html">Bidirectional Iterator</ulink> and can be used to populate collections with dates and other date generation tasks. For example, the <link linkend="date_time.examples.print_month">print month</link> example iterates through all the days in a month and prints them.  <sbr/>
    日期迭代器为对日期进行迭代提供了一个标准机制。日期迭代器是一种 
    <ulink url="http://www.sgi.com/tech/stl/BidirectionalIterator.html">双向迭代器</ulink> 
    并可用于大多日期集合以及其它日期生成任务。例如，<link linkend="date_time.examples.print_month">打印月份</link> 
    的例子对一个月中的所有日子进行迭代并打印出它们。
  </para>
  <para>
    All of the iterators here derive from boost::gregorian::date_iterator. <sbr/>
    这里的所有迭代器均派生自 boost::gregorian::date_iterator.
  </para>

  <anchor id="iterators_header" />
  <bridgehead renderas="sect3">Header 头文件</bridgehead>
  <para>
    <programlisting>#include "boost/date_time/gregorian/gregorian.hpp" //include all types plus i/o 包含所有类型和i/o
or
#include "boost/date_time/gregorian/gregorian_types.hpp" //no i/o just types 只有类型没有i/o</programlisting>
  </para>

  <anchor id="iterators_overview" />
  <bridgehead renderas="sect3">Overview 概要</bridgehead>
  <informaltable frame="all">
    <tgroup cols="2">
      <thead>
	<row>
	  <entry valign="top" morerows="1">Syntax 语法</entry>
	  <entry>Description 说明</entry>
	</row>
	<row>
	  <entry>Example 例子</entry>
	</row>
      </thead>
      <tbody>
        <row>
	  <entry valign="top" morerows="1"><screen>date_iterator</screen></entry>
	  <entry>Common (abstract) base class for all day level iterators.<sbr/>
      所有日期级迭代器的公共(抽象)基类。</entry>
	</row>
	<row>
	  <entry><screen></screen></entry>
        </row>

	<row>
	  <entry valign="top" morerows="1"><screen>day_iterator(date start_date, int day_count=1)</screen></entry>
          <entry>Iterate <code>day_count</code> days at a time. This iterator does not provide postfix increment/decrement operators. Only prefix operators are provided.<sbr/>
          每次迭代 <code>day_count</code> 个日子。该迭代器不提供后缀式的递增/递减操作符。只提供前缀式的递增/递减操作符。</entry>
	</row>
	<row>
          <entry><screen>day_iterator day_itr(date(2005,Jan,1));
++d_itr; // 2005-Jan-02
day_iterator 2day_itr(date(2005,Feb,1),2);
++2d_itr; // 2005-Feb-03</screen></entry>
        </row>
        
	<row>
          <entry valign="top" morerows="1"><screen>week_iterator(...)
  Parameters:
    date start_date
    int week_offset (defaults to 1)</screen></entry>
          <entry>Iterate <code>week_offset</code> weeks at a time. This iterator does not provide postfix increment/decrement operators. Only prefix operators are provided.<sbr/>
          每次迭代 <code>week_offset</code> 个星期。该迭代器不提供后缀式的递增/递减操作符。只提供前缀式的递增/递减操作符。</entry>
	</row>
	<row>
          <entry><screen>week_iterator wk_itr(date(2005,Jan,1));
++wk_itr; // 2005-Jan-08
week_iterator 2wk_itr(date(2005,Jan,1),2);
++2wk_itr; // 2005-Feb-15</screen></entry>
        </row>
        
	<row>
          <entry valign="top" morerows="1"><screen>month_iterator(...)
  Parameters:
    date start_date
    int month_offset (defaults to 1)</screen></entry>
<entry>Iterate <code>month_offset</code> months. There are special rules for handling the end of the month. These are: if start date is last day of the month, always adjust to last day of the month. If date is beyond the end of the month (e.g. Jan 31 + 1 month) adjust back to end of month (for more details and examples of this, see <link linkend="snap_to_details">Reversibility of Operations Pitfall</link>. <emphasis role="strong">NOTE:</emphasis> the <code>month_iterator</code> is not effected by this pitfall.) This iterator does not provide postfix increment/decrement operators. Only prefix operators are provided.<sbr/>
迭代 <code>month_offset</code> 个月份。在处理月末时有特殊规则。即：如果开始的日期是某月的最后一天，
则总是将结果调整为月末。如果结果日期超出月末(如 Jan 31 + 1 month)则往回调整至月末(有关细节和例子，
请参见 <link linkend="snap_to_details">操作可逆性的缺陷</link>。<emphasis role="strong">注：</emphasis>
<code>month_iterator</code> 不会产生这一缺陷)。该迭代器不提供后缀式的递增/递减操作符。
只提供前缀式的递增/递减操作符。</entry>
	</row>
	<row>
          <entry><screen>month_iterator m_itr(date(2005,Jan,1));
++m_itr; // 2005-Feb-01
month_iterator 2m_itr(date(2005,Feb,1),2);
++2m_itr; // 2005-Apr-01</screen></entry>
        </row>
        
        <row>
          <entry valign="top" morerows="1"><screen>year_iterator(...)
  Parameters:
    date start_date
    int year_offset (defaults to 1)</screen></entry>
	  <entry>Iterate year_offset years. The year_iterator will always land on the day of the date parameter except when date is Feb 28 in a non-leap year. In this case the iterator will return Feb 29 for leap years (eg: 2003-Feb-28, 2004-Feb-29, 2005-Feb-28). This iterator does not provide postfix increment/decrement operators. Only prefix operators are provided.<sbr/>
      迭代 year_offset 个年份。year_iterator 总是得到同一天的结果，除了当日期为非闰年的 Feb 28 时。
      在这种情况下，迭代器将在结果为闰年时返回 Feb 29 (如：2003-Feb-28, 2004-Feb-29, 2005-Feb-28)。
      该迭代器不提供后缀式的递增/递减操作符。只提供前缀式的递增/递减操作符。</entry>
	</row>
	<row>
          <entry><screen>year_iterator y_itr(date(2005,Jan,1));
++y_itr; // 2006-Jan-01
year_iterator 2y_itr(date(2005,Feb,1),2);
++2y_itr; // 2007-Feb-01</screen></entry>
	</row>
      </tbody>
    </tgroup>
  </informaltable>


</section>
