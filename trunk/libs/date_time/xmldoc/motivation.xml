<?xml version="1.0" encoding="utf-8"?>

<!-- Copyright (c) 2001-2006 CrystalClear Software, Inc.
     Subject to the Boost Software License, Version 1.0. 
     (See accompanying file LICENSE_1_0.txt or  http://www.boost.org/LICENSE_1_0.txt)
-->

<section id="Motivation">
  <title>Motivation 动机</title>

  <para>
    The motivation for this library comes from working with and helping build several date-time libraries on several projects. Date-time libraries provide fundamental infrastructure for most development projects. However, most of them have limitations in their ability to calculate, format, convert, or perform some other functionality. For example, most libraries do not correctly handle leap seconds, provide concepts such as infinity, or provide the ability to use high resolution or network time sources.  These libraries also tend to be rigid in their representation of dates and times. Thus customized policies for a project or subproject are not possible.<sbr/>
    本库的动机来自于在多个项目中对多个日期时间库的使用和建立。这些日期时间库为大多数开发项目提供了基础的架构。
    不过，这些库中多数在它们的计算、格式化、转换或执行其它功能的能力上有所限制。例如，许多库不能正确地处理闰秒，
    提供象无限这样的概念，或是提供高分辨率或网络时间源的能力。这些库还倾向于严格规定日期和时间的表示法。这样，
    针对某个项目或子项目的定制策略就不可能了。 
  </para>
  <para>
    Programming with dates and times should be almost as simple and natural as programming with strings and integers.  Applications with lots of temporal logic can be radically simplified by having a robust set of operators and calculation capabilities. Classes should provide the ability to compare dates and times, add lengths or time durations, retrieve dates and times from  clocks, and work naturally with date and time intervals.<sbr/>
    在编程中使用日期和时间与在编程中使用字符串和整数几乎一样简单和自然。
    带有大量时间逻辑的应用程序可以通过一组健壮的操作符和计算能力得以根本性的简化。
    类可以提供对日期和时间进行比较、增加时间长度、从时钟取出日期和时间，以及自然地使用日期和时间间隔。
  </para>
  <para>
    Another motivation for development of the library was to apply modern C++ library design techniques to the date-time domain.  Really to build a framework for the construction of building temporal types. For example, by providing iterators and traits classes to control fundamental properties of the library. To the authors knowledge this library is the only substantial attempt to apply modern C++ to a date-time library.<sbr/>
    开发本库的另一个动机是，将现代的C++库设计技术应用于日期时间领域。为构建时间类型真正地建立一个框架。
    例如，通过提供迭代器和 traits 类，来控制本库的基本属性。就作者所知而言，
    本库是将现代C++理念应用于日期时间库的唯一真正的尝试。 
  </para>
</section>
