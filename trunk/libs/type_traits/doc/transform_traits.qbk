[/ 
  Copyright 2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:transform Type Traits that Transform One Type to Another 将一种类型转换成另一种的 Type Traits]

The following templates transform one type to another, 
based upon some well-defined rule. 
Each template has a single member called `type` that is the 
result of applying the transformation to the template argument `T`.\n
下面的模板基于一些良好定义的规则，将某种类型转换成另一种，每一个模板只有一个单独的名为 `type` 
的成员，它是将转换应用到模板参数 `T` 上之后得到的结果。

[*Synopsis 概要:]

   template <class T>
   struct __add_const;

   template <class T>
   struct __add_cv;
   
   template <class T>
   struct __add_pointer;

   template <class T>
   struct __add_reference;

   template <class T>
   struct __add_volatile;

   template <class T>
   struct __decay;

   template <class T>
   struct __floating_point_promotion;

   template <class T>
   struct __integral_promotion;

   template <class T>
   struct __make_signed;

   template <class T>
   struct __make_unsigned;

   template <class T>
   struct __promote;

   template <class T>
   struct __remove_all_extents;

   template <class T>
   struct __remove_const;

   template <class T>
   struct __remove_cv;

   template <class T>
   struct __remove_extent;

   template <class T>
   struct __remove_pointer;

   template <class T>
   struct __remove_reference;

   template <class T>
   struct __remove_volatile;

[h4 Broken Compiler Workarounds:]
[h4 不标准编译器的变通方法：]

For all of these templates support for partial specialization of class templates is 
required to correctly implement the transformation. 
On the other hand, practice shows that many of the templates from this 
category are very useful, and often essential for implementing some 
generic libraries. Lack of these templates is often one of the major 
limiting factors in porting those libraries to compilers that do not yet 
support this language feature. As some of these compilers are going to be 
around for a while, and at least one of them is very wide-spread, 
it was decided that the library should provide workarounds where possible. \n
对于所有这些模板，都要求对模板类偏特化的支持，这是正确实现这些转换的需要。
另一方面，实践表明这一类模板中的大多数都非常有用，并经常会成为实现某些泛型库的基础。
这些模板的这一需求通常是将那些库移植到还不支持这一语言特性的编译器中的最重要的限制因素之一。
因为那些编译器中的一部分暂时还会吧被使用，而且至少其中之一还广为流传，这就决定了这个库在可能的情况下应该提供变通方案(workaround)。

The basic idea behind the workaround is to manually define full 
specializations of all type transformation templates for all fundamental types, 
and all their 1st and 2nd rank cv-[un]qualified derivative pointer types, and to 
provide a user-level macro that will define all the explicit specializations needed 
for any user-defined type T. \n
workaround 背后的最基本的想法是为所有基本类型，以及它们的所有第一和第二级 cv-[un] 
修饰的派生指针类型手工定义所有类型转换模板的完全特化，并提供一个用户层次的宏为所有用户定义类型 T 定义所需要的全部显式特化。

The first part guarantees the successful compilation of something like this:\n
第一部分保证这样的代码可以成功编译：

   BOOST_STATIC_ASSERT((is_same<char, remove_reference<char&>::type>::value));
   BOOST_STATIC_ASSERT((is_same<char const, remove_reference<char const&>::type>::value));
   BOOST_STATIC_ASSERT((is_same<char volatile, remove_reference<char volatile&>::type>::value));
   BOOST_STATIC_ASSERT((is_same<char const volatile, remove_reference<char const volatile&>::type>::value));
   BOOST_STATIC_ASSERT((is_same<char*, remove_reference<char*&>::type>::value));
   BOOST_STATIC_ASSERT((is_same<char const*, remove_reference<char const*&>::type>::value));
   ...
   BOOST_STATIC_ASSERT((is_same<char const volatile* const volatile* const volatile, remove_reference<char const volatile* const volatile* const volatile&>::type>::value));
   
and the second part provides the library's users with a mechanism to make the 
above code work not only for `char`, `int` or other built-in type, 
but for their own types as well:\n
第二部分为库用户提供一种机制，可以让上面的代码不仅仅你对 `char`，`int` 或其它内建类型有效，并同样可以用于它们自己的类型：

   namespace myspace{
      struct MyClass {};
   }
   // declare this at global scope:
   BOOST_BROKEN_COMPILER_TYPE_TRAITS_SPECIALIZATION(myspace::MyClass)
   // transformations on myspace::MyClass now work:
   BOOST_STATIC_ASSERT((is_same<myspace::MyClass, remove_reference<myspace::MyClass&>::type>::value));
   BOOST_STATIC_ASSERT((is_same<myspace::MyClass, remove_const<myspace::MyClass const>::type>::value));
   // etc.
   
Note that the macro BOOST_BROKEN_COMPILER_TYPE_TRAITS_SPECIALIZATION evaluates 
to nothing on those compilers that *do* support partial specialization.\n
注意，宏 BOOST_BROKEN_COMPILER_TYPE_TRAITS_SPECIALIZATION 在那些支持偏特化的编译器上什么都不会求出。

[endsect]

