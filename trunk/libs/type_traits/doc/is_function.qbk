[/ 
  Copyright 2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:is_function is_function]
   
   template <class T>
   struct is_function : public __tof {};
  
__inherit If T is a (possibly cv-qualified) function type then inherits from __true_type, 
otherwise inherits from __false_type.  Note that this template does not detect /pointers
to functions/, or /references to functions/, these are detected by __is_pointer and 
__is_reference respectively:\n
__inherit 如果 T 是一个（可能被 cv 修饰的）函数类型，则从 __true_type 继承，否则从 __false_type 继承。
注意，这个模板不会检测/指向函数的指针/，或/引向函数的引用/，那些可以分别通过 __is_pointer 和 __is_reference 进行检测：

   typedef int f1();      // f1 is of function type.
   typedef int (f2*)();   // f2 is a pointer to a function.
   typedef int (f3&)();   // f3 is a reference to a function.

__std_ref 3.9.2p1 and 8.3.5.

__header ` #include <boost/type_traits/is_function.hpp>` or ` #include <boost/type_traits.hpp>`

__examples

[:`is_function<int (void)>` inherits from `__true_type`.]

[:`is_function<long (double, int)>::type` is the type `__true_type`.]

[:`is_function<long (double, int)>::value` is an integral constant 
expression that evaluates to /true/.]

[:`is_function<long (*)(double, int)>::value` is an integral constant 
expression that evaluates to /false/: the argument in this case is a pointer type,
not a function type.]

[:`is_function<long (&)(double, int)>::value` is an integral constant 
expression that evaluates to /false/: the argument in this case is a 
reference to a function, not a function type.]

[:`is_function<long (MyClass::*)(double, int)>::value` is an integral constant 
expression that evaluates to /false/: the argument in this case is a pointer
to a member function.]

[:`is_function<T>::value_type` is the type `bool`.]

[tip Don't confuse function-types with pointers to functions:\n
不要混淆 function-types（函数类型）和 pointers to functions（指向函数的指针）：

`typedef int f(double);`

defines a function type,\n
定义一个函数类型，

`f foo;`

declares a prototype for a function of type `f`,\n
声明一个类型为 `f` 的函数的原型，

`f* pf = foo;`

`f& fr = foo;`

declares a pointer and a reference to the function `foo`.\n
声明一个指向函数 `foo` 的指针和一个引向函数 `foo` 的引用。

If you want to detect whether some type is a pointer-to-function then use:\n
如果你要检测某个类型是不是一个指向函数的指针，那就使用：

`__is_function<__remove_pointer<T>::type>::value && __is_pointer<T>::value`

or for pointers to member functions you can just use 
__is_member_function_pointer directly.\n
或者对于指向成员函数的指针你可以直接使用 __is_member_function_pointer。
]

[endsect]

