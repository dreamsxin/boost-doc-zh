[/ 
  Copyright 2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:remove_pointer remove_pointer]

   template <class T>
   struct remove_pointer
   {
      typedef __below type;
   };
  
__type The same type as `T`, but with any pointer modifier removed.  Note that pointers to members are left unchanged: 
removing the pointer decoration would result in an invalid type.\n
__type 与 `T` 的类型相同，但移除了任何指针修饰成分。注意，成员指针保持不变：移除此指针修饰会导致无效类型。

__std_ref 8.3.1.

__compat If the compiler does not support partial specialization of class-templates
then this template will compile, but the member `type` will always be the same as 
type `T` except where __transform_workaround have been applied.\n
__compat 如果编译器不支持类模板的偏特化，这个模板也可以编译，但是成员 `type` 总是和 `T` 类型相同，除非 __transform_workaround 可用。

__header ` #include <boost/type_traits/remove_pointer.hpp>` or ` #include <boost/type_traits.hpp>`

[table Examples 示例

[ [Expression 表达式] [Result Type 结果类型]]

[[`remove_pointer<int>::type`][`int`]]

[[`remove_pointer<int const*>::type`] [`int const`]]

[[`remove_pointer<int const**>::type`] [`int const*`]]

[[`remove_pointer<int&>::type`] [`int&`]]

[[`remove_pointer<int*&>::type`] [`int*&`]]

]

[endsect]

