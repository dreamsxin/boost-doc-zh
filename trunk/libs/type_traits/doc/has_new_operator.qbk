[/ 
  Copyright 2009 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:has_new_operator has_new_operator]
   template <class T>
   struct has_new_operator : public __tof {};
  
__inherit If T is a (possibly cv-qualified) type with an overloaded new-operator
then inherits from __true_type, otherwise inherits from __false_type.\n
__inherit 如果 T 是一个带有重载的 new 操作符的类型(可能带有cv-限定)，则继承自 __true_type，否则继承自 __false_type。

__compat Not usable with compilers that do not support "substitution failure is not an error"
(in which case BOOST_NO_SFINAE will be defined), also known to be broken with 
the Borland/Codegear compiler.\n
__compat 不能用于不支持"替代失败并非错误"的编译器(这种情况下会定义 BOOST_NO_SFINAE)，已知对于 Borland/Codegear 编译器不可用。

__std_ref 12.5.

__header ` #include <boost/type_traits/has_new_operator.hpp>` or ` #include <boost/type_traits.hpp>`

__examples

Given:\n
给定：

	class A { void* operator new(std::size_t); };
	class B { void* operator new(std::size_t, const std::nothrow&); };
	class C { void* operator new(std::size_t, void*); };
	class D { void* operator new[](std::size_t); };
	class E { void* operator new[](std::size_t, const std::nothrow&); };
	class F { void* operator new[](std::size_t, void*); };
	
Then:\n
则：

[:`has_new_operator<A>` inherits from `__true_type`.]

[:`has_new_operator<B>` inherits from `__true_type`.]

[:`has_new_operator<C>` inherits from `__true_type`.]

[:`has_new_operator<D>` inherits from `__true_type`.]

[:`has_new_operator<E>` inherits from `__true_type`.]

[:`has_new_operator<F>` inherits from `__true_type`.]

[endsect]

