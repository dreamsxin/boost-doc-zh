[/ 
  Copyright 2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:is_enum is_enum]
   template <class T>
   struct is_enum : public __tof {};
  
__inherit If T is a (possibly cv-qualified) enum type then inherits from __true_type, 
otherwise inherits from __false_type.\n
__inherit 如果 T 是一个（可能被 cv 修饰的）枚举类型，则从 __true_type 继承，否则从 __false_type 继承。

__std_ref 3.9.2 and 7.2.

__header ` #include <boost/type_traits/is_enum.hpp>` or ` #include <boost/type_traits.hpp>`

__compat Requires a correctly functioning __is_convertible template;
 this means that is_enum is currently broken under Borland C++ Builder 5, 
 and for the Metrowerks compiler prior to version 8, other compilers 
 should handle this template just fine.\n
__compat 需要一个正确的机能 __is_convertible 模板，这意味着 is_enum 现在无法和 Borland C++ Builder 5 和 
Metrowerks 编译器版本 8 以前的版本一起工作，其它编译器应该可以正确处理这个模板。

__examples

[:Given: `enum my_enum { one, two };` ]

[:`is_enum<my_enum>` inherits from `__true_type`.]

[:`is_enum<my_enum const>::type` is the type `__true_type`.]

[:`is_enum<my_enum>::value` is an integral constant 
expression that evaluates to /true/.]

[:`is_enum<my_enum&>::value` is an integral constant 
expression that evaluates to /false/.]

[:`is_enum<my_enum*>::value` is an integral constant 
expression that evaluates to /false/.]

[:`is_enum<T>::value_type` is the type `bool`.]

[endsect]

