[/ 
  Copyright 2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:function_traits function_traits]
[def __argN '''arg<replaceable>N</replaceable>_type''']

   template <class F>
   struct function_traits
   {
      static const std::size_t    arity = __below;
      typedef __below           result_type;
      typedef __below           __argN; 
   };

The class template function_traits will only compile if:\n
这个类模板仅在以下情况可编译：

* The compiler supports partial specialization of class templates.\n
  编译器支持类模板的偏特化时。
* The template argument `F` is a /function type/, note that this ['[*is not]] 
the same thing as a /pointer to a function/.\n
  模板参数 `F` 是一个 /函数类型/，注意这和一个 /指向函数的指针/ ['不是]一样的东西。

[tip
function_traits is intended to introspect only C++ functions of the 
form R (), R( A1 ), R ( A1, ... etc. ) and not function pointers or 
class member functions. To convert a function pointer type to a suitable 
type use __remove_pointer.\n
function_traits 只能用于形如 R (), R( A1 ), R ( A1, ... 等等)的C++函数，而非函数指针或类成员函数。
要将函数指针转换为适用的类型，请使用 __remove_pointer。]

[table Function Traits Members 成员
[[Member 成员] [Description 说明]] 
[[`function_traits<F>::arity`] 
   [An integral constant expression that gives the number of arguments accepted by the function type `F`.\n
   一个给出 function type（函数类型）`F` 接收的参数的个数的 integral constant expression（整常表达式）。]]
[[`function_traits<F>::result_type`] 
   [The type returned by function type `F`.\n
   function type（函数类型）`F` 的返回类型。]]
[[`function_traits<F>::__argN`] 
   [The '''<replaceable>N</replaceable>th''' argument type of function type `F`, where `1 <= N <= arity` of `F`.\n
   当 `1 <= N <= arity` of `F` 时，function type（函数类型）F 的第 '''<replaceable>N</replaceable>''' 个参数类型。]]
]

[table Examples 示例
[[Expression 表达式] [Result 结果]]
[[`function_traits<void (void)>::arity`] [An integral constant expression that has the value 0.\n
一个值为 0 的 integral constant expression（整常表达式）。]]
[[`function_traits<long (int)>::arity`] [An integral constant expression that has the value 1.\n
一个值为 1 的 integral constant expression（整常表达式）。]]
[[`function_traits<long (int, long, double, void*)>::arity`] [An integral constant expression that has the value 4.\n
一个值为 4 的 integral constant expression（整常表达式）。]]
[[`function_traits<void (void)>::result_type`] [The type `void`.]]
[[`function_traits<long (int)>::result_type`] [The type `long`.]]
[[`function_traits<long (int)>::arg1_type`] [The type `int`.]]
[[`function_traits<long (int, long, double, void*)>::arg4_type`] [The type `void*`.]]
[[`function_traits<long (int, long, double, void*)>::arg5_type`] [A compiler error: there is no `arg5_type` since there are only four arguments.\n
一个编译器错误：没有 `arg5_type` 因为只有 4 个参数。]]
[[`function_traits<long (*)(void)>::arity`] [A compiler error: argument type is a /function pointer/, and not a /function type/.\n
一个编译器错误：参数类型是一个 /function pointer/，而不是一个 /function type/。]]

]
   
[endsect]

