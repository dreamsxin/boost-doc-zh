[/ 
  Copyright 2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:has_nothrow_copy has_nothrow_copy]

   template <class T>
   struct has_nothrow_copy : public __tof {};
  
   template <class T>
   struct has_nothrow_copy_constructor : public __tof {};
  
__inherit If T is a (possibly cv-qualified) type with a non-throwing copy-constructor
then inherits from __true_type, otherwise inherits from __false_type.  Type `T`
must be a complete type.\n
__inherit 如果 T 是一个带有不抛异常的拷贝构造函数的（可能被 cv 修饰的）类型，则从 __true_type 继承，否则从 __false_type 继承。
类型 `T `必须是一个完整类型。

These two traits are synonyms for each other.\n
这两个 traits 是相互同义的。

__compat If the compiler does not support partial-specialization of class 
templates, then this template can not be used with function types.\n
__compat 如果编译器不支持类模板的偏特化，则这个模板不能用于函数类型。

Without some (as yet unspecified) help from the compiler, 
`has_nothrow_copy` will never report that a class or struct has a 
non-throwing copy-constructor; this is always safe, if possibly sub-optimal.
Currently (May 2005) only Visual C++ 8 has the necessary compiler __intrinsics to ensure that this
trait "just works".\n
没有来自编译器的某些（未加规定的）帮助，`has_nothrow_assign` 绝不会报告一个 class 或 struct 有一个不抛异常的拷贝构造函数，如果 
sub-optimal 可能，这总是安全的。当前（2005 年 5 月）只有 Visual C++ 8 具有确保这个 trait “正常工作”所必须的编译器 __intrinsics。

__header ` #include <boost/type_traits/has_nothrow_copy.hpp>` or ` #include <boost/type_traits.hpp>`

[endsect]

