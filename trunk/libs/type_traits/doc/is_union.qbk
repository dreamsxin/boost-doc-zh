[/ 
  Copyright 2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:is_union is_union]
   template <class T>
   struct is_union : public __tof {};
  
__inherit If T is a (possibly cv-qualified) union type then inherits from __true_type, 
otherwise inherits from __false_type.  Currently requires some kind of compiler 
support, otherwise unions are identified as classes.\n
__inherit 如果 T 是一个（可能被 cv 修饰的）union type（联合类型），则从 __true_type 继承，否则从 __false_type 继承。
现在需要某种编译器支持，否则会把联合识别为类。

__std_ref 3.9.2 and 9.5.

__compat Without (some as yet unspecified) help from the 
compiler, we cannot distinguish between union and class types using only standard C++, 
as a result this type will never inherit from __true_type, unless the user explicitly
specializes the template for their user-defined union types, or unless the compiler
supplies some unspecified intrinsic that implements this functionality.  Currently
(May 2005) only Visual C++ 8 has the necessary compiler __intrinsics to make this 
trait "just work" without user intervention.\n
__compat 没有来自编译器的（某些未加规定的）帮助，只使用标准 C++ 我们不能区分联合和类类型，结果是这个类型永远不会从 __true_type 
继承，除非用户为他们的用户定义联合类型显式特化这个模板，或者编译器提供一些未加规定的可实现这个机能的特质。
当前（2005 年 5 月）只有 Visual C++ 8 具有使这个 trait 在用户不干预的情况下“正确工作”所必须的编译器 __intrinsics。

__header ` #include <boost/type_traits/is_union.hpp>` or ` #include <boost/type_traits.hpp>`

__examples

[:`is_union<void>` inherits from `__true_type`.]

[:`is_union<const void>::type` is the type `__true_type`.]

[:`is_union<void>::value` is an integral constant 
expression that evaluates to /true/.]

[:`is_union<void*>::value` is an integral constant 
expression that evaluates to /false/.]

[:`is_union<T>::value_type` is the type `bool`.]

[endsect]

