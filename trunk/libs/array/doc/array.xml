<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE library PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
  "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<library name="Array" dirname="array" id="array" last-revision="$Date: 2010-05-01 16:29:31 -0400 (Sat, 01 May 2010) $">
  <libraryinfo>
    <author>
      <firstname>Nicolai</firstname>
      <surname>Josuttis</surname>
    </author>

    <copyright>
      <year>2001</year>
      <year>2002</year>
      <year>2003</year>
      <year>2004</year>
      <holder>Nicolai M. Josuttis</holder>
    </copyright>
   
    <legalnotice>
      <para>Distributed under the Boost Software License, Version 1.0.
      (See accompanying file <filename>LICENSE_1_0.txt</filename> or copy at 
      <ulink
      url="http://www.boost.org/LICENSE_1_0.txt">http://www.boost.org/LICENSE_1_0.txt</ulink>)
      </para>
    </legalnotice>

    <librarypurpose>STL compliant container wrapper for arrays of constant size</librarypurpose>
    <librarycategory name="category:containers"/>
  </libraryinfo>

  <title>Boost.Array</title>
 
  <section id="array.intro">
    <title>Introduction 简介</title> 

    <using-namespace name="boost"/>
    <using-class name="array"/>

    <para>The C++ Standard Template Library STL as part of the C++
    Standard Library provides a framework for processing algorithms on
    different kind of containers. However, ordinary arrays don't
    provide the interface of STL containers (although, they provide
    the iterator interface of STL containers).<sbr/>
    作为 C++ 标准库的一部分，C++ 标准模板库（Standard Template Library STL）
    提供了一个用于各种不同容器的处理算法的框架。然而，普通数组不提供 STL 
    容器的接口（尽管它们提供了 STL 容器的迭代器接口）。</para>

    <para>As replacement for ordinary arrays, the STL provides class
    <code><classname>std::vector</classname></code>.  However,
    <code><classname>std::vector&lt;&gt;</classname></code> provides
    the semantics of dynamic arrays. Thus, it manages data to be able
    to change the number of elements. This results in some overhead in
    case only arrays with static size are needed.<sbr/>
    为了代替普通数组，STL 提供了 <code><classname>std::vector</classname></code>。
    但是，<code><classname>std::vector&lt;&gt;</classname></code> 提供动态数组的语义。
    因此，它管理元素数量会发生变化的数据。这导致的负担超出仅有静态大小的数组的需要。</para>

    <para>In his book, <emphasis>Generic Programming and the
    STL</emphasis>, Matthew H. Austern introduces a useful wrapper
    class for ordinary arrays with static size, called
    <code>block</code>.  It is safer and has no worse performance than
    ordinary arrays. In <emphasis>The C++ Programming
    Language</emphasis>, 3rd edition, Bjarne Stroustrup introduces a
    similar class, called <code>c_array</code>, which I (<ulink
    url="http://www.josuttis.com">Nicolai Josuttis</ulink>) present
    slightly modified in my book <emphasis>The C++ Standard Library -
    A Tutorial and Reference</emphasis>, called
    <code>carray</code>. This is the essence of these approaches
    spiced with many feedback from <ulink
    url="http://www.boost.org">boost</ulink>.<sbr/>
    Matthew H. Austern 在他的著作 <emphasis>Generic Programming and the STL</emphasis> 中，
    提出了一个用于静态大小的普通数组的有用的包装类，名叫 <code>block</code>。
    它更加安全，而且性能也不输于普通数组。在 <emphasis>The C++ Programming Language</emphasis> 
    第三版中，Bjarne Stroustrup 提出了一个类似的类，名叫 <code>c_array</code>，
    我 (<ulink url="http://www.josuttis.com">Nicolai Josuttis</ulink>) 对它稍加改变，
    放到了我的书 <emphasis>The C++ Standard Library - A Tutorial and Reference</emphasis> 中，
    名叫 <code>carray</code>。这些方法中的一些基本的东西都在 <ulink
    url="http://www.boost.org">boost</ulink> 中得到了反应。</para>

    <para>After considering different names, we decided to name this
    class simply <code><classname>array</classname></code>.<sbr/>
    考虑了各种不同的名字后，我决定给这个类一个简单的名字，
    <code><classname>array</classname></code>。</para>

    <para>Note that this class is suggested to be part of the next
    Technical Report, which will extend the C++ Standard (see
    <ulink url="http://std.dkuug.dk/jtc1/sc22/wg21/docs/papers/2003/n1548.htm">http://std.dkuug.dk/jtc1/sc22/wg21/docs/papers/2003/n1548.htm</ulink>).<sbr/>
    注意，这个类已经被建议为下一版扩展 C++ 标准的技术报告的一部分(参见
    <ulink url="http://std.dkuug.dk/jtc1/sc22/wg21/docs/papers/2003/n1548.htm">http://std.dkuug.dk/jtc1/sc22/wg21/docs/papers/2003/n1548.htm</ulink>)。</para>

    <para>Class <code><classname>array</classname></code> fulfills most
    but not all of the requirements of "reversible containers" (see
    Section 23.1, [lib.container.requirements] of the C++
    Standard). The reasons array is not an reversible STL container is
    because:<sbr/>
    类 <code><classname>array</classname></code> 实现了大部分但不是全部的
    “可逆容器”的需求（参见 C++ 标准的 23.1, [lib.container.requirements]）。
    array 不是一个 STL 可逆容器的原因在于：
      <itemizedlist spacing="compact">
        <listitem><simpara>No constructors are provided.<sbr/>
            没有提供构造函数。</simpara></listitem>
        <listitem><simpara>Elements may have an undetermined initial value (see <xref linkend="array.rationale"/>).<sbr/>
            元素可能有一个不确定的初始值（参见 <xref linkend="array.rationale"/>）。</simpara></listitem>
        <listitem><simpara><functionname>swap</functionname>() has no constant complexity.<sbr/>
            <functionname>swap</functionname>() 不具有常量复杂度。</simpara></listitem>
        <listitem><simpara><methodname>size</methodname>() is always constant, based on the second template argument of the type.<sbr/>
            <methodname>size</methodname>() 基于第二个模板参数的类型，总是恒定的。</simpara></listitem>
        <listitem><simpara>The container provides no allocator support.<sbr/>
            容器不提供分配器支持。</simpara></listitem>
      </itemizedlist>
    </para>

    <para>It doesn't fulfill the requirements of a "sequence" (see Section 23.1.1, [lib.sequence.reqmts] of the C++ Standard), except that:<sbr/>
    它没有实现“序列”的需求（参见 C++ 标准的 23.1.1, [lib. sequence.reqmts]），但以下这些除外：
      <itemizedlist spacing="compact">
        <listitem><simpara><methodname>front</methodname>() and <methodname>back</methodname>() are provided.<sbr/>
            提供了 <methodname>front</methodname>() 和 <methodname>back</methodname>()。 </simpara></listitem>
        <listitem><simpara><methodname>operator[]</methodname> and <methodname>at</methodname>() are provided.<sbr/>
            提供了 <methodname>operator[]</methodname> 和 <methodname>at</methodname>()。 </simpara></listitem>
      </itemizedlist>
    </para>
  </section>
  
  <library-reference>
    <header name="boost/array.hpp">
      <namespace name="boost">
        <class name="array">
          <template>
            <template-type-parameter name="T"/>
            <template-nontype-parameter name="N">
              <type>std::size_t</type>
            </template-nontype-parameter>
          </template>

          <purpose><para>STL compliant container wrapper for arrays of constant size<sbr/>
          服从 STL 风格的针对常量大小数组的容器包装</para></purpose>
          <typedef name="value_type">
            <type>T</type>
          </typedef>
          <typedef name="iterator">
             <type>T*</type>
          </typedef>
          <typedef name="const_iterator">
             <type>const T*</type>
          </typedef>
          <typedef name="reverse_iterator">
             <type><classname>std::reverse_iterator</classname>&lt;iterator&gt;</type>
          </typedef>
          <typedef name="const_reverse_iterator">
             <type><classname>std::reverse_iterator</classname>&lt;const_iterator&gt;</type>
          </typedef>
          <typedef name="reference">
             <type>T&amp;</type>
          </typedef>
          <typedef name="const_reference">
             <type>const T&amp;</type>
          </typedef>
          <typedef name="size_type">
             <type>std::size_t</type>
          </typedef>
          <typedef name="difference_type">
             <type>std::ptrdiff_t</type>
          </typedef>

          <static-constant name="static_size">
            <type>size_type</type>
            <default>N</default>
          </static-constant>

          <copy-assignment>
            <template>
              <template-type-parameter name="U"/>
            </template>
            <parameter name="other">
              <paramtype>const <classname>array</classname>&lt;U, N&gt;&amp;</paramtype>
            </parameter>
            <effects><simpara><code>std::copy(rhs.<methodname>begin</methodname>(),rhs.<methodname>end</methodname>(), <methodname>begin</methodname>())</code></simpara></effects>
          </copy-assignment>

          <method-group name="iterator support">
            <overloaded-method name="begin">
              <signature>
                <type>iterator</type>
              </signature>
              <signature cv="const">
                <type>const_iterator</type>
              </signature>

              <returns><simpara>iterator for the first element<sbr/>位于第一个元素的迭代器</simpara></returns>
              <throws><simpara>will not throw<sbr/>不抛出异常</simpara></throws>
            </overloaded-method>

            <overloaded-method name="end">
              <signature>
                <type>iterator</type>
              </signature>
              <signature cv="const">
                <type>const_iterator</type>
              </signature>

              <returns><simpara>iterator for position after the last element<sbr/>
              位于最后一个元素之后位置的迭代器</simpara></returns>
              <throws><simpara>will not throw<sbr/>不抛出异常</simpara></throws>
            </overloaded-method>
          </method-group>

          <method-group name="reverse iterator support">
            <overloaded-method name="rbegin">
              <signature>
                <type>reverse_iterator</type>
              </signature>
              <signature cv="const">
                <type>const_reverse_iterator</type>
              </signature>

              <returns><simpara>reverse iterator for the first element of reverse iteration<sbr/>
              位于反向迭代的第一个元素的反向迭代器</simpara></returns>
            </overloaded-method>

            <overloaded-method name="rend">
              <signature>
                <type>reverse_iterator</type>
              </signature>
              <signature cv="const">
                <type>const_reverse_iterator</type>
              </signature>

              <returns><simpara>reverse iterator for position after the last element in reverse iteration<sbr/>
              位于反向迭代的最后一个元素之后位置的反向迭代器</simpara></returns>
            </overloaded-method>
          </method-group>

          <method-group name="capacity">
            <method name="size">
              <type>size_type</type>
              <returns><simpara><code>N</code></simpara></returns>
            </method>
            <method name="empty">
              <type>bool</type>
              <returns><simpara><code>N==0</code></simpara></returns>
              <throws><simpara>will not throw<sbr/>不抛出异常</simpara></throws>
            </method>
            <method name="max_size">
              <type>size_type</type>
              <returns><simpara><code>N</code></simpara></returns>
              <throws><simpara>will not throw<sbr/>不抛出异常</simpara></throws>
            </method>
          </method-group>

          <method-group name="element access">
            <overloaded-method name="operator[]">
              <signature>
                <type>reference</type>
                <parameter name="i">
                  <paramtype>size_type</paramtype>
                </parameter>
              </signature>

              <signature cv="const">
                <type>const_reference</type>
                <parameter name="i">
                  <paramtype>size_type</paramtype>
                </parameter>
              </signature>

              <requires><simpara><code>i &lt; N</code></simpara></requires>
              <returns><simpara>element with index <code>i</code><sbr/>
              索引为 <code>i</code> 的元素</simpara></returns>
              <throws><simpara>will not throw<sbr/>不抛出异常.</simpara></throws>
            </overloaded-method>

            <overloaded-method name="at">
              <signature>
                <type>reference</type>
                <parameter name="i">
                  <paramtype>size_type</paramtype>
                </parameter>
              </signature>

              <signature cv="const">
                <type>const_reference</type>
                <parameter name="i">
                  <paramtype>size_type</paramtype>
                </parameter>
              </signature>

              <returns><simpara>element with index <code>i</code><sbr/>
              索引为 <code>i</code> 的元素</simpara></returns>
              <throws><simpara><code><classname>std::range_error</classname></code> if <code>i &gt;= N</code></simpara></throws>
            </overloaded-method>

            <overloaded-method name="front">
              <signature>
                <type>reference</type>
              </signature>
              <signature cv="const">
                <type>const_reference</type>
              </signature>
              <requires><simpara><code>N &gt; 0</code></simpara></requires>
              <returns><simpara>the first element<sbr/>第一个元素</simpara></returns>
              <throws><simpara>will not throw<sbr/>不抛出异常</simpara></throws>
            </overloaded-method>

            <overloaded-method name="back">
              <signature>
                <type>reference</type>
              </signature>
              <signature cv="const">
                <type>const_reference</type>
              </signature>
              <requires><simpara><code>N &gt; 0</code></simpara></requires>
              <returns><simpara>the last element<sbr/>最后一个元素</simpara></returns>
              <throws><simpara>will not throw<sbr/>不抛出异常</simpara></throws>
            </overloaded-method>

            <method name="data" cv="const">
              <type>const T*</type>
              <returns><simpara><code>elems</code></simpara></returns>
              <throws><simpara>will not throw<sbr/>不抛出异常</simpara></throws>
            </method>

           <method name="c_array">
              <type>T*</type>
              <returns><simpara><code>elems</code></simpara></returns>
              <throws><simpara>will not throw<sbr/>不抛出异常</simpara></throws>
            </method>
          </method-group>

          <method-group name="modifiers">
            <method name="swap">
              <type>void</type>
              <parameter name="other">
                <paramtype><classname>array</classname>&lt;T, N&gt;&amp;</paramtype>
              </parameter>
              <effects><simpara><code>std::swap_ranges(<methodname>begin</methodname>(), <methodname>end</methodname>(), other.<methodname>begin</methodname>())</code></simpara></effects>
              <complexity><simpara>linear in <code>N</code><sbr/>基于 <code>N</code> 的线性增长</simpara></complexity>
            </method>
            <method name="assign">
              <type>void</type>
              <parameter name="value">
                <paramtype>const T&amp;</paramtype>
              </parameter>
              <effects><simpara><code>std::fill_n(<methodname>begin</methodname>(), N, value)</code></simpara></effects>
            </method>
          </method-group>

          <data-member name="elems[N]"> <!-- HACK -->
            <type>T</type>
          </data-member>

          <free-function-group name="specialized algorithms">
            <function name="swap"> 
              <template>
                <template-type-parameter name="T"/>
                <template-nontype-parameter name="N">
                  <type>std::size_t</type>
                </template-nontype-parameter>
              </template>

              <type>void</type>
              
              <parameter name="x">
                <paramtype><classname>array</classname>&lt;T, N&gt;&amp;</paramtype>
              </parameter>
              <parameter name="y">
                <paramtype><classname>array</classname>&lt;T, N&gt;&amp;</paramtype>
              </parameter>

              <effects><simpara><code>x.<methodname>swap</methodname>(y)</code></simpara></effects>
              <throws><simpara>will not throw<sbr/>不抛出异常.</simpara></throws>
            </function>
          </free-function-group>

          <free-function-group name="comparisons">
            <function name="operator==">
              <template>
                <template-type-parameter name="T"/>
                <template-nontype-parameter name="N">
                  <type>std::size_t</type>
                </template-nontype-parameter>
              </template>

              <type>bool</type>
              
              <parameter name="x">
                <paramtype>const <classname>array</classname>&lt;T, N&gt;&amp;</paramtype>
              </parameter>
              <parameter name="y">
                <paramtype>const <classname>array</classname>&lt;T, N&gt;&amp;</paramtype>
              </parameter>

              <returns><simpara><code>std::equal(x.<methodname>begin</methodname>(), x.<methodname>end</methodname>(), y.<methodname>begin</methodname>())</code></simpara>
              </returns>
            </function>
 
            <function name="operator!=">
              <template>
                <template-type-parameter name="T"/>
                <template-nontype-parameter name="N">
                  <type>std::size_t</type>
                </template-nontype-parameter>
              </template>

              <type>bool</type>
              
              <parameter name="x">
                <paramtype>const <classname>array</classname>&lt;T, N&gt;&amp;</paramtype>
              </parameter>
              <parameter name="y">
                <paramtype>const <classname>array</classname>&lt;T, N&gt;&amp;</paramtype>
              </parameter>

              <returns><simpara><code>!(x == y)</code></simpara>
              </returns>
            </function>

            <function name="operator&lt;">
              <template>
                <template-type-parameter name="T"/>
                <template-nontype-parameter name="N">
                  <type>std::size_t</type>
                </template-nontype-parameter>
              </template>

              <type>bool</type>
              
              <parameter name="x">
                <paramtype>const <classname>array</classname>&lt;T, N&gt;&amp;</paramtype>
              </parameter>
              <parameter name="y">
                <paramtype>const <classname>array</classname>&lt;T, N&gt;&amp;</paramtype>
              </parameter>

              <returns><simpara><code>std::lexicographical_compare(x.<methodname>begin</methodname>(), x.<methodname>end</methodname>(), y.<methodname>begin</methodname>(), y.<methodname>end</methodname>())</code></simpara>
              </returns>
            </function>

            <function name="operator&gt;">
              <template>
                <template-type-parameter name="T"/>
                <template-nontype-parameter name="N">
                  <type>std::size_t</type>
                </template-nontype-parameter>
              </template>

              <type>bool</type>
              
              <parameter name="x">
                <paramtype>const <classname>array</classname>&lt;T, N&gt;&amp;</paramtype>
              </parameter>
              <parameter name="y">
                <paramtype>const <classname>array</classname>&lt;T, N&gt;&amp;</paramtype>
              </parameter>

              <returns><simpara><code>y &lt; x</code></simpara></returns>
            </function>

            <function name="operator&lt;=">
              <template>
                <template-type-parameter name="T"/>
                <template-nontype-parameter name="N">
                  <type>std::size_t</type>
                </template-nontype-parameter>
              </template>

              <type>bool</type>
              
              <parameter name="x">
                <paramtype>const <classname>array</classname>&lt;T, N&gt;&amp;</paramtype>
              </parameter>
              <parameter name="y">
                <paramtype>const <classname>array</classname>&lt;T, N&gt;&amp;</paramtype>
              </parameter>

              <returns><simpara><code>!(y &lt; x)</code></simpara></returns>
            </function>

            <function name="operator&gt;=">
              <template>
                <template-type-parameter name="T"/>
                <template-nontype-parameter name="N">
                  <type>std::size_t</type>
                </template-nontype-parameter>
              </template>

              <type>bool</type>
              
              <parameter name="x">
                <paramtype>const <classname>array</classname>&lt;T, N&gt;&amp;</paramtype>
              </parameter>
              <parameter name="y">
                <paramtype>const <classname>array</classname>&lt;T, N&gt;&amp;</paramtype>
              </parameter>

              <returns><simpara><code>!(x &lt; y)</code></simpara></returns>
            </function>
          </free-function-group>
        </class>
      </namespace>
    </header>
  </library-reference>

<section id="array.rationale">
  <title>Design Rationale 设计原则</title>

  <para>There was an important design tradeoff regarding the
  constructors: We could implement array as an "aggregate" (see
  Section 8.5.1, [dcl.init.aggr], of the C++ Standard). This would
  mean:<sbr/>
  有一个重要的关于构造函数的设计权衡：我们可以将 array 实现为一个“集合体”
  （参见 C++ 标准的 8.5.1, [dcl.init.aggr]）。这就意味着：
    <itemizedlist>
      <listitem><simpara>An array can be initialized with a
      brace-enclosing, comma-separated list of initializers for the
      elements of the container, written in increasing subscript
      order:<sbr/>
      一个数组能被一个大括号括起来的，逗号分隔的初始化列表初始化，
      初始化列表中的值按照容器中各元素的下标递增的顺序排列：</simpara>

      <programlisting><classname>boost::array</classname>&lt;int,4&gt; a = { { 1, 2, 3 } };</programlisting>

      <simpara>Note that if there are fewer elements in the
      initializer list, then each remaining element gets
      default-initialized (thus, it has a defined value).<sbr/>
      注意，如果初始化列表中的值少于元素的个数，则多余的元素会被默认初始化
      （这样，它就有了一个已定义的值）。</simpara>
  </listitem></itemizedlist></para>

  <para>However, this approach has its drawbacks: <emphasis
  role="bold"> passing no initializer list means that the elements
  have an indetermined initial value</emphasis>, because the rule says
  that aggregates may have:<sbr/>
  然而，这种方法也有它的劣势：<emphasis role="bold">不传递初始化列表意味着元素有一个不确定的初始值
  </emphasis>，因为规则规定集合体应该：
    <itemizedlist>
      <listitem><simpara>No user-declared constructors.<sbr/>
        无用户声明的构造函数。</simpara></listitem>
      <listitem><simpara>No private or protected non-static data members.<sbr/>
        无私有的或保护的非静态数据成员。</simpara></listitem>
      <listitem><simpara>No base classes.<sbr/>
        无基类。</simpara></listitem>
      <listitem><simpara>No virtual functions.<sbr/>
        无虚拟函数。</simpara></listitem>
    </itemizedlist>
  </para>

  <para>Nevertheless, The current implementation uses this approach.<sbr/>
  无论如何，当前的实现使用了这个方法。</para>

  <para>Note that for standard conforming compilers it is possible to
  use fewer braces (according to 8.5.1 (11) of the Standard). That is,
  you can initialize an array as follows:<sbr/>
  注意，对于与标准兼容的编译器，可能会使用更少的大括号（根据标准的 8.5.1 (11)）。
  也就是说，你可以像这样初始化一个 array：</para>

<programlisting>
<classname>boost::array</classname>&lt;int,4&gt; a = { 1, 2, 3 };
</programlisting>

  <para>I'd appreciate any constructive feedback. <emphasis
  role="bold">Please note: I don't have time to read all boost
  mails. Thus, to make sure that feedback arrives to me, please send
  me a copy of each mail regarding this class.</emphasis><sbr/>
  我感激任何有建设性的反馈。<emphasis role="bold">请注意：我没有时间阅读所有的 boost 邮件。
  因此，为了确保反馈能被我收到，请把关于这个类的每一封邮件发给我一份拷贝。</emphasis></para>

  <para>The code is provided "as is" without expressed or implied
  warranty.<sbr/>
  代码就按照原样提供，不带有任何明显的或隐含的授权。</para>

</section>

<section id="array.more.info">
  <title>For more information... 更多信息...</title>
  <para>To find more details about using ordinary arrays in C++ and
  the framework of the STL, see e.g.<sbr/>
  要寻找关于使用 C++ 普通数组和 STL 框架的更多细节，请看

    <literallayout>The C++ Standard Library - A Tutorial and Reference
by Nicolai M. Josuttis
Addison Wesley Longman, 1999
ISBN 0-201-37926-0</literallayout>
   </para>

  <para><ulink url="http://www.josuttis.com/">Home Page of Nicolai
  Josuttis</ulink></para>
</section>

<section id="array.ack">
  <title>Acknowledgements 鸣谢</title>
  
  <para>Doug Gregor ported the documentation to the BoostBook format.<sbr/>
  感谢 Doug Gregor 将本文档移植至 BoostBook 格式</para>
</section>

<!-- Notes:
   empty() should return N != 0
   size(), empty(), max_size() should be const
   -->

</library>
