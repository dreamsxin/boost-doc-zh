[section FAQ]

1. ['[*Why is there no difference between `range_iterator<C>::type`  and `range_const_iterator<C>::type` for `std::pair<iterator, iterator>`?\n
为什么对于 `std::pair<iterator, iterator>`，`range_iterator<C>::type` 和 `range_const_iterator<C>::type` 没有区别。]]

[:In general it is not possible nor desirable to find a corresponding `const_iterator`. When it is possible to come up with one, the client might choose to construct a `std::pair<const_iterator,const_iterator>` object.\n
通常没有可能也不值得找到一个 `const_iterator`. 如果要得到一个，用户可以选择构造一个 `std::pair<const_iterator,const_iterator>` 对象。]

[:Note that an __iterator_range__ is somewhat more convenient than a `pair` and that a __sub_range__ does propagate const-ness.\n
注意，__iterator_range__ 要比 `pair` 稍微方便一点，而 __sub_range__ 则可以传播常量性。]

2. ['[*Why is there not supplied more types or more functions?\n
为什么不提供更多的类型或函数？]]

[:The library has been kept small because its current interface will serve most purposes. If and when a genuine need arises for more functionality, it can be implemented.\n
本库保持比较小是因为它当前的接口可以有更多的用途。如果真的需要更多的功能，它也可以实现。]

3. ['[*How should I implement generic algorithms for ranges?\n
我如何实现使用区间的泛型算法？]]

[:One should always start with a generic algorithm that takes two iterators (or more) as input. Then use Boost.Range to build handier versions on top of the iterator based algorithm. Please notice that once the range version of the algorithm is done, it makes sense not to expose the iterator version in the public interface.\n
你应该从接受两个(或多个)迭代器作为输入的泛型算法开始。然后使用 Boost.Range 在算法所基于的迭代器之上来构建一个手工版本。
请注意，一旦实现了算法的区间版本，就不要再将迭代器版本公开在公有接口上。]

4. ['[*Why is there no Incrementable Range concept?\n
为什么没有递增区间的概念？]]

[:Even though we speak of incrementable iterators, it would not make much sense for ranges; for example, we cannot determine the size and emptiness of a range since we cannot even compare its iterators.\n
虽然我们有讨论递增迭代器，但是不太合适讨论这类区间；例如，我们无法确定区间的大小以及区间是否为空，因为我们不能比较这种迭代器。]

[:Note also that incrementable iterators are derived from output iterators and so there exist no output range.\n
还应注意，递增迭代器派生自输出迭代器，所以也不存在输出区间。]

[endsect]


