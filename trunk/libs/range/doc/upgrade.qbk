[section:upgrade Upgrade version of Boost.Range  Boost.Range的升级版本]

[section:upgrade_from_1_42 Upgrade from version 1.42 从版本1.42升级]

New features:\n
新特性：

# __range_adaptors__
# __range_algorithms__

Removed:\n
删除：

# `iterator_range` no longer has a `is_singular` member function. The singularity restrictions have been removed from the `iterator_range` class since this added restrictions to ranges of iterators whose default constructors were not singular. Previously the `is_singular` member function always returned `false` in release build configurations, hence it is not anticipated that this interface change will produce difficulty in upgrading.\n
  `iterator_range` 不再具有 `is_singular` 成员函数。
  该限制已从 `iterator_range` 类中去除，因为它对那些缺省构造函数并非奇异的迭代器的区间增加了限制。
  之前 `is_singular` 成员函数在发布构建配置下总是返回 `false`，所以我们并不认为这个接口变化会在升级中产生困难。


[endsect]

[section:upgrade_from_1_34 Upgrade from version 1.34 从版本1.34升级]

Boost version 1.35 introduced some larger refactorings of the library:\n
Boost版本1.35对本库进行了一些较大的重构：

# Direct support for character arrays was abandoned in favor of uniform treatment of all arrays. Instead string algorithms can use the new function __as_literal__`()`.\n
  取消了对字符数组的直接支持，以便对所有数组统一对待。替代的字符串算法可以使用新函数 __as_literal__`()`。 
# __size__ now requires a __random_access_range__. The old behavior is provided as __distance__`()`.\n
  __size__ 现在可以支持 __random_access_range__。旧的行为用 __distance__`()` 来提供。
# `range_size<T>::type` has been completely removed in favor of `range_difference<T>::type`\n
  `range_size<T>::type` 被完全删掉，改为 `range_difference<T>::type` 
# `boost_range_begin()` and `boost_range_end()` have been renamed `range_begin()` and `range_end()` respectively.\n
  `boost_range_begin()` 和 `boost_range_end()` 分别被更名为 `range_begin()` 和 `range_begin()`。 
# `range_result_iterator<T>::type` and `range_reverse_result_iterator<T>::type` have been renamed `range_iterator<T>::type` and `range_reverse_iterator<T>::type`.\n
  `range_result_iterator<T>::type` 和 `range_reverse_result_iterator<T>::type` 被更名为 `range_iterator<T>::type` 和 
  `range_reverse_iterator<T>::type`。
# The procedure that makes a custom type work with the library has been greatly simplified. See __extending_for_udts__ for details.\n
  让一个定制的类型适用于本库的过程大为简化。详细请见 __extending_for_udts__ 。

[endsect]

[endsect]
