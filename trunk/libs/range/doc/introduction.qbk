[section:introduction Introduction 简介]

Generic algorithms have so far been specified in terms of two or more iterators. Two iterators would together form a range of values that the algorithm could work on. This leads to a very general interface, but also to a somewhat clumsy use of the algorithms with redundant specification of container names. Therefore we would like to raise the abstraction level for algorithms so they specify their interface in terms of __ranges__ as much as possible.\n
当前的泛型算法是依据两个或多个迭代器来工作的。两个迭代器一起形成了算法所操作的值的区间。
这种方法是一种非常通用的接口，但是使用算法时也有点麻烦，常常要重复指定容器的名字。
因此我们希望提升算法的抽象层次，使它们尽可能以 __ranges__ 来指定接口。

The most common form of ranges used throughout the C++ community are standard library containers. When writing algorithms however, one often finds it desirable for the algorithm to accept other types that offer enough functionality to satisfy the needs of the generic code [*/if a suitable layer of indirection is applied/] . For example, raw arrays are often suitable for use with generic code that works with containers, provided a suitable adapter is used. Likewise, null terminated strings can be treated as containers of characters, if suitably adapted.\n
C++社区中最常见的区间形式是标准库的容器。不过在编写算法时，你常会发现，[*/如果有一个合适的间接层/]，
应该让算法接受其它可提供足够功能的类型，以满足泛型代码的需要。
例如，裸数组常常可以与用于容器的泛型代码一起使用，只要使用一个适合的适配器。
同样的，null结尾的字符串也可被视为字符容器，如果经过适当的适配。

This library therefore provides the means to adapt standard-like containers, null terminated strings, `std::pairs` of iterators, and raw arrays (and more), such that the same generic code can work with them all. The basic idea is to add another layer of indirection using __metafunctions__ and free-standing functions so syntactic and/or semantic differences can be removed.\n
因此这个库提供了对近似于标准的容器、以空字符结束的字符串、迭代器的 `std::pairs`，以及裸数组(及其它)进行改编的方法，
以便同一段泛型代码可以和它们一起使用。基本的想法是用 __metafunctions__ 和独立的函数增加一个间接层，以去除语法和/或语义上的差别。

The main advantages are\n
主要的好处有：

* simpler implementation and specification of generic range algorithms\n
  泛型的区间算法的更简单的实现和规范
* more flexible, compact and maintainable client code\n
  更灵活、紧凑和可维护的客户代码
* safe use of built-in arrays (for legacy code; why else would you use built-in arrays?)\n
  安全使用内建数组(对于遗留代码；你为什么还要使用内建数据？)

Below are given a small example (the complete example can be found [@http://www.boost.org/libs/range/test/algorithm_example.cpp here] ):\n
下面给出一个简短的例子(完整的例子代码请见 [@http://www.boost.org/libs/range/test/algorithm_example.cpp 这里] ): 

``
        //
        // example: extracting bounds in a generic algorithm
        // 例子：在泛型算法中取出边界
        //
        template< class ForwardReadableRange, class T >
        inline typename boost::range_iterator< ForwardReadableRange >::type
        find( ForwardReadableRange& c, const T& value )
        {
           return std::find( boost::begin( c ), boost::end( c ), value );
        }

        template< class ForwardReadableRange, class T >
        inline typename boost::range_iterator< const ForwardReadableRange >::type
        find( const ForwardReadableRange& c, const T& value )
        {
           return std::find( boost::begin( c ), boost::end( c ), value );
        }

        //
        // replace first value and return its index
        // 替代第一个值并返回其索引
        //
        template< class ForwardReadableWriteableRange, class T >
        inline typename boost::range_size< ForwardReadableWriteableRange >::type
        my_generic_replace( ForwardReadableWriteableRange& c, const T& value, const T& replacement )
        {
           typename boost::range_iterator< ForwardReadableWriteableRange >::type found = find( c, value );

           if( found != boost::end( c ) )
               *found = replacement;
           return std::distance( boost::begin( c ), found );
        }

        //
        // usage 用法
        //
        const int N = 5;
        std::vector<int> my_vector;
        int values[] = { 1,2,3,4,5,6,7,8,9 };

        my_vector.assign( values, boost::end( values ) );
        typedef std::vector<int>::iterator iterator;
        std::pair<iterator,iterator>       my_view( boost::begin( my_vector ),
                                                    boost::begin( my_vector ) + N );
        char  str_val[] = "a string";
        char* str       = str_val;

        std::cout << my_generic_replace( my_vector, 4, 2 );
        std::cout << my_generic_replace( my_view, 4, 2 );
        std::cout << my_generic_replace( str, 'a', 'b' );

        // prints '3', '5' and '0'
``

By using the free-standing functions and __metafunctions__, the code automatically works for all the types supported by this library; now and in the future. Notice that we have to provide two versions of `find()` since we cannot forward a non-const rvalue with reference arguments (see this article about __the_forwarding_problem__ ).\n
通过使用独立函数和 __metafunctions__，这些代码可以自动用于本库支持的所有类型；现在以及将来。
注意，我们必须提供两个版本的 `find()`，因为我们不能将一个非常量右值前转到引用参数(有关 __the_forwarding_problem__，请见这篇文章)。

[endsect]

