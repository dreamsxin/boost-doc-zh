[section:adaptors Range Adaptors 区间适配器]

[section:introduction Introduction and motivation 介绍与动机]

A [*Range Adaptor] is a class that wraps an existing Range to provide a new Range with different behaviour. Since the behaviour of Ranges is determined by their associated iterators, a Range Adaptor simply wraps the underlying iterators with new special iterators. In this example\n
[*区间适配器] 是一个类，它对某个已有区间进行包装并提供具有不同行为的另一个新区间。
由于区间的行为是由它们的关联迭代器所决定的，所以区间适配器只是以新的特定迭代器对底层的迭代器进行包装。在以下例子中

``
#include <boost/range/adaptors.hpp>
#include <boost/range/algorithm.hpp>
#include <iostream>
#include <vector>

std::vector<int> vec;
boost::copy( vec | boost::adaptors::reversed,
             std::ostream_iterator<int>(std::cout) );
``

the iterators from `vec` are wrapped `reverse_iterator`s. The type of the underlying Range Adapter is not documented because you do not need to know it. All that is relevant is that the expression\n
来自 `vec` 的迭代器被包装为 `reverse_iterator`。底层的区间适配器并没有出现，因为你不需要知道它。所有相关的只是表达式

``
vec | boost::adaptors::reversed
``

returns a Range Adaptor where the iterator type is now the iterator type of the range `vec` wrapped in `reverse_iterator`. The expression `boost::adaptors::reversed` is called an *Adaptor Generator*.\n
它返回一个区间适配器，其中迭代器类型变为区间 `vec` 被包装为 `reverse_iterator` 的迭代器类型。
表达式 `boost::adaptors::reversed` 被称为 *适配器生成器*。

There are two ways of constructing a range adaptor. The first is by using `operator|()`. This is my preferred technique, however while discussing range adaptors with others it became clear that some users of the library strongly prefer a more familiar function syntax, so equivalent functions of the present tense form have been added as an alternative syntax. The equivalent to `rng | reversed` is `adaptors::reverse(rng)` for example.\n
有两种方法构造一个区间适配器。第一种方法是用 `operator|()`。这是我比较喜欢的方法，不过在与其他人讨论区间适配器时，
有些用户非常希望使用一种更常见的函数语法，所以增加了一种等效的函数形式作为另一种语法。例如，与 `rng | reversed` 
相等价的是 `adaptors::reverse(rng)`。

Why do I prefer the `operator|` syntax? The answer is readability:\n
我为什么喜欢 `operator|` 语法呢？答案是可读性：

``
std::vector<int> vec;
boost::copy( boost::adaptors::reverse(vec),
             std::ostream_iterator<int>(std::cout) );
``

This might not look so bad, but when we apply several adaptors, it becomes much worse. Just compare\n
这个看起来还不错，但如果我们要同时应用多个适配器，就会变得糟糕了。比较一下

``
std::vector<int> vec;
boost::copy( boost::adaptors::unique( boost::adaptors::reverse( vec ) ),
             std::ostream_iterator<int>(std::cout) );
``

to

``
std::vector<int> vec;
boost::copy( vec | boost::adaptors::reversed
                 | boost::adaptors::uniqued,
             std::ostream_iterator<int>(std::cout) );
``

Furthermore, some of the adaptor generators take arguments themselves and these arguments are expressed with function call notation too. In those situations, you will really appreciate the succinctness of `operator|()`.\n
此外，有些适配器生成器本身带有参数，这些参数也是以函数调用的形式出现的。在这种情形下，你就会喜欢 `operator|()` 的简洁了。

[heading Composition of Adaptors 适配器组合]

Range Adaptors are a powerful complement to Range algorithms. The reason is that adaptors are ['*orthogonal*] to algorithms. For example, consider these Range algorithms:\n
区间适配器是对区间算法的强大补充。其原因是，适配器与算法是 [*'正交*] 的。例如，考虑以下区间算法：

* `boost::copy( rng, out )`
* `boost::count( rng, pred )`

What should we do if we only want to copy an element `a` if it satisfies some predicate, say `pred(a)`? And what if we only want to count the elements that satisfy the same predicate? The naive answer would be to use these algorithms:\n
如果我们只想拷贝满足某种条件，如  `pred(a)`，的一个元素 `a`，该怎么办？还有，如果我们只想对满足某种条件的元素进行计数，又该如何？
幼稚的答案是使用以下算法：

* `boost::copy_if( rng, pred, out )`
* `boost::count_if( rng, pred )`

These algorithms are only defined to maintain a one to one relationship with the standard library algorithms. This approach of adding algorithm suffers a combinatorial explosion. Inevitably many algorithms are missing `_if` variants and there is redundant development overhead for each new algorithm. The Adaptor Generator is the design solution to this problem.\n
这些算法只是针对标准库的算法进行一对一的定义。这种增加算法的方法会导致组合爆炸。不可避免地，很多算法没有 `_if` 
的变体，而且对于每一个新算法都需要重复的开发。区间适配器就是设计用于解决这个问题的。

[heading Range Adaptor alternative to copy_if algorithm 区间适配器替代copy_if算法]
``
boost::copy_if( rng, pred, out );
``
can be expressed as\n
可以写为
``
boost::copy( rng | boost::adaptors::filtered(pred), out );
``

[heading Range Adaptor alternative to count_if algorithm 区间适配器替代count_if算法]
``
boost::count_if( rng, pred );
``
can be expressed as\n
可以写为
``
boost::count( rng | boost::adaptors::filtered(pred), out );
``

What this means is that ['*no*] algorithm with the `_if` suffix is needed. Furthermore, it turns out that algorithms with the `_copy` suffix are not needed either. Consider the somewhat misdesigned `replace_copy_if()` which may be used as\n
这意味着带 `_if` 后缀的算法['*不*]再需要了。此外，它可以令带 `_copy` 后缀的算法也不再需要了。
考虑某个设计得并不好的 `replace_copy_if()` 算法，可能的用法如下

``
std::vector<int> vec;
boost::replace_copy_if( rng, std::back_inserter(vec), pred );
``

With adaptors and algorithms we can express this as\n
有了适配器和算法，我们可以这样写

``
std::vector<int> vec;
boost::push_back(vec, rng | boost::adaptors::replaced_if(pred, new_value));
``

The latter code has several benefits:\n
后一段代码有几个好处：

1. it is more ['*efficient*] because we avoid extra allocations as might happen with `std::back_inserter`\n
1. 它更为['*高效*]，因为我们避免了使用 `std::back_inserter` 可能会发生的额外内存分配。

2. it is ['*flexible*] as we can subsequently apply even more adaptors, for example: \n
2. 它更为['*灵活*]，因为我们可以继续应用更多的适配器，例如``
boost::push_back(vec, rng | boost::adaptors::replaced_if(pred, new_value)
                          | boost::adaptors::reversed);
``

3. it is ['*safer*] because there is no use of an unbounded output iterator.\n
3. 它['*更为安全*]，因为无需使用未绑定的输出迭代器。

In this manner, the ['*composition*] of Range Adaptors has the following consequences:\n
在这种方式下，区间适配器的['*组合*]具有以下作用：

1. we no longer need `_if`, `_copy`, `_copy_if` and `_n` variants of algorithms.\n
1. 我们不再需要算法的 `_if`, `_copy`, `_copy_if` 和 `_n` 各种变体。

2. we can generate a multitude of new algorithms on the fly, for example, above we generated `reverse_replace_copy_if()`\n
2. 我们可以就地生成多个新算法，例如前面我们就生成了 `reverse_replace_copy_if()`

In other words:\n
换言之：

[*Range Adaptors are to algorithms what algorithms are to containers]\n
[*区间适配器对于算法的意义正如算法对于容器的意义]

[endsect]

[section:general_requirements General Requirements 基本要求]

In the description of generator expressions, the following notation is used:\n
在描述生成器表达式时，使用以下记号：

* `fwdRng` is an expression of a type `R` that models `ForwardRange`\n
  `fwdRng` 是一个类型为 `R` 的表达式，符合 `ForwardRange`
* `biRng` is an expression of a type `R` that models `BidirectionalRange`\n
  `biRng` 是一个类型为 `R` 的表达式，符合 `BidirectionalRange`
* `rndRng` is an expression of a type `R` that models `RandomAccessRange`\n
  `rndRng` 是一个类型为 `R` 的表达式，符合 `RandomAccessRange`
* `pred` is an expression of a type that models `UnaryPredicate`\n
  `pred` 是一个符合 `UnaryPredicate` 的类型的表达式
* `bi_pred` is an expression of a type that models `BinaryPredicate`\n
  `bi_pred` 是一个符合 `BinaryPredicate` 的类型的表达式
* `fun` is an expression of a type that models `UnaryFunction`\n
  `fun` 是一个 `UnaryFunction` 的类型的表达式
* `value`, `new_value` and `old_value` are objects convertible to `boost::range_value<R>::type`\n
  `value`, `new_value` 和 `old_value` 均为可转换为 `boost::range_value<R>::type` 的对象
* `n,m` are integer expressions convertible to `range_difference<R>::type`\n
  `n,m` 为可转换为 `range_difference<R>::type` 整数表达式

Also note that `boost::range_value<R>::type` must be implicitly convertible to the type arguments to `pred`, `bi_pred` and `fun`.\n
还要注意，`boost::range_value<R>::type` 必须可隐式转换为 `pred`, `bi_pred` 和 `fun` 的类型参数。

Range Category in the following adaptor descriptions refers to the minimum range concept required by the range passed to the adaptor. The resultant range is a model of the same range concept as the input range unless specified otherwise.\n
以下适配器说明中的区间类别为传递给该适配器的区间所要求的最小区间概念。结果区间则为输入区间的相同区间概念，除非有特别说明。

Returned Range Category is the concept of the returned range. In some cases the returned range is of a lesser category than the range passed to the adaptor. For example, the `filtered` adaptor returns only a `ForwardRange` regardless of the input.\n
返回的区间类别是所返回区间的概念。在某些情况下，所返回的区间与传入至适配器的区间相比是低一些的类别。
例如，`filtered` 适配器只能根据输入返回相对应的 `ForwardRange`。

Furthermore, the following rules apply to any expression of the form\n
另外，以下规则被应用于这种形式的表达式
``
rng | boost::adaptors::adaptor_generator
``

1. Applying `operator|()` to a range `R` (always left argument) and a range adapter `RA` (always right argument) yields a new range type which may not conform to the same range concept as `R`.\n
1. 将 `operator|()` 应用于区间 `R` (只能是左参数) 和区间适配器 `RA` (只能是右参数)，将生成一个新的区间类型，可能不符合 `R` 的区间概念。

2. The return-type of `operator|()` is otherwise unspecified.\n
2. `operator|()` 的返回类型是不确定的。

3. `operator|()` is found by Argument Dependent Lookup (ADL) because a range adaptor is implemented in namespace `boost::adaptors`.\n
3. `operator|()` 是用ADL来查找的，因为区间适配器的实现位于名字空间 `boost::adaptors` 中。

4. `operator|()` is used to add new behaviour ['*lazily*] and never modifies its left argument.\n
4. `operator|()` 用于['*延迟地*]增加新的行为，不会修改它的左参数。

5. All iterators extracted from the left argument are extracted using qualified calls to `boost::begin()` and `boost::end()`.\n
5. 从左参数取得的迭代器是通过对 `boost::begin()` 和 `boost::end()` 的限定调用获得的。

6. In addition to the `throw`-clauses below, `operator|()` may throw exceptions as a result of copying iterators. If such copying cannot throw an exception, then neither can the whole expression.\n
6. 除了 `throw`-子句以外，`operator|()` 还可能抛出异常作为迭代器复制的结果。如果此类复制不会抛出异常，则整个表达式也不会。

[endsect]

[section:reference Reference 参考手册]
[include adaptors/adjacent_filtered.qbk]
[include adaptors/copied.qbk]
[include adaptors/filtered.qbk]
[include adaptors/indexed.qbk]
[include adaptors/indirected.qbk]
[include adaptors/map_keys.qbk]
[include adaptors/map_values.qbk]
[include adaptors/replaced.qbk]
[include adaptors/replaced_if.qbk]
[include adaptors/reversed.qbk]
[include adaptors/sliced.qbk]
[include adaptors/strided.qbk]
[include adaptors/tokenized.qbk]
[include adaptors/transformed.qbk]
[include adaptors/uniqued.qbk]
[endsect]

[endsect]

