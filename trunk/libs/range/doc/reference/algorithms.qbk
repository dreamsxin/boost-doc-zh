[section:algorithms Range Algorithm 区间算法]

[section:range_algorithm_introduction Introduction and motivation 介绍与动机]
In its most simple form a [*Range Algorithm] (or range-based algorithm) is simply an iterator-based algorithm where the /two/ iterator arguments have been replaced by /one/ range argument. For example, we may write\n
在最简单的形式下，[*区间算法](或基于区间的算法)只是一个基于迭代器的算法，其中/两个/迭代器参数被替换为/一个/区间参数。例如，我们可以写

``
#include <boost/range/algorithm.hpp>
#include <vector>

std::vector<int> vec = ...;
boost::sort(vec);
``

instead of\n
来替代

``
std::sort(vec.begin(), vec.end());
``

However, the return type of range algorithms is almost always different from that of existing iterator-based algorithms.\n
但是，区间算法的返回类型几乎总是与已有的基于迭代器的算法有所不同。

One group of algorithms, like `boost::sort()`, will simply return the same range so that we can continue to pass the range around and/or further modify it. Because of this we may write\n
一组算法，如 `boost::sort()`，只是返回同一个区间，这样我们就可以继续将这个区间传递下去，或是进一步修改它。因此我们可以写
``
boost:unique(boost::sort(vec));
``
to first sort the range and then run `unique()` on the sorted range.\n
首先对区间进行排序，然后对排好序的区间执行 `unique()`。

Algorithms like `boost::unique()` fall into another group of algorithms that return (potentially) narrowed views of the original range. By default `boost::unique(rng)` returns the range `[boost::begin(rng), found)` where `found` denotes the iterator returned by `std::unique(boost::begin(rng), boost::end(rng))`\n
象 `boost::unique()` 这样的算法属于另一组算法，它们(有可能)返回原区间的一个较窄的视图。缺省地，`boost::unique(rng)` 返回区间 
`[boost::begin(rng), found)`，其中 `found` 表示 `std::unique(boost::begin(rng), boost::end(rng))` 所返回的迭代器。

Therefore exactly the unique values can be copied by writing\n
因此，实际上这些唯一的值可以通过以下方式来复制
``
boost::copy(boost::unique(boost::sort(vec)),
            std::ostream_iterator<int>(std::cout));
``

Algorithms like `boost::unique` usually return the same range: `[boost::begin(rng), found)`. However, this behaviour may be changed by supplying the algorithms with a template argument:\n
象 `boost::unique` 这样的算法通常返回相同的区间：`[boost::begin(rng), found)`。不过，该行为可以通过向算法提供一个模板参数来改变：

[table
    [[Expression 表达式] [Return 返回]]
    [[`boost::unique<boost::return_found>(rng)`] [returns a single iterator like `std::unique`\n
    象 `std::unique` 那样返回单个迭代器]]
    [[`boost::unique<boost::return_begin_found>(rng)`] [returns the range `[boost::begin(rng), found)` (this is the default)\n
    返回区间 `[boost::begin(rng), found)` (这是缺省行为)]]
    [[`boost::unique<boost::return_begin_next>(rng)`] [returns the range `[boost::begin(rng), boost::next(found))`\n
    返回区间 `[boost::begin(rng), boost::next(found))`]]
    [[`boost::unique<boost::return_found_end>(rng)`] [returns the range `[found, boost::end(rng))`\n
    返回区间 `[found, boost::end(rng))`]]
    [[`boost::unique<boost::return_next_end>(rng)`] [returns the range `[boost::next(found),boost::end(rng))`\n
    返回区间 `[boost::next(found),boost::end(rng))`]]
    [[`boost::unique<boost::return_begin_end>(rng)`] [returns the entire original range.\n
    返回整个原区间。]]
]

This functionality has the following advantages:\n
这个功能有以下好处：

# it allows for ['*seamless functional-style programming*] where you do not need to use named local variables to store intermediate results\n
  它允许 ['*无缝函数式编程*]，你无须使用命名的局部变量来保存中间结果
# it is very ['*safe*] because the algorithm can verify out-of-bounds conditions and handle tricky conditions that lead to empty ranges\n
  它非常 ['*安全*]，因为算法可以校验边界溢出的条件并处理引致空区间的特殊条件

For example, consider how easy we may erase the duplicates in a sorted container:\n
例如，我们可以很容易地删除一个有序容器中的重复元素：

``
std::vector<int> vec = ...;
boost::erase(vec, boost::unique<boost::return_found_end>(boost::sort(vec)));
``

Notice the use of `boost::return_found_end`. What if we wanted to erase all the duplicates except one of them? In old-fashined STL-programming we might write\n
留意 `boost::return_found_end` 的使用。如果我们想删除所有重复而保留其中一个，又该如何？在老式的STL编程中我们可以写

``
// assume 'vec' is already sorted  假设 `vec` 已排序
std::vector<int>::iterator i = std::unique(vec.begin(), vec.end());

// remember this check or you get into problems  记住检查这一点，否则会有问题
if (i != vec.end())
    ++i;

vec.erase(i, vec.end());
``

The same task may be accomplished simply with\n
同样的任务可以很简单地完成
``
boost::erase(vec, boost::unique<boost::return_next_end>(vec));
``
and there is no need to worry about generating an invalid range. Furthermore, if the container is complex, calling `vec.end()` several times will be more expensive than using a range algorithm.\n
而且不用担心生成无效的区间。此外，如果容器比较复杂，多次调用 `vec.end()` 会比使用区间算法更浪费。

[endsect]

[section:mutating Mutating algorithms 可写算法]
[include algorithm/copy.qbk]
[include algorithm/copy_backward.qbk]
[include algorithm/fill.qbk]
[include algorithm/fill_n.qbk]
[include algorithm/generate.qbk]
[include algorithm/inplace_merge.qbk]
[include algorithm/merge.qbk]
[include algorithm/nth_element.qbk]
[include algorithm/partial_sort.qbk]
[include algorithm/partition.qbk]
[include algorithm/random_shuffle.qbk]
[include algorithm/remove.qbk]
[include algorithm/remove_copy.qbk]
[include algorithm/remove_copy_if.qbk]
[include algorithm/remove_if.qbk]
[include algorithm/replace.qbk]
[include algorithm/replace_copy.qbk]
[include algorithm/replace_copy_if.qbk]
[include algorithm/replace_if.qbk]
[include algorithm/reverse.qbk]
[include algorithm/reverse_copy.qbk]
[include algorithm/rotate.qbk]
[include algorithm/rotate_copy.qbk]
[include algorithm/sort.qbk]
[include algorithm/stable_partition.qbk]
[include algorithm/stable_sort.qbk]
[include algorithm/swap_ranges.qbk]
[include algorithm/transform.qbk]
[include algorithm/unique.qbk]
[include algorithm/unique_copy.qbk]
[endsect]

[section:non_mutating Non-mutating algorithms 只读算法]
[include algorithm/adjacent_find.qbk]
[include algorithm/binary_search.qbk]
[include algorithm/count.qbk]
[include algorithm/count_if.qbk]
[include algorithm/equal.qbk]
[include algorithm/equal_range.qbk]
[include algorithm/for_each.qbk]
[include algorithm/find.qbk]
[include algorithm/find_end.qbk]
[include algorithm/find_first_of.qbk]
[include algorithm/find_if.qbk]
[include algorithm/lexicographical_compare.qbk]
[include algorithm/lower_bound.qbk]
[include algorithm/max_element.qbk]
[include algorithm/min_element.qbk]
[include algorithm/mismatch.qbk]
[include algorithm/search.qbk]
[include algorithm/search_n.qbk]
[include algorithm/upper_bound.qbk]
[endsect]

[section:set Set algorithms 集合算法]
[include algorithm/includes.qbk]
[include algorithm/set_union.qbk]
[include algorithm/set_intersection.qbk]
[include algorithm/set_difference.qbk]
[include algorithm/set_symmetric_difference.qbk]
[endsect]

[section:heap Heap algorithms 堆算法]
[include algorithm/push_heap.qbk]
[include algorithm/pop_heap.qbk]
[include algorithm/make_heap.qbk]
[include algorithm/sort_heap.qbk]
[endsect]

[section:permutation Permutation algorithms 排列算法]
[include algorithm/next_permutation.qbk]
[include algorithm/prev_permutation.qbk]
[endsect]

[section:new New algorithms 新算法]
[include algorithm_ext/copy_n.qbk]
[include algorithm_ext/erase.qbk]
[include algorithm_ext/for_each.qbk]
[include algorithm_ext/insert.qbk]
[include algorithm_ext/iota.qbk]
[include algorithm_ext/is_sorted.qbk]
[include algorithm_ext/overwrite.qbk]
[include algorithm_ext/push_back.qbk]
[include algorithm_ext/push_front.qbk]
[include algorithm_ext/remove_erase.qbk]
[include algorithm_ext/remove_erase_if.qbk]
[endsect]

[section:numeric Numeric algorithms 数字算法]
[include numeric/accumulate.qbk]
[include numeric/adjacent_difference.qbk]
[include numeric/inner_product.qbk]
[include numeric/partial_sum.qbk]
[endsect]

[endsect]

