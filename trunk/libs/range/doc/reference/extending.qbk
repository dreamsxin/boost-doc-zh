[section:extending Extending the library 扩展本库]

[section:method_1 Method 1: provide member functions and nested types 方法 1: 提供成员函数和嵌套类型]

This procedure assumes that you have control over the types that should be made conformant to a Range concept. If not, see [link range.reference.extending.method_2 method 2].\n
这个方法假定你可以控制要改编以符合区间概念的类型。如果不是这样，请看 [link range.reference.extending.method_2 方法 2]。

The primary templates in this library are implemented such that standard containers will work automatically and so will __boost_array__. Below is given an overview of which member functions and member types a class must specify to be useable as a certain Range concept.\n
本库的主模板的实现是要使得标准容器可以自动工作，也包括 __boost_array__. 
以下给出一个概览，一个类要可以作为区间概念使用，必须指定哪些成员函数和成员类型。

[table
  [[Member function 成员函数] [Related concept 相关概念]]
  [[`begin()`      ] [__single_pass_range__]]
  [[`end()`        ] [__single_pass_range__]]
]

Notice that `rbegin()` and `rend()` member functions are not needed even though the container can support bidirectional iteration.\n
注意，`rbegin()` 和 `rend()` 成员函数不是必须的，即使该容器支持双向迭代。

The required member types are:\n
要求的成员类型有：

[table
  [[Member type 成员类型] [Related concept 相关概念]]
  [[`iterator`      ] [__single_pass_range__]]
  [[`const_iterator`] [__single_pass_range__]]
]

Again one should notice that member types `reverse_iterator` and `const_reverse_iterator` are not needed.\n
再次提醒，成员类型 `reverse_iterator` 和 `const_reverse_iterator` 是不需要的。 

[endsect]

[section:method_2 Method 2: provide free-standing functions and specialize metafunctions 方法 2: 提供独立函数和特化的元函数]

This procedure assumes that you cannot (or do not wish to) change the types that should be made conformant to a Range concept. If this is not true, see [link range.reference.extending.method_1 method 1].\n
这一方法假定你不能(或不愿)修改要改编以符合区间概念的类型。如果不是这样，请看 [link range.reference.extending.method_1 方法 1]。

The primary templates in this library are implemented such that certain functions are found via argument-dependent-lookup (ADL). Below is given an overview of which free-standing functions a class must specify to be useable as a certain Range concept. Let `x` be a variable (`const` or `mutable`) of the class in question.\n
本库的主模板实现是要使得特定的函数可以被ADL查找得到。以下给出一个概览，一个类要可以作为区间概念使用，必须指定哪些独立函数。
其中 `x` 是该类的一个变量(`const` 或 `mutable`)。

[table
  [[Function 函数] [Related concept 相关概念]]
  [[`range_begin(x)`] [__single_pass_range__]]
  [[`range_end(x)`  ] [__single_pass_range__]]
]

`range_begin()` and `range_end()` must be overloaded for both `const` and `mutable` reference arguments.\n
`range_begin()` 和 `range_end()` 必须同时为 `const` 和 `mutable` 引用参数进行重载。 

You must also specialize two metafunctions for your type `X`:\n
你还必须为你的类型 `X` 特化2个元函数：

[table
  [[Metafunction 元函数] [Related concept 相关概念]]
  [[`boost::range_mutable_iterator`] [__single_pass_range__]]
  [[`boost::range_const_iterator`] [__single_pass_range__]]
]

A complete example is given here:\n
这里给出一个完整的例子：

``
    #include <boost/range.hpp>
    #include <iterator>         // for std::iterator_traits, std::distance()

    namespace Foo
    {
        //
        // Our sample UDT. A 'Pair'
        // will work as a range when the stored
        // elements are iterators.
        // 我们的 UDT 例子。一个 'Pair' 保存了    
        // 一对迭代器，可用为一个区间来使用。
        //
        template< class T >
        struct Pair
        {
            T first, last;
        };

    } // namespace 'Foo'

    namespace boost
    {
        //
        // Specialize metafunctions. We must include the range.hpp header.
        // We must open the 'boost' namespace.
        // 特化元函数。我们必须包含 range.hpp 头文件。    
        // 我们必须打开 'boost' 名字空间。
        //

    	template< class T >
    	struct range_mutable_iterator< Foo::Pair<T> >
    	{
    		typedef T type;
    	};

    	template< class T >
    	struct range_const_iterator< Foo::Pair<T> >
    	{
    		//
    		// Remark: this is defined similar to 'range_iterator'
    		//         because the 'Pair' type does not distinguish
    		//         between an iterator and a const_iterator.
            // 注：这个定义与 'range_mutable_iterator' 相同，因为 'Pair' 类型        
            //    无法区分 iterator 和 const_iterator.
    		//
    		typedef T type;
    	};

    } // namespace 'boost'

    namespace Foo
    {
    	//
    	// The required functions. These should be defined in
    	// the same namespace as 'Pair', in this case
    	// in namespace 'Foo'.
        // 要求的函数。应定义于 'Pair' 所在的名字空间，    
        // 在本例中即名字空间 'Foo'.
    	//

    	template< class T >
    	inline T range_begin( Pair<T>& x )
    	{
    		return x.first;
    	}

    	template< class T >
    	inline T range_begin( const Pair<T>& x )
    	{
    		return x.first;
    	}

    	template< class T >
    	inline T range_end( Pair<T>& x )
    	{
    		return x.last;
    	}

    	template< class T >
    	inline T range_end( const Pair<T>& x )
    	{
    		return x.last;
    	}

    } // namespace 'Foo'

    #include <vector>

    int main(int argc, const char* argv[])
    {
    	typedef std::vector<int>::iterator  iter;
    	std::vector<int>                    vec;
    	Foo::Pair<iter>                     pair = { vec.begin(), vec.end() };
    	const Foo::Pair<iter>&              cpair = pair;
    	//
    	// Notice that we call 'begin' etc with qualification.
        // 注意，我们以带限定符的方式调用 'begin' 等函数。
    	//
    	iter i = boost::begin( pair );
    	iter e = boost::end( pair );
    	i      = boost::begin( cpair );
    	e      = boost::end( cpair );
    	boost::range_difference< Foo::Pair<iter> >::type s = boost::size( pair );
    	s      = boost::size( cpair );
    	boost::range_reverse_iterator< const Foo::Pair<iter> >::type
    	ri     = boost::rbegin( cpair ),
    	re     = boost::rend( cpair );

    	return 0;
    }
``

[endsect]

[section:method_3 Method 3: provide range adaptor implementations 方法3：提供区间适配器实现]

[section:method_3_1 Method 3.1: Implement a Range Adaptor without arguments 方法3.1：实现一个无参数的区间适配器]

To implement a Range Adaptor without arguments (e.g. reversed) you need to:\n
要实现一个不带参数的区间适配器(例如：反向适配器)，你需要：

# Provide a range for your return type, for example:\n
  提供一个区间作为你的返回类型，例如：
``
#include <boost/range/iterator_range.hpp>
#include <boost/iterator/reverse_iterator.hpp>

template< typename R >
struct reverse_range :
    boost::iterator_range<
        boost::reverse_iterator<
            typename boost::range_iterator<R>::type> >
{
private:
    typedef boost::iterator_range<
        boost::reverse_iterator<
            typename boost::range_iterator<R>::type> > base;

public:
    typedef boost::reverse_iterator<
        typename boost::range_iterator<R>::type > iterator;

    reverse_range(R& r)
        : base(iterator(boost::end(r)), iterator(boost::begin(r)))
    { }
};
``

# Provide a tag to uniquely identify your adaptor in the `operator|` function overload set\n
  提供一个标签，在 `operator|` 函数重载集中唯一地标识你的适配器
``
namespace detail {
    struct reverse_forwarder {};
}
``

# Implement `operator|`\n
  实现 `operator|`
``
template< class BidirectionalRng >
inline reverse_range<BidirectionalRng>
operator|( BidirectionalRng& r, detail::reverse_forwarder )
{
	return reverse_range<BidirectionalRng>( r );
}

template< class BidirectionalRng >
inline reverse_range<const BidirectionalRng>
operator|( const BidirectionalRng& r, detail::reverse_forwarder )
{
	return reverse_range<const BidirectionalRng>( r );
}
``

[endsect]

[section:method_3_2 Method 3.2: Implement a Range Adaptor with arguments 方法3.2：实现一个带参数的区间适配器]

# Provide a range for your return type, for example:\n
  提供一个区间作为你的返回类型，例如：
``
#include <boost/range/adaptor/argument_fwd.hpp>
#include <boost/range/iterator_range.hpp>
#include <boost/iterator/transform_iterator.hpp>

template<typename Value>
class replace_value
{
public:
    typedef const Value& result_type;
    typedef const Value& argument_type;

    replace_value(const Value& from, const Value& to)
        : m_from(from), m_to(to)
    {
    }

    const Value& operator()(const Value& x) const
    {
        return (x == m_from) ? m_to : x;
    }
private:
    Value m_from;
    Value m_to;
};

template<typename Range>
class replace_range
: public boost::iterator_range<
    boost::transform_iterator<
        replace_value<typename boost::range_value<Range>::type>,
        typename boost::range_iterator<Range>::type> >
{
private:
    typedef typename boost::range_value<Range>::type value_type;
    typedef typename boost::range_iterator<Range>::type iterator_base;
    typedef replace_value<value_type> Fn;
    typedef boost::transform_iterator<Fn, iterator_base> replaced_iterator;
    typedef boost::iterator_range<replaced_iterator> base_t;

public:
    replace_range(Range& rng, value_type from, value_type to)
        : base_t(replaced_iterator(boost::begin(rng), Fn(from,to)),
                 replaced_iterator(boost::end(rng), Fn(from,to)))
     {
     }
 };
``

# Implement a holder class to hold the arguments required to construct the RangeAdaptor.\n
  实现一个持有者类来持有构造该区间适配器所需的参数。

The holder combines multiple parameters into one that can be passed as the right operand of `operator|()`.\n
这个持有者将多个参数组合为一个，以便作为 `operator|()` 的右操作数来传递。

``
template<typename T>
class replace_holder : public boost::range_detail::holder2<T>
{
public:
    replace_holder(const T& from, const T& to)
        : boost::range_detail::holder2<T>(from, to)
    { }
private:
    void operator=(const replace_holder&);
};
``

# Define an instance of the holder with the name of the adaptor\n
  以适配器的名字定义该持有者的一个实例

``
static boost::range_detail::forwarder2<replace_holder>
replaced = boost::range_detail::forwarder2<replace_holder>();
``

# Define `operator|`\n
  定义 `operator|`

``
template<typename SinglePassRange>
inline replace_range<SinglePassRange>
operator|(SinglePassRange& rng,
          const replace_holder<typename boost::range_value<SinglePassRange>::type>& f)
{
    return replace_range<SinglePassRange>(rng, f.val1, f.val2);
}

template<typename SinglePassRange>
inline replace_range<const SinglePassRange>
operator|(const SinglePassRange& rng,
          const replace_holder<typename boost::range_value<SinglePassRange>::type>& f)
{
    return replace_range<const SinglePassRange>(rng, f.val1, f.val2);
}
``

[endsect]

[endsect]

[endsect]

