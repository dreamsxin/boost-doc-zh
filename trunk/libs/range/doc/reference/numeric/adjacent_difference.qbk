[section:adjacent_difference adjacent_difference]

[heading Prototype 原型]

``
template<
    class SinglePassRange,
    class OutputIterator
    >
OutputIterator adjacent_difference(
    const SinglePassRange& source_rng,
    OutputIterator out_it);

template<
    class SinglePassRange,
    class OutputIterator,
    class BinaryOperation
    >
OutputIterator adjacent_difference(
    const SinglePassRange& source_rng,
    OutputIterator out_it,
    BinaryOperation op);
``

[heading Description 说明]

`adjacent_difference` calculates the differences of adjacent_elements in `rng`.\n
`adjacent_difference` 计算 `rng` 中相邻元素的差。

The first version of `adjacent_difference` uses `operator-()` to calculate the differences.
The second version uses `BinaryOperation` instead of `operator-()`.\n
第一个版本的 `adjacent_difference` 使用 `operator-()` 来计算差值。第二版本使用 `BinaryOperation` 代替 `operator-()`.

[heading Definition 定义]

Defined in the header file `boost/range/numeric.hpp`\n
定义于头文件 `boost/range/numeric.hpp` 中

[heading Requirements 要求]

[heading For the first version 对于第一个版本]

# `SinglePassRange` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange` 符合 __single_pass_range__ 概念。
# `OutputIterator` is a model of the `OutputIteratorConcept`.\n
  `OutputIterator` 符合 `OutputIteratorConcept`.
# If `x` and `y` are objects of `SinglePassRange`'s value type, then `x - y` is defined.\n
  如果 `x` 和 `y` 为 `SinglePassRange` 值类型的对象，则 `x - y` 有定义。
# The value type of `SinglePassRange` is convertible to a type in `OutputIterator`'s set of value types.\n
  `SinglePassRange` 的值类型可转换为 `OutputIterator` 的值类型集合中的某个类型。
# The return type of `x - y` is convertible to a type in `OutputIterator`'s set of value types.\n
  `x - y` 的返回类型可转换为 `OutputIterator` 的值类型集合中的某个类型。

[heading For the second version 对于第二个版本]

# `SinglePassRange` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange` 符合 __single_pass_range__ 概念。
# `OutputIterator` is a model of the `OutputIteratorConcept`.\n
  `OutputIterator` 符合 `OutputIteratorConcept`.
# `BinaryOperation` is a model of the `BinaryFunctionConcept`.\n
  `BinaryOperation` 符合 `BinaryFunctionConcept`.
# The value type of `SinglePassRange` is convertible to `BinaryOperation`'s first and second argument types.\n
  `SinglePassRange` 的值类型可转换为 `BinaryOperation` 的第一和第二参数类型。
# The value type of `SinglePassRange` is convertible to a type in `OutputIterator`'s set of value types.\n
  `SinglePassRange` 的值类型可转换为 `OutputIterator` 的值类型集合中的某个类型。
# The result type of `BinaryOperation` is convertible to a type in `OutputIterator`'s set of value types.\n
  `BinaryOperation` 的结果类型可转换为 `OutputIterator` 的值类型集合中的某个类型。

[heading Precondition: 前提条件：]

`[result, result + distance(rng))` is a valid range.\n
`[result, result + distance(rng))` 为有效区间。

[heading Complexity 复杂度]

Linear. If `empty(rng)` then zero applications, otherwise `distance(rng) - 1` applications are performed.\n
线性。如果 `empty(rng)` 则不执行运算，否则执行 `distance(rng) - 1` 次运算。

[endsect]
