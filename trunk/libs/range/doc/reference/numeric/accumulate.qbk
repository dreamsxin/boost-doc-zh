[section:accumulate accumulate]

[heading Prototype 原型]

``
template<
    class SinglePassRange,
    class Value
    >
Value accumulate(const SinglePassRange& source_rng,
                 Value init);

template<
    class SinglePassRange,
    class Value,
    class BinaryOperation
    >
Value accumulate(const SinglePassRange& source_rng,
                 Value init,
                 BinaryOperation op);
``

[heading Description 说明]

`accumulate` is a generalisation of summation. It computes a binary operation (`operator+`
in the non-predicate version) of `init` and all of the elements in `rng`.\n
`accumulate` 是求和运算的泛型形式。它对 `init` 和 `rng` 中的所有元素进行二元操作运算(对于不带谓词的版本则使用 `operator+`)。

The return value is the resultant value of the above algorithm.\n
返回值为上述算法的结果值。

[heading Definition 定义]

Defined in the header file `boost/range/numeric.hpp`\n
定义于头文件 `boost/range/numeric.hpp` 中

[heading Requirements 要求]

[heading For the first version 对于第一个版本]

# `SinglePassRange` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange` 符合 __single_pass_range__ 概念。
# `Value` is a model of the `AssignableConcept`.\n
  `Value` 符合 `AssignableConcept`.
# An `operator+` is defined for a left-hand operand of type `Value` and a right-hand operance of the `SinglePassRange` value type.\n
  定义有一个以 `Value` 类型作为左操作数且以 `SinglePassRange` 值类型作为右操作数的 `operator+`。
# The return type of the above operator is convertible to `Value`.\n
  上述操作符的返回类型可转换为 `Value`.

[heading For the second version 对于第二个版本]

# `SinglePassRange` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange` 符合 __single_pass_range__ 概念。
# `Value` is a model of the `AssignableConcept`.\n
  `Value` 符合 `AssignableConcept`.
# `BinaryOperation` is a model of the `BinaryFunctionConcept`.\n
  `BinaryOperation` 符合 `BinaryFunctionConcept`.
# `Value` is convertible to `BinaryOperation`'s first argument type.\n
  `Value` 可转换为 `BinaryOperation` 的第一参数类型。
# `SinglePassRange`'s value type is convertible to `BinaryOperation`'s second argument type.\n
  `SinglePassRange` 的值类型可转换为 `BinaryOperation` 的第二参数类型。
# The return type of `BinaryOperation` is convertible to `Value`.\n
  `BinaryOperation` 的返回类型可转换为 `Value`.

[heading Complexity 复杂度]

Linear. Exactly `distance(source_rng)`.\n
线性。正好 `distance(source_rng)` 次运算。

[endsect]
