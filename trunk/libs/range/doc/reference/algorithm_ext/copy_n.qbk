[section:copy_n copy_n]

[heading Prototype 原型]

``
template<class SinglePassRange, class Size, class OutputIterator>
OutputIterator copy_n(const SinglePassRange& rng, Size n, OutputIterator out);
``

[heading Description 说明]

`copy_n` is provided to completely replicate the standard algorithm header,
it is preferable to use Range Adaptors and the extension functions to achieve
the same result with greater safety.\n
`copy_n` 是为了完全替代标准算法的头文件，它优先使用区间适配器和扩展函数来以更好的安全性得到相同的结果。

`copy_n` copies elements from `[boost::begin(rng), boost::begin(rng) + n)` to the range `[out, out + n)`\n
`copy_n` 将来自 `[boost::begin(rng), boost::begin(rng) + n)` 的元素复制至区间 `[out, out + n)` 

[heading Definition 定义]

Defined in the header file `boost/range/algorithm_ext/copy_n.hpp`\n
定义于头文件 `boost/range/algorithm_ext/copy_n.hpp` 中

[heading Requirements 要求]

# `SinglePassRange` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange` 符合 __single_pass_range__ 概念。
# `Size` is a model of the `Integer` Concept.\n
  `Size` 符合 `Integer` 概念。
# `OutputIterator` is a model of the `OutputIteratorConcept`.\n
  `OutputIterator` 符合 `OutputIteratorConcept`.

[heading Complexity 复杂度]

Linear. Exactly `n` elements are copied.\n
线性。正好复制 `n` 个元素。

[endsect]
