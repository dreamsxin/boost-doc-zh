[section:inplace_merge inplace_merge]

[heading Prototype 原型]

``
template<class BidirectionalRange>
BidirectionalRange&
inplace_merge( BidirectionalRange& rng,
               typename range_iterator<BidirectionalRange>::type middle );

template<class BidirectionalRange>
const BidirectionalRange&
inplace_merge( const BidirectionalRange& rng,
               typename range_iterator<const BidirectionalRange>::type middle );

template<class BidirectionalRange, class BinaryPredicate>
BidirectionalRange&
inplace_merge( BidirectionalRange& rng,
               typename range_iterator<BidirectionalRange>::type middle,
               BinaryPredicate pred );

template<class BidirectionalRange, class BinaryPredicate>
const BidirectionalRange&
inplace_merge( const BidirectionalRange& rng,
               typename range_iterator<const BidirectionalRange>::type middle,
               BinaryPredicate pred );
``

[heading Description 说明]

`inplace_merge` combines two consecutive sorted ranges `[begin(rng), middle)` and `[middle, end(rng))` into a single sorted range `[begin(rng), end(rng))`. That is, it starts with a range `[begin(rng), end(rng))` that consists of two pieces each of which is in ascending order, and rearranges it so that the entire range is in ascending order. `inplace_merge` is stable, meaning both that the relative order of elements within each input range is preserved.\n
`inplace_merge` 将两个相连的有序区间 `[begin(rng), middle)` 和 `[middle, end(rng))` 组合成单个有序区间 `[begin(rng), end(rng))`。
即开始时有一个区间 `[begin(rng), end(rng))`，由两段组成，每段都是增序的，对其进行重排，使得整个区间变为增序。
`inplace_merge` 是稳定的，即每个输入区间中的元素的相对顺序被保留。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/inplace_merge.hpp`\n
定义于头文件 `boost/range/algorithm/inplace_merge.hpp` 中

[heading Requirements 要求]

[*For the non-predicate version: 对于不带谓词的版本：]

* `BidirectionalRange` is a model of the __bidirectional_range__ Concept.\n
  `BidirectionalRange` 符合 __bidirectional_range__ 概念。
* `BidirectionalRange` is mutable.\n
  `BidirectionalRange` 可写。
* `range_value<BidirectionalRange>::type` is a model of `LessThanComparableConcept`\n
  `range_value<BidirectionalRange>::type` 符合 `LessThanComparableConcept`
* The ordering on objects of `range_type<BidirectionalRange>::type` is a [*/strict weak ordering/], as defined in the `LessThanComparableConcept` requirements.\n
  `range_type<BidirectionalRange>::type` 的对象顺序是一种 [*/严格弱序/]，正如 `LessThanComparableConcept` 要求中所定义的。

[*For the predicate version: 对于带谓词的版本：]
* `BidirectionalRange` is a model of the __bidirectional_range__ Concept..\n
  `BidirectionalRange` 符合 __bidirectional_range__ 概念。
* `BidirectionalRange` is mutable.\n
  `BidirectionalRange` 可写。
* `BinaryPredicate` is a model of the `StrictWeakOrderingConcept`.\n
  `BinaryPredicate` 符合 `StrictWeakOrderingConcept`.
* `BidirectionalRange`'s value type is convertible to both `BinaryPredicate`'s argument types.\n
  `BidirectionalRange` 的值类型可转换为 `BinaryPredicate` 的两个参数类型。

[heading Precondition: 前提条件：]

[heading For the non-predicate version: 对于不带谓词的版本：]

* `middle` is in the range `rng`.\n
  `middle` 在区间 `rng` 中。
* `[begin(rng), middle)` is in ascending order. That is for each pair of adjacent elements `[x,y]`, `y < x` is `false`.\n
  `[begin(rng), middle)` 为增序。即对于每一对相邻元素 `[x,y]`, `y < x` 为 `false`.
* `[middle, end(rng))` is in ascending order. That is for each pair of adjacent elements `[x,y]`, `y < x` is `false`.\n
  `[middle, end(rng))` 为增序。即对于每一对相邻元素 `[x,y]`, `y < x` 为 `false`.

[heading For the predicate version: 对于带谓词的版本：]

* `middle` is in the range `rng`.\n
  `middle` 在区间 `rng` 中。
* `[begin(rng), middle)` is in ascending order. That is for each pair of adjacent elements `[x,y]`, `pred(y,x) == false`.\n
  `[begin(rng), middle)` 为增序。即对于每一对相邻元素 `[x,y]`, `pred(y,x) == false`.
* `[middle, end(rng))` is in ascending order. That is for each pair of adjacent elements `[x,y]`, `pred(y,x) == false`.\n
  `[middle, end(rng))` 为增序。即对于每一对相邻元素 `[x,y]`, `pred(y,x) == false`.

[heading Complexity 复杂度]

Worst case: `O(N log(N))`\n
最坏情况下：`O(N log(N))`

[endsect]


