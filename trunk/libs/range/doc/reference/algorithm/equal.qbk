[section:equal equal]

[heading Prototype 原型]

``
template<
    class SinglePassRange1,
    class SinglePassRange2
>
bool equal(const SinglePassRange1& rng1,
           const SinglePassRange2& rng2);

template<
    class SinglePassRange1,
    class SinglePassRange2,
    class BinaryPredicate
>
bool equal(const SinglePassRange1& rng1,
           const SinglePassRange2& rng2,
           BinaryPredicate         pred);
``

[heading Description 说明]

`equal` returns `true` if `distance(rng1)` is equal to the `distance(rng2)` and for each element `x` in `rng1`, the corresponding element `y` in `rng2` is equal. Otherwise `false` is returned.\n
`equal` 返回 `true` 如果 `distance(rng1)` 等于 `distance(rng2)` 且对于 `rng1` 中的每一个元素 `x`，`rng2` 中的对应元素 `y` 与之相等。
否则返回 `false`。

In this range version of `equal` it is perfectly acceptable to pass in two ranges of unequal lengths.\n
在 `equal` 的区间版本中，它可以接受长度不等的两个区间。

Elements are considered equal in the non-predicate version if `operator==` returns `true`. Elements are considered equal in the predicate version if `pred(x,y)` is `true`.\n
在不带谓词的版本中，如果 `operator==` 返回 `true` 就说两个元素相等。在带谓词的版本中，如果 `pred(x,y)` is `true` 则说两个元素相等。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/equal.hpp`\n
定义于头文件 `boost/range/algorithm/equal.hpp` 中

[heading Requirements 要求]

[*For the non-predicate versions: 对于不带谓词的版本：]

* `SinglePassRange1` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange1` 符合 __single_pass_range__ 概念。
* `SinglePassRange2` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange2` 符合 __single_pass_range__ 概念。
* `SinglePassRange1`'s value type is a model of the `EqualityComparableConcept`.\n
  `SinglePassRange1` 的值类型符合 `EqualityComparableConcept`.
* `SinglePassRange2`'s value type is a model of the `EqualityComparableConcept`.\n
  `SinglePassRange2` 的值类型符合 `EqualityComparableConcept`.
* `SinglePassRange1`'s value type can be compared for equality with `SinglePassRange2`'s value type.\n
  `SinglePassRange1` 的值类型可以与 `SinglePassRange2` 的值类型进行相等性比较。

[*For the predicate versions: 对于带谓词的版本：]

* `SinglePassRange1` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange1` 符合 __single_pass_range__ 概念。
* `SinglePassRange2` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange2` 符合 __single_pass_range__ 概念。
* `BinaryPredicate` is a model of the `BinaryPredicateConcept`.\n
  `BinaryPredicate` 符合 `BinaryPredicateConcept`.
* `SinglePassRange1`'s value type is convertible to `BinaryPredicate`'s first argument type.\n
  `SinglePassRange1` 的值类型可以转换为 `BinaryPredicate` 的第一参数类型。
* `SinglePassRange2`'s value type is convertible to `BinaryPredicate`'s second argument type.\n
  `SinglePassRange2` 的值类型可以转换为 `BinaryPredicate` 的第二参数类型。

[heading Complexity 复杂度]

Linear. At most `min(distance(rng1), distance(rng2))` comparisons.\n
线性。最多 `min(distance(rng1), distance(rng2))` 次比较。

[endsect]


