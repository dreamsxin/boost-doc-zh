[section:binary_search binary_search]

[heading Prototype 原型]

``
template<class ForwardRange, class Value>
bool binary_search(const ForwardRange& rng, const Value& val);

template<class ForwardRange, class Value, class BinaryPredicate>
bool binary_search(const ForwardRange& rng, const Value& val, BinaryPredicate pred);
``

[heading Description 说明]

`binary_search` returns `true` if and only if the value `val` exists in the range `rng`.\n
`binary_search` 返回 `true` 当且仅当值 `val` 存在于区间 `rng` 中。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/binary_search.hpp`\n
定义于头文件 `boost/range/algorithm/binary_search.hpp` 中

[heading Requirements 要求]

[*For the non-predicate versions of binary_search: 对于不带谓词的版本：]

* `ForwardRange` is a model of the __forward_range__ Concept.\n
  `ForwardRange` 符合 __forward_range__ 概念。
* `Value` is a model of the `LessThanComparableConcept`.\n
  `Value` 符合 `LessThanComparableConcept`.
* The ordering of objects of type `Value` is a [*/strict weak ordering/], as defined in the `LessThanComparableConcept` requirements.\n
  `Value` 类型的对象的顺序为 [*/严格弱序/]，如 `LessThanComparableConcept` 要求中所定义的。
* `ForwardRange`'s value type is the same type as `Value`.\n
  `ForwardRange` 的值类型与 `Value` 为同一类型。

[*For the predicate versions of binary_search: 对于带谓词的版本：]

* `ForwardRange` is a model of the __forward_range__ Concept.\n
  `ForwardRange` 符合 __forward_range__ 概念。
* `BinaryPredicate` is a model of the `StrictWeakOrderingConcept`.\n
  `BinaryPredicate` 符合 `StrictWeakOrderingConcept`.
* `ForwardRange`'s value type is the same type as `Value`.\n
  `ForwardRange` 的值类型与 `Value` 为同一类型。
* `ForwardRange`'s value type is convertible to `BinaryPredicate`'s argument type.\n
  `ForwardRange` 的值类型可转换为 `BinaryPredicate` 的参数类型。

[heading Precondition: 前提条件：]

[*For the non-predicate version: 对于不带谓词的版本：]

`rng` is ordered in ascending order according to `operator<`.\n
`rng` 是按 `operator<` 排好的升序。

[*For the predicate version: 对于带谓词的版本：]

`rng` is ordered in ascending order according to the function object `pred`.\n
`rng` 是按函数对象 `pred` 排好的升序。

[heading Complexity 复杂度]

For non-random-access ranges, the complexity is `O(N)` where `N` is `distance(rng)`.\n
对于非随机访问区间，复杂度为 `O(N)`，其中 `N` 为 `distance(rng)`。

For random-access ranges, the complexity is `O(log N)` where `N` is `distance(rng)`.\n
对于随机访问区间，复杂度为 `O(log N)`，其中 `N` 为 `distance(rng)`。

[endsect]


