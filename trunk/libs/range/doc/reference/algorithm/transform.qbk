[section:transform transform]

[heading Prototype 原型]

``
template<
    class SinglePassRange1,
    class OutputIterator,
    class UnaryOperation
>
OutputIterator transform(const SinglePassRange1& rng,
                         OutputIterator out,
                         UnaryOperation fun);

template<
    class SinglePassRange1,
    class SinglePassRange2,
    class OutputIterator,
    class BinaryOperation
>
OutputIterator transform(const SinglePassRange1& rng1,
                         const SinglePassRange2& rng2,
                         OutputIterator out,
                         BinaryOperation fun);
``

[heading Description 说明]

[*UnaryOperation version: 单操作数版本：]

`transform` assigns the value `y` to each element `[out, out + distance(rng)), y = fun(x)` where `x` is the corresponding value to `y` in `rng1`. The return value is `out + distance(rng)`.\n
`transform` 将值 `y` 赋给每一个元素 `[out, out + distance(rng)), y = fun(x)` 其中 `x` 为 `rng1` 中与 `y` 对应的值。
返回值为 `out + distance(rng)`.

[*BinaryOperation version: 双操作数版本：]

`transform` assigns the value `z` to each element `[out, out + min(distance(rng1), distance(rng2))), z = fun(x,y)` where `x` is the corresponding value in `rng1` and `y` is the corresponding value in `rng2`. This version of `transform` stops upon reaching either the end of `rng1`, or the end of `rng2`. Hence there isn't a requirement for `distance(rng1) == distance(rng2)` since there is a safe guaranteed behaviour, unlike with the iterator counterpart in the standard library.\n
`transform` 将值 `z` 赋给每一个元素 `[out, out + min(distance(rng1), distance(rng2))), z = fun(x,y)` 其中 `x` 为 `rng1` 
中的对应值，而 `y` 为 `rng2` 中的对应值。这个版本的 `transform` 在到达 `rng1` 或 `rng2` 的结尾时停止。
所以不要求 `distance(rng1) == distance(rng2)`，因为这是有安全保证的行为，不象标准库中使用迭代器的那个版本。

The return value is `out + min(distance(rng1), distance(rng2))`.\n
返回值为 `out + min(distance(rng1), distance(rng2))`.

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/transform.hpp`\n
定义于头文件 `boost/range/algorithm/transform.hpp` 中

[heading Requirements 要求]

[*For the unary versions of transform: 对于单参数版本的transform:]

* `SinglePassRange1` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange1` 符合 __single_pass_range__ 概念。
* `OutputIterator` is a model of the `OutputIteratorConcept`.\n
  `OutputIterator` 符合 `OutputIteratorConcept`.
* `UnaryOperation` is a model of the `UnaryFunctionConcept`.\n
  `UnaryOperation` 符合 `UnaryFunctionConcept`.
* `SinglePassRange1`'s value type must be convertible to `UnaryFunction`'s argument type.\n
  `SinglePassRange1` 的值类型必须可转换为 `UnaryFunction` 的参数类型。
* `UnaryFunction`'s result type must be convertible to a type in `OutputIterator`'s set of value types.\n
  `UnaryFunction` 的结果类型必须可转换为 `OutputIterator` 的值类型集合中的某个类型。

[*For the binary versions of transform: 对于双参数版本的transform:]

* `SinglePassRange1` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange1` 符合 __single_pass_range__ 概念。
* `SinglePassRange2` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange2` 符合 __single_pass_range__ 概念。
* `OutputIterator` is a model of the `OutputIteratorConcept`.\n
  `OutputIterator` 符合 `OutputIteratorConcept`.
* `BinaryOperation` is a model of the `BinaryFunctionConcept`.\n
  `BinaryOperation` 符合 `BinaryFunctionConcept`.
* `SinglePassRange1`'s value type must be convertible to `BinaryFunction`'s first argument type.\n
  `SinglePassRange1` 的值类型必须可转换为 `BinaryFunction` 的第一参数类型。
* `SinglePassRange2`'s value type must be convertible to `BinaryFunction`'s second argument type.\n
  `SinglePassRange2` 的值类型必须可转换为 `BinaryFunction` 的第二参数类型。
* `BinaryOperation`'s result type must be convertible to a type in `OutputIterator`'s set of value types.\n
  `BinaryOperation` 的结果类型必须可转换为 `OutputIterator` 的值类型集合中的某个类型。

[heading Precondition: 前提条件：]

[*For the unary version of transform: 对于单参数版本的transform:]

* `out` is not an iterator within the range `[begin(rng1) + 1, end(rng1))`.\n
  `out` 不是区间 `[begin(rng1) + 1, end(rng1))` 内的迭代器。
* `[out, out + distance(rng1))` is a valid range.\n
  `[out, out + distance(rng1))` 是有效区间。

[*For the binary version of transform: 对于双参数版本的transform:]

* `out` is not an iterator within the range `[begin(rng1) + 1, end(rng1))`.\n
  `out` 不是区间 `[begin(rng1) + 1, end(rng1))` 内的迭代器。
* `out` is not an iterator within the range `[begin(rng2) + 1, end(rng2))`.\n
  `out` 不是区间 `[begin(rng2) + 1, end(rng2))` 内的迭代器。
* `[out, out + min(distance(rng1), distance(rng2)))` is a valid range.\n
  `[out, out + min(distance(rng1), distance(rng2)))` 是有效区间。


[heading Complexity 复杂度]

Linear. The operation is applied exactly `distance(rng1)` for the unary version and `min(distance(rng1), distance(rng2))` for the binary version.\n
线性。该操作的单参数版本正好执行 `distance(rng1)` 次，双参数版本执行 `min(distance(rng1), distance(rng2))` 次。

[endsect]


