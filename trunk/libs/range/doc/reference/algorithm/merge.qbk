[section:merge merge]

[heading Prototype 原型]

``
template<
    class SinglePassRange1,
    class SinglePassRange2,
    class OutputIterator
    >
OutputIterator merge(const SinglePassRange1& rng1,
                     const SinglePassRange2& rng2,
                     OutputIterator          out);

template<
    class SinglePassRange1,
    class SinglePassRange2,
    class OutputIterator,
    class BinaryPredicate
    >
OutputIterator merge(const SinglePassRange1& rng1,
                     const SinglePassRange2& rng2,
                     OutputIterator          out,
                     BinaryPredicate         pred);
``

[heading Description 说明]

`merge` combines two sorted ranges `rng1` and `rng2` into a single sorted range by copying elements. `merge` is stable. The return value is `out + distance(rng1) + distance(rng2)`.\n
`merge` 通过复制元素将两个有序区间 `rng1` 和 `rng2` 合并为单个有序区间。`merge` 是稳定的。返回值为 `out + distance(rng1) + distance(rng2)`.

The two versions of `merge` differ by how they compare the elements.\n
`merge` 的两个版本的区别在于如何对元素进行比较。

The non-predicate version uses the `operator<()` for the range value type. The predicate version uses the predicate instead of `operator<()`.\n
不带谓词的版本使用区间值类型的 `operator<()`。带谓词的版本则使用给定的谓词来替代 `operator<()`。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/merge.hpp`\n
定义于头文件 `boost/range/algorithm/merge.hpp` 中

[heading Requirements 要求]

[*For the non-predicate version: 对于不带谓词的版本：]

* `SinglePassRange1` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange1` 符合 __bidirectional_range__ 概念。
* `SinglePassRange2` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange2` 符合 __bidirectional_range__ 概念。
* `range_value<SinglePassRange1>::type` is the same as `range_value<SinglePassRange2>::type`.\n
  `range_value<SinglePassRange1>::type` 与 `range_value<SinglePassRange2>::type` 相同。
* `range_value<SinglePassRange1>::type` is a model of the `LessThanComparableConcept`.\n
  `range_value<SinglePassRange1>::type` 符合 `LessThanComparableConcept`.
* The ordering on objects of `range_value<SinglePassRange1>::type` is a [*/strict weak ordering/], as defined in the `LessThanComparableConcept` requirements.\n
  `range_type<SinglePassRange1>::type` 的对象顺序是一种 [*/严格弱序/]，正如 `LessThanComparableConcept` 要求中所定义的。
* `range_value<SinglePassRange1>::type` is convertible to a type in `OutputIterator`'s set of value types.\n
  `range_value<SinglePassRange1>::type` 可转换为 `OutputIterator` 值类型集合中的某个类型。

[*For the predicate version: 对于带谓词的版本：]

* `SinglePassRange1` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange1` 符合 __bidirectional_range__ 概念。
* `SinglePassRange2` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange2` 符合 __bidirectional_range__ 概念。
* `range_value<SinglePassRange1>::type` is the same as `range_value<SinglePassRange2>::type`.\n
  `range_value<SinglePassRange1>::type` 与 `range_value<SinglePassRange2>::type` 相同。
* `BinaryPredicate` is a model of the `StrictWeakOrderingConcept`.\n
  `BinaryPredicate` 符合 `StrictWeakOrderingConcept`.
* `SinglePassRange1`'s value type is convertible to both `BinaryPredicate`'s argument types.\n
  `SinglePassRange1` 的值类型可转换为 `BinaryPredicate` 的两个参数类型。
* `range_value<SinglePassRange1>::type` is convertible to a type in `OutputIterator`'s set of value types.\n
  `range_value<SinglePassRange1>::type` 可转换为 `OutputIterator` 值类型集合中的某个类型。

[heading Precondition: 前提条件：]

[heading For the non-predicate version: 对于不带谓词的版本：]

* The elements of `rng1` are in ascending order. That is, for each adjacent element pair `[x,y]` of `rng1`, `y < x == false`.\n
  `rng1` 的元素为增序。即对于每一对相邻元素 `[x,y]`, `y < x` 为 `false`.
* The elements of `rng2` are in ascending order. That is, for each adjacent element pair `[x,y]` of `rng2`, `y < x == false`.\n
  `rng2` 的元素为增序。即对于每一对相邻元素 `[x,y]`, `y < x` 为 `false`.
* The ranges `rng1` and `[out, out + distance(rng1) + distance(rng2))` do not overlap.\n
  区间 `rng1` 和 `[out, out + distance(rng1) + distance(rng2))` 不重叠。
* The ranges `rng2` and `[out, out + distance(rng1) + distance(rng2))` do not overlap.\n
  区间 `rng2` 和 `[out, out + distance(rng1) + distance(rng2))` 不重叠。
* `[out, out + distance(rng1) + distance(rng2))` is a valid range.\n
  `[out, out + distance(rng1) + distance(rng2))` 为有效区间。

[heading For the predicate version: 对于带谓词的版本：]

* The elements of `rng1` are in ascending order. That is, for each adjacent element pair `[x,y]`, of `rng1`, `pred(y, x) == false`.\n
  `rng1` 的元素为增序。即对于每一对相邻元素 `[x,y]`, `pred(y, x) == false`.
* The elements of `rng2` are in ascending order. That is, for each adjacent element pair `[x,y]`, of `rng2`, `pred(y, x) == false`.\n
  `rng2` 的元素为增序。即对于每一对相邻元素 `[x,y]`, `pred(y, x) == false`.
* The ranges `rng1` and `[out, out + distance(rng1) + distance(rng2))` do not overlap.\n
  区间 `rng1` 和 `[out, out + distance(rng1) + distance(rng2))` 不重叠。
* The ranges `rng2` and `[out, out + distance(rng1) + distance(rng2))` do not overlap.\n
  区间 `rng2` 和 `[out, out + distance(rng1) + distance(rng2))` 不重叠。
* `[out, out + distance(rng1) + distance(rng2))` is a valid range.\n
  `[out, out + distance(rng1) + distance(rng2))` 为有效区间。

[heading Complexity 复杂度]

Linear. There are no comparisons if both `rng1` and `rng2` are empty, otherwise at most `distance(rng1) + distance(rng2) - 1` comparisons.\n
线性。如果 `rng1` 和 `rng2` 均为空则无须比较，否则最多 `distance(rng1) + distance(rng2) - 1` 次比较。

[endsect]


