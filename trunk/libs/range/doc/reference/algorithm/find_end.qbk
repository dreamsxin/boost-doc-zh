[section:find_end find_end]

[heading Prototype 原型]

``
template<class ForwardRange1, class ForwardRange2>
typename range_iterator<ForwardRange1>::type
find_end(ForwardRange1& rng1, const ForwardRange2& rng2);

template<
    class ForwardRange1,
    class ForwardRange2,
    class BinaryPredicate
    >
typename range_iterator<ForwardRange1>::type
find_end(ForwardRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred);

template<
    range_return_value re,
    class ForwardRange1,
    class ForwardRange2
    >
typename range_return<ForwardRange1, re>::type
find_end(ForwardRange1& rng1, const ForwardRange2& rng2);

template<
    range_return_value re,
    class ForwardRange1,
    class ForwardRange2,
    class BinaryPredicate
    >
typename range_return<ForwardRange1, re>::type
find_end(ForwardRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred);
``

[heading Description 说明]

The versions of `find_end` that return an iterator, return an iterator to the beginning of the last sub-sequence equal to `rng2` within `rng1`.
Equality is determined by `operator==` for non-predicate versions of `find_end`, and by satisfying `pred` in the predicate versions. The versions of `find_end` that return a `range_return`, defines `found` in the same manner as the returned iterator described above.\n
返回迭代器的 `find_end` 版本返回一个迭代器，指向 `rng1` 内等于 `rng2` 的最后一个子序列的开始。
对于不带谓词的 `find_end` 版本，相等性由 `operator==` 确定，在带谓词的版本中则由 `pred` 确定。
返回 `range_return` 的 `find_end` 版本则以上述相同风格定义 `found`。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/find_end.hpp`\n
定义于头文件 `boost/range/algorithm/find_end.hpp` 中

[heading Requirements 要求]

[*For the non-predicate versions: 对于不带谓词的版本：]

* `ForwardRange1` is a model of the __forward_range__ Concept.\n
  `ForwardRange1` 符合 __forward_range__ 概念。
* `ForwardRange2` is a model of the __forward_range__ Concept.\n
  `ForwardRange2` 符合 __forward_range__ 概念。
* `ForwardRange1`'s value type is a model of the `EqualityComparableConcept`.\n
  `ForwardRange1` 的值类型符合 `EqualityComparableConcept`.
* `ForwardRange2`'s value type is a model of the `EqualityComparableConcept`.\n
  `ForwardRange2` 的值类型符合 `EqualityComparableConcept`.
* Objects of `ForwardRange1`'s value type can be compared for equality with objects of `ForwardRange2`'s value type.\n
  `ForwardRange1` 值类型的对象可以与 `ForwardRange2` 值类型的对象进行相等性比较。

[*For the predicate versions: 对于带谓词的版本：]

* `ForwardRange1` is a model of the __forward_range__ Concept.\n
  `ForwardRange1` 符合 __forward_range__ 概念。
* `ForwardRange2` is a model of the __forward_range__ Concept.\n
  `ForwardRange2` 符合 __forward_range__ 概念。
* `BinaryPredicate` is a model of the `BinaryPredicateConcept`. \n
  `BinaryPredicate` 符合 `BinaryPredicateConcept`.
* `ForwardRange1`'s value type is convertible to `BinaryPredicate`'s first argument type.\n
  `ForwardRange1` 的值类型可转换为 `BinaryPredicate` 的第一参数类型。
* `ForwardRange2`'s value type is convertible to `BinaryPredicate`'s second argument type.\n
  `ForwardRange2` 的值类型可转换为 `BinaryPredicate` 的第二参数类型。

[heading Complexity 复杂度]

The number of comparisons is proportional to `distance(rng1) * distance(rng2)`. If both `ForwardRange1` and `ForwardRange2` are models of `BidirectionalRangeConcept` then the average complexity is linear and the worst case is `distance(rng1) * distance(rng2)`.\n
比较的次数正比于 `distance(rng1) * distance(rng2)`。如果 `ForwardRange1` 和 `ForwardRange2` 都符合 
`BidirectionalRangeConcept`，则平均复杂度为线性，且最坏情况为 `distance(rng1) * distance(rng2)`.

[endsect]


