[section:generate generate]

[heading Prototype 原型]

``
template<class ForwardRange, class Generator>
ForwardRange& generate( ForwardRange& rng, Generator gen );

template<class ForwardRange, class Generator>
const ForwardRange& generate( const ForwardRange& rng, Generator gen );
``

[heading Description 说明]

`generate` assigns the result of `gen()` to each element in range `rng`. Returns the resultant range.\n
`generate` 将 `gen()` 的结果赋值给区间 `rng` 中的每一个元素。返回结果区间。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/generate.hpp`\n
定义于头文件 `boost/range/algorithm/generate.hpp` 中

[heading Requirements 要求]

* `ForwardRange` is a model of the __forward_range__ Concept.\n
  `ForwardRange` 符合 __forward_range__ 概念。
* `ForwardRange` is mutable.\n
  `ForwardRange` 可写。
* `Generator` is a model of the `GeneratorConcept`.\n
  `Generator` 符合 `GeneratorConcept`.
* The `value_type` of `SinglePassRange` is convertible to a type in `OutputIterator`'s set of value types.\n
  `SinglePassRange` 的 `value_type` 可转换为 `OutputIterator` 的值类型集合中的某个类型。

[heading Precondition: 前提条件]

* `out_it` is not an iterator within `rng`.\n
  `out_it` 不是 `rng` 内的一个迭代器。
* `[out_it, out_it + distance(rng))` is a valid range.\n
  `[out_it, out_it + distance(rng))` 是一个有效区间。

[heading Complexity 复杂度]

Linear. Exactly `distance(rng)` assignments are performed.\n
线性。正好执行 `distance(rng)` 次赋值。

[endsect]


