[section:copy_backward copy_backward]

[heading Prototype 原型]

``
template<class BidirectionalRange, class BidirectionalOutputIterator>
    BidirectionalOutputIterator
        copy_backward(const BidirectionalRange& source_rng,
                      BidirectionalOutputIterator out_it);
``

[heading Description 说明]

`copy_backward` copies all elements from `source_rng` to the range `[out_it - distance(source_rng), out_it)`.\n
`copy_backward` 将 `source_rng` 的所有元素复制到区间 `[out_it - distance(source_rng), out_it)`.

The values are copied in reverse order. The return value is `out_it - distance(source_rng)`.\n
所有元素以反序复制。返回值为 `out_it - distance(source_rng)`.

Note well that unlike all other standard algorithms `out_it` denotes the *end* of the output sequence.\n
注意，与其它标准算法不同，`out_it` 表示的是输出序列的 *结尾*。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/copy_backward.hpp`\n
定义于头文件 `boost/range/algorithm/copy_backward.hpp` 中

[heading Requirements 要求]

* `BidirectionalRange` is a model of __bidirectional_range__ Concept.\n
  `BidirectionalRange` 符合 __bidirectional_range__ 概念。
* `OutputIterator` is a model of the `OutputIteratorConcept`.\n
  `OutputIterator` 符合 `OutputIteratorConcept`.
* The `value_type` of __bidirectional_range__ Concept is convertible to a type in `OutputIterator`'s set of value types.\n
  __bidirectional_range__ 概念的 `value_type` 可转换为 `OutputIterator` 的值类型集合中的某个类型。

[heading Precondition: 前提条件]

* `out_it` is not an iterator within the `source_rng`.\n
  `out_it` 不是 `source_rng` 内的一个迭代器。
* `[out_it, out_it + distance(source_rng))` is a valid range.\n
  `[out_it, out_it + distance(source_rng))` 是有效区间。

[heading Complexity 复杂度]

Linear. Exactly `distance(source_rng)` assignments are performed.\n
线性。正好执行 `distance(source_rng)` 次赋值。

[endsect]


