[section:unique_copy unique_copy]

[heading Prototype 原型]

``
template<class SinglePassRange, class OutputIterator>
OutputIterator unique_copy(const SinglePassRange& rng, OutputIterator out);

template<class SinglePassRange, class OutputIterator, class BinaryPredicate>
OutputIterator unique_copy(const SinglePassRange& rng, OutputIterator out, BinaryPredicate pred);
``

[heading Description 说明]

`unique_copy` copies the first element of each sequence of duplicates encountered in `rng` to `out`.\n
`unique_copy` 将 `rng` 中每一个重复序列中的第一个元素复制至 `out`。

Equality is determined by the predicate if one is supplied, or by `operator==()` for `SinglePassRange`'s value type.\n
如果有给定，则相等性由给定的谓词决定，否则由 `SinglePassRange` 的值类型的 `operator==()` 决定。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/unique_copy.hpp`\n
定义于头文件 `boost/range/algorithm/unique_copy.hpp` 中

[heading Requirements 要求]

[*For the non-predicate versions of unique: 对于不带谓词的版本：]

* `SinglePassRange` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange` 符合 __single_pass_range__ 概念。
* `SinglePassRange` is mutable.\n
  `SinglePassRange` 可写。
* `SinglePassRange`'s value type is a model of the `EqualityComparableConcept`.\n
  `SinglePassRange` 值类型符合 `EqualityComparableConcept`.
* `OutputIterator` is a model of the `OutputIteratorConcept`.\n
  `OutputIterator` 符合 `OutputIteratorConcept`.

[*For the predicate versions of unique: 对于带谓词的版本：]

* `SinglePassRange` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange` 符合 __single_pass_range__ 概念。
* `SinglePassRange` is mutable.\n
  `SinglePassRange` 可写。
* `BinaryPredicate` is a model of the `BinaryPredicateConcept`.\n
  `BinaryPredicate` 符合 `BinaryPredicateConcept`.
* `SinglePassRange`'s value type is convertible to `BinaryPredicate`'s first argument type and to `BinaryPredicate`'s second argument type.\n
  `SinglePassRange` 的值类型可转换为 `BinaryPredicate` 第一参数类型和第二参数类型。
* `OutputIterator` is a model of the `OutputIteratorConcept`.\n
  `OutputIterator` 符合 `OutputIteratorConcept`.

[heading Complexity 复杂度]

Linear. `O(N)` where `N` is `distance(rng)`. Exactly `distance(rng)` comparisons are performed.\n
线性。`O(N)` 其中 `N` 为 `distance(rng)`。正好执行 `distance(rng)` 次比较。

[endsect]
