[section:search search]

[heading Prototype 原型]

``
template<class ForwardRange1, class ForwardRange2>
typename range_iterator<ForwardRange1>::type
search(ForwardRange1& rng1, const ForwardRange2& rng2);

template<class ForwardRange1, class ForwardRange2>
typename range_iterator<const ForwardRange1>::type
search(const ForwardRange1& rng1, const ForwardRange2& rng2);

template<
    class ForwardRange1,
    class ForwardRange2,
    class BinaryPredicate
    >
typename range_iterator<ForwardRange1>::type,
search(ForwardRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred);

template<
    class ForwardRange1,
    class ForwardRange2,
    class BinaryPredicate
    >
typename range_iterator<const ForwardRange1>::type
search(const ForwardRange1& rng1, ForwardRange2& rng2, BinaryPredicate pred);


template<
    range_return_value re,
    class ForwardRange1,
    class ForwardRange2
    >
typename range_return<ForwardRange1, re>::type
search(ForwardRange1& rng1, const ForwardRange2& rng2);

template<
    range_return_value re,
    class ForwardRange1,
    class ForwardRange2
    >
typename range_return<const ForwardRange1, re>::type
search(const ForwardRange1& rng1, const ForwardRange2& rng2);

template<
    range_return_value re,
    class ForwardRange1,
    class ForwardRange2,
    class BinaryPredicate
    >
typename range_return<ForwardRange1, re>::type,
search(ForwardRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred);

template<
    range_return_value re,
    class ForwardRange1,
    class ForwardRange2,
    class BinaryPredicate
    >
typename range_return<const ForwardRange1, re>::type
search(const ForwardRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred);
``

[heading Description 说明]

The versions of `search` that return an iterator, return an iterator to the start of the first subsequence in `rng1` that is equal to the subsequence `rng2`. The `end(rng1)` is returned if no such subsequence exists in `rng1`.
Equality is determined by `operator==` for non-predicate versions of `search`, and by satisfying `pred` in the predicate versions.\n
返回迭代器的 `search` 版本返回一个迭代器，指向 `rng1` 中第一个与 `rng2` 相等的子序列。如果 `rng1` 中不存在这样的子序列，则返回 
`end(rng1)`。在不带谓词的 `search` 版本中使用 `operator==` 来比较元素，在带谓词的版本中使用 `pred` 来比较元素。

The versions of `search` that return a `range_return`, defines `found` in the same manner as the returned iterator described above.\n
返回 `range_return` 的 `search` 版本则以上述版本的风格定义 `found`。
 
[heading Definition 定义]

Defined in the header file `boost/range/algorithm/search.hpp`\n
定义于头文件 `boost/range/algorithm/search.hpp` 中

[heading Requirements 要求]

[*For the non-predicate versions: 对于不带谓词的版本：]

* `ForwardRange1` is a model of the __forward_range__ Concept.\n
  `ForwardRange1` 符合 __forward_range__ 概念。
* `ForwardRange2` is a model of the __forward_range__ Concept.\n
  `ForwardRange2` 符合 __forward_range__ 概念。
* `ForwardRange1`'s value type is a model of the `EqualityComparableConcept`.\n
  `ForwardRange1` 的值类型符合 `EqualityComparableConcept`.
* `ForwardRange2`'s value type is a model of the `EqualityComparableConcept`.\n
  `ForwardRange2` 的值类型符合 `EqualityComparableConcept`.
* `ForwardRange1`s value type can be compared for equality with `ForwardRange2`'s value type.\n
  `ForwardRange1` 的值类型可以与 `ForwardRange2` 的值类型进行相等性比较。

[*For the predicate versions: 对于带谓词的版本：]

* `ForwardRange1` is a model of the __forward_range__ Concept.\n
  `ForwardRange1` 符合 __forward_range__ 概念。
* `ForwardRange2` is a model of the __forward_range__ Concept.\n
  `ForwardRange2` 符合 __forward_range__ 概念。
* `BinaryPredicate` is a model of the `BinaryPredicateConcept`.\n
  `BinaryPredicate` 符合 `BinaryPredicateConcept`.
* `ForwardRange1`'s value type is convertible to `BinaryPredicate`'s first argument type.\n
  `ForwardRange1` 的值类型可转换为 `BinaryPredicate` 的第一参数类型。
* `ForwardRange2`'s value type is convertible to `BinaryPredicate`'s second argument type.\n
  `ForwardRange2` 的值类型可转换为 `BinaryPredicate` 的第二参数类型。

[heading Complexity 复杂度]

Average complexity is Linear. Worst-case complexity is quadratic.\n
平均复杂度为线性。最坏情况复杂度为二次方。

[endsect]


