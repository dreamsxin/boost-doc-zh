[section:equal_range equal_range]

[heading Prototype 原型]

``
template<
    class ForwardRange,
    class Value
    >
std::pair<typename range_iterator<ForwardRange>::type,
          typename range_iterator<ForwardRange>::type>
equal_range(ForwardRange& rng, const Value& val);

template<
    class ForwardRange,
    class Value
    >
std::pair<typename range_iterator<const ForwardRange>::type,
          typename range_iterator<const ForwardRange>::type>
equal_range(const ForwardRange& rng, const Value& val);

template<
    class ForwardRange,
    class Value,
    class SortPredicate
    >
std::pair<typename range_iterator<ForwardRange>::type,
          typename range_iterator<ForwardRange>::type>
equal_range(ForwardRange& rng, const Value& val, SortPredicate pred);

template<
    class ForwardRange,
    class Value,
    class SortPredicate
    >
std::pair<typename range_iterator<const ForwardRange>::type,
          typename range_iterator<const ForwardRange>::type>
equal_range(const ForwardRange& rng, const Value& val, SortPredicate pred);                      
 ``

[heading Description 说明]

`equal_range` returns a range in the form of a pair of iterators where all of the elements are equal to `val`. If no values are found that are equal to `val`, then an empty range is returned, hence `result.first == result.second`. For the non-predicate versions of `equal_range`  the equality of elements is determined by `operator<`.
For the predicate versions of `equal_range` the equality of elements is determined by `pred`.\n
`equal_range` 以一对迭代器的方式返回一个区间，其中所有元素均等于 `val`。如果找不到等于 `val` 的值，则返回空区间，即 
`result.first == result.second`。对于不带谓词的 `equal_range` 版本，元素的相等性由 `operator<` 确定。
对于带谓词的 `equal_range` 版本，元素的相等性由 `pred` 确定。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/equal_range.hpp`\n
定义于头文件 `boost/range/algorithm/equal_range.hpp` 中

[heading Requirements 要求]

[*For the non-predicate versions: 对于不带谓词的版本：]

* `ForwardRange` is a model of the __forward_range__ Concept.\n
  `ForwardRange` 符合 __forward_range__ 概念。
* `Value` is a model of the `LessThanComparableConcept`.\n
  `Value` 符合 `LessThanComparableConcept`.
* The ordering of objects of type `Value` is a [*/strict weak ordering/], as defined in the `LessThanComparableConcept` requirements.\n
  `Value` 类型的对象的顺序是一个 [*/严格弱序/]，正如 `LessThanComparableConcept` 要求中所定义的。
* `ForwardRange`'s value type is the same type as `Value`.\n
  `ForwardRange` 的值类型是与 `Value` 相同的类型。

[*For the predicate versions: 对于带谓词的版本：]

* `ForwardRange` is a model of the __forward_range__ Concept.\n
  `ForwardRange` 符合 __forward_range__ 概念。
* `SortPredicate` is a model of the `StrictWeakOrderingConcept`.\n
  `SortPredicate` 符合 `StrictWeakOrderingConcept`.
* `ForwardRange`'s value type is the same as `Value`.\n
  `ForwardRange` 的值类型是与 `Value` 相同的类型。
* `ForwardRange`'s value type is convertible to both of `SortPredicate`'s argument types.\n
  `ForwardRange` 的值类型可转换为 `SortPredicate` 的两个参数类型。

[heading Precondition: 前提条件]

For the non-predicate versions: `rng` is ordered in ascending order according to `operator<`.\n
对于带谓词的版本：`rng` 是按 `operator<` 排好序的。

For the predicate versions: `rng` is ordered in ascending order according to `pred`.\n
对于不带谓词的版本：`rng` 是按 `pred` 排好序的。

[heading Complexity 复杂度]

For random-access ranges, the complexity is `O(log N)`, otherwise the complexity is `O(N)`. \n
对于随机访问区间，复杂度为 `O(log N)`，否则复杂度为 `O(N)`. 

[endsect]


