[section:copy copy]

[heading Prototype 原型]

``
template<class SinglePassRange, class OutputIterator>
OutputIterator copy(const SinglePassRange& source_rng, OutputIterator out_it);
``

[heading Description 说明]

`copy` copies all elements from `source_rng` to the range `[out_it, out_it + distance(source_rng))`.
The return value is `out_it + distance(source_rng)`\n
`copy` 将 `source_rng` 的所有元素复制至区间 `[out_it, out_it + distance(source_rng))`。返回值为 `out_it + distance(source_rng)`

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/copy.hpp`\n
定义于头文件 `boost/range/algorithm/copy.hpp` 中

[heading Requirements 要求]

* `SinglePassRange` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange` 符合 __single_pass_range__ 概念。
* `OutputIterator` is a model of the `OutputIteratorConcept`.\n
  `OutputIterator` 符合 `OutputIteratorConcept`.
* The `value_type` of __single_pass_range__ Concept is convertible to a type in `OutputIterator`'s set of value types.\n
  __single_pass_range__ 概念的 `value_type` 可转换为 `OutputIterator` 的值类型集合中的某个类型。

[heading Precondition: 前提条件：]

* `out_it` is not an iterator within the `source_rng`.\n
  `out_it` 不是 `source_rng` 内的一个迭代器。
* `[out_it, out_it + distance(source_rng))` is a valid range.\n
  `[out_it, out_it + distance(source_rng))` 是有效区间。

[heading Complexity 复杂度]

Linear. Exactly `distance(source_rng)` assignments are performed.\n
线性。正好执行 `distance(source_rng)` 次赋值。

[endsect]


