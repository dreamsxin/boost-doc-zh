[section:replace_if replace_if]

[heading Prototype 原型]

``
template<class ForwardRange, class UnaryPredicate, class Value>
ForwardRange& replace_if(ForwardRange& rng, UnaryPredicate pred, const Value& with_what);

template<class ForwardRange, class UnaryPredicate, class Value>
const ForwardRange& replace_if(const ForwardRange& rng, UnaryPredicate pred, const Value& with_what);
``

[heading Description 说明]

`replace_if` replaces every element `x` in `rng` for which `pred(x) == true` with `with_what`. Returns a reference to `rng`.\n
`replace_if` 将 `rng` 中满足 `pred(x) == true` 的每一个元素 `x` 替换为 `with_what`。返回一个指向 `rng` 的引用。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/replace_if.hpp`\n
定义于头文件 `boost/range/algorithm/replace_if.hpp` 中

[heading Requirements 要求]

* `ForwardRange` is a model of the __forward_range__ Concept.\n
  `ForwardRange` 符合 __forward_range__ 概念。
* `ForwardRange` is mutable.\n
  `ForwardRange` 可写。
* `UnaryPredicate` is a model of the `PredicateConcept`\n
  `UnaryPredicate` 符合 `PredicateConcept`
* `ForwardRange`'s value type is convertible to `UnaryPredicate`'s argument type.\n
  `ForwardRange` 的值类型可转换为 `UnaryPredicate` 的参数类型。
* `Value` is convertible to `ForwardRange`'s value type.\n
  `Value` 可转换为 `ForwardRange` 的值类型。
* `Value` is a model of the `AssignableConcept`.\n
  `Value` 符合 `AssignableConcept`.

[heading Complexity 复杂度]

Linear. `replace_if` performs exactly `distance(rng)` applications of `pred`, and at most `distance(rng)` assignments.\n
线性。`replace_if` 正好执行 `distance(rng)` 次 `pred` 调用以及最多 `distance(rng)` 次赋值。

[endsect]


