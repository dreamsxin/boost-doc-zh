[section:find_first_of find_first_of]

[heading Prototype 原型]

``
template<class SinglePassRange1, class ForwardRange2>
typename range_iterator<SinglePassRange1>::type
find_first_of(SinglePassRange1& rng1, const ForwardRange2& rng2);

template<
    class SinglePassRange1,
    class ForwardRange2,
    class BinaryPredicate
    >
typename range_iterator<SinglePassRange1>::type
find_first_of(SinglePassRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred);

template<
    range_return_value re,
    class SinglePassRange1,
    class ForwardRange2
    >
typename range_return<SinglePassRange1, re>::type
find_first_of(SinglePassRange1& rng1, const ForwardRange2& rng2);

template<
    range_return_value re,
    class SinglePassRange1,
    class ForwardRange2,
    class BinaryPredicate
    >
typename range_return<SinglePassRange1, re>::type
find_first_of(SinglePassRange1& rng1, const ForwardRange2& rng2, BinaryPredicate pred);
``

[heading Description 说明]

The versions of `find_first_of` that return an iterator, return an iterator to the first occurrence in `rng1` of any of the elements in `rng2`.
Equality is determined by `operator==` for non-predicate versions of `find_first_of`, and by satisfying `pred` in the predicate versions.\n
返回迭代器的 `find_first_of` 版本返回一个迭代器，指向 `rng1` 中第一次出现 `rng2` 中任一元素的地方。
对于不带谓词的 `find_first_of` 版本，相等性由 `operator==` 确定，在带谓词的版本中则由 `pred` 确定。

The versions of `find_first_of` that return a `range_return`, defines `found` in the same manner as the returned iterator described above.\n
返回 `range_return` 的 `find_first_of` 版本则以上述相同风格定义 `found`。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/find_first_of.hpp`\n
定义于头文件 `boost/range/algorithm/find_first_of.hpp` 中

[heading Requirements 要求]

[*For the non-predicate versions: 对于不带谓词的版本：]

* `SinglePassRange1` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange1` 符合 __single_pass_range__ 概念。
* `ForwardRange2` is a model of the __forward_range__ Concept.\n
  `ForwardRange2` 符合 __forward_range__ 概念。
* `SinglePassRange1`'s value type is a model of the `EqualityComparableConcept`, and can be compared for equality with `ForwardRange2`'s value type.\n
  `SinglePassRange1` 的值类型符合 `EqualityComparableConcept`，且可以与 `ForwardRange2` 的值类型进行相等性比较。

[*For the predicate versions: 对于带谓词的版本：]

* `SinglePassRange1` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange1` 符合 __single_pass_range__ 概念。
* `ForwardRange2` is a model of the __forward_range__ Concept.\n
  `ForwardRange2` 符合 __forward_range__ 概念。
* `BinaryPredicate` is a model of the `BinaryPredicateConcept`.\n
  `BinaryPredicate` 符合 `BinaryPredicateConcept`.
* `SinglePassRange1`'s value type is convertible to `BinaryPredicate`'s first argument type.\n
  `SinglePassRange1` 的值类型可转换为 `BinaryPredicate` 的第一参数类型。
* `ForwardRange2`'s value type is convertible to `BinaryPredicate`'s second argument type.\n
  `ForwardRange2` 的值类型可转换为 `BinaryPredicate` 的第二参数类型。

[heading Complexity 复杂度]

At most `distance(rng1) * distance(rng2)` comparisons.\n
最多 `distance(rng1) * distance(rng2)` 次比较。

[endsect]


