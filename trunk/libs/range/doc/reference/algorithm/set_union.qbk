[section:set_union set_union]

[heading Prototype 原型]

``
template<
    class SinglePassRange1,
    class SinglePassRange2,
    class OutputIterator
    >
OutputIterator set_union(const SinglePassRange1& rng1,
                         const SinglePassRange2& rng2,
                         OutputIterator          out);

template<
    class SinglePassRange1,
    class SinglePassRange2,
    class OutputIterator,
    class BinaryPredicate
    >
OutputIterator set_union(const SinglePassRange1& rng1,
                         const SinglePassRange2& rng2,
                         OutputIterator          out,
                         BinaryPredicate         pred);    
 ``

[heading Description 说明]

`set_union` constructs a sorted range that is the union of the sorted ranges `rng1` and `rng2`. The return value is the end of the output range.
The ordering relationship is determined by using `operator<` in the non-predicate versions, and by evaluating `pred` in the predicate versions. \n
`set_union` 构造一个有序区间，它是两个有序区间 `rng1` 和 `rng2` 的并集。返回集是输出区间的末尾。
在不带谓词的版本中，顺序关系由 `operator<` 决定，在带谓词的版本中则通过对 `pred` 求值来决定。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/set_algorithm.hpp`\n
定义于头文件 `boost/range/algorithm/set_algorithm.hpp` 中

[heading Requirements 要求]

[*For the non-predicate versions: 对于不带谓词的版本：]

* `SinglePassRange1` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange1` 符合 __single_pass_range__ 概念。
* `SinglePassRange2` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange2` 符合 __single_pass_range__ 概念。
* `OutputIterator` is a model of the `OutputIteratorConcept`.\n
  `OutputIterator` 符合 `OutputIteratorConcept`.
* `SinglePassRange1` and `SinglePassRange2` have the same value type.\n
  `SinglePassRange1` 和 `SinglePassRange2` 具有相同的值类型。
* `SinglePassRange1`'s value type is a model of the `LessThanComparableConcept`.\n
  `SinglePassRange1` 值类型符合 `LessThanComparableConcept`.
* `SinglePassRange2`'s value type is a model of the `LessThanComparableConcept`.\n
  `SinglePassRange2` 值类型符合 `LessThanComparableConcept`.
* The ordering of objects of type `SinglePassRange1`'s value type is a [*/strict weak ordering/], as defined in the `LessThanComparableConcept` requirements.\n
  `SinglePassRange1` 值类型的对象的顺序是一个 [*/严格弱序/]，正如 `LessThanComparableConcept` 的要求所定义的。
* The ordering of objects of type `SinglePassRange2`'s value type is a [*/strict weak ordering/], as defined in the `LessThanComparableConcept` requirements.\n
  `SinglePassRange2` 值类型的对象的顺序是一个 [*/严格弱序/]，正如 `LessThanComparableConcept` 的要求所定义的。

[*For the predicate versions: 对于带谓词的版本：]

* `SinglePassRange1` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange1` 符合 __single_pass_range__ 概念。
* `SinglePassRange2` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange2` 符合 __single_pass_range__ 概念。
* `OutputIterator` is a model of the `OutputIteratorConcept`.\n
  `OutputIterator` 符合 `OutputIteratorConcept`.
* `SinglePassRange1` and `SinglePassRange2` have the same value type.\n
  `SinglePassRange1` 和 `SinglePassRange2` 具有相同的值类型。
* `BinaryPredicate` is a model of the `StrictWeakOrderingConcept`.\n
  `BinaryPredicate` 符合 `StrictWeakOrderingConcept`.
* `SinglePassRange1`'s value type is convertible to `BinaryPredicate`'s first argument type.\n
  `SinglePassRange1` 值类型可转换为 `BinaryPredicate` 的第一参数类型。
* `SinglePassRange2`'s value type is convertible to `BinaryPredicate`'s second argument types.\n
  `SinglePassRange2` 值类型可转换为 `BinaryPredicate` 的第二参数类型。

[heading Precondition: 前提条件：]

[*For the non-predicate versions: 对于不带谓词的版本：]

`rng1` and `rng2` are sorted in ascending order according to `operator<`.\n
`rng1` 和 `rng2` 已按 `operator<` 排好序。

[*For the predicate versions: 对于带谓词的版本：]

`rng1` and `rng2` are sorted in ascending order according to `pred`.\n
`rng1` 和 `rng2` 已按 `pred` 排好序。

[heading Complexity 复杂度]

Linear. `O(N)`, where `N` is `distance(rng1) + distance(rng2)`.\n
线性。`O(N)`，其中 `N` 为 `distance(rng1) + distance(rng2)`.

[endsect]


