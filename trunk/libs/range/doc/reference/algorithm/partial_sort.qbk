[section:partial_sort partial_sort]

[heading Prototype 原型]

``
template<class RandomAccessRange>
RandomAccessRange& partial_sort(
    RandomAccessRange& rng,
    typename range_iterator<RandomAccessRange>::type middle);

template<class RandomAccessRange>
const RandomAccessRange& partial_sort(
    const RandomAccessRange& rng,
    typename range_iterator<const RandomAccessRange>::type middle);

template<class RandomAccessRange>
RandomAccessRange& partial_sort(
    RandomAccessRange& rng,
    typename range_iterator<RandomAccessRange>::type middle,
    BinaryPredicate sort_pred);

template<class RandomAccessRange>
const RandomAccessRange& partial_sort(
    const RandomAccessRange& rng,
    typename range_iterator<const RandomAccessRange>::type middle,
    BinaryPredicate sort_pred);
``

[heading Description 说明]

`partial_sort` rearranges the elements in `rng`. It places the smallest `distance(begin(rng), middle)` elements, sorted in ascending order, into the range `[begin(rng), middle)`. The remaining elements are placed in an unspecified order into `[middle, last)`.\n
`partial_sort` 重排 `rng` 中的元素。它将最小的 `distance(begin(rng), middle)` 个元素以升序排好，置于区间 `[begin(rng), middle)` 中。
剩余元素以不定顺序置于 `[middle, last)` 中。

The non-predicative versions of this function specify that one element is less than another by using `operator<()`. The predicate versions use the predicate instead.\n
该函数的无谓词版通过使用 `operator<()` 来决定某个元素是否小于另一个。有谓词版则使用谓词。


[heading Definition 定义]

Defined in the header file `boost/range/algorithm/partial_sort.hpp`\n
定义于头文件 `boost/range/algorithm/partial_sort.hpp` 中。

[heading Requirements 要求]

[*For the non-predicate version: 对于不带谓词的版本：]

* `RandomAccessRange` is a model of the __random_access_range__ Concept.\n
  `RandomAccessRange` 符合 __random_access_range__ 概念。
* `RandomAccessRange` is mutable.\n
  `RandomAccessRange` 可写。
* `RandomAccessRange`'s value type is a model of the `LessThanComparableConcept`.\n
  `RandomAccessRange` 的值类型符合 `LessThanComparableConcept`.
* The ordering relation on `RandomAccessRange`'s value type is a [*/strict weak ordering/], as defined in the `LessThanComparableConcept` requirements.\n
  `RandomAccessRange` 值类型上的排序关系是一个 [*/严格弱序/]，正如 `LessThanComparableConcept` 要求中定义的那样。


[*For the predicate version: 对于带谓词的版本：]

* `RandomAccessRange` is a model of the __random_access_range__ Concept.\n
  `RandomAccessRange` 符合 __random_access_range__ 概念。
* `RandomAccessRange` is mutable.\n
  `RandomAccessRange` 可写。
* `BinaryPredicate` is a model of the `StrictWeakOrderingConcept`.\n
  `BinaryPredicate` 符合 `StrictWeakOrderingConcept`.
* `RandomAccessRange`'s value type is convertible to both of `BinaryPredicate`'s argument types.\n
  `RandomAccessRange` 的值类型可转换为 `BinaryPredicate` 的两个参数类型。


[heading Complexity 复杂度]

Approximately `distance(rng) * log(distance(begin(rng), middle))` comparisons.\n
大约 `distance(rng) * log(distance(begin(rng), middle))` 次比较。

[endsect]


