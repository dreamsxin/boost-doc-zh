[section:upper_bound upper_bound]

[heading Prototype 原型]

``
template<class ForwardRange, class Value>
typename range_iterator<ForwardRange>::type
upper_bound(ForwardRange& rng, Value val);

template<
    range_return_value re,
    class ForwardRange,
    class Value
    >
typename range_return<ForwardRange, re>::type
upper_bound(ForwardRange& rng, Value val);
``

[heading Description 说明]

The versions of `upper_bound` that return an iterator, returns the first iterator in the range `rng` such that:
without predicate - `val < *i` is `true`,
with predicate - `pred(val, *i)` is `true`.\n
返回迭代器的 `upper_bound` 版本返回区间 `rng` 中满足以下条件的第一个迭代器：
不带谓词 - `val < *i` 为 `true`,
带谓词 - `pred(val, *i)` 为 `true`.

`end(rng)` is returned if no such iterator exists.\n
如果不存在这样的迭代器，则返回 `end(rng)`。

The versions of `upper_bound` that return a `range_return`, defines `found` in the same manner as the returned iterator described above.\n
返回 `range_return` 的 `upper_bound` 版本则以上述版本的风格定义 `found`。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/upper_bound.hpp`\n
定义于头文件 `boost/range/algorithm/upper_bound.hpp` 中

[heading Requirements 要求]

[*For the non-predicate versions: 对于不带谓词的版本：]

* `ForwardRange` is a model of the __forward_range__ Concept.\n
  `ForwardRange` 符合 __forward_range__ 概念。
* `Value` is a model of the `LessThanComparableConcept`.\n
  `Value` 符合 `LessThanComparableConcept`.
* The ordering of objects of type `Value` is a [*/strict weak ordering/], as defined in the `LessThanComparableConcept` requirements.\n
  `Value` 类型的对象的顺序是一种 [*/严格弱序/]，正如 `LessThanComparableConcept` 要求中定义的。
* `ForwardRange`'s value type is the same type as `Value`.\n
  `ForwardRange` 的值类型与 `Value` 类型相同。

[*For the predicate versions: 对于带谓词的版本：]

* `ForwardRange` is a model of the __forward_range__ Concept.\n
  `ForwardRange` 符合 __forward_range__ 概念。
* `BinaryPredicate` is a model of the `StrictWeakOrderingConcept`.\n
  `BinaryPredicate` 符合 `StrictWeakOrderingConcept`.
* `ForwardRange`'s value type is the same type as `Value`.\n
  `ForwardRange` 的值类型与 `Value` 类型相同。
* `ForwardRange`'s value type is convertible to both of `BinaryPredicate`'s argument types.\n
  `ForwardRange` 的值类型可转换为 `BinaryPredicate` 的两个参数类型。

[heading Precondition: 前提条件：]

[*For the non-predicate versions: 对于不带谓词的版本：]

`rng` is sorted in ascending order according to `operator<`.\n
`rng` 已按 `operator<` 排为升序。

[*For the predicate versions: 对于带谓词的版本：]

`rng` is sorted in ascending order according to `pred`.\n
`rng` 已按 `pred` 排为升序。

[heading Complexity 复杂度]

For ranges that model the __random_access_range__ Concept the complexity is `O(log N)`, where `N` is `distance(rng)`. For all other range types the complexity is `O(N)`.\n
对于符合 __random_access_range__ 概念的区间，复杂度为 `O(log N)`，其中 `N` 为 `distance(rng)`。对于其它所有区间类型，复杂度为 `O(N)`.

[endsect]


