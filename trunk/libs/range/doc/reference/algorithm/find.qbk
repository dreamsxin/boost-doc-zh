[section:find find]

[heading Prototype 原型]

``
template<class SinglePassRange, class Value>
typename range_iterator<SinglePassRange>::type
find(SinglePassRange& rng, Value val);

template<
    range_return_value re,
    class SinglePassRange,
    class Value
    >
typename range_return<SinglePassRange, re>::type
find(SinglePassRange& rng, Value val);
``

[heading Description 说明]

The versions of `find` that return an iterator, returns the first iterator in the range `rng` such that `*i == value`. `end(rng)` is returned if no such iterator exists.
The versions of find that return a `range_return`, defines `found` in the same manner as the returned iterator described above.\n
返回迭代器的 `find` 版本返回区间 `rng` 中第一个满足 `*i == value` 的迭代器。如果不存在这样的迭代器，则返回 `end(rng)`。
返回 `range_return` 的 `find` 版本则以上述相同风格定义 `found`。

[heading Definition 定义]

Defined in the header file `boost/range/algorithm/find.hpp`\n
定义于头文件 `boost/range/algorithm/find.hpp` 中

[heading Requirements 要求]

* `SinglePassRange` is a model of the __single_pass_range__ Concept.\n
  `SinglePassRange` 符合 __single_pass_range__ 概念。
* `Value` is a model of the `EqualityComparableConcept`.\n
  `Value` 符合 `EqualityComparableConcept`.
* The `operator==` is defined for type `Value` to be compared with the `SinglePassRange`'s value type.\n
  为类型 `Value` 定义了 `operator==` 用于与 `SinglePassRange` 的值类型进行比较。

[heading Complexity 复杂度]

Linear. At most `distance(rng)` comparisons for equality.\n
线性。最多 `distance(rng)` 性相等性比较。

[endsect]


