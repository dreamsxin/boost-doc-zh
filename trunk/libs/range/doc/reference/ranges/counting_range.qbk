[section:counting_range counting_range]

[heading Prototype 原型]

``
template< class Incrementable > inline
iterator_range< counting_iterator<Incrementable> >
counting_range(Incrementable first, Incrementable last);

template< class SinglePassRange > inline
iterator_range< counting_iterator<typename range_iterator<SinglePassRange>::type >
counting_range(const SinglePassRange& rng);

template< class SinglePassRange > inline
iterator_range< counting_iterator<typename range_iterator<SinglePassRange>::type >
counting_range(SinglePassRange& rng);
``

[heading Description 说明]

`counting_range` is a function to generator that generates an `iterator_range` wrapping a `counting_iterator` (from Boost.Iterator).\n
`counting_range` 是一个生成器函数，它生成一个包装了 `counting_iterator` (来自 Boost.Iterator) 的 `iterator_range`。

[heading Definition 定义]

Defined in header file `boost/range/counting_range.hpp`\n
定义于头文件 `boost/range/counting_range.hpp` 中

[heading Requirements 要求]

# `Incrementable` is a model of the `Incrementable` Concept.\n
  `Incrementable` 符合 `Incrementable` 概念。

[endsect]
