[section:irange irange]

[heading Prototype 原型]

``
template<class Integer>
iterator_range< range_detail::integer_iterator<Integer> >
irange(Integer first, Integer  last);

template<class Integer, class StepSize>
iterator_range< range_detail::integer_iterator_with_step<Integer, StepSize> >
irange(Integer first, Integer last, StepSize step_size);
``

[heading Description 说明]

`irange` is a function to generate an Integer Range.\n
`irange` 是一个生成整数区间的函数。

`irange` allows treating integers as a model of the __random_access_range__ Concept. It should be noted that the `first` and `last` parameters denoted a half-open range.\n
`irange` 可以将整数视为以 __random_access_range__ 概念为模型。应注意，`first` 和 `last` 参数表示的是半开区间。

[heading Definition 定义]

Defined in the header file `boost/range/irange.hpp`\n
定义于头文件 `boost/range/irange.hpp` 中

[heading Requirements 要求]

# `Integer` is a model of the `Integer` Concept.\n
  `Integer` 符合 `Integer` 概念。
# `StepSize` is a model of the `SignedInteger` Concept.\n
  `StepSize` 符合 `SignedInteger` 概念。

[heading Complexity 复杂度]

Constant. Since this function generates a new range the most significant performance cost is incurred through the iteration of the generated range.\n
常数。因为该函数只是生成一个新的区间，最主要的性能成本是在对生成的区间进行迭代时发生。

[endsect]

