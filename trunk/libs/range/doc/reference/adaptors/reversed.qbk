[section:reversed reversed]

[table
    [[Syntax 语法] [Code 代码]]
    [[Pipe 通道式] [`rng | boost::adaptors::reversed`]]
    [[Function 函数式] [`boost::adaptors::reverse(rng)`]]
]

* [*Returns:] A range whose iterators behave as if they were the original iterators wrapped in `reverse_iterator`.\n
  [*返回:] 一个区间，其迭代器的行为就象包装在 `reverse_iterator` 中的原迭代器一样。
* [*Range Category:] __bidirectional_range__\n
  [*区间类别:] __bidirectional_range__
* [*Returned Range Category:] The range category of `rng`.\n
  [*返回区间类别:] `rng` 的区间类别。

[section:reversed_example reversed example 示例]
``
#include <boost/range/adaptor/reversed.hpp>
#include <boost/range/algorithm/copy.hpp>
#include <boost/assign.hpp>
#include <algorithm>
#include <iostream>
#include <vector>

void reversed_example_test()
{
    using namespace boost::adaptors;
    using namespace boost::assign;

    std::vector<int> input;
    input += 1,2,3,4,5,6,7,8,9;

    boost::copy(
        input | reversed,
        std::ostream_iterator<int>(std::cout, ","));

    return 0;
}
``
[endsect]

This would produce the output:\n
生成以下输出：
``
9,8,7,6,5,4,3,2,1
``
[endsect]


