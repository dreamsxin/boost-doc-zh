[section:filtered filtered]

[table
    [[Syntax 语法] [Code 代码]]
    [[Pipe 通道式] [`rng | boost::adaptors::filtered(pred)`]]
    [[Function 函数式] [`boost::adaptors::filter(rng, pred)`]]
]

* [*Precondition:]  The `value_type` of the range is convertible to the argument type of `pred`.\n
  [*前提条件:] 区间的 `value_type` 可转换为 `pred` 的参数类型。
* [*Postcondition:] For all adjacent elements `[x]` in the returned range, `pred(x)` is `true`.\n
  [*后验条件:] 对于返回区间中的所有元素 `[x]`，`pred(x)` 为 `true`.
* [*Throws:] Whatever the copy constructor of `pred` might throw.\n
  [*抛出:] `pred` 的复制构造函数可能抛出的任何异常。
* [*Range Category:] __forward_range__\n
  [*区间类别:] __forward_range__
* [*Returned Range Category:] The minimum of the range category of `rng` and __bidirectional_range__\n
  [*返回区间类别:] `rng` 和 __bidirectional_range__ 的最小区间类别

[section:filtered_example filtered example 示例]
``
#include <boost/range/adaptor/filtered.hpp>
#include <boost/range/algorithm/copy.hpp>
#include <boost/assign.hpp>
#include <algorithm>
#include <iostream>
#include <vector>

struct is_even
{
    bool operator()( int x ) const { return x % 2 == 0; }
};

int main(int argc, const char* argv[])
{
    using namespace boost::assign;
    using namespace boost::adaptors;

    std::vector<int> input;
    input += 1,2,3,4,5,6,7,8,9;

    boost::copy(
        input | filtered(is_even()),
        std::ostream_iterator<int>(std::cout, ","));
}
``
[endsect]

This would produce the output:\n
生成以下输出：
``
2,4,6,8
``
[endsect]


