[section:tokenized tokenized]

[table
    [[Syntax 语法] [Code 代码]]
    [
        [Pipe 通道式]
        [
            ``
            rng | boost::adaptors::tokenized(regex)
            rng | boost::adaptors::tokenized(regex, i)
            rng | boost::adaptors::tokenized(regex, rndRng)
            rng | boost::adaptors::tokenized(regex, i, flags)
            rng | boost::adaptors::tokenized(regex, rndRng, flags)
            ``
        ]
    ]
    [
        [Function 函数式]
        [
            ``
            boost::adaptors::tokenize(rng, regex)
            boost::adaptors::tokenize(rng, regex, i)
            boost::adaptors::tokenize(rng, regex, rndRng)
            boost::adaptors::tokenize(rng, regex, i, flags)
            boost::adaptors::tokenize(rng, regex, rndRng, flags)
            ``
        ]
    ]
]

* [*Precondition:]\n
  [*前提条件:]
    * Let `T` denote `typename range_value<decltype(rng)>::type`, then `regex` has the type `basic_regex<T>` or is implicitly convertible to one of these types.\n
      令 `T` 表示 `typename range_value<decltype(rng)>::type`，则 `regex` 类型为 `basic_regex<T>` 或可隐式转换为这些类型之一。
    * `i` has the type `int`.\n
      `i` 类型为 `int`.
    * the `value_type` of `rndRng` is `int`.\n
      `rndRng` 的 `value_type` 为 `int`.
    * `flags` has the type `regex_constants::syntax_option_type`.\n
      `flags` 具有类型 `regex_constants::syntax_option_type`.
* [*Returns:] A range whose iterators behave as if they were the original iterators wrapped in `regex_token_iterator`. The first iterator in the range would be constructed by forwarding all the arguments of `tokenized()` to the `regex_token_iterator` constructor.\n
  [*返回:] 一个区间，其迭代器的行为就象包装在 `regex_token_iterator` 中的原迭代器一样。区间中的第一个迭代器通过前转 `tokenized()` 
  的所有参数至 `regex_token_iterator` 构造函数来构造。
* [*Throws:] Whatever constructing and copying equivalent `regex_token_iterator`s might throw.\n
  [*抛出:] 构造和复制等效的 `regex_token_iterator` 时可能抛出的任何异常。
* [*Range Category:] __random_access_range__\n
  [*区间类别:] __random_access_range__
* [*Returned Range Category:] __random_access_range__\n
  [*返回区间类别:] __random_access_range__

[endsect]


