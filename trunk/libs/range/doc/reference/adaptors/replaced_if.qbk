[section:replaced_if replaced_if]

[table
    [[Syntax 语法] [Code 代码]]
    [[Pipe 通道式] [`rng | boost::adaptors::replaced_if(pred, new_value)`]]
    [[Function 函数式] [`boost::adaptors::replace_if(rng, pred, new_value)`]]
]

* [*Precondition:]\n
  [*前提条件:]
    * The range `value_type` is convertible to the argument type of `pred`.\n
      区间的 `value_type` 可转换为 `pred` 的参数类型。
    * `new_value` is convertible to the `value_type` of the range.\n
      `new_value` 可转换为区间的 `value_type`。
* [*Postconditions:] For all elements `x` in the returned range, the value `x` is equal to the value of `pred(y) ? new_value : y` where `y` is the corresponding element in the original range.\n
  [*后验条件:] 对于返回区间中的所有元素 `x`，值 `x` 等于 `pred(y) ? new_value : y` 的值，其中 `y` 为原区间中的对应元素。
* [*Range Category:] __forward_range__\n
  [*区间类别:] __forward_range__
* [*Returned Range Category:] The range category of `rng`.\n
  [*返回区间类别:] `rng` 的区间类别。

[section:replaced_if_example replaced_if example 示例]
``
#include <boost/range/adaptor/replaced_if.hpp>
#include <boost/range/algorithm/copy.hpp>
#include <boost/assign.hpp>
#include <algorithm>
#include <iostream>
#include <vector>

struct is_even
{
    bool operator()(int x) const { return x % 2 == 0; }
};

int main(int argc, const char* argv[])
{
    using namespace boost::adaptors;
    using namespace boost::assign;

    std::vector<int> input;
    input += 1,2,3,4,5,6,7,8,9;

    boost::copy(
        input | replaced_if(is_even(), 10),
        std::ostream_iterator<int>(std::cout, ","));

    return 0;
}
``
[endsect]

This would produce the output:\n
生成以下输出：
``
1,10,3,10,5,10,7,10,9
``
[endsect]


