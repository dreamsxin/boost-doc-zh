[section:uniqued uniqued]

[table
    [[Syntax 语法] [Code 代码]]
    [[Pipe 通道式] [`rng | boost::adaptors::uniqued`]]
    [[Function 函数式] [`boost::adaptors::unique(rng)`]]
]

* [*Precondition:] The `value_type` of the range is comparable with `operator==()`.\n
  [*前提条件:] 区间的 `value_type` 可以用 `operator==()` 进行比较。
* [*Postcondition:] For all adjacent elements `[x,y]` in the returned range, `x==y` is false.\n
  [*后验条件:] 对于返回区间中的所有相邻元素 `[x,y]`，`x==y` 为 false。
* [*Range Category:] __forward_range__\n
  [*区间类别:] __forward_range__
* [*Returned Range Category:] The minimum of the range concept of `rng` and __forward_range__.\n
  [*返回区间类别:] `rng` 和 __forward_range__ 的最小区间类别。

[section:uniqued_example uniqued example 示例]
``
#include <boost/range/adaptor/uniqued.hpp>
#include <boost/range/algorithm/copy.hpp>
#include <boost/assign.hpp>
#include <algorithm>
#include <iostream>
#include <vector>

void uniqued_example_test()
{
    using namespace boost::assign;
    using namespace boost::adaptors;

    std::vector<int> input;
    input += 1,1,2,2,2,3,4,5,6;

    boost::copy(
        input | uniqued,
        std::ostream_iterator<int>(std::cout, ","));
}
``
[endsect]

This would produce the output:\n
生成以下输出：
``
1,2,3,4,5,6
``
[endsect]


