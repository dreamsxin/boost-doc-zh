[section:portability Portability 可移植性]

A huge effort has been made to port the library to as many compilers as possible.\n
为了将这个库移植到尽可能多的编译器上，我们作出了巨大的努力。

Full support for built-in arrays require that the compiler supports class template partial specialization. For non-conforming compilers there might be a chance that it works anyway thanks to workarounds in the type traits library.
Visual C++ 6/7.0 has a limited support for arrays: as long as the arrays are of built-in type it should work.\n
为了全面支持内建数组，要求编译器支持类模板偏特化。对于不符合标准的编译器，也有机会用 type traits 库来绕过。
Visual C++ 6/7.0 对于数组的支持有限：只要数组是内建类型的，它就可以工作。

Notice also that some compilers cannot do function template ordering properly. In that case one must rely of __range_iterator__ and a single function definition instead of overloaded versions for const and non-const arguments. So if one cares about old compilers, one should not pass rvalues to the functions.\n
还要注意，有些编译器不能正确执行函数模板的排序。这种情况下，你必须依赖 __range_iterator__，并定义单个函数而不是分别针对 const 和 
non-const 参数进行重载。所以如果你用的是旧的编译器，就不能传递右值给函数了。

For maximum portability you should follow these guidelines:\n
为了最大的可移植性，你应该遵从以下方针：

# do not use built-in arrays,\n
  不要使用内建数组，
# do not pass rvalues to __begin__`()`, __end__`()` and __iterator_range__ Range constructors and assignment operators,\n
  不要传递右值给 __begin__`()`, __end__`()` 和 __iterator_range__ 区间构造函数和赋值操作符，
# use __const_begin__`()` and __const_end__`()` whenever your code by intention is read-only; this will also solve most rvalue problems,\n
  使用 __const_begin__`()` 和 __const_end__`()` 只要你的代码意图是只读的；这可以解决大多数的右值问题，
# do not rely on ADL:\n
  不要依赖于 ADL: 
  * if you overload functions, include that header before the headers in this library,\n
    如果你重载了函数，就要在本库的头文件之前包含你的头文件，
  * put all overloads in namespace boost. \n
    将所有重载放入名字空间 boost.



[endsect]

