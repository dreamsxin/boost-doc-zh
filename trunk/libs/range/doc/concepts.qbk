[section:concepts Range Concepts  Range概念]

[section:overview Overview 简介]

A Range is a [*/concept/] similar to the STL [@http://www.sgi.com/Technology/STL/Container.html Container] concept. A Range provides iterators for accessing a half-open range `[first,one_past_last)` of elements and provides information about the number of elements in the Range. However, a Range has fewer requirements than a Container.\n
区间的/概念/类似于STL中的 [@http://www.sgi.com/Technology/STL/Container.html 容器] 概念。
一个区间提供了访问一个半开放区间 `[first,one_past_last)` 的迭代器，还提供了关于区间中的元素数量的信息。
但是，区间比容器少了一点点要求。

The motivation for the Range concept is that there are many useful Container-like types that do not meet the full requirements of Container, and many algorithms that can be written with this reduced set of requirements. In particular, a Range does not necessarily\n
区间概念的动机是，有许多有用的、类似于容器的类型不能完全满足容器的所有要求，而很多算法可以依据这个有所简化的要求来编写。
具体的说，区间不要求：

* own the elements that can be accessed through it,\n
  拥有通过它来访问的元素，
* have copy semantics,\n
  具有复制语义，

Because of the second requirement, a Range object must be passed by (const or non-const) reference in generic code.\n
由于第二个要求，区间对象必须以(常量或非常量)引用的方式传入泛型代码。

The operations that can be performed on a Range is dependent on the [@../../iterator/doc/new-iter-concepts.html#iterator-traversal-concepts-lib-iterator-traversal traversal category] of the underlying iterator type. Therefore the range concepts are named to reflect which traversal category its iterators support. See also terminology and style guidelines. for more information about naming of ranges.\n
一个区间上可以执行的操作取决于其底层迭代器类型的 
[@../../iterator/doc/new-iter-concepts.html#iterator-traversal-concepts-lib-iterator-traversal 遍历类别]。
因此区间概念的命名正是反映了其迭代器所支持的遍历类别。有关区间命名的更多信息请见 术语及风格 一节。

The concepts described below specifies associated types as [@../../libs/mpl/doc/refmanual/metafunction.html metafunctions] and all functions as free-standing functions to allow for a layer of indirection.\n
下述概念以 [@../../libs/mpl/doc/refmanual/metafunction.html 元函数] 的方式给出关联类型，而且所有函数都是独立函数，以用于间接层。

[endsect]


[section:single_pass_range Single Pass Range 单遍区间]

[heading Notation 符号]

[table
    []
    [[`X`] [A type that is a model of __single_pass_range__.\n
    符合 __single_pass_range__ 的一个类型。]]
    [[`a`] [Object of type X.\n
    类型 X 的对象。]]
]

[heading Description 说明]

A range `X` where `boost::range_iterator<X>::type` is a model of __single_pass_iterator__.\n
一个区间 `X`，其 `boost::range_iterator<X>::type` 为 __single_pass_iterator__ 的 model。

[heading Associated types 关联类型]

[table
  []
  [[Iterator type \n迭代器类型     ] [`boost::range_iterator<X>::type`      ] [The type of iterator used to iterate through a Range's elements. The iterator's value type is expected to be the Range's value type. A conversion from the iterator type to the `const` iterator type must exist.\n
  用于迭代区间中的元素的迭代器的类型。迭代器的 value type 应为区间的 value type. 从该迭代器类型到 `const` 迭代器类型的转换必须存在。]]
  [[Const iterator type\n常量迭代器类型] [`boost::range_iterator<const X>::type`] [A type of iterator that may be used to examine, but not to modify, a Range's elements.\n
  一个迭代器类型，该迭代器可用于检测但不可修改区间中的元素。]]
]

[heading Valid expressions 有效表达式]

The following expressions must be valid.\n
以下表达式必须有效。

[table
  [[Name 名字] [Expression 表达式      ] [Return type 返回类型       ]]
  [[Beginning of range\n区间的始端] [`boost::begin(a)`] [`boost::range_iterator<X>::type` if `a` is mutable, `boost::range_iterator<const X>::type` otherwise]]
  [[End of range \n区间的末端     ] [`boost::end(a)`  ] [`boost::range_iterator<X>::type` if `a` is mutable, `boost::range_iterator<const X>::type` otherwise]]
]

[heading Expression semantics 表达式语义]

[table
  [[Expression 表达式      ] [Semantics   语义                                          ] [Postcondition 后验条件]]
  [[`boost::begin(a)`] [Returns an iterator pointing to the first element in the Range.         \n
  返回一个迭代器，指向区间中的第一个元素] [`boost::begin(a)` is either dereferenceable or past-the-end. It is past-the-end if and only if `boost::distance(a) == 0`.\n
  `boost::begin(a)` 是可提领的或是 past-the-end. 它是 past-the-end 当且仅当 `boost::size(a) == 0`.]]
  [[`boost::end(a)`  ] [Returns an iterator pointing one past the last element in the Range.    \n
  返回一个迭代器，指向区间中的最后一个元素之后。] [`boost::end(a)` is past-the-end.\n
  `boost::end(a)` 为 past-the-end.]]
]

[heading Complexity guarantees 复杂度保证]

`boost::end(a)` is at most amortized linear time, `boost::begin(a)` is amortized constant time. For most practical purposes, one can expect both to be amortized constant time.\n
`boost::end(a)` 至多为分期线性时间，`boost::begin(a)` 为分期常量时间。大多数情况下，你可以期望两个函数均为分期常量时间。

[heading Invariants 不变式]

[table
  []
  [[Valid range \n有效区间] [For any Range `a`, `[boost::begin(a),boost::end(a))` is a valid range, that is, `boost::end(a)` is reachable from `boost::begin(a)` in a finite number of increments.\n
  对于任意区间 `a`, `[boost::begin(a),boost::end(a))` 是一个有效区间，即 `boost::end(a)` 可以从 `boost::begin(a)` 
  在经过有限次递增后到达。]]

  [[Completeness\n完整性] [An algorithm that iterates through the range `[boost::begin(a),boost::end(a))` will pass through every element of `a`.\n
  一个对区间 `[boost::begin(a),boost::end(a))` 进行迭代的算法将遍历 `a` 的每一个元素。]]
]

[heading See also 参见]

__extending_for_udts__

__implementation_of_metafunctions__

__implementation_of_functions__

__container__

[endsect]


[section:forward_range Forward Range 前向区间]

[heading Notation 符号]

[table
    []
    [[`X`] [A type that is a model of __forward_range__.\n
    一个类型，__forward_range__ 的 model.]]
    [[`a`] [Object of type X.\n
    类型 X 的对象]]
]

[heading Description 说明]

A range `X` where `boost::range_iterator<X>::type` is a model of __forward_traversal_iterator__.\n
区间 `X` 的 `boost::range_iterator<X>::type` 为 __forward_traversal_iterator__ 的 model.

[heading Refinement of 强化自]

__single_pass_range__

[heading Associated types 关联类型]

[table
  []
  [[Distance type\n距离类型] [`boost::range_difference<X>::type`] [A signed integral type used to represent the distance between two of the Range's iterators. This type must be the same as the iterator's distance type.\n
  一个有符号整数类型，用于表示两个区间迭代器间的距离。该类型必须与迭代器的距离类型相同。]]
  [[Size type\n大小类型] [`boost::range_size<X>::type`      ] [An unsigned integral type that can represent any nonnegative value of the Range's distance type.\n
  一个无符号整数类型，可以表示区间距离类型的任意非负值。]]
]

[heading See also 参见]

__implementation_of_metafunctions__

__implementation_of_functions__

[endsect]


[section:bidirectional_range Bidirectional Range 双向区间]

[heading Notation 符号]

[table
    []
    [[`X`] [A type that is a model of __bidirectional_range__.\n
    一个类型，__bidirectional_range__ 的 model.]]
    [[`a`] [Object of type X.\n
    类型 X 的对象。]]
]

[heading Description 说明]

This concept provides access to iterators that traverse in both directions (forward and reverse). The `boost::range_iterator<X>::type` iterator must meet all of the requirements of __bidirectional_traversal_iterator__.\n
该概念提供了迭代器用于从两个方向(前向和后向)进行遍历。
`boost::range_iterator<X>::type` 的迭代器必须满足 __bidirectional_traversal_iterator__ 的所有要求。

[heading Refinement of 强化自]

__forward_range__

[heading Associated types 关联类型]

[table
  []
  [[Reverse Iterator type\n反向迭代器类型] [`boost::range_reverse_iterator<X>::type`      ] [The type of iterator used to iterate through a Range's elements in reverse order. The iterator's value type is expected to be the Range's value type. A conversion from the reverse iterator type to the const reverse iterator type must exist.\n
  用于对区间元素进行反向遍历的迭代器类型。该迭代器的值类型应为区间的值类型。必须有从反向迭代器类型转为常量反向迭代器类型的转换。]]

  [[Const reverse iterator type\n常量反向迭代器类型] [`boost::range_reverse_iterator<const X>::type`] [A type of reverse iterator that may be used to examine, but not to modify, a Range's elements.\n
  一种可用于读出但不能修改某个区间元素的反向迭代器类型。]]
]

[heading Valid expressions 有效表达式]

[table
  [[Name 名字             ] [Expression 表达式       ] [Return type 返回类型] [Semantics 语义]]
  [[Beginning of range\n区间始端] [`boost::rbegin(a)`] [`boost::range_reverse_iterator<X>::type` if `a` is mutable `boost::range_reverse_iterator<const X>::type` otherwise.] [Equivalent to `boost::range_reverse_iterator<X>::type(boost::end(a))`.\n
  等同于 `boost::range_reverse_iterator<X>::type(boost::end(a))`.]]

  [[End of range\n区间末端] [`boost::rend(a)`  ] [`boost::range_reverse_iterator<X>::type` if `a` is mutable, `boost::range_reverse_iterator<const X>::type` otherwise.] [Equivalent to `boost::range_reverse_iterator<X>::type(boost::begin(a))`.\n
  等同于 `boost::range_reverse_iterator<X>::type(boost::begin(a))`.]]
]

[heading Complexity guarantees 复杂度保证]

`boost::rbegin(a)` has the same complexity as `boost::end(a)` and `boost::rend(a)` has the same complexity as `boost::begin(a)` from __forward_range__.\n
`boost::rbegin(a)` 具有与 __forward_range__ 的 `boost::end(a)` 相同的复杂度，而 `boost::rend(a)` 
则具有与 `boost::begin(a)` 相同的复杂度。

[heading Invariants 不变式]

[table
  []
  [[Valid reverse range\n有效反向区间] [For any Bidirectional Range a, `[boost::rbegin(a),boost::rend(a))` is a valid range, that is, `boost::rend(a)` is reachable from `boost::rbegin(a)` in a finite number of increments.\n
  对于任意双向区间，`[boost::rbegin(a),boost::rend(a))` 是一个有效区间，即 `boost::rend(a)` 可以在有限次递增后从 
  `boost::rbegin(a)` 到达。]]

  [[Completeness\n完整性] [An algorithm that iterates through the range `[boost::rbegin(a),boost::rend(a))` will pass through every element of `a`.\n
  对区间 `[boost::rbegin(a),boost::rend(a))` 进行迭代的算法将遍历 `a` 的每一个元素。]]
]

[heading See also 参见]

__implementation_of_metafunctions__

__implementation_of_functions__

[endsect]


[section:random_access_range Random Access Range 随机访问区间]

[heading Description 说明]

A range `X` where `boost::range_iterator<X>::type` is a model of __random_access_traversal_iterator__.\n
区间 `X` 的 `boost::range_iterator<X>::type` 为 __random_access_traversal_iterator__ 的 model.

[heading Refinement of 强化自]

__bidirectional_range__

[heading Valid expressions 有效表达式]

[table
  [[Name 名字] [Expression 表达式] [Return type 返回类型]]
  [[Size of range\n区间大小] [`boost::size(a)`] [`boost::range_size<X>::type`]]
]

[heading Expression semantics 表达式语义]

[table
  [[Expression 表达式] [Semantics 语义] [Postcondition 后验条件]]
  [[`boost::size(a)`] [Returns the size of the Range, that is, its number of elements. Note `boost::size(a) == 0u` is equivalent to `boost::empty(a)`.\n
  返回区间的大小，即元素的数量。注意，`boost::size(a) == 0u` 等价于 `boost::empty(a)`.] [`boost::size(a) >= 0`]]
]

[heading Complexity guarantees 复杂度保证]

`boost::size(a)` completes in amortized constant time.\n
`boost::size(a)` 在常量时间内完成。

[heading Invariants 不变式]

[table
  []
  [[Range size\n区间大小] [`boost::size(a)` is equal to the `boost::end(a)` - `boost::begin(a)`.\n
  `boost::size(a)` 等于 `boost::end(a)` - `boost::begin(a)`.]]
]

[endsect]


[section:concept_checking Concept Checking 概念检查]

Each of the range concepts has a corresponding concept checking class in the file [@../../boost/range/concepts.hpp `<boost/range/concepts.hpp>`]. These classes may be used in conjunction with the __concept_check__ to ensure that the type of a template parameter is compatible with a range concept. If not, a meaningful compile time error is generated. Checks are provided for the range concepts related to iterator traversal categories. For example, the following line checks that the type `T` models the __forward_range__ concept.\n
每一个区间概念都有一个对应的概念检查类在 [@../../boost/range/concepts.hpp `<boost/range/concepts.hpp>`] 中。
这些类可以和 __concept_check__ 一起使用，以确保模板参数的类型兼容于某个区间概念。如果不兼容，则产生一个编译期错误。
为区间概念所提供的检查是关于迭代器遍历类别的。例如，下面这行代码检查类型 `T` 是否符合 __forward_range__ 的概念。

``
BOOST_CONCEPT_ASSERT(( ForwardRangeConcept<T> ));
``

An additional concept check is required for the value access property of the range based on the range's iterator type. For example to check for a ForwardReadableRange, the following code is required.\n
还有一个要进行的概念检查是针对区间所基于的区间迭代器类型的值访问属性。例如检查一个前向可读区间，需要以下代码。

``
BOOST_CONCEPT_ASSERT(( ForwardRangeConcept<T> ));
BOOST_CONCEPT_ASSERT(( ReadableIteratorConcept<typename range_iterator<T>::type> ));
``

The following range concept checking classes are provided.\n
本库提供了以下区间概念检查类：

* Class SinglePassRangeConcept checks for __single_pass_range__\n
  类 SinglePassRangeConcept 用于检查 __single_pass_range__
* Class ForwardRangeConcept checks for __forward_range__\n
  类 ForwardRangeConcept 用于检查 __forward_range__
* Class BidirectionalRangeConcept checks for __bidirectional_range__\n
  类 BidirectionalRangeConcept 用于检查 __bidirectional_range__
* Class RandomAccessRangeConcept checks for __random_access_range__\n
  类 RandomAccessRangeConcept 用于检查 __random_access_range__

[heading See also 参见]

[link range.style_guide Range Terminology and style guidelines 区间的术语及风格]

__iterator_concepts__

__concept_check__

[endsect]

[endsect]

