[/ 
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]


[section:thread_safety Thread Safety 线程安全性]

The Boost.Regex library is thread safe when Boost is: you can verify that 
Boost is in thread safe mode by checking to see if `BOOST_HAS_THREADS` is 
defined: this macro is set automatically by the config system when 
threading support is turned on in your compiler.\n
如果 Boost 是线程安全的，那么 Boost.Regex 库也是：你可以通过检查 `BOOST_HAS_THREADS` 是否被定义来验证 Boost 是否处于线程安全模式： 在编译器支持线程的情况下这个宏被配置系统自动地设置。

Class [basic_regex] and its typedefs regex and wregex are thread safe, 
in that compiled regular expressions can safely be shared between threads. 
The matching algorithms [regex_match], [regex_search], and [regex_replace]
are all re-entrant and thread safe. Class [match_results] is now thread safe, 
in that the results of a match can be safely copied from one thread to 
another (for example one thread may find matches and push [match_results] 
instances onto a queue, while another thread pops them off the other end), 
otherwise use a separate instance of [match_results] per thread.\n
类 [basic_regex] 及其 typedef 的 regex 和 wregex 是线程安全的，也就是说已编译的正则表达式可以被不同线程安全地共享。 
算法 [regex_match]、[regex_search] 和 [regex_replace] 都是可重入，线程安全的。 
类 [match_results] 现在是线程安全的，也就是说匹配的结果可以从一个线程安全地拷贝到另一个线程 
(例如一个线程找到匹配并将 [match_results] 实例放入队列中，而另一个线程从另一端取出它们)，否则每个线程使用 [match_results] 独立的实例。

The [link boost_regex.ref.posix POSIX API functions] are all re-entrant and thread safe, regular 
expressions compiled with regcomp can also be shared between threads.\n
[link boost_regex.ref.posix POSIX API 函数] 都是可重入，线程安全的，用 regcomp 编译的正则表达式也可以在线程间共享。

The [link boost_regex.ref.deprecated_interfaces.old_regex class RegEx] is 
only thread safe if each thread gets its own 
RegEx instance (apartment threading) - this is a consequence of 
RegEx handling both compiling and matching regular expressions.\n
[link boost_regex.ref.deprecated_interfaces.old_regex 类 RegEx] 只有当每个线程使用自己的 RegEx 实例(单元线程)时才是线程安全的 - 
这是因为 RegEx 同时处理编译和匹配正则表达式。

Finally note that changing the global locale invalidates all compiled 
regular expressions, therefore calling `set_locale` from one thread 
while another uses regular expressions will produce unpredictable results.\n
最后注意改变全局区域设置会使所有已编译的正则表达式失效，从某个线程调用 `set_locale` 后会使其它线程使用的正则表达式产生不可预测的结果。

There is also a requirement that there is only one thread executing prior 
to the start of main().\n
还有一个要求，在 main() 开始前只有一个执行线程。
     
[endsect]

