[/ 
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]


[section:captures Understanding Marked Sub-Expressions and Captures 理解被标记子表达式和捕捉]

Captures are the iterator ranges that are "captured" by marked 
sub-expressions as a regular expression gets matched.  Each marked 
sub-expression can result in more than one capture, if it is matched 
more than once.  This document explains how captures and marked 
sub-expressions in Boost.Regex are represented and accessed.\n
捕捉是当正则表达式匹配时由被标记的子表达式"捕获"的迭代器范围。 
每个被标记的子表达式可以导致一个或多个捕捉(如果匹配多次)。 
本文档解释了捕捉和被标记子表达式在Boost.Regex中如何被表示和做到的。

[h4 Marked sub-expressions 被标记子表达式]

Every time a Perl regular expression contains a parenthesis group `()`, it 
spits out an extra field, known as a marked sub-expression, 
for example the expression:\n
Perl正则表达式每包含一个括号组 `()`，就会分离出一部分区域，命名为被标记子表达式，例如：

[pre (\w+)\W+(\w+)]

Has two marked sub-expressions (known as $1 and $2 respectively), in 
addition the complete match is known as $&, everything before the 
first match as $\`, and everything after the match as $'.  So 
if the above expression is searched for within `"@abc def--"`, then we obtain:\n
有两个标记子表达式(分别为$1和$2)，全部的匹配被命名为$&，第一个匹配前的部分为$\`，匹配后的部分为$'。 
如果上面的表达式用来搜索 `"@abc def--"`，会有：

[table
[[Sub-expression 子表达式][Text found 得到的文本]]
[[$\`]["@"]]
[[$&]["abc def"]]
[[$1]["abc"]]
[[$2]["def"]]
[[$']["--"]]
]

In Boost.Regex all these are accessible via the [match_results] class that 
gets filled in when calling one of the regular expression matching algorithms 
([regex_search], [regex_match], or [regex_iterator]).  So given:\n
在Boost.Regex中上面所有都可以通过 [match_results] 类获得，
这个类在以下某个正则表达式匹配算法([regex_search], [regex_match], 或 [regex_iterator])中被填充。如下：

   boost::match_results<IteratorType> m;

The Perl and Boost.Regex equivalents are as follows:\n
Perl和Boost.Regex按照下面的方式对应：

[table 
[[Perl][Boost.Regex]]
[[$\`][`m.prefix()`]]
[[$&][`m[0]`]]
[[$n][`m[n]`]]
[[$\'][`m.suffix()`]]
]

In Boost.Regex each sub-expression match is represented by a [sub_match] object, 
this is basically just a pair of iterators denoting the start and end 
position of the sub-expression match, but there are some additional 
operators provided so that objects of type [sub_match] behave a lot like a 
`std::basic_string`: for example they are implicitly convertible to a 
`basic_string`, they can be compared to a string, added to a string, or 
streamed out to an output stream.\n
在Boost.Regex中每个子表达式的匹配都用一个 [sub_match] 对象来表示，最基本的只是一对迭代器用来标识子表达式匹配的起始和终止位置， 
但还有一些额外的操作符，使得 [sub_match] 类的对象看起来像 `std::basic_string`：例如它们可以被隐式转换为 `basic_string`，
可以与字符串作比较，添加到字符中，或者流出到一个输出流中。

[h4 Unmatched Sub-Expressions 不匹配的子表达式]

When a regular expression match is found there is no need for all of the 
marked sub-expressions to have participated in the match, for example the expression:\n
当正则表达式找到一个匹配时，并不需要所有的标记子表达式都有匹配，例如：

[pre (abc)|(def)]

can match either $1 or $2, but never both at the same time.  In Boost.Regex 
you can determine which sub-expressions matched by accessing the 
`sub_match::matched` data member.\n
可以匹配$1或者$2，但绝不会同时。在Boost.Regex中你可以通过访问 `sub_match::matched` 数据成员来知道哪个子表达式被匹配了。

[h4 Repeated Captures 重复捕捉]

When a marked sub-expression is repeated, then the sub-expression gets 
"captured" multiple times, however normally only the final capture is available, 
for example if\n
标记子表达式被重复时，子表达式被"捕捉"多次，但通常只有最后一次捕捉可得，例如，如果

[pre (?:(\w+)\W+)+]

is matched against\n
用于匹配

[pre one fine day]

Then $1 will contain the string "day", and all the previous captures will have 
been forgotten.\n
$1包含字符串"day"，前面所有的捕捉都被抛弃了。

However, Boost.Regex has an experimental feature that allows all the capture 
information to be retained - this is accessed either via the 
`match_results::captures` member function or the `sub_match::captures` member 
function.  These functions return a container that contains a sequence of all 
the captures obtained during the regular expression matching.  The following 
example program shows how this information may be used:\n
但是，Boost.Regex有一个实验性的特性使得所有捕获的信息都被保留 - 这可以通过 `match_results::captures` 成员函数或 
`sub_match::captures` 成员函数获取。这些函数返回一个容器包含在正则表达式匹配过程中所有捕获信息的序列。 
下面的例子展示了这个信息如何被使用：

   #include <boost/regex.hpp>
   #include <iostream>

   void print_captures(const std::string& regx, const std::string& text)
   {
      boost::regex e(regx);
      boost::smatch what;
      std::cout << "Expression:  \"" << regx << "\"\n";
      std::cout << "Text:        \"" << text << "\"\n";
      if(boost::regex_match(text, what, e, boost::match_extra))
      {
         unsigned i, j;
         std::cout << "** Match found **\n   Sub-Expressions:\n";
         for(i = 0; i < what.size(); ++i)
            std::cout << "      $" << i << " = \"" << what[i] << "\"\n";
         std::cout << "   Captures:\n";
         for(i = 0; i < what.size(); ++i)
         {
            std::cout << "      $" << i << " = {";
            for(j = 0; j < what.captures(i).size(); ++j)
            {
               if(j)
                  std::cout << ", ";
               else
                  std::cout << " ";
               std::cout << "\"" << what.captures(i)[j] << "\"";
            }
            std::cout << " }\n";
         }
      }
      else
      {
         std::cout << "** No Match found **\n";
      }
   }

   int main(int , char* [])
   {
      print_captures("(([[:lower:]]+)|([[:upper:]]+))+", "aBBcccDDDDDeeeeeeee");
      print_captures("(.*)bar|(.*)bah", "abcbar");
      print_captures("(.*)bar|(.*)bah", "abcbah");
      print_captures("^(?:(\\w+)|(?>\\W+))*$", 
         "now is the time for all good men to come to the aid of the party");
      return 0;
   }

Which produces the following output:\n
输出如下：

[pre 
Expression:  "(([[:lower:\]\]+)|([[:upper:\]\]+))+"
Text:        "aBBcccDDDDDeeeeeeee"
'''**''' Match found '''**'''
   Sub-Expressions:
      $0 = "aBBcccDDDDDeeeeeeee"
      $1 = "eeeeeeee"
      $2 = "eeeeeeee"
      $3 = "DDDDD"
   Captures:
      $0 = { "aBBcccDDDDDeeeeeeee" }
      $1 = { "a", "BB", "ccc", "DDDDD", "eeeeeeee" }
      $2 = { "a", "ccc", "eeeeeeee" }
      $3 = { "BB", "DDDDD" }
Expression:  "(.'''*''')bar|(.'''*''')bah"
Text:        "abcbar"
'''**''' Match found '''**'''
   Sub-Expressions:
      $0 = "abcbar"
      $1 = "abc"
      $2 = ""
   Captures:
      $0 = { "abcbar" }
      $1 = { "abc" }
      $2 = { }
Expression:  "(.'''*''')bar|(.'''*''')bah"
Text:        "abcbah"
'''**''' Match found '''**'''
   Sub-Expressions:
      $0 = "abcbah"
      $1 = ""
      $2 = "abc"
   Captures:
      $0 = { "abcbah" }
      $1 = { }
      $2 = { "abc" }
Expression:  "^(?:(\w+)|(?>\W+))'''*$'''"
Text:        "now is the time for all good men to come to the aid of the party"
'''**''' Match found '''**'''
   Sub-Expressions:
      $0 = "now is the time for all good men to come to the aid of the party"
      $1 = "party"
   Captures:
      $0 = { "now is the time for all good men to come to the aid of the party" }
      $1 = { "now", "is", "the", "time", "for", "all", "good", "men", "to", 
         "come", "to", "the", "aid", "of", "the", "party" }
]

Unfortunately enabling this feature has an impact on performance 
(even if you don't use it), and a much bigger impact if you do use it, 
therefore to use this feature you need to:\n
不幸的是，激活这个特性会造成性能影响(即使你不使用)，如果你使用就会有更大的影响，因此为了使用这个特性你需要：

* Define BOOST_REGEX_MATCH_EXTRA for all translation units including the library source (the best way to do this is to uncomment this define in boost/regex/user.hpp and then rebuild everything.\n
  在所有编译单元中定义BOOST_REGEX_MATCH_EXTRA，包括库源码(最好的方式是在boost/regex/user.hpp中取消注释这行，然后重新生成所有的东西)。 
* Pass the match_extra flag to the particular algorithms where you actually need the captures information (regex_search, regex_match, or regex_iterator).\n
  将参数match_extra标记传入你想要使用这个捕获信息的特定算法(regex_search、regex_match或regex_iterator)。
    
[endsect]

