[/ 
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]


[section:concepts Concepts 概念]

[section:charT_concept charT Requirements  charT的要求]

Type `charT` used a template argument to class template [basic_regex], 
must have a trivial default constructor, copy constructor, 
assignment operator, and destructor.  In addition the following requirements 
must be met for objects; /c/ of type `charT`, /c1/ and /c2/ of type `charT const`, 
and /i/ of type `int`:\n
类型 `charT` 作为类模板 [basic_regex] 的参数，必须有平凡的默认构造函数，拷贝构造函数，赋值操作符和析构函数。 
另外，对于对象 (/c/ 类型为 `charT`、/c1/ 和 /c2/ 类型为 `charT const`、/i/ 类型为 `int`)，下面的需求必须被满足：

[table
[[Expression 表达式] 	[Return type 返回类型] 	[Assertion / Note / Pre- / Post-condition 断言/说明/前提条件/后验条件]]
[[charT c] 	[charT] 	[Default constructor (must be trivial).\n
缺省构造函数(必须是平凡的)。]]
[[charT c(c1)] 	[charT] 	[Copy constructor (must be trivial).\n
复制构造函数(必须是平凡的)。]]
[[c1 = c2] 	[charT] 	[Assignment operator (must be trivial).\n
赋值操作符(必须是平凡的)。]]
[[c1 == c2] 	[bool] 	[true if c1 has the same value as c2.\n
如果 c1 具有与 c2 相同的值则为 true。]]
[[c1 != c2] 	[bool] 	[true if c1 and c2 are not equal.\n
如果 c1 与 c2 不相等则为 true。]]
[[c1 < c2]     [bool] 	[true if the value of c1 is less than c2.\n
如果 c1 的值小于 c2 则为 true。]]
[[c1 > c2] 	[bool] 	[true if the value of c1 is greater than c2.\n
如果 c1 的值大于 c2 则为 true。]]
[[c1 <= c2] 	[bool] 	[true if c1 is less than or equal to c2.\n
如果 c1 的值小于或等于 c2 则为 true。]]
[[c1 >= c2] 	[bool] 	[true if c1 is greater than or equal to c2.\n
如果 c1 的值大于或等于 c2 则为 true。]]
[[intmax_t i = c1] 	[int 	] [charT must be convertible to an integral type.\n
charT 必须能被转化为整数类型。

Note: type charT is not required to support this operation, if the traits class used supports the full Boost-specific interface, rather than the minimal standardised-interface (see traits class requirements below).\n
注意：如果使用的特性类支持全部的 Boost 特定接口，而不是最小的标准接口 (参见下面的 traits类的要求)，类型 charT 并不要求支持这个操作。]]
[[charT c(i);] 	[charT] 	[charT must be constructable from an integral type.\n
charT 必须能从整数类型构造。]]
]

[endsect]

[section:traits_concept Traits Class Requirements  Traits类的要求]

There are two sets of requirements for the `traits` template argument to 
[basic_regex]: a mininal interface (which is part of the regex standardization proposal), 
and an optional Boost-specific enhanced interface.\n
[basic_regex] 使用的 `traits` 模板参数有两种需求的集合：最小接口(正则表达式标准化提议的一部分)，和可选的 Boost 特定的增强接口。

[h4 Minimal requirements 最小要求]

In the following table `X` denotes a traits class defining types and functions for 
the character container type `charT`; /u/ is an object of type `X`; /v/ is 
an object of type `const X`; /p/ is a value of type `const charT*`; 
/I1/ and /I2/ are Input Iterators; /c/ is a value of type `const charT`; 
/s/ is an object of type `X::string_type`; /cs/ is an object of type 
`const X::string_type`; /b/ is a value of type `bool`; /I/ is a value of 
type `int`; /F1/ and /F2/ are values of type `const charT*`; and /loc/ is 
an object of type `X::locale_type`.\n
在下面的表格中 `X` 表示为字符容器类型 `charT` 定义类型和函数的特性类；/u/ 是类型 `X` 的对象；/v/ 是类型 `const X` 的对象； 
/p/ 是类型为 `const charT*` 的值；/I1/ 和 /I2/ 是输入迭代器；/c/ 是 `const charT` 类型的值；/s/ 是 `X::string_type` 类型的对象； 
/cs/ 是 `const X::string_type` 类型的对象；/b/ 是 `bool` 类型的值；/I/ 是 `int` 类型的值；/F1/ 和 /F2/ 是 `const charT*` 类型的值； 
/loc/ 是 `X::locale_type` 类型的对象。

[table
[[Expression 表达式][Return type 返回类型][Assertion / Note Pre / Post condition 断言/说明/前提条件/后验条件]]
[[X::char_type][charT][The character container type used in the implementation of class template basic_regex.\n
用于实现类模板 basic_regex 的字符容器类型。]]
[[X::size_type][][An unsigned integer type, capable of holding the length of a null-terminated string of charT's.\n
无符号整数类型，用于存储 NULL 结尾的 charT 类型的字符串长度。]]
[[X::string_type][std::basic_string<charT> or std::vector<charT>][]]
[[X::locale_type][Implementation defined][A copy constructible type that represents the locale used by the traits class.\n
特性类用于表示区域 (locale) 的可拷贝构造类型。 ]]
[[X::char_class_type][Implementation defined][A bitmask type representing a particular character classification. Multiple values of this type can be bitwise-or'ed together to obtain a new valid value.\n
用于表示特定字符分类的位掩码类型。该类的多个值可以通过位式运算得到一个新的合法值。]]
[[X::length(p)][X::size_type][Yields the smallest i such that p\[i\] == 0. Complexity is linear in i.\n
返回使 p\[i\] == 0 的最小的 i。i 的线性复杂度。]]
[[v.translate(c)][X::char_type][Returns a character such that for any character d that is to be considered equivalent to c then v.translate(c) == v.translate(d).\n
返回一个字符，使得对于任意字符 d，如果 v.translate(c) == v.translate(d)，则 d 和 c 被认为相等。]]
[[v.translate_nocase(c)][X::char_type][For all characters C that are to be considered equivalent to c when comparisons are to be performed without regard to case, then v.translate_nocase(c) == v.translate_nocase(C).\n
对所有字符 C，如果忽略大小写比较和 c 相等，则 v.translate_nocase(c) == v.translate_nocase(C)。]]
[[v.transform(F1, F2)][X::string_type][Returns a sort key for the character sequence designated by the iterator range \[F1, F2) such that if the character sequence \[G1, G2) sorts before the character sequence [H1, H2) then v.transform(G1, G2) < v.transform(H1, H2). \n
返回由迭代器范围 \[F1, F2) 指定字符序列的排序关键字。即如果字符序列 \[G1, G2) 排在字符序列 \[H1, H2) 之前，则 v.transform(G1, G2) < v.transform(H1, H2)。]]
[[v.transform_primary(F1, F2)][X::string_type][Returns a sort key for the character sequence designated by the iterator range \[F1, F2) such that if the character sequence [G1, G2) sorts before the character sequence \[H1, H2) when character case is not considered then v.transform_primary(G1, G2) < v.transform_primary(H1, H2).\n
返回由迭代器范围 \[F1, F2) 指定字符序列的排序关键字。 如果不考虑字符大小写，字符序列 \[G1, G2) 排在字符序列 \[H1, H2) 之前，则 v.transform_primary(G1, G2) < v.transform_primary(H1, H2)。 ]]
[[v.lookup_classname(F1, F2)][X::char_class_type][Converts the character sequence designated by the iterator range \[F1,F2) into a bitmask type that can subsequently be passed to isctype. Values returned from lookup_classname can be safely bitwise or'ed together. Returns 0 if the character sequence is not the name of a character class recognized by X. The value returned shall be independent of the case of the characters in the sequence.\n
返回由迭代器范围 \[F1,F2) 指定字符序列转换的可传入 isctype 的位掩码类型。 lookup_classname 返回的值可以用位或运算安全地组合。 如果字符序列不是 X 能识别的字符类名称则返回 0。 返回值应与序列中字符的大小写无关。]]
[[v.lookup_collatename(F1, F2)][X::string_type][Returns a sequence of characters that represents the collating element consisting of the character sequence designated by the iterator range \[F1, F2). Returns an empty string if the character sequence is not a valid collating element.\n
返回由迭代器序列 \[F1, F2) 指定字符序列组成的对照元素所对应的字符序列。 如果字符序列不是有效的对照元素则返回空字符串。]]
[[v.isctype(c, v.lookup_classname (F1, F2))][bool][Returns true if character c is a member of the character class designated by the iterator range \[F1, F2), false otherwise.\n
如果 c 是迭代器范围 \[F1, F2) 指定字符类的成员则返回 true，否则返回 false。]]
[[v.value(c, I)][int][Returns the value represented by the digit c in base I if the character c is a valid digit in base I; otherwise returns -1. \[Note: the value of I will only be 8, 10, or 16. -end note\]\n
如果字符 c 在基数 I 下是合法的数字则返回这个数字；否则返回 -1。\[Note: I 的值只能是 8、10 或 16。-end note\] ]]
[[u.imbue(loc)][X::locale_type][Imbues u with the locale loc, returns the previous locale used by u if any. \n
将 u 的区域设为 loc，返回 u 之前使用的区域。]]
[[v.getloc()][X::locale_type][Returns the current locale used by v if any. \n
返回 v 当前使用的区域。]]
]

[h4 Additional Optional Requirements 其它的可选要求]

The following additional requirements are strictly optional, 
however in order for [basic_regex] to take advantage of these additional 
interfaces, all of the following requirements must be met; [basic_regex] 
will detect the presence or absense of the member `boost_extensions_tag` and 
configure itself appropriately.\n
下面额外的需求是可选的，然而如果要 [basic_regex] 能够使用额外接口的优势，下面所有的需求都必须满足；
[basic_regex] 会自动检测成员 `boost_extensions_tag` 存在与否来适当地设置自己。


[table 
[[Expression 表达式][Result 结果][Assertion / Note Pre / Post condition 断言/说明/前提条件/后验条件]]
[[X::boost_extensions_tag][An unspecified type.][When present, all of the extensions listed in this table must be present.\n
如果存在，则下面表格列出的所有扩展都必须存在。]]
[[v.syntax_type(c)][regex_constants::syntax_type][Returns a symbolic value of type regex_constants::syntax_type that signifies the meaning of character c within the regular expression grammar.\n
返回 regex_constants::syntax_type 类型的符号值，用于表示字符 c 在正则表达式文法中的含义。]]
[[v.escape_syntax_type(c)][regex_constants::escape_syntax_type][Returns a symbolic value of type regex_constants::escape_syntax_type, that signifies the meaning of character c within the regular expression grammar, when c has been preceded by an escape character. Precondition: if b is the character preceding c in the expression being parsed then: `v.syntax_type(b) == syntax_escape`\n
返回 regex_constants::escape_syntax_type 类型的符号值，用于表示在正则表达式文法中字符 c 前跟转义符号时的含义。 
前提条件：如果字符 b 是在表达式翻译中 c 之前的字符，则：`v.syntax_type(b) == syntax_escape`]]
[[v.translate(c, b)][X::char_type][Returns a character d such that: for any character d that is to be considered equivalent to c then `v.translate(c,false)==v.translate(d,false)`. Likewise for all characters C that are to be considered equivalent to c when comparisons are to be performed without regard to case, then `v.translate(c,true)==v.translate(C,true)`.\n
返回满足如下条件的字符 d：对于任意被认为与 c 相等的字符 d，则有 `v.translate(c,false)==v.translate(d,false)`。 
同样，对于所有忽略大小写比较中认为与 c 相等的字符 C，有 `v.translate(c,true)==v.translate(C,true)`。 ]]
[[v.toi(I1, I2, i)][An integer type capable of holding either a charT or an int.\n
能够容纳 charT 或 int 的整数类型。][Behaves as follows: if `p == q` or if `*p` is not a digit character then returns -1. Otherwise performs formatted numeric input on the sequence \[p,q) and returns the result as an int. Postcondition: either `p == q` or `*p` is a non-digit character.\n
行为如下：如果 `p == q` 或如果 `*p` 不是数字字符，则返回 -1。否则在序列 \[p,q) 上执行数值格式输入并返回输入的结果 (int)。 
后验条件：`p == q` 或 `*p` 不是数字字符。]]
[[v.error_string(I)][std::string][Returns a human readable error string for the error condition i, where i is one of the values enumerated by type regex_constants::error_type.  If the value /I/ is not recognized then returns the string "Unknown error" or a localized equivalent.\n
为错误条件 i 返回可读的错误字符串，其中 i 是类型 regex_constants::error_type 的枚举值之一。如果 /I/ 不能被识别则返回 "Unknown error" 或本地化等价的字符串。]]
[[v.tolower(c)][X::char_type][Converts c to lower case, used for Perl-style \l and \L formating operations.\n
将 c 转为小写，用于 Perl 风格的 \l 和 \L 格式化操作。]]
[[v.toupper(c)][X::char_type][Converts c to upper case, used for Perl-style \u and \U formating operations.\n
将 c 转为大写，用于 Perl 风格的 \u 和 \U 格式化操作。]]
]

[endsect]

[section:iterator_concepts Iterator Requirements 迭代器的要求]

The regular expression algorithms (and iterators) take all require a 
Bidirectional-Iterator.\n
正则表达式算法 (包括迭代器) 都要求双向迭代器。

[endsect]

[endsect]


