[/ 
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]


[section:old_regex High Level Class RegEx (Deprecated) 高级类RegEx]

The high level wrapper class RegEx is now deprecated and does not form 
part of the regular expression standardization proposal.  This type still 
exists, and existing code will continue to compile, however the following 
documentation is unlikely to be further updated.\n
高层外覆类 RegEx 已被废弃，并不是正则表达式标准提议的一部分。这个类型仍然存在，已经存在的代码仍然可以编译，但下面的文档将不再被更新。

   #include <boost/cregex.hpp>

The class RegEx provides a high level simplified interface to the regular 
expression library, this class only handles narrow character strings, and 
regular expressions always follow the "normal" syntax - that is the 
same as the perl / ECMAScript synatx.\n
类 RegEx 为正则表达式库提供了高层简化的接口，这个类只处理窄字符的字符串， 
并且正则表达式只使用 "通常" 的语法 - 与 perl / ECMAScript 语法相同。

   typedef bool (*GrepCallback)(const RegEx& expression);
   typedef bool (*GrepFileCallback)(const char* file, const RegEx& expression);
   typedef bool (*FindFilesCallback)(const char* file);

   class  RegEx
   {
   public:
      RegEx();
      RegEx(const RegEx& o);
      ~RegEx();
      RegEx(const char* c, bool icase = false);
      explicit RegEx(const std::string& s, bool icase = false);
      RegEx& operator=(const RegEx& o);
      RegEx& operator=(const char* p);
      RegEx& operator=(const std::string& s);
      unsigned int SetExpression(const char* p, bool icase = false);
      unsigned int SetExpression(const std::string& s, bool icase = false);
      std::string Expression()const;
      //
      // now matching operators: 
      // 
      bool Match(const char* p, boost::match_flag_type flags = match_default);
      bool Match(const std::string& s, boost::match_flag_type flags = match_default); 
      bool Search(const char* p, boost::match_flag_type flags = match_default); 
      bool Search(const std::string& s, boost::match_flag_type flags = match_default); 
      unsigned int Grep(GrepCallback cb, const char* p, 
                        boost::match_flag_type flags = match_default); 
      unsigned int Grep(GrepCallback cb, const std::string& s, 
                        boost::match_flag_type flags = match_default); 
      unsigned int Grep(std::vector<std::string>& v, const char* p, 
                        boost::match_flag_type flags = match_default); 
      unsigned int Grep(std::vector<std::string>& v, const std::string& s, 
                        boost::match_flag_type flags = match_default); 
      unsigned int Grep(std::vector<unsigned int>& v, const char* p, 
                        boost::match_flag_type flags = match_default); 
      unsigned int Grep(std::vector<unsigned int>& v, const std::string& s, 
                        boost::match_flag_type flags = match_default); 
      unsigned int GrepFiles(GrepFileCallback cb, const char* files, bool recurse = false, 
                             boost::match_flag_type flags = match_default); 
      unsigned int GrepFiles(GrepFileCallback cb, const std::string& files, 
                             bool recurse = false, 
                             boost::match_flag_type flags = match_default); 
      unsigned int FindFiles(FindFilesCallback cb, const char* files, 
                             bool recurse = false, 
                             boost::match_flag_type flags = match_default); 
      unsigned int FindFiles(FindFilesCallback cb, const std::string& files, 
                             bool recurse = false, 
                             boost::match_flag_type flags = match_default); 
      std::string Merge(const std::string& in, const std::string& fmt, 
                        bool copy = true, boost::match_flag_type flags = match_default); 
      std::string Merge(const char* in, const char* fmt, bool copy = true, 
                        boost::match_flag_type flags = match_default); 
      unsigned Split(std::vector<std::string>& v, std::string& s, 
                     boost::match_flag_type flags = match_default, 
                     unsigned max_count = ~0); 
      // 
      // now operators for returning what matched in more detail: 
      // 
      unsigned int Position(int i = 0)const; 
      unsigned int Length(int i = 0)const; 
      bool Matched(int i = 0)const;
      unsigned int Line()const; 
      unsigned int Marks() const; 
      std::string What(int i)const; 
      std::string operator[](int i)const ; 

      static const unsigned int npos;
   };    

Member functions for class RegEx are defined as follows:\n
类 RegEx 的成员函数定义如下：
 
[table
[[Member 成员][Description 说明]]
[[`RegEx();`][Default constructor, constructs an instance of RegEx without any valid expression. 	 \n
默认构造函数，不用任何有效的表达式构造 RegEx 的实例。]]
[[`RegEx(const RegEx& o);`][Copy constructor, all the properties of parameter /o/ 
         are copied. 	 \n
         拷贝构造函数，参数 /o/ 的所有属性都被拷贝。]]
[[`RegEx(const char* c, bool icase = false);`][Constructs an instance of RegEx, 
         setting the expression to /c/, if /icase/ is true then matching is 
         insensitive to case, otherwise it is sensitive to case. Throws 
         [bad_expression] on failure. 	 \n
         构造 RegEx 的实例，将表达式置为 /c/， 如果 /icase/ 为 true，匹配是大小写不敏感的，否则是大小写敏感的。 
         失败时抛出 [bad_expression]。]]
[[`RegEx(const std::string& s, bool icase = false);`][Constructs an instance of 
         RegEx, setting the expression to /s/, if /icase/ is true then matching 
         is insensitive to case, otherwise it is sensitive to case. Throws 
         [bad_expression] on failure. 	 \n
         构造 RegEx 实例，将表达式置为 /s/， 如果 /icase/ 为 true，匹配是大小写不敏感的，否则是大小写敏感的。 
         失败时抛出 [bad_expression]。]]
[[`RegEx& operator=(const RegEx& o);`][Default assignment operator. 	 \n
默认赋值操作符。]]
[[`RegEx& operator=(const char* p);`][Assignment operator, equivalent to calling 
         `SetExpression(p, false)`. Throws [bad_expression] on failure. 	 \n
         赋值操作符，等价于调用 `SetExpression(p, false)`。 失败时抛出 [bad_expression]。]]
[[`RegEx& operator=(const std::string& s);`][Assignment operator, equivalent to 
         calling `SetExpression(s, false)`. Throws [bad_expression] on failure. 	 \n
         赋值操作符，等价于调用 `SetExpression(s, false)`。 失败时抛出 [bad_expression]。]]
[[`unsigned int SetExpression(constchar* p, bool icase = false);`][Sets the 
         current expression to /p/, if /icase/ is true then matching is 
         insensitive to case, otherwise it is sensitive to case. 
         Throws [bad_expression] on failure. 	 \n
         将当前表达式置为 /p/，如果 /icase/ 为 true，则匹配大小写不敏感，否则大小写敏感。失败时抛出 [bad_expression]。]]
[[`unsigned int SetExpression(const std::string& s, bool icase = false);`]
         [Sets the current expression to /s/, if /icase/ is true then matching is 
         insensitive to case, otherwise it is sensitive to case. Throws 
         [bad_expression] on failure. 	 \n
         将当前表达式置为 /s/，如果 /icase/ 为 true，则匹配大小写不敏感，否则大小写敏感。失败时抛出 [bad_expression]。]]
[[`std::string Expression()const;`][Returns a copy of the current regular expression. 	 \n
返回当前正则表达式的拷贝。]]
[[`bool Match(const char* p, boost::match_flag_type flags = match_default);`]
         [Attempts to match the current expression against the text /p/ using 
         the match flags /flags/ - see [match_flag_type]. Returns /true/ if the 
         expression matches the whole of the input string. 	 \n
         试图使用匹配标签 /flags/ 将当前表达式匹配于文本 /p/ - 参见 [match_flag_type]。如果表达式匹配全部输入字符串则返回 /true/。]]
[[`bool Match(const std::string& s, boost::match_flag_type flags = match_default);`]
         [Attempts to match the current expression against the text /s/ using 
         the [match_flag_type] /flags/. Returns /true/ if the expression matches 
         the whole of the input string. 	 \n
         试图使用匹配标签 /flags/ 将当前表达式匹配于文本 /s/ - 参见 [match_flag_type]。如果表达式匹配全部输入字符串则返回 /true/。]]
[[`bool Search(const char* p, boost::match_flag_type flags = match_default);`]
         [Attempts to find a match for the current expression somewhere in 
         the text /p/ using the [match_flag_type] /flags/. Returns /true/ 
         if the match succeeds. 	 \n
         试图使用 [match_flag_type] /flags/ 在文本 /p/ 中寻找当前表达式的匹配。如果匹配成功返回 /true/。]]
[[`bool Search(const std::string& s, boost::match_flag_type flags = match_default);`]
         [Attempts to find a match for the current expression somewhere in the 
         text /s/ using the [match_flag_type] flags. Returns /true/ if the 
         match succeeds. 	 \n
         试图使用 [match_flag_type] /flags/ 在文本 /s/ 中寻找当前表达式的匹配。如果匹配成功返回 /true/。]]
[[`unsigned int Grep(GrepCallback cb, const char* p, boost::match_flag_type flags = match_default);`]
         [Finds all matches of the current expression in the text /p/ using the 
         [match_flag_type] /flags/. For each match found calls the call-back 
         function cb as: `cb(*this);`
         If at any stage the call-back function returns /false/ then the grep 
         operation terminates, otherwise continues until no further matches 
         are found. Returns the number of matches found.\n
         在文本 /p/ 中使用 [match_flag_type] /flags/ 寻找当前表达式的所有匹配。
         对每个找到的匹配调用回调函数：`cb(*this);` 在任何阶段如果回调函数返回 /false/ 则结束 grep 操作， 
         否则继续直到找不到匹配为止。返回找到的匹配数目。]]
[[`unsigned int Grep(GrepCallback cb, const std::string& s, boost::match_flag_type flags = match_default);`]
         [Finds all matches of the current expression in the text /s/ using the 
         [match_flag_type] flags. For each match found calls the call-back 
         function cb as: `cb(*this);`
         If at any stage the call-back function returns false then the grep operation 
         terminates, otherwise continues until no further matches are found. 
         Returns the number of matches found.\n
         在文本 /s/ 中使用 [match_flag_type] /flags/ 寻找当前表达式的所有匹配。
         对每个找到的匹配调用回调函数：`cb(*this);` 在任何阶段如果回调函数返回 /false/ 则结束 grep 操作， 
         否则继续直到找不到匹配为止。返回找到的匹配数目。]]
[[`unsigned int Grep(std::vector<std::string>& v, const char* p, boost::match_flag_type flags = match_default);`]
         [Finds all matches of the current expression in the text /p/ using the 
         [match_flag_type] flags. For each match pushes a copy of what matched 
         onto /v/. Returns the number of matches found. 	 \n
         使用 [match_flag_type] /flags/ 在文本 /p/ 中寻找当前表达式的所有匹配。 
         对于每个匹配将匹配字符串的拷贝压入到 /v/。返回找到的匹配数目。]]
[[`unsigned int Grep(std::vector<std::string>& v, const std::string& s, boost::match_flag_type flags = match_default);`]
         [Finds all matches of the current expression in the text /s/ using the 
         [match_flag_type] /flags/. For each match pushes a copy of what 
         matched onto /v/. Returns the number of matches found. 	 \n
         使用 [match_flag_type] /flags/ 在文本 /s/ 中寻找当前表达式的所有匹配。 
         对于每个匹配将匹配字符串的拷贝压入到 /v/。返回找到的匹配数目。]]
[[`unsigned int Grep(std::vector<unsigned int>& v, const char* p, boost::match_flag_type flags = match_default);`]
         [Finds all matches of the current expression in the text /p/ using the 
         [match_flag_type] /flags/. For each match pushes the starting index of 
         what matched onto /v/. Returns the number of matches found. 	 \n
         使用 [match_flag_type] /flags/ 在文本 /p/ 中寻找当前表达式的所有匹配。 
         对于每个匹配将匹配字符串的拷贝压入到 /v/。返回找到的匹配数目。]]
[[`unsigned int Grep(std::vector<unsigned int>& v, const std::string& s, boost::match_flag_type flags = match_default);`]
         [Finds all matches of the current expression in the text /s/ using the 
         [match_flag_type] /flags/. For each match pushes the starting index of what 
         matched onto /v/. Returns the number of matches found. 	 \n
         使用 [match_flag_type] /flags/ 在文本 /s/ 中寻找当前表达式的所有匹配。 
         对于每个匹配将匹配字符串的拷贝压入到 /v/。返回找到的匹配数目。]]
[[`unsigned int GrepFiles(GrepFileCallback cb, const char* files, bool recurse = false, boost::match_flag_type flags = match_default);`]
         [Finds all matches of the current expression in the files files using 
         the [match_flag_type] /flags/. For each match calls the call-back function cb. 
         If the call-back returns false then the algorithm returns without 
         considering further matches in the current file, or any further files. \n
         使用 [match_flag_type] /flags/ 在文件 files 中寻找当前表达式的所有匹配。 
         对每个匹配调用回调函数 cb。如果回调函数返回 false，则结束算法，不考虑在当前文件中的进一步匹配，或后面的文件。
         
         The parameter /files/ can include wild card characters '\*' and '\?', if 
         the parameter recurse is true then searches sub-directories for matching 
         file names. \n
         参数 /files/ 可以包含通配符 '\*' 和 '\?'，如果参数 recurse 为 true 则搜索匹配文件名的子目录。

         Returns the total number of matches found.\n
         返回找到的匹配的总数量。

         May throw an exception derived from `std::runtime_error` if file io fails.\n
         如果文件读写失败，可能抛出派生于 `std::runtime_error` 的异常。]]
[[`unsigned int GrepFiles(GrepFileCallback cb, const std::string& files, bool recurse = false, boost::match_flag_type flags = match_default);`]
         [Finds all matches of the current expression in the files files using the 
         [match_flag_type] /flags/. For each match calls the call-back function cb. \n
         使用 [match_flag_type] /flags/ 在文件 files 中寻找当前表达式的所有匹配。 
         对每个匹配调用回调函数 cb。

         If the call-back returns false then the algorithm returns without 
         considering further matches in the current file, or any further files. \n
         如果回调函数返回 false，则结束算法，不考虑在当前文件中的进一步匹配，或后面的文件。

         The parameter /files/ can include wild card characters '\*' and '\?', if 
         the parameter recurse is true then searches sub-directories for 
         matching file names. \n
         参数 /files/ 可以包含通配符 '\*' 和 '\?'，如果参数 recurse 为 true 则搜索匹配文件名的子目录。

         Returns the total number of matches found.\n
         返回找到的匹配的总数量。

         May throw an exception derived from `std::runtime_error` if file io fails.\n
         如果文件读写失败，可能抛出派生于 `std::runtime_error` 的异常。]]
	 
[[`unsigned int FindFiles(FindFilesCallback cb, const char* files, bool recurse = false, boost::match_flag_type flags = match_default);`]
         [Searches files to find all those which contain at least one match of 
         the current expression using the [match_flag_type] /flags/. For each 
         matching file calls the call-back function cb. 
         If the call-back returns false then the algorithm returns without 
         considering any further files. \n
         使用 [match_flag_type] /flags/ 搜索文件，找到所有包含当前表达式至少一个匹配的文件。 
         对每个匹配的文件调用回调函数 cb。 如果回调函数返回 false 则算法结束，不再考虑后面的文件。

         The parameter /files/ can include wild card characters '\*' and '\?', if 
         the parameter /recurse/ is true then searches sub-directories for 
         matching file names. \n
         参数 /files/ 可以包含通配符 '\*' 和 '\?'，如果参数 recurse 为 true 则搜索匹配文件名的子目录。

         Returns the total number of files found.\n
         返回找到的匹配的总数量。

         May throw an exception derived from `std::runtime_error` if file io fails.\n
         如果文件读写失败，可能抛出派生于 `std::runtime_error` 的异常。]]
[[`unsigned int FindFiles(FindFilesCallback cb, const std::string& files, bool recurse = false, boost::match_flag_type flags = match_default);`]
         [Searches files to find all those which contain at least one 
         match of the current expression using the [match_flag_type] /flags/. 
         For each matching file calls the call-back function cb. \n
         使用 [match_flag_type] /flags/ 搜索文件，找到所有包含当前表达式至少一个匹配的文件。 
         对每个匹配的文件调用回调函数 cb。

         If the call-back returns false then the algorithm returns without 
         considering any further files. \n
         如果回调函数返回 false 则算法结束，不再考虑后面的文件。

         The parameter /files/ can include wild card characters '\*' and '\?', if 
         the parameter /recurse/ is true then searches sub-directories for 
         matching file names. \n
         参数 /files/ 可以包含通配符 '\*' 和 '\?'，如果参数 recurse 为 true 则搜索匹配文件名的子目录。

         Returns the total number of files found.\n
         返回找到的匹配的总数量。

         May throw an exception derived from `std::runtime_error` if file io fails.\n
         如果文件读写失败，可能抛出派生于 `std::runtime_error` 的异常。]]
         
[[`std::string Merge(const std::string& in, const std::string& fmt, bool copy = true, boost::match_flag_type flags = match_default);`]
         [Performs a search and replace operation: searches through the 
         string /in/ for all occurrences of the current expression, for each 
         occurrence replaces the match with the format string /fmt/. Uses /flags/ 
         to determine what gets matched, and how the format string should be 
         treated. If /copy/ is true then all unmatched sections of input are 
         copied unchanged to output, if the flag /format_first_only/ is set then 
         only the first occurance of the pattern found is replaced. 
         Returns the new string. See also 
         [link boost_regex.format format string syntax], and [match_flag_type].\n
         执行搜索和替换操作：在字符串 /in/ 中搜索当前表达式的所有出现，对于每个出现将匹配替换为格式化字符串 /fmt/。 
         使用 /flags/ 决定如何匹配，以及格式化字符串如何使用。如果 /copy/ 为真则输入中所有不匹配的部分被不变地拷贝到输出， 
         如果标签 /format_first_only/ 被设置则只有第一个找到的出现被替换。 
         返回新的字符串。 另见 [link boost_regex.format 格式化字符串语法] 和 [match_flag_type]。]]
[[`std::string Merge(const char* in, const char* fmt, bool copy = true, boost::match_flag_type flags = match_default);`]
         [Performs a search and replace operation: searches through the string /in/ 
         for all occurrences of the current expression, for each occurrence 
         replaces the match with the format string /fmt/. Uses /flags/ to determine 
         what gets matched, and how the format string should be treated. 
         If /copy/ is true then all unmatched sections of input are copied 
         unchanged to output, if the flag /format_first_only/ is set then only 
         the first occurance of the pattern found is replaced. Returns 
         the new string. See also [link boost_regex.format format string syntax], and [match_flag_type].\n
         执行搜索和替换操作：在字符串 /in/ 中搜索当前表达式的所有出现，对于每个出现将匹配替换为格式化字符串 /fmt/。 
         使用 /flags/ 决定如何匹配，以及格式化字符串如何使用。如果 /copy/ 为真则输入中所有不匹配的部分被不变地拷贝到输出， 
         如果标签 /format_first_only/ 被设置则只有第一个找到的出现被替换。 
         返回新的字符串。 另见 [link boost_regex.format 格式化字符串语法] 和 [match_flag_type]。]]
[[`unsigned Split(std::vector<std::string>& v, std::string& s, boost::match_flag_type flags = match_default, unsigned max_count = ~0);`]
         [Splits the input string and pushes each one onto the vector. 
         If the expression contains no marked sub-expressions, then one 
         string is outputted for each section of the input that does not 
         match the expression. If the expression does contain marked 
         sub-expressions, then outputs one string for each marked 
         sub-expression each time a match occurs. Outputs no more than 
         /max_count/ strings. Before returning, deletes from the input string 
         /s/ all of the input that has been processed (all of the string if 
         /max_count/ was not reached). Returns the number of strings pushed 
         onto the vector. 	 \n
         分割输入字符串，并将每段加入到 vector 中。如果表达式不包含标记子表达式，则输入中不被表达式匹配的每个字符都被输出。 
         如果表达式包含标记子表达式，则每次匹配中出现的所有标记子表达式的匹配都被输出。输出不多于 /max_count/ 个字符串。 
         返回之前，从输入字符串 /s/ 中删除所有处理过的输出(如果未达到 /max_count/ 则全部字符串被删除)。 
         返回压入到 vector 中的字符串数量。]]
[[`unsigned int Position(int i = 0)const;`]
         [Returns the position of what matched sub-expression /i/. If `i = 0` 
         then returns the position of the whole match. Returns `RegEx::npos` if 
         the supplied index is invalid, or if the specified sub-expression 
         did not participate in the match. 	 \n
         返回子表达式 /i/ 匹配的位置。如果 `i = 0` 则返回整个匹配的位置。 
         如果提供的索引无效，或指定的子表达式未参与到匹配中，则返回 `RegEx::npos`。]]
[[`unsigned int Length(int i = 0)const;`]
         [Returns the length of what matched sub-expression i. If `i = 0` then 
         returns the length of the whole match. Returns `RegEx::npos` if the 
         supplied index is invalid, or if the specified sub-expression did not 
         participate in the match. 	 \n
         返回子表达式 /i/ 匹配的长度。如果 `i = 0` 则返回整个匹配的长度。 
         如果提供的索引无效，或者指定的子表达式未参与到匹配中，则返回 `RegEx::npos`。]]
[[`bool Matched(int i = 0)const;`]
         [Returns true if sub-expression /i/ was matched, false otherwise. 	 \n
         如果子表达式 /i/ 被匹配则返回 true，否则返回 false。]]
[[`unsigned int Line()const;`][Returns the line on which the match occurred, 
         indexes start from 1 not zero, if no match occurred then returns `RegEx::npos`. 	 \n
         返回匹配出现的行，索引从 1 开始而不是 0， 如果没有匹配则返回 `RegEx::npos`。]]
[[`unsigned int Marks() const;`][Returns the number of marked sub-expressions 
         contained in the expression. Note that this includes the whole 
         match (sub-expression zero), so the value returned is always >= 1. 	 \n
         返回在表达式中包含的标记子表达式的数量。注意这包括整个匹配 (子表达式 0)，所以返回的值总是 >= 1。]]
[[`std::string What(int i)const;`]
         [Returns a copy of what matched sub-expression /i/. If `i = 0` then 
         returns a copy of the whole match. Returns a null string if the 
         index is invalid or if the specified sub-expression did not 
         participate in a match. 	 \n
         返回子表达式 /i/ 匹配的拷贝。如果 `i = 0` 则返回整个匹配的拷贝。如果索引无效或指定的子表达式未参与到匹配中，则返回空字符串。]]
[[`std::string operator[](int i)const ;`][Returns `what(i);`
         Can be used to simplify access to sub-expression matches, and make 
         usage more perl-like.\n
         返回 `what(i);` 能够用来简化子表达式匹配的访问，使用起来更像 perl。]]
]

[endsect]

