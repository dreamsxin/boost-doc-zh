[/ 
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]


[section:regex_match regex_match]

   #include <boost/regex.hpp> 

The algorithm [regex_match] determines whether a given regular expression 
matches [*all] of a given character sequence denoted by a pair of 
bidirectional-iterators, the algorithm is defined as follows, 
the main use of this function is data input validation.\n
算法 [regex_match] 判断给定的正则表达式是否匹配由一对双向迭代器给出的[*全部]字符序列， 
算法定义如下，这个函数的主要用处是数据输入验证。

[important Note that the result is true only if the expression matches the 
*whole* of the input sequence.  If you want to search for an 
expression somewhere within the sequence then use [regex_search].  If you 
want to match a prefix of the character string then use [regex_search] 
with the flag match_continuous set.\n
注意，只有当表达式匹配整个输出序列时结果才为真。如果你想要在序列中搜索某个表达式，请使用 [regex_search]。 
如果想要匹配字符串的前缀，使用带 match_continuous 标签的 [regex_search]。]

   template <class BidirectionalIterator, class Allocator, class charT, class traits>
   bool regex_match(BidirectionalIterator first, BidirectionalIterator last,
                    match_results<BidirectionalIterator, Allocator>& m,
                    const basic_regex <charT, traits>& e,
                    match_flag_type flags = match_default); 

   template <class BidirectionalIterator, class charT, class traits>
   bool regex_match(BidirectionalIterator first, BidirectionalIterator last,
                    const basic_regex <charT, traits>& e,
                    match_flag_type flags = match_default); 

   template <class charT, class Allocator, class traits>
   bool regex_match(const charT* str, match_results<const charT*, Allocator>& m,
                    const basic_regex <charT, traits>& e,
                    match_flag_type flags = match_default); 

   template <class ST, class SA, class Allocator, class charT, class traits>
   bool regex_match(const basic_string<charT, ST, SA>& s,
                    match_results<typename basic_string<charT, ST, SA>::const_iterator, Allocator>& m, 
                    const basic_regex <charT, traits>& e, 
                    match_flag_type flags = match_default); 

   template <class charT, class traits>
   bool regex_match(const charT* str,
                    const basic_regex <charT, traits>& e,
                    match_flag_type flags = match_default); 
  
   template <class ST, class SA, class charT, class traits>
   bool regex_match(const basic_string<charT, ST, SA>& s,
                    const basic_regex <charT, traits>& e,
                    match_flag_type flags = match_default);

[h4 Description 说明]

   template <class BidirectionalIterator, class Allocator, class charT, class traits>
   bool regex_match(BidirectionalIterator first, BidirectionalIterator last,
                    match_results<BidirectionalIterator, Allocator>& m,
                    const basic_regex <charT, traits>& e,
                    match_flag_type flags = match_default);

[*Requires]: Type BidirectionalIterator meets the requirements of a 
Bidirectional Iterator (24.1.4).\n
[*要求]：类型 BidirectionalIterator 符合双向迭代器(24.1.4)的要求。

[*Effects]: Determines whether there is an exact match between the regular expression /e/, 
and all of the character sequence \[first, last), parameter /flags/ 
(see [match_flag_type]) is used to 
control how the expression is matched against the character sequence. 
Returns true if such a match exists, false otherwise.\n
[*效果]：判断正则表达式 /e/ 是否精确匹配全部的字符序列 \[first, last)，参数 /flags/ (参见 [match_flag_type])
用来控制表达式如何匹配字符序列。如果存在这样的匹配，则返回 true，否则返回 false。

[*Throws]: `std::runtime_error` if the complexity of matching the expression 
against an N character string begins to exceed O(N[super 2]), or if the 
program runs out of stack space while matching the expression (if Boost.Regex is 
configured in recursive mode), or if the matcher exhausts its permitted 
memory allocation (if Boost.Regex is configured in non-recursive mode).\n
[*异常]：如果对于N字符长度表达式匹配的复杂度超过O(N[super 2])，或者表达式匹配时发生栈空间溢出
(如果 Boost.Regex 设置为递归模式)，或者匹配器耗尽了所允许申请的内存(如果 Boost.Regex 设置为非递归模式)时， 
会抛出 `std::runtime_error` 异常。

[*Postconditions]: If the function returns false, then the effect on 
parameter /m/ is undefined, otherwise the effects on parameter /m/ are 
given in the table:\n
[*后验条件]：如果函数返回 false，参数 /m/ 结果未定义，否则结果如下：

[table
[[Element 元素][Value 值]]
[[`m.size()`][`e.mark_count()`]]
[[`m.empty()`][`false`]]
[[`m.prefix().first`][`first`]]
[[`m.prefix().last`][`first`]]
[[`m.prefix().matched`][`false`]]
[[`m.suffix().first`][`last`]]
[[`m.suffix().last`][`last`]]
[[`m.suffix().matched`][`false`]]
[[`m[0].first`][`first`]]
[[`m[0].second`][`last`]]
[[`m[0].matched`][true if a full match was found, and false if it was a 
partial match (found as a result of the match_partial flag being set).\n
如果找到一个全匹配，则为 true，如果是部分匹配(找到的结果其 match_partial 标志被置位)，则为 false。]]
[[`m[n].first`][For all integers `n < m.size()`, the start of the sequence that 
   matched sub-expression /n/. Alternatively, if sub-expression /n/ did not 
   participate in the match, then `last`.\n
   对于所有整数 `n < m.size()`，为匹配的子表达式 /n/ 的序列起始点。如果子表达式 /n/ 不参与该匹配，则为 `last`。]]
[[`m[n].second`][For all integers `n < m.size()`, the end of the sequence that 
      matched sub-expression /n/. Alternatively, if sub-expression /n/ did not 
      participate in the match, then `last`.\n
      对于所有整数 `n < m.size()`，为匹配的子表达式 /n/ 的序列结束点。如果子表达式 /n/ 不参与该匹配，则为 `last`。]]
[[`m[n].matched`][For all integers `n < m.size()`, true if sub-expression /n/ 
      participated in the match, false otherwise.\n
      对于所有整数 `n < m.size()`，如果子表达式 /n/ 参与该匹配，则为 true，否则为 false。]]
]
 

   template <class BidirectionalIterator, class charT, class traits>
   bool regex_match(BidirectionalIterator first, BidirectionalIterator last,
                  const basic_regex <charT, traits>& e,
                  match_flag_type flags = match_default);

[*Effects]: Behaves "as if" by constructing an instance of 
`match_results<BidirectionalIterator> what`, and then returning the result of 
`regex_match(first, last, what, e, flags)`.\n
[*效果]：其行为“就象”构造一个 `match_results<BidirectionalIterator> what` 实例，然后返回
`regex_match(first, last, what, e, flags)` 的结果。

   template <class charT, class Allocator, class traits>
   bool regex_match(const charT* str, match_results<const charT*, Allocator>& m,
                  const basic_regex <charT, traits>& e,
                  match_flag_type flags = match_default);

[*Effects]: Returns the result of `regex_match(str, str + char_traits<charT>::length(str), m, e, flags)`.\n
[*效果]：返回 `regex_match(str, str + char_traits<charT>::length(str), m, e, flags)` 的结果，

   template <class ST, class SA, class Allocator,
            class charT, class traits>
   bool regex_match(const basic_string<charT, ST, SA>& s,
                  match_results<typename basic_string<charT, ST, SA>::const_iterator, Allocator>& m, 
                  const basic_regex <charT, traits>& e, 
                  match_flag_type flags = match_default);

[*Effects]: Returns the result of `regex_match(s.begin(), s.end(), m, e, flags)`.\n
[*效果]：返回 `regex_match(s.begin(), s.end(), m, e, flags)` 的结果。

   template <class charT, class traits>
   bool regex_match(const charT* str,
                  const basic_regex <charT, traits>& e,
                  match_flag_type flags = match_default);

[*Effects]: Returns the result of `regex_match(str, str + char_traits<charT>::length(str), e, flags)`.\n
[*效果]：返回 `regex_match(str, str + char_traits<charT>::length(str), e, flags)` 的结果。

   template <class ST, class SA, class charT, class traits>
   bool regex_match(const basic_string<charT, ST, SA>& s,
                  const basic_regex <charT, traits>& e,
                  match_flag_type flags = match_default);

[*Effects]: Returns the result of `regex_match(s.begin(), s.end(), e, flags)`.\n
[*效果]：返回 `regex_match(s.begin(), s.end(), e, flags)` 的结果。

[h4 Examples 示例]

The following example processes an ftp response:\n
以下例子处理一个 ftp 响应：

   #include <stdlib.h> 
   #include <boost/regex.hpp> 
   #include <string> 
   #include <iostream> 

   using namespace boost; 

   regex expression("([0-9]+)(\\-| |$)(.*)"); 

   // process_ftp: 
   // on success returns the ftp response code, and fills 
   // msg with the ftp response message. 
   // 成功时返回 ftp 响应码，并用 ftp 响应信息填充 msg。
   int process_ftp(const char* response, std::string* msg) 
   { 
      cmatch what; 
      if(regex_match(response, what, expression)) 
      { 
         // what[0] contains the whole string  整个字符串
         // what[1] contains the response code  响应码
         // what[2] contains the separator character  分隔符
         // what[3] contains the text message.  文本信息
         if(msg) 
            msg->assign(what[3].first, what[3].second); 
         return std::atoi(what[1].first); 
      } 
      // failure did not match  不匹配时失败
      if(msg) 
         msg->erase(); 
      return -1; 
   }
      

[endsect]

