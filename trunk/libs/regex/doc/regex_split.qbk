[/ 
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]


[section:regex_split regex_split (deprecated)]

The algorithm [regex_split] has been deprecated in favor of the iterator 
[regex_token_iterator] which has a more flexible and powerful interface, 
as well as following the more usual standard library "pull" rather than 
"push" semantics.\n
算法 [regex_split] 已经被废弃，由迭代器 [regex_token_iterator] 代替，后者有更灵活，更有威力的接口，更符号标准库 "拉" 而不是 "推" 语义。

Code which uses [regex_split] will continue to compile, the following 
documentation is taken from a previous Boost.Regex version:\n
使用 [regex_split] 仍可以继续编译，下面的文档是从之前版本的 Boost.Regex 中取出的：

   #include <boost/regex.hpp> 

Algorithm [regex_split] performs a similar operation to the perl split operation, 
and comes in three overloaded forms:\n
算法 [regex_split] 执行类似 perl 分割操作，有三个重载形式：

   template <class OutputIterator, class charT, class Traits1, class Alloc1, class Traits2>
   std::size_t regex_split(OutputIterator out, 
                           std::basic_string<charT, Traits1, Alloc1>& s, 
                           const basic_regex<charT, Traits2>& e,
                           boost::match_flag_type flags,
                           std::size_t max_split);

   template <class OutputIterator, class charT, class Traits1, class Alloc1, class Traits2>
   std::size_t regex_split(OutputIterator out, 
                           std::basic_string<charT, Traits1, Alloc1>& s, 
                           const basic_regex<charT, Traits2>& e,
                           boost::match_flag_type flags = match_default);

   template <class OutputIterator, class charT, class Traits1, class Alloc1>
   std::size_t regex_split(OutputIterator out, 
                           std::basic_string<charT, Traits1, Alloc1>& s);

[*Effects]: Each version of the algorithm takes an output-iterator for 
output, and a string for input. If the expression contains no marked 
sub-expressions, then the algorithm writes one string onto the output-iterator 
for each section of input that does not match the expression. 
If the expression does contain marked sub-expressions, then each 
time a match is found, one string for each marked sub-expression will be 
written to the output-iterator. No more than max_split strings will be written 
to the output-iterator. Before returning, all the input processed will be 
deleted from the string /s/ (if /max_split/ is not reached then all of /s/ 
will be deleted). Returns the number of strings written to the output-iterator. 
If the parameter /max_split/ is not specified then it defaults to `UINT_MAX`. 
If no expression is specified, then it defaults to "\\s+", and splitting occurs 
on whitespace.\n
[*作用]：算法的每个版本都接受一个输出迭代器作为输出，一个字符串作为输出。
如果表达式不包含标记子表达式，那么对应输出文本中不能匹配表达式的部分，算法将输出一个字符串到输出迭代器中。
如果表达式包含标记子表达式，那么每当找到匹配，每个标记子表达式的的字符串将被写到输出迭代器中。 
不会有多于 max_split 的字符串被写到输出迭代器中。返回之前，所有被处理的输出都将从字符串 /s/ 删除 
(如果没有达到 /max_split/，/s/ 都将被删除)。返回写到输出迭代器中的字符串的数量。 
如果没有指定参数 /max_split/，默认为 `UINT_MAX`。如果没有指定表达式，默认为 "\\s+"，将根据空格分割。

[*Throws]: `std::runtime_error` if the complexity of matching the expression 
against an N character string begins to exceed O(N[super 2]), or if the 
program runs out of stack space while matching the expression (if Boost.Regex is 
configured in recursive mode), or if the matcher exhausts its permitted 
memory allocation (if Boost.Regex is configured in non-recursive mode).\n
[*异常]：如果表达式匹配相对于字符串 N 的复杂超过 O(N[super 2])，或者如果匹配表达式过程中发生栈溢出(Boost.Regex 设为递归模式)， 
或者匹配器用尽了它所允许申请的全部内存(Boost.Regex 设为非递归模式)，将抛出 `std::runtime_error`。 

[*Example]: the following function will split the input string into a 
series of tokens, and remove each token from the string /s/:\n
[*示例]：下面的函数将输入字符串分割为一系列记号，并从字符串 /s/ 中删除每个记号：

   unsigned tokenise(std::list<std::string>& l, std::string& s)
   {
      return boost::regex_split(std::back_inserter(l), s);
   }

Example: the following short program will extract all of the URL's 
from a html file, and print them out to cout:\n
示例：下面的短程序将从 HTML 程序中提取出所有的 URL，并打印到 cout：

   #include <list>
   #include <fstream>
   #include <iostream>
   #include <boost/regex.hpp>

   boost::regex e("<\\s*A\\s+[^>]*href\\s*=\\s*\"([^\"]*)\"",
                  boost::regbase::normal | boost::regbase::icase);

   void load_file(std::string& s, std::istream& is)
   {
      s.erase();
      //
      // attempt to grow string buffer to match file size,
      // this doesn't always work...
      s.reserve(is.rdbuf()-&gtin_avail());
      char c;
      while(is.get(c))
      {
         // use logarithmic growth stategy, in case
         // in_avail (above) returned zero:
         if(s.capacity() == s.size())
            s.reserve(s.capacity() * 3);
         s.append(1, c);
      }
   }


   int main(int argc, char** argv)
   {
      std::string s;
      std::list<std::string> l;

      for(int i = 1; i < argc; ++i)
      {
         std::cout << "Findings URL's in " << argv[i] << ":" << std::endl;
         s.erase();
         std::ifstream is(argv[i]);
         load_file(s, is);
         boost::regex_split(std::back_inserter(l), s, e);
         while(l.size())
         {
            s = *(l.begin());
            l.pop_front();
            std::cout << s << std::endl;
         }
      }
      return 0;
   }
     
[endsect]

