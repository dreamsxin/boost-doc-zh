[/ 
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]


[section:icu Working With Unicode and ICU String Types 与Unicode及ICU字符串类型一起使用]

[section:intro Introduction to using Regex with ICU 关于将Regex用于ICU的介绍]

The header:\n
头文件：

   <boost/regex/icu.hpp>

contains the data types and algorithms necessary for working with regular 
expressions in a Unicode aware environment. \n
包含了正则表达式在 Unicode 相关的环境下工作所必需的数据类型和算法。

In order to use this header you will need the 
[@http://www.ibm.com/software/globalization/icu/ ICU library], and you will need 
to have built the Boost.Regex library with 
[link boost_regex.install.building_with_unicode_and_icu_support ICU support enabled].\n
使用这个头文件，你需要 [@http://www.ibm.com/software/globalization/icu/ ICU 库]，并且需要使用 
[link boost_regex.install.building_with_unicode_and_icu_support 开启ICU支持选项] 来编译 Boost.Regex 库。

The header will enable you to:\n
这个头文件允许你：

* Create regular expressions that treat Unicode strings as sequences of UTF-32 code points.\n
  创建正则表达式，将 Unicode 字符串当作 UTF-32 码点序列。
* Create regular expressions that support various Unicode data properties, including character classification.\n
  创建支持多种 Unicode 数据属性的正则表达式，包括字符分类。
* Transparently search Unicode strings that are encoded as either UTF-8, UTF-16 or UTF-32.\n
  透明地搜索以 UTF-8、UTF-16 或 UTF-32 编码的 Unicode 字符串。

[endsect]

[section:unicode_types Unicode regular expression types  Unicode正则表达式类型]

Header `<boost/regex/icu.hpp>` provides a regular expression traits class that 
handles UTF-32 characters:\n
头文件 `<boost/regex/icu.hpp>` 提供处理 UTF-32 字符的正则表达式特性类：

   class icu_regex_traits;

and a regular expression type based upon that:\n
和一个基于上面的正则表达式类型：

   typedef basic_regex<UChar32,icu_regex_traits> u32regex;

The type `u32regex` is regular expression type to use for all Unicode 
regular expressions; internally it uses UTF-32 code points, but can be 
created from, and used to search, either UTF-8, or UTF-16 encoded strings 
as well as UTF-32 ones.\n
`u32regex` 类型是用于所有 Unicode 正则表达式的正则表达式类型；内部使用 UTF-32 码点，但可以从 UTF-8、UTF-16 
或 UTF-32 编码的字符串创建或用于搜索。

The constructors, and assign member functions of `u32regex`, require UTF-32 
encoded strings, but there are a series of overloaded algorithms called 
`make_u32regex` which allow regular expressions to be created from 
UTF-8, UTF-16, or UTF-32 encoded strings:\n
`u32regex` 的构造函数和赋值操作都需要 UTF-32 编码的字符串，但有一系列 `make_u32regex` 的重载算法可以从 
UTF-8、UTF-16 或 UTF-32 编码的字符串创建正则表达式。

   template <class InputIterator> 
   u32regex make_u32regex(InputIterator i, 
                          InputIterator j, 
                          boost::regex_constants::syntax_option_type opt);

[*Effects]: Creates a regular expression object from the iterator sequence \[i,j). 
The character encoding of the sequence is determined based upon sizeof(*i): 
1 implies UTF-8, 2 implies UTF-16, and 4 implies UTF-32.\n
[*作用]：从迭代器序列 \[i,j) 创建正则表达式对象。序列的字符编码取决于 sizeof(*i)：1 指 UTF-8，2 指 UTF-16，4 指 UTF-32。 

   u32regex make_u32regex(const char* p, 
                          boost::regex_constants::syntax_option_type opt 
                              = boost::regex_constants::perl);

[*Effects]: Creates a regular expression object from the Null-terminated 
UTF-8 characater sequence /p/.\n
[*作用]：从 NULL 结尾的 UTF-8 字符序列 /p/ 创建正则表达式对象。

   u32regex make_u32regex(const unsigned char* p, 
                          boost::regex_constants::syntax_option_type opt 
                              = boost::regex_constants::perl);

[*Effects]: Creates a regular expression object from the Null-terminated UTF-8 characater sequence p.\n
[*作用]：从 NULL 结尾的 UTF-8 字符序列 p 创建正则表达式对象。

   u32regex make_u32regex(const wchar_t* p, 
                          boost::regex_constants::syntax_option_type opt 
                              = boost::regex_constants::perl);

[*Effects]: Creates a regular expression object from the Null-terminated characater sequence p.  The character encoding of the sequence is determined based upon sizeof(wchar_t): 1 implies UTF-8, 2 implies UTF-16, and 4 implies UTF-32.\n
[*作用]：从 NULL 结尾的字符序列 p 创建正则表达式对象。序列的字符编码取决于 sizeof(wchar_t)：1 指 UTF-8，2 指 UTF-16，4 指 UTF-32。

   u32regex make_u32regex(const UChar* p, 
                          boost::regex_constants::syntax_option_type opt 
                              = boost::regex_constants::perl);

[*Effects]: Creates a regular expression object from the Null-terminated UTF-16 characater sequence p.\n
[*作用]：从 NULL 结尾的 UTF-16 字符序列 p 创建正则表达式对象。

   template<class C, class T, class A>
   u32regex make_u32regex(const std::basic_string<C, T, A>& s, 
                          boost::regex_constants::syntax_option_type opt 
                              = boost::regex_constants::perl);

[*Effects]: Creates a regular expression object from the string s.  The character encoding of the string is determined based upon sizeof(C): 1 implies UTF-8, 2 implies UTF-16, and 4 implies UTF-32.\n
[*作用]：从字符串 s 创建正则表达式对象。字符串的字符编码取决于 sizeof(C)：1 指 UTF-8，2 指 UTF-16，4 指 UTF-32。

   u32regex make_u32regex(const UnicodeString& s, 
                          boost::regex_constants::syntax_option_type opt 
                              = boost::regex_constants::perl);

[*Effects]: Creates a regular expression object from the UTF-16 encoding string s.\n
[*作用]：从 UTF-16 编码的字符串 s 创建正则表达式对象。

[endsect]

[section:unicode_algo Unicode Regular Expression Algorithms  Unicode正则表达式算法]

The regular expression algorithms [regex_match], [regex_search] and [regex_replace] 
all expect that the character sequence upon which they operate, 
is encoded in the same character encoding as the regular expression object 
with which they are used.  For Unicode regular expressions that behavior is 
undesirable: while we may want to process the data in UTF-32 "chunks", the 
actual data is much more likely to encoded as either UTF-8 or UTF-16.  
Therefore the header <boost/regex/icu.hpp> provides a series of thin wrappers 
around these algorithms, called `u32regex_match`, `u32regex_search`, and 
`u32regex_replace`.  These wrappers use iterator-adapters internally to 
make external UTF-8 or UTF-16 data look as though it's really a UTF-32 sequence, 
that can then be passed on to the "real" algorithm.\n
正则表达式算法 [regex_match]、[regex_search] 和 [regex_replace] 都期望它们操作的字符序列和正则表达式对象的字符编码相同。 
对于 Unicode 正则表达式来说，其行为是不合需要的：当我们想要处理 UTF-32 "块" 数据时，实际数据可能是以 UTF-8 或 UTF-16 编码的。 
于是头文件 <boost/regex/icu.hpp> 提供了一系列算法的薄的外覆，分别是 `u32regex_match`、 `u32regex_search` 和 `u32regex_replace`。 
这些外覆内部使用迭代器适配器使外部的 UTF-8 或 UTF-32 数据看起来就像是真正的 UTF-32 序列，可以被传递到 "真正" 算法中。

[h4 u32regex_match]

For each [regex_match] algorithm defined by `<boost/regex.hpp>`, then 
`<boost/regex/icu.hpp>` defines an overloaded algorithm that takes the 
same arguments, but which is called `u32regex_match`, and which will 
accept UTF-8, UTF-16 or UTF-32 encoded data, as well as an 
ICU UnicodeString as input.\n
对于定义于 `<boost/regex.hpp>` 中的每个 [regex_match] 算法，`<boost/regex/icu.hpp>` 都定义了相同参数的重载算法，叫做 
`u32regex_match`，使用 ICU UnicodeString 作为输入，接受 UTF-8、UTF-16 或 UTF-32 编码的数据。

Example: match a password, encoded in a UTF-16 UnicodeString:\n
示例：匹配密码，以 UTF-16 编码的 UnicodeString：

   //
   // Find out if *password* meets our password requirements,
   // as defined by the regular expression *requirements*.
   //
   bool is_valid_password(const UnicodeString& password, const UnicodeString& requirements)
   {
      return boost::u32regex_match(password, boost::make_u32regex(requirements));
   }

Example: match a UTF-8 encoded filename:\n
示例：匹配 UTF-8 编码的文件名：

   //
   // Extract filename part of a path from a UTF-8 encoded std::string and return the result
   // as another std::string:
   //
   std::string get_filename(const std::string& path)
   {
      boost::u32regex r = boost::make_u32regex("(?:\\A|.*\\\\)([^\\\\]+)");
      boost::smatch what;
      if(boost::u32regex_match(path, what, r))
      {
         // extract $1 as a std::string:
         return what.str(1);
      }
      else
      {
         throw std::runtime_error("Invalid pathname");
      }
   }

[h4 u32regex_search]

For each [regex_search] algorithm defined by `<boost/regex.hpp>`, then 
`<boost/regex/icu.hpp>` defines an overloaded algorithm that takes the 
same arguments, but which is called `u32regex_search`, and which will 
accept UTF-8, UTF-16 or UTF-32 encoded data, as well as an ICU 
UnicodeString as input.\n
对于 `<boost/regex.hpp>` 内定义的每个 [regex_search]，`<boost/regex/icu.hpp>` 都定义了接受相同参数的重载算法，叫做 
`u32regex_search`，以 ICU UnicodeString 作为输入，接受 UTF-8、UTF-16 或 UTF-32 编码的数据。

Example: search for a character sequence in a specific language block:\n
示例：在特定语言块中搜索字符序列：

   UnicodeString extract_greek(const UnicodeString& text)
   {
      // searches through some UTF-16 encoded text for a block encoded in Greek,
      // this expression is imperfect, but the best we can do for now - searching
      // for specific scripts is actually pretty hard to do right.
      //
      // Here we search for a character sequence that begins with a Greek letter,
      // and continues with characters that are either not-letters ( [^[:L*:]] )
      // or are characters in the Greek character block ( [\\x{370}-\\x{3FF}] ).
      //
      boost::u32regex r = boost::make_u32regex(
            L"[\\x{370}-\\x{3FF}](?:[^[:L*:]]|[\\x{370}-\\x{3FF}])*");
      boost::u16match what;
      if(boost::u32regex_search(text, what, r))
      {
         // extract $0 as a UnicodeString:
         return UnicodeString(what[0].first, what.length(0));
      }
      else
      {
         throw std::runtime_error("No Greek found!");
      }
   }

[h4 u32regex_replace]

For each [regex_replace] algorithm defined by `<boost/regex.hpp>`, then 
`<boost/regex/icu.hpp>` defines an overloaded algorithm that takes 
the same arguments, but which is called `u32regex_replace`, and which will 
accept UTF-8, UTF-16 or UTF-32 encoded data, as well as an ICU 
UnicodeString as input.  The input sequence and the format string specifier 
passed to the algorithm, can be encoded independently (for example one can 
be UTF-8, the other in UTF-16), but the result string / output iterator 
argument must use the same character encoding as the text being searched.\n
对于 `<boost/regex.hpp>` 内定义的每个 [regex_replace]，`<boost/regex/icu.hpp>` 都定义了接受相同参数的重载算法，叫做 
`u32regex_replace`，以 ICU UnicodeString 作为输入，接受 UTF-8、UTF-16 或 UTF-32 编码的数据。 
传入算法的输入序列和格式化字符串可以被独立编码 (例如一个是 UTF-8，另一个是 UTF-16)， 
但结果字符串 / 输出迭代器参数必须使用和要搜索的字符串相同的字符编码。

Example: Credit card number reformatting:\n
示例：信用卡号码重新格式化：

   //
   // Take a credit card number as a string of digits, 
   // and reformat it as a human readable string with "-"
   // separating each group of four digit;, 
   // note that we're mixing a UTF-32 regex, with a UTF-16
   // string and a UTF-8 format specifier, and it still all 
   // just works:
   //
   const boost::u32regex e = boost::make_u32regex(
         "\\A(\\d{3,4})[- ]?(\\d{4})[- ]?(\\d{4})[- ]?(\\d{4})\\z");
   const char* human_format = "$1-$2-$3-$4";

   UnicodeString human_readable_card_number(const UnicodeString& s)
   {
      return boost::u32regex_replace(s, e, human_format);
   }

[endsect]
[section:unicode_iter Unicode Aware Regex Iterators  Unicode感知的Regex迭代器]

[h4 u32regex_iterator]

Type `u32regex_iterator` is in all respects the same as [regex_iterator] 
except that since the regular expression type is always `u32regex`
it only takes one template parameter (the iterator type). It also calls 
`u32regex_search` internally, allowing it to interface correctly with 
UTF-8, UTF-16, and UTF-32 data:\n
类型 `u32regex_iterator` 在各方面都和 [regex_iterator] 相同，除了只接受一个模板参数 (迭代器类型)，因为其正则表达式类型总是 `u32regex`。 
其内部也调用 `u32regex_search`，可以同 UTF-8、UTF-16 或 UTF-32 数据正确结合。

   template <class BidirectionalIterator>
   class u32regex_iterator
   {
      // for members see regex_iterator
   };

   typedef u32regex_iterator<const char*>     utf8regex_iterator;
   typedef u32regex_iterator<const UChar*>    utf16regex_iterator;
   typedef u32regex_iterator<const UChar32*>  utf32regex_iterator;

In order to simplify the construction of a `u32regex_iterator` from a string, 
there are a series of non-member helper functions called make_u32regex_iterator:\n
为了简化 `u32regex_iterator` 从字符串的构造，提供了一系列名为 `make_u32regex_iterator` 的非成员辅助函数：

   u32regex_iterator<const char*> 
      make_u32regex_iterator(const char* s, 
                             const u32regex& e, 
                             regex_constants::match_flag_type m = regex_constants::match_default);
                             
   u32regex_iterator<const wchar_t*> 
      make_u32regex_iterator(const wchar_t* s, 
                             const u32regex& e, 
                             regex_constants::match_flag_type m = regex_constants::match_default);
                             
   u32regex_iterator<const UChar*> 
      make_u32regex_iterator(const UChar* s, 
                             const u32regex& e, 
                             regex_constants::match_flag_type m = regex_constants::match_default);
                             
   template <class charT, class Traits, class Alloc>
   u32regex_iterator<typename std::basic_string<charT, Traits, Alloc>::const_iterator> 
      make_u32regex_iterator(const std::basic_string<charT, Traits, Alloc>& s, 
                             const u32regex& e, 
                             regex_constants::match_flag_type m = regex_constants::match_default);
                             
   u32regex_iterator<const UChar*> 
      make_u32regex_iterator(const UnicodeString& s, 
                             const u32regex& e, 
                             regex_constants::match_flag_type m = regex_constants::match_default);

Each of these overloads returns an iterator that enumerates all occurrences 
of expression /e/, in text /s/, using match_flags /m/.\n
每个重载都返回在文本 /s/ 中枚举表达式 /e/ 所有出现的迭代器，使用 match_flag /m/。

Example: search for international currency symbols, along with their associated numeric value:\n
示例：搜索国际货币符号和相关的数值：

   void enumerate_currencies(const std::string& text)
   {
      // enumerate and print all the currency symbols, along
      // with any associated numeric values:
      const char* re = 
         "([[:Sc:]][[:Cf:][:Cc:][:Z*:]]*)?"
         "([[:Nd:]]+(?:[[:Po:]][[:Nd:]]+)?)?"
         "(?(1)"
            "|(?(2)"
               "[[:Cf:][:Cc:][:Z*:]]*"
            ")"
            "[[:Sc:]]"
         ")";
      boost::u32regex r = boost::make_u32regex(re);
      boost::u32regex_iterator<std::string::const_iterator> 
            i(boost::make_u32regex_iterator(text, r)), j;
      while(i != j)
      {
         std::cout << (*i)[0] << std::endl;
         ++i;
      }
   }

Calling\n
调用

[/this doesn't format correctly as code:]
[pre enumerate_currencies(" $100.23 or '''&#xA3;'''198.12 ");]

Yields the output:\n
产生输出：

[pre
$100.23
'''&#xA3;'''198.12
]

Provided of course that the input is encoded as UTF-8.\n
输入是 UTF-8 编码的。

[h4 u32regex_token_iterator]

Type `u32regex_token_iterator` is in all respects the same as [regex_token_iterator] 
except that since the regular expression type is always `u32regex` it only 
takes one template parameter (the iterator type).  It also calls 
`u32regex_search` internally, allowing it to interface correctly with UTF-8, 
UTF-16, and UTF-32 data:\n
类型 `u32regex_token_iterator` 在各方面都和 [regex_token_iterator] 相同，除了只接受一个模板参数 (迭代器类型)，因为其正则表达式类型总是 
`u32regex`。其内部也调用 `u32regex_search`，可以和 UTF-8、UTF-16 或 UTF-32 数据正确结合。

   template <class BidirectionalIterator>
   class u32regex_token_iterator
   {
      // for members see regex_token_iterator
   };

   typedef u32regex_token_iterator<const char*>     utf8regex_token_iterator;
   typedef u32regex_token_iterator<const UChar*>    utf16regex_token_iterator;
   typedef u32regex_token_iterator<const UChar32*>  utf32regex_token_iterator;

In order to simplify the construction of a `u32regex_token_iterator` from a string, 
there are a series of non-member helper functions called `make_u32regex_token_iterator`:\n
为了简化 `u32regex_token_iterator` 从字符串的构造，提供了一系列名为 `make_u32regex_token_iterator` 的非成员辅助函数：

   u32regex_token_iterator<const char*> 
      make_u32regex_token_iterator(
            const char* s, 
            const u32regex& e, 
            int sub, 
            regex_constants::match_flag_type m = regex_constants::match_default);
                                  
   u32regex_token_iterator<const wchar_t*> 
      make_u32regex_token_iterator(
            const wchar_t* s, 
            const u32regex& e, 
            int sub, 
            regex_constants::match_flag_type m = regex_constants::match_default);
                                   
   u32regex_token_iterator<const UChar*> 
      make_u32regex_token_iterator(
            const UChar* s, 
            const u32regex& e, 
            int sub, 
            regex_constants::match_flag_type m = regex_constants::match_default);
                                   
   template <class charT, class Traits, class Alloc>
   u32regex_token_iterator<typename std::basic_string<charT, Traits, Alloc>::const_iterator> 
      make_u32regex_token_iterator(
            const std::basic_string<charT, Traits, Alloc>& s, 
            const u32regex& e, 
            int sub, 
            regex_constants::match_flag_type m = regex_constants::match_default);
                                   
   u32regex_token_iterator<const UChar*> 
      make_u32regex_token_iterator(
            const UnicodeString& s, 
            const u32regex& e, 
            int sub, 
            regex_constants::match_flag_type m = regex_constants::match_default);

Each of these overloads returns an iterator that enumerates all occurrences of 
marked sub-expression sub in regular expression /e/, found in text /s/, using 
match_flags /m/.\n
每个重载都返回用于在文本 /s/ 中枚举表达式 /e/ 的标记子表达式的所有出现，使用 match_type /m/。

   template <std::size_t N>
   u32regex_token_iterator<const char*> 
      make_u32regex_token_iterator(
            const char* p, 
            const u32regex& e, 
            const int (&submatch)[N], 
            regex_constants::match_flag_type m = regex_constants::match_default);
                                   
   template <std::size_t N>
   u32regex_token_iterator<const wchar_t*> 
      make_u32regex_token_iterator(
            const wchar_t* p, 
            const u32regex& e, 
            const int (&submatch)[N], 
            regex_constants::match_flag_type m = regex_constants::match_default);
                                   
   template <std::size_t N>
   u32regex_token_iterator<const UChar*> 
      make_u32regex_token_iterator(
            const UChar* p, 
            const u32regex& e, 
            const int (&submatch)[N], 
            regex_constants::match_flag_type m = regex_constants::match_default);
                                   
   template <class charT, class Traits, class Alloc, std::size_t N>
   u32regex_token_iterator<typename std::basic_string<charT, Traits, Alloc>::const_iterator> 
      make_u32regex_token_iterator(
            const std::basic_string<charT, Traits, Alloc>& p, 
            const u32regex& e, 
            const int (&submatch)[N], 
            regex_constants::match_flag_type m = regex_constants::match_default);
                                   
   template <std::size_t N>
   u32regex_token_iterator<const UChar*> 
      make_u32regex_token_iterator(
            const UnicodeString& s, 
            const u32regex& e, 
            const int (&submatch)[N], 
            regex_constants::match_flag_type m = regex_constants::match_default);

Each of these overloads returns an iterator that enumerates one sub-expression 
for each submatch in regular expression /e/, found in text /s/, using match_flags /m/.\n
每个重载都返回用于在文本 /s/ 中找到的正则表达式 /e/ 的每个子匹配的枚举的迭代器，使用 match_flags /m/。

   u32regex_token_iterator<const char*> 
      make_u32regex_token_iterator(
            const char* p, 
            const u32regex& e, 
            const std::vector<int>& submatch, 
            regex_constants::match_flag_type m = regex_constants::match_default);
                                   
   u32regex_token_iterator<const wchar_t*> 
      make_u32regex_token_iterator(
            const wchar_t* p, 
            const u32regex& e, 
            const std::vector<int>& submatch, 
            regex_constants::match_flag_type m = regex_constants::match_default);
                                   
   u32regex_token_iterator<const UChar*> 
      make_u32regex_token_iterator(
            const UChar* p, 
            const u32regex& e, 
            const std::vector<int>& submatch, 
            regex_constants::match_flag_type m = regex_constants::match_default);
                                   
   template <class charT, class Traits, class Alloc>
   u32regex_token_iterator<typename std::basic_string<charT, Traits, Alloc>::const_iterator> 
      make_u32regex_token_iterator(
            const std::basic_string<charT, Traits, Alloc>& p, 
            const u32regex& e, 
            const std::vector<int>& submatch, 
            regex_constants::match_flag_type m = regex_constants::match_default);
                                   
   u32regex_token_iterator<const UChar*> 
      make_u32regex_token_iterator(
            const UnicodeString& s, 
            const u32regex& e, 
            const std::vector<int>& submatch, 
            regex_constants::match_flag_type m = regex_constants::match_default);

Each of these overloads returns an iterator that enumerates one sub-expression for 
each submatch in regular expression /e/, found in text /s/, using match_flags /m/.\n
每个重载都返回用于在文本 /s/ 中枚举正则表达式 /e/ 的每个子匹配的迭代器，使用 match_flags /m/。

Example: search for international currency symbols, along with their associated numeric value:\n
示例：搜索国际货币符号，和相关的数值：

   void enumerate_currencies2(const std::string& text)
   {
      // enumerate and print all the currency symbols, along
      // with any associated numeric values:
      const char* re = 
         "([[:Sc:]][[:Cf:][:Cc:][:Z*:]]*)?"
         "([[:Nd:]]+(?:[[:Po:]][[:Nd:]]+)?)?"
         "(?(1)"
            "|(?(2)"
               "[[:Cf:][:Cc:][:Z*:]]*"
            ")"
            "[[:Sc:]]"
         ")";
      boost::u32regex r = boost::make_u32regex(re);
      boost::u32regex_token_iterator<std::string::const_iterator> 
         i(boost::make_u32regex_token_iterator(text, r, 1)), j;
      while(i != j)
      {
         std::cout << *i << std::endl;
         ++i;
      }
   }

[endsect]

[endsect]

