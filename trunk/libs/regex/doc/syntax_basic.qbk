[/ 
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]


[section:basic_syntax POSIX Basic Regular Expression Syntax  POSIX基本正则表达式语法]

[h3 Synopsis 摘要]

The POSIX-Basic regular expression syntax is used by the Unix utility `sed`, 
and variations are used by `grep` and `emacs`.  You can construct POSIX 
basic regular expressions in Boost.Regex by passing the flag `basic` to the 
regex constructor (see [syntax_option_type]), for example:\n
POSIX基本正则表达式语法应用于Unix工具 `sed`，其变种应用于 `grep` 和 `emacs`。 
在Boost.Regex中你可以通过传递 `basic` 参数到regex的构造函数中(参见 [syntax_option_type])来构造基本POSIX正则表达式，例如：

   // e1 is a case sensitive POSIX-Basic expression:
   boost::regex e1(my_expression, boost::regex::basic);
   // e2 a case insensitive POSIX-Basic expression:
   boost::regex e2(my_expression, boost::regex::basic|boost::regex::icase);

[#boost_regex.posix_basic][h3 POSIX Basic Syntax  POSIX基本语法]

In POSIX-Basic regular expressions, all characters are match themselves except 
for the following special characters:\n
在POSIX基本正则表达式中，所有字符都匹配自己除了下面的特殊字符：

[pre .\[\\*^$]

[h4 Wildcard: 通配符:]

The single character '.' when used outside of a character set will match any 
single character except:\n
单字符'.'在字符集外面使用时匹配任意单字符，除了：

* The NULL character when the flag `match_no_dot_null` is passed to the 
matching algorithms.\n
  NULL字符当标签 `match_no_dot_null` 被传入到匹配算法中。
* The newline character when the flag `match_not_dot_newline` is passed to 
the matching algorithms.\n
  换行符当标签 `match_not_dot_newline` 被传入到匹配算法中。

[h4 Anchors: 锚点: ]

A '^' character shall match the start of a line when used as the first 
character of an expression, or the first character of a sub-expression.\n
'^'字符作为表达式的第一个字符时，匹配行的起点，或者子表达式的第一个字符。

A '$' character shall match the end of a line when used as the last 
character of an expression, or the last character of a sub-expression.\n
'$'字符作为表达式的最后一个字符时，匹配行的终点，或者子表达式的最后一个字符。

[h4 Marked sub-expressions: 标记子表达式: ]

A section beginning `\(` and ending `\)` acts as a marked sub-expression.  
Whatever matched the sub-expression is split out in a separate field by the 
matching algorithms.  Marked sub-expressions can also repeated, or 
referred-to by a back-reference.\n
以 `\(` 开始，以 `\)` 结束的部分是标记子表达式。子表达式匹配的部分被匹配算法分离到单独的部分中。 
标记子表达式同样可以被重复，或被后向引用所引用。

[h4 Repeats: 重复: ]

Any atom (a single character, a marked sub-expression, or a character class) 
can be repeated with the \* operator.\n
一个原子(单个字符，标记子表达式或字符类)可以用操作符 \* 重复。

For example `a*` will match any number of letter a's repeated zero or more 
times (an atom repeated zero times matches an empty string), so the 
expression `a*b` will match any of the following:\n
例如 `a*` 可以匹配字母a重复零次或任意多次(一个原子重复零次匹配空字符串)，于是表达式 `a*b` 可以匹配下面的字符串：

[pre
b
ab
aaaaaaaab
]

An atom can also be repeated with a bounded repeat:\n
一个原子也可以进行有限次重复：

`a\{n\}`  Matches 'a' repeated exactly n times.\n
`a\{n\}`  匹配'a'重复n次。

`a\{n,\}`  Matches 'a' repeated n or more times.\n
`a\{n,\}`  匹配'a'重复n次或更多次。

`a\{n, m\}`  Matches 'a' repeated between n and m times inclusive.\n
`a\{n, m\}`  匹配'a'重复n次到m次。

For example:\n
例如： 

[pre ^a\{2,3\}$]

Will match either of:\n
可以匹配： 

[pre
aa
aaa
]

But neither of:\n
但不会匹配：

[pre
a
aaaa
]

It is an error to use a repeat operator, if the preceding construct can not be 
repeated, for example:\n
如果前面的结构不能被重复，那么使用重复操作符就是错误，例如：

[pre a\(*\)]

Will raise an error, as there is nothing for the \* operator to be applied to.\n
会导致错误，因为操作符 \* 没有可以应用的对象。

[h4 Back references: 后向引用: ]

An escape character followed by a digit /n/, where /n/ is in the range 1-9, 
matches the same string that was matched by sub-expression /n/.  For example 
the expression:\n
转义字符后跟一个数字 /n/，其中 /n/ 范围是1-9，匹配子表达式 /n/ 匹配的相同字符串。 例如表达式：

[pre ^\\(a\*\\).\*\\1$]

Will match the string:\n
可以匹配字符串：

[pre aaabbaaa]

But not the string:\n
但不会匹配字符串：

[pre aaabba]

[h4 Character sets: 字符集:]

A character set is a bracket-expression starting with \[ and ending with \], 
it defines a set of characters, and matches any single character that is a 
member of that set.\n
字符集是以 \[ 开始以 \] 结束的方括号表达式，它定义了一个字符的集合，匹配字符集合的单个成员字符。

A bracket expression may contain any combination of the following:\n
一个方括号表达式可以包含下面情况的组合：

[h5 Single characters: 多个单字符: ]

For example `[abc]`, will match any of the characters 'a', 'b', or 'c'.\n
例如 `[abc]`，可以匹配'a'、'b'或'c'。

[h5 Character ranges: 字符区间：]

For example `[a-c]` will match any single character in the range 'a' to 'c'.  
By default, for POSIX-Basic regular expressions, a character /x/ is within the 
range /y/ to /z/, if it collates within that range; this results in 
locale specific behavior.  This behavior can be turned off by unsetting 
the `collate` option flag when constructing the regular expression 
- in which case whether a character appears within 
a range is determined by comparing the code points of the characters only.\n
例如 `[a-c]` 会匹配范围'a'到'c'之间的任意单个字符。对于POSIX基本正则表达式来说，默认地，
如果字符/x/是对应于范围/y/到/z/之间，就说它在该范围之内；这会导致区域相关的行为。 
可以通过在构造正则表达式时取消设置选项标签 `collate` 来关闭这种行为 - 在这种情况下字符是否在范围内只取决于它的码点。 

[h5 Negation: 取反：]

If the bracket-expression begins with the ^ character, then it matches the 
complement of the characters it contains, for example `[^a-c]` matches 
any character that is not in the range a-c.\n
如果方括号表达式以^字符开始，那么它匹配包含字符的补集，例如 `[^a-c]` 可以匹配任意不在a-c范围内的单个字符。

[h5 Character classes: 字符类: ]

An expression of the form `[[:name:]]` matches the named character class "name", 
for example `[[:lower:]]` matches any lower case character.  
See [link boost_regex.syntax.character_classes character class names].\n
`[[:name:]]` 形式的表达式匹配名为"name"的命名字符类，例如 `[[:lower:]]` 匹配任意的小写字母。
参见 [link boost_regex.syntax.character_classes 字符类名称]。

[h5 Collating Elements: 对照元素: ]

An expression of the form `[[.col.]` matches the collating element /col/.  
A collating element is any single character, or any sequence of 
characters that collates as a single unit.  Collating elements may also 
be used as the end point of a range, for example: `[[.ae.]-c]` matches 
the character sequence "ae", plus any single character in the rangle "ae"-c, 
assuming that "ae" is treated as a single collating element in the current locale.\n
`[[.col.]` 形式的表达式匹配对照元素/col/。对照元素是任意单字符，或对应于单个单元的字符序列。 
对照元素还可以用于范围的端点，例如：`[[.ae.]-c]` 匹配字符序列"ae"，以及"ae"-c范围内的任意单字符，
其中假设"ae"被当前区域当作单个对照元素。

Collating elements may be used in place of escapes (which are not 
normally allowed inside character sets), for example `[[.^.]abc]` would 
match either one of the characters 'abc^'.\n
对照元素可以用来替换转义(通常在字符集中并不允许)，例如 `[[.^.]abc]` 可以匹配任意字符 'abc^'。

As an extension, a collating element may also be specified via its 
symbolic name, for example:\n
作为表达式，对照元素同样可以通过符号名称指定，例如：

[pre \[\[\.NUL\.\]\]]

matches a 'NUL' character.  
See [link boost_regex.syntax.collating_names collating element names].\n
匹配'NUL'字符。参见 [link boost_regex.syntax.collating_names 对照元素名称]。

[h5 Equivalence classes: 等价类: ]

An expression of theform `[[=col=]]`, matches any character or collating 
element whose primary sort key is the same as that for collating element 
/col/, as with collating elements the name /col/ may be a 
[link boost_regex.syntax.collating_names collating symbolic name].  
A primary sort key is one that ignores case, accentation, or 
locale-specific tailorings; so for example `[[=a=]]` matches any of 
the characters: a, '''&#xC0;''', '''&#xC1;''', '''&#xC2;''', 
'''&#xC3;''', '''&#xC4;''', '''&#xC5;''', A, '''&#xE0;''', '''&#xE1;''', 
'''&#xE2;''', '''&#xE3;''', '''&#xE4;''' and '''&#xE5;'''.  
Unfortunately implementation of this is reliant on the platform's 
collation and localisation support; this feature can not be relied 
upon to work portably across all platforms, or even all locales on one platform.\n
`[[=col=]]` 形式的表达式匹配主排序关键字和对照元素/col/相同的任意字符或对照元素，其中对照元素名称/col/可以是
[link boost_regex.syntax.collating_names 对照符号名称]。主排序关键字是忽略大小写、音调重音，以及区域相关属性的； 
所以 `[[=a=]]` 匹配下面的字符：a, '''&#xC0;''', '''&#xC1;''', '''&#xC2;''', 
'''&#xC3;''', '''&#xC4;''', '''&#xC5;''', A, '''&#xE0;''', '''&#xE1;''', 
'''&#xE2;''', '''&#xE3;''', '''&#xE4;''' 或 '''&#xE5;'''。 
不幸的是这个实现依赖于平台的对照和本地化支持；这个特性不能被可靠地移植应用于所有的平台，甚至一个平台上的所有区域。 

[h5 Combinations: 组合: ]

All of the above can be combined in one character set declaration, for 
example: `[[:digit:]a-c[.NUL.]].`\n
所有上面的情况都可以在一个字符集声明中组合使用，例如：`[[:digit:]a-c[.NUL.]]`.

[h4 Escapes 转义 ]

With the exception of the escape sequences \\{, \\}, \\(, and \\), 
which are documented above, an escape followed by any character matches 
that character.  This can be used to make the special characters \n
除了上面记录的特殊的转义序列 \\{、\\}、\\( 和 \\) 外，一个转义后跟任何字符都匹配字符本身。这可以用来使得特殊字符

[pre .\[\\\*^$]

"ordinary".  Note that the escape character loses its special meaning 
inside a character set, so `[\^]` will match either a literal '\\' or a '^'.\n
变为"普通"。注意转义字符在字符集中失去其特殊意义，所以 `[\^]` 可以匹配 '\\' 或 '^'。

[h3 What Gets Matched  匹配什么了]

When there is more that one way to match a regular expression, the 
"best" possible match is obtained using the 
[link boost_regex.syntax.leftmost_longest_rule leftmost-longest rule].\n
如果一个正则表达式有多种匹配方式时，"最好的"可能匹配是通过 [link boost_regex.syntax.leftmost_longest_rule 最左最长原则] 得到的。

[h3 Variations 变体]

[#boost_regex.grep_syntax][h4 Grep]

When an expression is compiled with the flag `grep` set, then the 
expression is treated as a newline separated list of 
[link boost_regex.posix_basic POSIX-Basic expressions], 
a match is found if any of the expressions in the list match, for example:\n
表达式使用标签 `grep` 进行编译时，表达式被当作以换行分割的 [link boost_regex.posix_basic POSIX基本表达式] 
的独立列集，列集中任意表达式被匹配则整个表达式被匹配，例如：

   boost::regex e("abc\ndef", boost::regex::grep);

will match either of the [link boost_regex.posix_basic POSIX-Basic expressions] 
"abc" or "def".\n
可以匹配 [link boost_regex.posix_basic POSIX基本表达式] "abc" 或 "def"。 

As its name suggests, this behavior is consistent with the Unix utility grep.\n
如名字所示，这个行为和Unix工具grep行为一致。 

[h4 emacs]

In addition to the [link boost_regex.posix_basic POSIX-Basic features] 
the following characters are also special:\n
除 [link boost_regex.posix_basic POSIX基本特性] 外，下面的字符同样特殊：

[table
[[Character 字符][Description 说明]]
[[+][repeats the preceding atom one or more times.\n
重复前置原子一次或多次。]]
[[?][repeats the preceding atom zero or one times.\n
重复前置原子零次或一次。]]
[[*?][A non-greedy version of *.\n
*的非贪婪版本。]]
[[+?][A non-greedy version of +.\n
+的非贪婪版本。]]
[[??][A non-greedy version of ?.\n
?的非贪婪版本]]
]

And the following escape sequences are also recognised:\n
下面的转义序列同样被识别：

[table
[[Escape 转义序列][Description 说明]]
[[\\|][specifies an alternative.\n
指定一个选择。]]
[[\\(?:  ...  \)][is a non-marking grouping construct - allows you to lexically group something without spitting out an extra sub-expression.\n
非标记分组构造 - 允许你字面上将某些东西分组但并不分离出单独的子表达式。]]
[[\\w][matches any word character.\n
匹配任意单词字符。]]
[[\\W][matches any non-word character.\n
匹配任意非单词字符。]]
[[\\sx][matches any character in the syntax group x, the following 
   emacs groupings are supported: 's', ' ', '_', 'w', '.', ')', '(', '"', '\\'', '>' and '<'.  Refer to the emacs docs for details.\n
   匹配语法组x内的任意字符，下面的emacs组被支持：'s'、' '、'_'、'w'、'.'、')'、'('、'"'、'\\''、'>'和'<'。更多细节请参见emacs文档。]]
[[\\Sx][matches any character not in the syntax grouping x.\n
匹配不在语法组x内的任意字符。]]
[[\\c and \\C][These are not supported.\n
未被支持。]]
[[\\`][matches zero characters only at the start of a buffer (or string being matched).\n
匹配缓冲区(或要匹配的字符串)的开始，并不消耗字符。]]
[[\\'][matches zero characters only at the end of a buffer (or string being matched).\n
匹配缓冲区(或要匹配的字符串)的结尾，并不消耗字符。]]
[[\\b][matches zero characters at a word boundary.\n
匹配单词边界，并不消耗字符。]]
[[\\B][matches zero characters, not at a word boundary.\n
匹配非单词边界，并不消耗字符。]]
[[\\<][matches zero characters only at the start of a word.\n
匹配单词的开始，并不消耗字符。]]
[[\\>][matches zero characters only at the end of a word.\n
匹配单词的结尾，并不消耗字符。]]
]

Finally, you should note that emacs style regular expressions are matched 
according to the 
[link boost_regex.syntax.perl_syntax.what_gets_matched Perl "depth first search" rules].  
Emacs expressions are 
matched this way because they contain Perl-like extensions, that do not 
interact well with the 
[link boost_regex.syntax.leftmost_longest_rule POSIX-style leftmost-longest rule].\n
最后，你需要知道emacs风格正则表达式根据 [link boost_regex.syntax.perl_syntax.what_gets_matched Perl的"深度优先搜索规则] 进行匹配。 
Emacs表达式因为包含Perl扩展，不能同 [link boost_regex.syntax.leftmost_longest_rule POSIX风格最左最长原则] 
很好地进行交互，所以用这种方式进行匹配。

[h3 Options 选项]

There are a [link boost_regex.ref.syntax_option_type.syntax_option_type_basic variety of flags] that may be combined with the `basic` and `grep` 
options when constructing the regular expression, in particular note 
that the 
[link boost_regex.ref.syntax_option_type.syntax_option_type_basic `newline_alt`, `no_char_classes`, `no-intervals`, `bk_plus_qm` 
and `bk_plus_vbar`] options all alter the syntax, while the 
[link boost_regex.ref.syntax_option_type.syntax_option_type_basic `collate` and `icase` options] modify how the case and locale sensitivity 
are to be applied.\n
有 [link boost_regex.ref.syntax_option_type.syntax_option_type_basic 很多标志] 在构造正则表达式时可以同 `basic` 和 `grep` 组合使用。 
尤其注意 [link boost_regex.ref.syntax_option_type.syntax_option_type_basic `newline_alt`, `no_char_classes`, `no-intervals`, `bk_plus_qm` 
和 `bk_plus_vbar`] 选项都会影响语法，而 [link boost_regex.ref.syntax_option_type.syntax_option_type_basic `collate` 和 `icase` 选项] 
则修改大小写和区域敏感特性如何被应用。

[h3 References 参考资料]

[@http://www.opengroup.org/onlinepubs/000095399/basedefs/xbd_chap09.html IEEE Std 1003.1-2001, Portable Operating System Interface (POSIX ), Base Definitions and Headers, Section 9, Regular Expressions (FWD.1).]

[@http://www.opengroup.org/onlinepubs/000095399/utilities/grep.html IEEE Std 1003.1-2001, Portable Operating System Interface (POSIX ), Shells and Utilities, Section 4, Utilities, grep (FWD.1).]

[@http://www.gnu.org/software/emacs/ Emacs Version 21.3.]

[endsect]


