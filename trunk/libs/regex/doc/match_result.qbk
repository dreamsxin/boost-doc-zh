[/ 
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:match_results match_results]

[h4 Synopsis 摘要]

   #include <boost/regex.hpp>

Regular expressions are different from many simple pattern-matching algorithms 
in that as well as finding an overall match they can also produce 
sub-expression matches: each sub-expression being delimited in the 
pattern by a pair of parenthesis (...). There has to be some method for 
reporting sub-expression matches back to the user: this is achieved this by 
defining a class `match_results` that acts as an indexed collection of 
sub-expression matches, each sub-expression match being contained in an 
object of type [sub_match].\n
正则表达式和许多简单的模式匹配算法不同，既能寻找全部的匹配，也能产生子表达式的匹配：
在模式中通过一双括号 (...) 界定的每个子表达式。需要有某种方法来向用户报告子表达式的匹配结果：
这是通过定义类 `match_results` (子表达式匹配的有序集合)来实现的，每个子表达式匹配都包含在一个 [sub_match] 类型的对象中。

Template class `match_results` denotes a collection of character 
sequences representing the result of a regular expression match. Objects of 
type `match_results` are passed to the algorithms [regex_match] and [regex_search], 
and are returned by the iterator [regex_iterator].  Storage for the 
collection is allocated and freed as necessary by the member functions of 
class `match_results`.\n
模板类 `match_results` 表示一个表达正则表达式匹配结果的字符序列的集合。 
`match_results` 类的对象被传入到算法 [regex_match] 和 [regex_search] 中，被迭代器 [regex_iterator] 返回。 
集合的存储空间在需要时由类 `match_results` 的成员函数申请和释放。

The template class `match_results` conforms to the requirements of a Sequence, 
as specified in (lib.sequence.reqmts), except that only operations defined for 
const-qualified Sequences are supported.\n
模板类 `match_results` 同 序列Sequence 的需求一致，定义于(lib.sequence.reqmts)，除了只支持const序列的操作。

Class template `match_results` is most commonly used as one of the typedefs 
`cmatch`, `wcmatch`, `smatch`, or `wsmatch`:\n
类模板 `match_results` 最经常使用的是下面的 typedef 之一，`cmatch`, `wcmatch`, `smatch`, 或 `wsmatch`：

   template <class BidirectionalIterator,
            class Allocator = std::allocator<sub_match<BidirectionalIterator> >
   class match_results;

   typedef match_results<const char*>              cmatch;
   typedef match_results<const wchar_t*>           wcmatch;
   typedef match_results<string::const_iterator>   smatch;
   typedef match_results<wstring::const_iterator>  wsmatch;

   template <class BidirectionalIterator,
            class Allocator = std::allocator<sub_match<BidirectionalIterator> >
   class match_results
   { 
   public: 
      typedef          sub_match<BidirectionalIterator>                        value_type;
      typedef          const value_type&                                       const_reference;
      typedef          const_reference                                         reference;
      typedef          implementation defined                                  const_iterator;
      typedef          const_iterator                                          iterator;
      typedef typename iterator_traits<BidirectionalIterator>::difference_type difference_type;
      typedef typename Allocator::size_type                                    size_type;
      typedef          Allocator                                               allocator_type;
      typedef typename iterator_traits<BidirectionalIterator>::value_type      char_type;
      typedef          basic_string<char_type>                                 string_type;

      // construct/copy/destroy:
      ``[link boost_regex.match_results.construct explicit match_results]``(const Allocator& a = Allocator());
      ``[link boost_regex.match_results.copy_construct match_results]``(const match_results& m);
      ``[link boost_regex.match_results.assign match_results& operator=]``(const match_results& m); 
      ~match_results();

      // size:
      size_type ``[link boost_regex.match_results.size size]``() const;
      size_type ``[link boost_regex.match_results.max_size max_size]``() const;
      bool ``[link boost_regex.match_results.empty empty]``() const;
      // element access:
      difference_type ``[link boost_regex.match_results.length length]``(int sub = 0) const;
      difference_type ``[link boost_regex.match_results.length length]``(const char_type* sub) const;
      template <class charT>
      difference_type ``[link boost_regex.match_results.length length]``(const charT* sub) const;
      template <class charT, class Traits, class A>
      difference_type ``[link boost_regex.match_results.length length]``(const std::basic_string<charT, Traits, A>& sub) const;
      difference_type ``[link boost_regex.match_results.position position]``(unsigned int sub = 0) const;
      difference_type ``[link boost_regex.match_results.position position]``(const char_type* sub) const;
      template <class charT>
      difference_type ``[link boost_regex.match_results.position position]``(const charT* sub) const;
      template <class charT, class Traits, class A>
      difference_type ``[link boost_regex.match_results.position position]``(const std::basic_string<charT, Traits, A>& sub) const;
      string_type ``[link boost_regex.match_results.str str]``(int sub = 0) const;
      string_type ``[link boost_regex.match_results.str str]``(const char_type* sub)const;
      template <class Traits, class A>
      string_type ``[link boost_regex.match_results.str str]``(const std::basic_string<char_type, Traits, A>& sub)const;
      template <class charT>
      string_type ``[link boost_regex.match_results.str str]``(const charT* sub)const;
      template <class charT, class Traits, class A>
      string_type ``[link boost_regex.match_results.str str]``(const std::basic_string<charT, Traits, A>& sub)const;
      const_reference ``[link boost_regex.match_results.subscript operator\[\]]``(int n) const;
      const_reference ``[link boost_regex.match_results.subscript operator\[\]]``(const char_type* n) const;
      template <class Traits, class A>
      const_reference ``[link boost_regex.match_results.subscript operator\[\]]``(const std::basic_string<char_type, Traits, A>& n) const;
      template <class charT>
      const_reference ``[link boost_regex.match_results.subscript operator\[\]]``(const charT* n) const;
      template <class charT, class Traits, class A>
      const_reference ``[link boost_regex.match_results.subscript operator\[\]]``(const std::basic_string<charT, Traits, A>& n) const;

      const_reference ``[link boost_regex.match_results.prefix prefix]``() const;

      const_reference ``[link boost_regex.match_results.suffix suffix]``() const;
      const_iterator ``[link boost_regex.match_results.begin begin]``() const;
      const_iterator ``[link boost_regex.match_results.end end]``() const;
      // format:
      template <class OutputIterator, class Formatter>
      OutputIterator ``[link boost_regex.match_results.format format]``(OutputIterator out,
                           Formatter fmt,
                           match_flag_type flags = format_default) const;
      template <class Formatter>
      string_type ``[link boost_regex.match_results.format2 format]``(Formatter fmt,
                        match_flag_type flags = format_default) const;

      allocator_type ``[link boost_regex.match_results.get_allocator get_allocator]``() const;
      void ``[link boost_regex.match_results.swap swap]``(match_results& that);

   #ifdef BOOST_REGEX_MATCH_EXTRA
      typedef typename value_type::capture_sequence_type capture_sequence_type;
      const capture_sequence_type& ``[link boost_regex.match_results.captures captures]``(std::size_t i)const;
   #endif

   };

   template <class BidirectionalIterator, class Allocator>
   bool ``[link boost_regex.match_results.op_eq operator ==]`` (const match_results<BidirectionalIterator, Allocator>& m1,
                     const match_results<BidirectionalIterator, Allocator>& m2);
   template <class BidirectionalIterator, class Allocator>
   bool ``[link boost_regex.match_results.op_ne operator !=]`` (const match_results<BidirectionalIterator, Allocator>& m1,
                     const match_results<BidirectionalIterator, Allocator>& m2);

   template <class charT, class traits, class BidirectionalIterator, class Allocator>
   basic_ostream<charT, traits>&
      ``[link boost_regex.match_results.op_stream operator <<]`` (basic_ostream<charT, traits>& os,
                  const match_results<BidirectionalIterator, Allocator>& m);

   template <class BidirectionalIterator, class Allocator>
   void ``[link boost_regex.match_results.op_swap swap]``(match_results<BidirectionalIterator, Allocator>& m1,
            match_results<BidirectionalIterator, Allocator>& m2);

[h4 Description 说明]

In all `match_results` constructors, a copy of the Allocator argument is used 
for any memory allocation performed by the constructor or member functions 
during the lifetime of the object.\n
在 `match_results` 的所有构造函数中，Allocator 参数的拷贝应用于对象生命周期中构造或成员函数需要的内存分配。

[#boost_regex.match_results.construct]

   match_results(const Allocator& a = Allocator());

[*Effects]: Constructs an object of class `match_results`. The postconditions of 
this function are indicated in the table:\n
[*效果]: 构造一个 `match_results` 类的对象。该函数的后验条件如下表所示：

[table 
[[Element 元素][Value 值]]
[[empty()][true]]
[[size()][0]]
[[str()][basic_string<charT>()]]
]
 


[#boost_regex.match_results.copy_construct]

   match_results(const match_results& m);

[*Effects]: Constructs an object of class match_results, as a copy of m.\n
[*效果]: 构造一个 `match_results` 类的对象，作为 `m` 的拷贝。


[#boost_regex.match_results.assign]

   match_results& operator=(const match_results& m);

[*Effects]: Assigns m to *this. The postconditions of this function are 
indicated in the table:\n
[*效果]: 将 `m` 赋值给 `*this`。该函数的后验条件如下表所示：

[table
[[Element 元素][Value 值]]
[[empty()][m.empty().]]
[[size()][m.size().]]
[[str(n)][m.str(n) for all integers n < m.size().]]
[[prefix()][m.prefix().]]
[[suffix()][m.suffix().]]
[[(*this)\[n\]][m\[n\] for all integers n < m.size().]]
[[length(n)][m.length(n) for all integers n < m.size().]]
[[position(n)][m.position(n) for all integers n < m.size().]]
]

[#boost_regex.match_results.size]

   size_type size()const;

[*Effects]: Returns the number of [sub_match] elements stored in *this; that is 
the number of marked sub-expressions in the regular expression that was 
matched plus one.\n
[*效果]: 返回保存在 `*this` 中的 [sub_match] 元素数量；等于正则表达式中标记子表达式的数量加上1。


[#boost_regex.match_results.max_size]

   size_type max_size()const;

[*Effects]: Returns the maximum number of [sub_match] elements that can be 
stored in *this.\n
[*效果]: 返回可以保存在 `*this` 中的 [sub_match] 元素最大数量。


[#boost_regex.match_results.empty]

   bool empty()const;

[*Effects]: Returns size() == 0.\n
[*效果]: 返回 size() == 0.



[#boost_regex.match_results.length]

   difference_type length(int sub = 0)const;
   difference_type length(const char_type* sub)const;
   template <class charT>
   difference_type length(const charT* sub)const;
   template <class charT, class Traits, class A>
   difference_type length(const std::basic_string<charT, Traits, A>&)const;


[*Requires]: that the match_results object has been initialized as a result of a 
successful call to [regex_search] or [regex_match] or was returned from a [regex_iterator], and 
that the underlying iterators have not been subsequently invalidated.  Will raise a 
`std::logic_error` if the match_results object was not initialized.\n
[*要求]: match_results 对象已被初始化为对 [regex_search] 或 [regex_match] 的一次成功调用的结果，或是从一个 
[regex_iterator] 返回，且底层的迭代器尚未失效。如果 match_results 对象未初始化，将抛出一个 `std::logic_error`。

[*Effects]: Returns the length of sub-expression /sub/, that is to say: 
`(*this)[sub].length()`.\n
[*效果]: 返回子表达式 /sub/ 的长度，即 `(*this)[sub].length()`.

The overloads that accept a string refer to a named sub-expression /n/.
In the event that there is no such named sub-expression then returns zero.  \n
那几个重载是以命名子表达式 /n/ 的名字串为参数的。如果没有所给名字的命名子表达式，则返回零。

The template overloads of this function, allow the string and\/or character type
to be different from the character type of the underlying sequence and\/or regular expression: 
in this case the characters will be widened to the underlying character type of the original regular expression.
A compiler error will occur if the argument passes a wider character type than the underlying sequence.
These overloads allow a normal narrow character C string literal to be used as an argument, even when
the underlying character type of the expression being matched may be something more exotic such as a 
Unicode character type.\n
该函数的两个模板式重载，可以使用与底层序列或正则表达式所用的字符类型不同的字符串或字符类型：
此时所用的字符将被拓宽为原正则表达式的底层字符类型。如果所传入的参数是比底层序列更宽的字符类型，则会产生一个编译错误。
这些重载允许使用一个普通的窄字符C字符串作为参数，即使所匹配的表达式的底层字符类型是象 Unicode 字符类型这样的宽字符。

[#boost_regex.match_results.position]

   difference_type position(unsigned int sub = 0)const;
   difference_type position(const char_type* sub)const;
   template <class charT>
   difference_type position(const charT* sub)const;
   template <class charT, class Traits, class A>
   difference_type position(const std::basic_string<charT, Traits, A>&)const;

[*Requires]: that the match_results object has been initialized as a result of a 
successful call to [regex_search] or [regex_match] or was returned from a [regex_iterator], and 
that the underlying iterators have not been subsequently invalidated.  Will raise a 
`std::logic_error` if the match_results object was not initialized.\n
[*要求]: match_results 对象已被初始化为对 [regex_search] 或 [regex_match] 的一次成功调用的结果，或是从一个 
[regex_iterator] 返回，且底层的迭代器尚未失效。如果 match_results 对象未初始化，将抛出一个 `std::logic_error`。

[*Effects]: Returns the starting location of sub-expression /sub/, or -1 if /sub/ was 
not matched.  Note that if this represents a partial match , then `position()` 
will return the location of the partial match even though `(*this)[0].matched` is false.\n
[*效果]: 返回子表达式 /sub/ 的开始位置，如果没有匹配则返回-1。 
注意，如果这表示一个部分匹配，即使 `(*this)[0].matched` 值为 `false`，`position()` 也会返回部分匹配的位置。

The overloads that accept a string refer to a named sub-expression /n/.
In the event that there is no such named sub-expression then returns -1.  \n
那几个重载是以命名子表达式 /n/ 的名字串为参数的。如果没有所给名字的命名子表达式，则返回 -1。

The template overloads of this function, allow the string and\/or character type
to be different from the character type of the underlying sequence and\/or regular expression: 
in this case the characters will be widened to the underlying character type of the original regular expression.
A compiler error will occur if the argument passes a wider character type than the underlying sequence.
These overloads allow a normal narrow character C string literal to be used as an argument, even when
the underlying character type of the expression being matched may be something more exotic such as a 
Unicode character type.\n
该函数的两个模板式重载，可以使用与底层序列或正则表达式所用的字符类型不同的字符串或字符类型：
此时所用的字符将被拓宽为原正则表达式的底层字符类型。如果所传入的参数是比底层序列更宽的字符类型，则会产生一个编译错误。
这些重载允许使用一个普通的窄字符C字符串作为参数，即使所匹配的表达式的底层字符类型是象 Unicode 字符类型这样的宽字符。


[#boost_regex.match_results.str]

   string_type str(int sub = 0)const;
   string_type str(const char_type* sub)const;
   template <class Traits, class A>
   string_type str(const std::basic_string<char_type, Traits, A>& sub)const;
   template <class charT>
   string_type str(const charT* sub)const;
   template <class charT, class Traits, class A>
   string_type str(const std::basic_string<charT, Traits, A>& sub)const;

[*Requires]: that the match_results object has been initialized as a result of a 
successful call to [regex_search] or [regex_match] or was returned from a [regex_iterator], and 
that the underlying iterators have not been subsequently invalidated.  Will raise a 
`std::logic_error` if the match_results object was not initialized.\n
[*要求]: match_results 对象已被初始化为对 [regex_search] 或 [regex_match] 的一次成功调用的结果，或是从一个 
[regex_iterator] 返回，且底层的迭代器尚未失效。如果 match_results 对象未初始化，将抛出一个 `std::logic_error`。

[*Effects]: Returns sub-expression /sub/ as a string:  `string_type((*this)[sub])`.\n
[*效果]: 将子表达式 /sub/ 作为字符串返回：`string_type((*this)[sub])`.

The overloads that accept a string, return the string that matched the named sub-expression /n/.
In the event that there is no such named sub-expression then returns an empty string.  \n
那几个重载是以命名子表达式 /n/ 的名字串为参数的。如果没有所给名字的命名子表达式，则返回一个空字符串。

The template overloads of this function, allow the string and\/or character type
to be different from the character type of the underlying sequence and\/or regular expression: 
in this case the characters will be widened to the underlying character type of the original regular expression.
A compiler error will occur if the argument passes a wider character type than the underlying sequence.
These overloads allow a normal narrow character C string literal to be used as an argument, even when
the underlying character type of the expression being matched may be something more exotic such as a 
Unicode character type.\n
该函数的两个模板式重载，可以使用与底层序列或正则表达式所用的字符类型不同的字符串或字符类型：
此时所用的字符将被拓宽为原正则表达式的底层字符类型。如果所传入的参数是比底层序列更宽的字符类型，则会产生一个编译错误。
这些重载允许使用一个普通的窄字符C字符串作为参数，即使所匹配的表达式的底层字符类型是象 Unicode 字符类型这样的宽字符。


[#boost_regex.match_results.subscript]

	const_reference operator[](int n) const;
	const_reference operator[](const char_type* n) const;
	template <class Traits, class A>
	const_reference operator[](const std::basic_string<char_type, Traits, A>& n) const;
	template <class charT>
	const_reference operator[](const charT* n) const;
	template <class charT, class Traits, class A>
	const_reference operator[](const std::basic_string<charT, Traits, A>& n) const;

[*Requires]: that the match_results object has been initialized as a result of a 
successful call to [regex_search] or [regex_match] or was returned from a [regex_iterator], and 
that the underlying iterators have not been subsequently invalidated.  Will raise a 
`std::logic_error` if the match_results object was not initialized.\n
[*要求]: match_results 对象已被初始化为对 [regex_search] 或 [regex_match] 的一次成功调用的结果，或是从一个 
[regex_iterator] 返回，且底层的迭代器尚未失效。如果 match_results 对象未初始化，将抛出一个 `std::logic_error`。

[*Effects]: Returns a reference to the [sub_match] object representing the character 
sequence that matched marked sub-expression /n/. If `n == 0` then returns a 
reference to a [sub_match] object representing the character sequence that 
matched the whole regular expression.  If /n/ is out of range, or if /n/ is an 
unmatched sub-expression, then returns a [sub_match] object whose matched 
member is false.\n
[*效果]: 返回表示标记子表达式 /n/ 匹配的字符序列的 [sub_match] 的对象的引用。 
如果 `n == 0`，则返回表示匹配整个正则表达式的字符序列的 [sub_match] 的对象的引用。 
如果 /n/ 越界，或者 /n/ 是一个未匹配的子表达式，则返回一个 [sub_match] 对象，其 `matched` 成员是 `false`。

The overloads that accept a string, return a reference to the [sub_match] 
object representing the character sequence that matched the named sub-expression /n/.
In the event that there is no such named sub-expression then returns a [sub_match] object whose matched 
member is false.  \n
那些接受字符串的重载，将返回一个指向表示匹配了命名子表达式 /n/ 的字符序列的 [sub_match] 对象的引用。
如果没有这样名字的命名子表达式，则返回一个 `matched` 成员为 `false` 的 [sub_match] 对象。

The template overloads of this function, allow the string and\/or character type
to be different from the character type of the underlying sequence and\/or regular expression: 
in this case the characters will be widened to the underlying character type of the original regular expression.
A compiler error will occur if the argument passes a wider character type than the underlying sequence.
These overloads allow a normal narrow character C string literal to be used as an argument, even when
the underlying character type of the expression being matched may be something more exotic such as a 
Unicode character type.\n
该函数的两个模板式重载，可以使用与底层序列或正则表达式所用的字符类型不同的字符串或字符类型：
此时所用的字符将被拓宽为原正则表达式的底层字符类型。如果所传入的参数是比底层序列更宽的字符类型，则会产生一个编译错误。
这些重载允许使用一个普通的窄字符C字符串作为参数，即使所匹配的表达式的底层字符类型是象 Unicode 字符类型这样的宽字符。


[#boost_regex.match_results.prefix]

   const_reference prefix()const;

[*Requires]: that the match_results object has been initialized as a result of a 
successful call to [regex_search] or [regex_match] or was returned from a [regex_iterator], and 
that the underlying iterators have not been subsequently invalidated.  Will raise a 
`std::logic_error` if the match_results object was not initialized.\n
[*要求]: match_results 对象已被初始化为对 [regex_search] 或 [regex_match] 的一次成功调用的结果，或是从一个 
[regex_iterator] 返回，且底层的迭代器尚未失效。如果 match_results 对象未初始化，将抛出一个 `std::logic_error`。

[*Effects]: Returns a reference to the [sub_match] object representing the 
character sequence from the start of the string being matched or searched, to the 
start of the match found.\n
[*效果]: 返回一个 [sub_match] 对象的引用，这个对象表示从要进行匹配或搜索的字符串的开始，到匹配的开始之间的字符序列。


[#boost_regex.match_results.suffix]

   const_reference suffix()const;

[*Requires]: that the match_results object has been initialized as a result of a 
successful call to [regex_search] or [regex_match] or was returned from a [regex_iterator], and 
that the underlying iterators have not been subsequently invalidated.  Will raise a 
`std::logic_error` if the match_results object was not initialized.\n
[*要求]: match_results 对象已被初始化为对 [regex_search] 或 [regex_match] 的一次成功调用的结果，或是从一个 
[regex_iterator] 返回，且底层的迭代器尚未失效。如果 match_results 对象未初始化，将抛出一个 `std::logic_error`。

[*Effects]: Returns a reference to the [sub_match] object representing the 
character sequence from the end of the match found to the end of the 
string being matched or searched.\n
[*效果]: 返回一个 [sub_match] 对象的引用，这个对象表示从匹配的结束，到用于匹配或搜索的字符串的结束之间的字符序列。


[#boost_regex.match_results.begin]

   const_iterator begin()const;

[*Effects]: Returns a starting iterator that enumerates over all the marked 
sub-expression matches stored in *this.\n
[*效果]: 返回用于遍历 `*this` 存储的所有标记子表达式匹配的起始迭代器。


[#boost_regex.match_results.end]

   const_iterator end()const;

[*Effects]: Returns a terminating iterator that enumerates over all the 
marked sub-expression matches stored in *this.\n
[*效果]: 返回用于遍历 `*this` 存储的所有标记子表达式匹配的结束迭代器。

[#boost_regex.match_results_format]
[#boost_regex.match_results.format]

   template <class OutputIterator, class Formatter>
   OutputIterator format(OutputIterator out,
                         Formatter fmt,
                         match_flag_type flags = format_default);

[*Requires]: The type `OutputIterator` conforms to the Output Iterator requirements 
(C++ std 24.1.2).\n
[*要求]: 类型 `OutputIterator` 符合输出迭代器的要求(C++ std 24.1.2).

The type `Formatter` must be either a pointer to a null-terminated string
of type `char_type[]`, or be a container of `char_type`'s (for example
`std::basic_string<char_type>`) or be a unary, binary or ternary functor
that computes the replacement string from a function call: either 
`fmt(*this)` which must return a container of `char_type`'s to be used as the
replacement text, or either `fmt(*this, out)` or `fmt(*this, out, flags)`, both of
which write the replacement text to `*out`, and then return the new
OutputIterator position.  Note that if the formatter is a functor, then it is
['passed by value]: users that want to pass function objects with internal state
might want to use [@../../../../doc/html/ref.html Boost.Ref] to wrap the object so 
that it's passed by reference.\n
类型 `Formatter` 必须是一个指向类型为 `char_type[]` 的null结尾字符串的指针，
或是一个 `char_type` 的容器(如`std::basic_string<char_type>`)，或是一个单参、双参或三参的仿函数，
用一个函数调用来计算替换字符串：或是 `fmt(*this)` 必须返回一个被用作替换文本的 `char_type` 容器，
或是 `fmt(*this, out)` 或 `fmt(*this, out, flags)`，它们都要将替换文本写出至 `*out`，
然后返回新的 `OutputIterator` 位置。注意，如果格式化器是一个函数对象，则它是 ['按值方式传递] 的：
用户如果想传递带有内部状态的函数对象，则要使用 [@../../../../doc/html/ref.html Boost.Ref] 
来包装该函数对象，以使得它按引用方式来传递。

[*Requires]: that the match_results object has been initialized as a result of a 
successful call to [regex_search] or [regex_match] or was returned from a [regex_iterator], and 
that the underlying iterators have not been subsequently invalidated.  Will raise a 
`std::logic_error` if the match_results object was not initialized.\n
[*要求]: match_results 对象已被初始化为对 [regex_search] 或 [regex_match] 的一次成功调用的结果，或是从一个 
[regex_iterator] 返回，且底层的迭代器尚未失效。如果 match_results 对象未初始化，将抛出一个 `std::logic_error`。

[*Effects]: If `fmt` is either a null-terminated string, or a 
container of `char_type`'s, then copies the character sequence `[fmt.begin(), fmt.end())` to 
`OutputIterator` /out/. For each format specifier or escape sequence in 
/fmt/, replace that sequence with either the character(s) it represents, 
or the sequence of characters within `*this` to which it refers. 
The bitmasks specified in flags determines what format specifiers or 
escape sequences are recognized, by default this is the format used by 
ECMA-262, ECMAScript Language Specification, Chapter 15 part 
5.4.11 String.prototype.replace.\n
[*效果]: 如果 `fmt` 是一个null结尾的字符串，或是一个 `char_type` 的容器，则将字符序列 `[fmt.begin(), fmt.end())` 
拷贝到 `OutputIterator` /out/。对于 /fmt/ 中每个格式指示符或转义序列，用它表示的字符(串)，或它指向的 `*this` 中的字符序列来替换它。
`flags` 中指明的位掩码决定了哪些格式说明和转义序列被识别，默认是被 ECMA-262, ECMAScript Language Specification, Chapter 15 part 
5.4.11 String.prototype.replace 中使用的格式。

If `fmt` is a function object, then depending on the number of arguments
the function object accepts, it will either:\n
如果 `fmt` 是一个函数对象，则取决于该函数对象所接受的参数数量，它或者：

* Call `fmt(*this)` and copy the string returned to `OutputIterator`
/out/.\n
  调用 `fmt(*this)` 并将返回的字符串复制至 `OutputIterator` /out/。
* Call `fmt(*this, out)`.\n
  调用 `fmt(*this, out)`.
* Call `fmt(*this, out, flags)`.\n
  调用 `fmt(*this, out, flags)`.

In all cases the new position of the `OutputIterator` is returned.\n
在所有情况下，都会返回 `OutputIterator` 的新位置。

See the [link boost_regex.format format syntax guide for more information].\n
更多信息请参看 [link boost_regex.format 格式化语法指南]。

[*Returns]: out.\n
[*返回]: out.


[#boost_regex.match_results.format2]

   template <class Formatter>
   string_type format(Formatter fmt,
                      match_flag_type flags = format_default);

[*Requires]
The type `Formatter` must be either a pointer to a null-terminated string
of type `char_type[]`, or be a container of `char_type`'s (for example
`std::basic_string<char_type>`) or be a unary, binary or ternary functor
that computes the replacement string from a function call: either 
`fmt(*this)` which must return a container of `char_type`'s to be used as the
replacement text, or either `fmt(*this, out)` or `fmt(*this, out, flags)`, both of
which write the replacement text to `*out`, and then return the new
OutputIterator position.\n
[*要求]: 类型 `Formatter` 必须是一个指向类型为 `char_type[]` 的null结尾字符串的指针，
或是一个 `char_type` 的容器(如`std::basic_string<char_type>`)，或是一个单参、双参或三参的仿函数，
用一个函数调用来计算替换字符串：或是 `fmt(*this)` 必须返回一个被用作替换文本的 `char_type` 容器，
或是 `fmt(*this, out)` 或 `fmt(*this, out, flags)`，它们都要将替换文本写出至 `*out`，
然后返回新的 `OutputIterator` 位置。

[*Requires]: that the match_results object has been initialized as a result of a 
successful call to [regex_search] or [regex_match] or was returned from a [regex_iterator], and 
that the underlying iterators have not been subsequently invalidated.  Will raise a 
`std::logic_error` if the match_results object was not initialized.\n
[*要求]: match_results 对象已被初始化为对 [regex_search] 或 [regex_match] 的一次成功调用的结果，或是从一个 
[regex_iterator] 返回，且底层的迭代器尚未失效。如果 match_results 对象未初始化，将抛出一个 `std::logic_error`。

[*Effects]: 
If `fmt` is either a null-terminated string, or a 
container of `char_type`'s, then copies the string /fmt/: For each format specifier or 
escape sequence in /fmt/, replace that sequence with either the 
character(s) it represents, or the sequence of characters within `*this` to 
which it refers. The bitmasks specified in flags determines what format 
specifiers or escape sequences are recognized, by default this is the format 
used by ECMA-262, ECMAScript Language Specification, Chapter 15 part 
5.4.11 String.prototype.replace.\n
[*效果]: 如果 `fmt` 是一个null结尾的字符串，或是一个 `char_type` 的容器，则复制字符串 /fmt/: 
对于 /fmt/ 中每个格式指示符或转义序列，用它表示的字符(串)，或它指向的 `*this` 中的字符序列来替换它。
`flags` 中指明的位掩码决定了哪些格式说明和转义序列被识别，默认是被 ECMA-262, ECMAScript Language Specification, Chapter 15 part 
5.4.11 String.prototype.replace 中使用的格式。

If `fmt` is a function object, then depending on the number of arguments
the function object accepts, it will either:\n
如果 `fmt` 是一个函数对象，则取决于该函数对象所接受的参数数量，它或者：

* Call `fmt(*this)` and return the result.\n
  调用 `fmt(*this)` 并返回结果。
* Call `fmt(*this, unspecified-output-iterator)`, where `unspecified-output-iterator`
is an unspecified OutputIterator type used to copy the output to the string result.\n
  调用 `fmt(*this, unspecified-output-iterator)`, 其中 `unspecified-output-iterator` 
  是一个用于将输出复制至字符串结果的不确定的 OutputIterator 类型。
* Call `fmt(*this, unspecified-output-iterator, flags)`, where `unspecified-output-iterator`
is an unspecified OutputIterator type used to copy the output to the string result.\n
  调用 `fmt(*this, unspecified-output-iterator, flags)`, 其中 `unspecified-output-iterator` 
  是一个用于将输出复制至字符串结果的不确定的 OutputIterator 类型。

See the [link boost_regex.format format syntax guide for more information].\n
更多信息请参看 [link boost_regex.format 格式化语法指南]。

[#boost_regex.match_results.get_allocator]

   allocator_type get_allocator()const;

[*Effects]: Returns a copy of the Allocator that was passed to the object's constructor.\n
[*效果]: 返回传递给该对象的构造函数的 Allocator 的一个拷贝。

[#boost_regex.match_results.swap]

   void swap(match_results& that);

[*Effects]: Swaps the contents of the two sequences.\n
[*效果]: 交换两个序列的内容。

[*Postcondition]: *this contains the sequence of matched sub-expressions that were in that, that contains the sequence of matched sub-expressions that were in *this.\n
[*后验条件]: `*this` 包含 `that` 中的已匹配子表达式序列，`that` 则包含 `*this` 中的已匹配子表达式序列。

[*Complexity]: constant time.
[*复杂度]: 常量时间。

[#boost_regex.match_results.capture_type]

   typedef typename value_type::capture_sequence_type capture_sequence_type;

Defines an implementation-specific type that satisfies the requirements of 
a standard library Sequence (21.1.1 including the optional Table 68 operations), 
whose value_type is a `sub_match<BidirectionalIterator>`. This type happens to be 
`std::vector<sub_match<BidirectionalIterator> >`, but you shouldn't actually 
rely on that.\n
定义一个实现决定的满足标准库序列(Sequence)需求(21.1.1 包括可选表的68个操作)的类型，其中 `value_type` 是 
`sub_match<BidirectionalIterator>`。这个类型可能是 `std::vector<sub_match<BidirectionalIterator> >`，但你不能依赖于这个。

[#boost_regex.match_results.captures]

   const capture_sequence_type& captures(std::size_t i)const; 

[*Requires]: that the match_results object has been initialized as a result of a 
successful call to [regex_search] or [regex_match] or was returned from a [regex_iterator], and 
that the underlying iterators have not been subsequently invalidated.  Will raise a 
`std::logic_error` if the match_results object was not initialized.\n
[*要求]: match_results 对象已被初始化为对 [regex_search] 或 [regex_match] 的一次成功调用的结果，或是从一个 
[regex_iterator] 返回，且底层的迭代器尚未失效。如果 match_results 对象未初始化，将抛出一个 `std::logic_error`。

[*Effects]: returns a sequence containing all the captures obtained for sub-expression i.\n
[*效果]: 返回包含子表达式i的所有捕捉的序列。

[*Returns]: `(*this)[i].captures();`\n
[*返回]: `(*this)[i].captures();`

[*Preconditions]: the library must be built and used with BOOST_REGEX_MATCH_EXTRA defined, 
and you must pass the flag match_extra to the regex matching functions 
([regex_match], [regex_search], [regex_iterator] or [regex_token_iterator]) in 
order for this member function to be defined and return useful information.\n
[*前置条件]：库必须用 BOOST_REGEX_MATCH_EXTRA 编译生成，同时必须将标签 match_extra 传入正则表达式匹配函数中([regex_match], 
[regex_search], [regex_iterator] 或 [regex_token_iterator])，这样这个成员函数才被定义并且返回有意义的信息。

[*Rationale]: Enabling this feature has several consequences:\n
[*原理]：打开这个特性会有一些后果：

* sub_match occupies more memory resulting in complex expressions running out of memory or stack space more quickly during matching.\n
  sub_match 占用更多内存，导致在匹配复杂表达式时更容易出现内存或栈空间不足。
* The matching algorithms are less efficient at handling some features (independent sub-expressions for example), even when match_extra is not used.\n
  匹配算法在处理某些特性(例如独立子表达式)时会比较低效，即使 match_extra 标签没被设置。
* The matching algorithms are much less efficient (i.e. slower), when match_extra is used.  Mostly this is down to the extra memory allocations that have to take place.\n
  使用 match_extra 标签时，匹配算法会更加低效(慢)。这主要是由于更多的内存申请发生。

[#boost_regex.match_results.op_eq]

   template <class BidirectionalIterator, class Allocator>
   bool operator == (const match_results<BidirectionalIterator, Allocator>& m1,
                     const match_results<BidirectionalIterator, Allocator>& m2);

[*Effects]: Compares the two sequences for equality.\n
[*效果]: 比较两个序列的相等性。

[#boost_regex.match_results.op_ne]

   template <class BidirectionalIterator, class Allocator>
   bool operator != (const match_results<BidirectionalIterator, Allocator>& m1,
                     const match_results<BidirectionalIterator, Allocator>& m2);

[*Effects]: Compares the two sequences for inequality.\n
[*效果]: 比较两个序列的不等性。

[#boost_regex.match_results.op_stream]

   template <class charT, class traits, class BidirectionalIterator, class Allocator>
   basic_ostream<charT, traits>&
      operator << (basic_ostream<charT, traits>& os,
                  const match_results<BidirectionalIterator, Allocator>& m);

[*Effects]: Writes the contents of /m/ to the stream /os/ as if by calling 
`os << m.str()`; Returns /os/.\n
[*效果]: 将 /m/ 的内容写出至流 /os/，正如调用 `os << m.str()`; 返回 /os/.

[#boost_regex.match_results.op_swap]

   template <class BidirectionalIterator, class Allocator>
   void swap(match_results<BidirectionalIterator, Allocator>& m1,
            match_results<BidirectionalIterator, Allocator>& m2);

[*Effects]: Swaps the contents of the two sequences.\n
[*效果]: 交换两个序列的内容。

[endsect]

