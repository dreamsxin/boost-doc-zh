
[/ Copyright 2005-2008 Daniel James.
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt) ]

[section:portability Portability 可移植性]

[def __boost_hash__ [classref boost::hash]]

__boost_hash__ is written to be as portable as possible, but unfortunately, several
older compilers don't support argument dependent lookup (ADL) - the mechanism
used for customisation.  On those compilers custom overloads for `hash_value`
needs to be declared in the boost namespace.\n
__boost_hash__ 尽可能按照可移植的要求写成，但是，不幸的是，若干早期版本的编译器不支持实参依赖查找(ADL)
—— 用于定制化的机制。在这些编译器上，定制化重载 `hash_value` 需要声明在 boost 名字空间中。

On a strictly standards compliant compiler, an overload defined in the
boost namespace won't be found when __boost_hash__ is instantiated,
so for these compilers the overload should only be declared in the same
namespace as the class.\n
在一个严格符合标准的编译器上，当 __boost_hash__ 被实例化时，定义在 boost 名字空间中的重载不会被找到，
所以在这些编译器上重载和类应该声明在同一个名字空间中。

Let's say we have a simple custom type:\n
假设我们有一个简单的定制类型：

    namespace foo
    {
        template <class T>
        class custom_type
        {
            T value;
        public:
            custom_type(T x) : value(x) {}

            friend std::size_t hash_value(custom_type x)
            {
                __boost_hash__<int> hasher;
                return hasher(x.value);
            }
        };
    }

On a compliant compiler, when `hash_value` is called for this type,
it will look at the namespace inside the type and find `hash_value`
but on a compiler which doesn't support ADL `hash_value` won't be found.
To make things worse, some compilers which do support ADL won't find
a friend class defined inside the class.\n
在一个符合标准的编译器上，当这个类型调用 `hash_value` 时，它会查找这个类型内部的名字空间并找到 
`hash_value`，但是在不支持 ADL 的编译器上则找不到 `hash_value`。让事情变得更糟糕的是，
有些支持 ADL 的编译器不会发现定义在类内部的友元类。

So first move the member function out of the class:\n
所以，首先要将这个成员函数移出这个类：

    namespace foo
    {
        template <class T>
        class custom_type
        {
            T value;
        public:
            custom_type(T x) : value(x) {}

            std::size_t hash(custom_type x)
            {
                __boost_hash__<T> hasher;
                return hasher(value);
            }
        };

        template <class T>
        inline std::size_t hash_value(custom_type<T> x)
        {
            return x.hash();
        }
    }

Unfortunately, I couldn't declare hash_value as a friend, as some compilers
don't support template friends, so instead I declared a member function to
calculate the hash, and called it from hash_value.\n
不幸的是，因为有些编译器不支持模板友元，我不能将 hash_value 声明为友元，
所以我声明了一个成员函数来计算散列，再从 hash_value 中调用它。

For compilers which don't support ADL, hash_value needs to be defined in the
boost namespace:\n
对于不支持 ADL 的编译器，hash_value 要定义在 boost 名字空间中：

    #ifdef BOOST_NO_ARGUMENT_DEPENDENT_LOOKUP
    namespace boost
    #else
    namespace foo
    #endif
    {
        template <class T>
        std::size_t hash_value(foo::custom_type<T> x)
        {
            return x.hash();
        }
    }

Full code for this example is at
[@boost:/libs/functional/hash/examples/portable.cpp /libs/functional/hash/examples/portable.cpp].\n
这个例子的完整代码在 [@boost:/libs/functional/hash/examples/portable.cpp /libs/functional/hash/examples/portable.cpp].

[h2 Other Issues 其它问题]

On Visual C++ versions 6.5 and 7.0, `hash_value` isn't overloaded for built in
arrays. __boost_hash__, [funcref boost::hash_combine] and [funcref boost::hash_range] all use a workaround to
support built in arrays so this shouldn't be a problem in most cases.\n
在 Visual C++ 版本 6.5 和 7.0 中，`hash_value` 没有为内建数组重载。__boost_hash__, [funcref boost::hash_combine] 
和 [funcref boost::hash_range] 都使用一个变通的方法来支持内建数组，所以在大多数情况下，这不再是个问题。

On Visual C++ versions 6.5 and 7.0, function pointers aren't currently supported.\n
在 Visual C++ 版本 6.5 和 7.0 中，函数指针没有被正确地支持。

When using GCC on Solaris, `boost::hash_value(long double)` treats
`long double`s as `double`s - so the hash function doesn't take into account the
full range of values.\n
在 Solaris 上使用 GCC 时，`boost::hash_value(long double)` 将 `long double`s 当做 `double`s 处理
—— 所以散列函数不会考虑整个值域空间。

[endsect]
