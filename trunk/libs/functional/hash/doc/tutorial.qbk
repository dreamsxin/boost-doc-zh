
[/ Copyright 2005-2008 Daniel James.
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt) ]

[def __multi-index-short__ [@boost:/libs/multi_index/doc/index.html
    Boost.MultiIndex]]

[section:tutorial Tutorial 指南]

When using a hash index with __multi-index-short__, you don't need to do
anything to use [classref boost::hash] as it uses it by default.
To find out how to use a user-defined type, read the
[link hash.custom section on extending boost::hash for a custom data type].\n
当一个散列索引和 __multi-index-short__ 一起使用时，为了使用 [classref boost::hash]，
你不必做什么事，它总是被缺省使用。如果想知道使用一个用户定义类型，请阅读
[link hash.custom 为定制数据类型扩展 boost::hash]。

If your standard library supplies its own implementation of the unordered
associative containers and you wish to use
[classref boost::hash], just use an extra template parameter:\n
如果你的标准库使用它自己实现的无序关联式容器，而你又想使用 [classref boost::hash]，
只需要使用一个额外的模板参数：

    std::unordered_multiset<int, ``[classref boost::hash]``<int> >
            set_of_ints;

    std::unordered_set<std::pair<int, int>, ``[classref boost::hash]``<std::pair<int, int> >
            set_of_pairs;

    std::unordered_map<int, std::string, ``[classref boost::hash]``<int> > map_int_to_string;

To use [classref boost::hash] directly, create an instance and call it as a function:\n
为了直接是使用 [classref boost::hash]，创建一个实例并像一个函数一样调用它：

    #include <``[headerref boost/functional/hash.hpp]``>

    int main()
    {
        ``[classref boost::hash]``<std::string> string_hash;

        std::size_t h = string_hash("Hash me");
    }

For an example of generic use, here is a function to generate a vector
containing the hashes of the elements of a container:\n
一个普通的使用示例，这是一个函数，它生成一个 vector，包含一个容器中的元素的散列值：

    template <class Container>
    std::vector<std::size_t> get_hashes(Container const& x)
    {
        std::vector<std::size_t> hashes;
        std::transform(x.begin(), x.end(), std::insert_iterator(hashes),
            ``[classref boost::hash]``<typename Container::value_type>());

        return hashes;
    }

[endsect]

[section:custom Extending boost::hash for a custom data type 为定制数据类型扩展 boost::hash]

[classref boost::hash] is implemented by calling the function
[funcref boost::hash_value hash_value].
The namespace isn't specified so that it can detect overloads via argument
dependant lookup. So if there is a free function `hash_value` in the same
namespace as a custom type, it will get called.\n
[classref boost::hash] 通过调用函数 [funcref boost::hash_value hash_value] 生效。
不指定名字空间，它就能通过参数依赖查找探测重载。所以，如果有一个自由函数 `hash_value`
和一个定制类型在同一个名字空间中，它就可以被调用。

If you have a structure `library::book`, where each `book` is uniquely
defined by it's member `id`:\n
如果你有一个结构 `library::book`，每一个 `book` 通过它的成员 `id` 来唯一确定：

    namespace library
    {
        struct book
        {
            int id;
            std::string author;
            std::string title;

            // ....
        };

        bool operator==(book const& a, book const& b)
        {
            return a.id == b.id;
        }
    }

Then all you would need to do is write the function `library::hash_value`:\n
那么你需要做的全部就是编写函数 `library::hash_value`：

    namespace library
    {
        std::size_t hash_value(book const& b)
        {
            ``[classref boost::hash]``<int> hasher;
            return hasher(b.id);
        }
    }

And you can now use [classref boost::hash] with book:\n
现在你就可以使用 book 的 [classref boost::hash] 了：

    library::book knife(3458, "Zane Grey", "The Hash Knife Outfit");
    library::book dandelion(1354, "Paul J. Shanley",
        "Hash & Dandelion Greens");

    ``[classref boost::hash]``<library::book> book_hasher;
    std::size_t knife_hash_value = book_hasher(knife);

    // If std::unordered_set is available:
    // 如果 std::unordered_set 可用：
    std::unordered_set<library::book, ``[classref boost::hash]``<library::book> > books;
    books.insert(knife);
    books.insert(library::book(2443, "Lindgren, Torgny", "Hash"));
    books.insert(library::book(1953, "Snyder, Bernadette M.",
        "Heavenly Hash: A Tasty Mix of a Mother's Meditations"));

    assert(books.find(knife) != books.end());
    assert(books.find(dandelion) == books.end());

The full example can be found in:
[@boost:/libs/functional/hash/examples/books.cpp /libs/functional/hash/examples/books.hpp]
and
[@boost:/libs/functional/hash/examples/books.cpp /libs/functional/hash/examples/books.cpp].\n
完整的例子可以在 [@boost:/libs/functional/hash/examples/books.cpp /libs/functional/hash/examples/books.hpp] 
和 [@boost:/libs/functional/hash/examples/books.cpp /libs/functional/hash/examples/books.cpp] 找到。

[tip
When writing a hash function, first look at how the equality function works.
Objects that are equal must generate the same hash value.
When objects are not equal they should generate different hash values.
In this object equality was based just on the id so the hash function
only hashes the id. If it was based on the object's name and author
then the hash function should take them into account
(how to do this is discussed in the next section).\n
在写散列函数时，首先看一下判断相等的函数如何工作。相等的对象必须生成相同的散列值。
如果对象不相等，它们就应该生成不同的散列值。在这个对象里相等仅仅基于 id，
所以散列函数仅仅散列了 id。如果它基于对象名和作者，那么散列函数就应该考虑它们
（如何做到这一点在下一部分讨论）。]

[endsect]

[section:combine Combining hash values 结合散列值]

Say you have a point class, representing a two dimensional location:\n
假设你有一个 point 类，代表一个二维空间上的位置：

    class point
    {
        int x;
        int y;
    public:
        point() : x(0), y(0) {}
        point(int x, int y) : x(x), y(y) {}

        bool operator==(point const& other) const
        {
            return x == other.x && y == other.y;
        }
    };

and you wish to use it as the key for an `unordered_map`. You need to
customise the hash for this structure. To do this we need to combine
the hash values for `x` and `y`. The function
[funcref boost::hash_combine] is supplied for this purpose:\n
而你要用它作为一个 `unordered_map` 中的键。你就要为这个结构定制散列。
为了做到这一点，我们要结合 `x` 和 `y` 的散列值。函数 [funcref boost::hash_combine] 
就用于这个目的：

    class point
    {
        ...

        friend std::size_t hash_value(point const& p)
        {
            std::size_t seed = 0;
            ``[funcref boost::hash_combine]``(seed, p.x);
            ``[funcref boost::hash_combine]``(seed, p.y);

            return seed;
        }

        ...
    };

Calls to hash_combine incrementally build the hash from the different members
of point, it can be repeatedly called for any number of elements. It calls
[funcref boost::hash_value hash_value] on the supplied element, and combines it with the seed.\n
对 hash_combine 的调用从 point 的不同成员逐步建造出散列，它可以对任何数量的部件重复调用。
它在提供的部件上调用 [funcref boost::hash_value hash_value]，并将它和 seed 结合在一起。

Full code for this example is at
[@boost:/libs/functional/hash/examples/point.cpp /libs/functional/hash/examples/point.cpp].\n
这个例子的完整代码在 [@boost:/libs/functional/hash/examples/point.cpp /libs/functional/hash/examples/point.cpp]。

[note
When using [funcref boost::hash_combine] the order of the
calls matters.\n
使用 [funcref boost::hash_combine] 时调用顺序的问题。
'''
<programlisting>
    std::size_t seed = 0;
    boost::hash_combine(seed, 1);
    boost::hash_combine(seed, 2);
</programlisting>
results in a different seed to:\n
与以下代码将得到不同的 seed：
<programlisting>
    std::size_t seed = 0;
    boost::hash_combine(seed, 2);
    boost::hash_combine(seed, 1);
</programlisting>
'''
If you are calculating a hash value for data where the order of the data
doesn't matter in comparisons (e.g. a set) you will have to ensure that the
data is always supplied in the same order.\n
如果你要为顺序没什么关系的数据（比如，一个 set）计算一个散列值，
你就必须确保这些数据总是以同样的顺序被使用。
]

To calculate the hash of an iterator range you can use [funcref boost::hash_range]:\n
为了计算一个迭代器 range 的散列，你可以用 [funcref boost::hash_range]：

    std::vector<std::string> some_strings;
    std::size_t hash = ``[funcref boost::hash_range]``(some_strings.begin(), some_strings.end());

[endsect]

